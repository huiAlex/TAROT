<Class>
    <Id>469</Id>
    <Package>org.apache.derby.client.am</Package>
    <ClassName>BlobLocatorInputStream</ClassName>
    <SuperClass>InputStream</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BlobLocatorInputStream  /** 
 * An &lt;code&gt;InputStream&lt;/code&gt; that will use an locator to fetch the Blob value from the server.   &lt;p&gt; Closing a &lt;code&gt;ByteArrayInputStream&lt;/code&gt; has no effect. The methods in this class can be called after the stream has been closed without generating an &lt;code&gt;IOException&lt;/code&gt;. &lt;p&gt; This &lt;code&gt;InputStream&lt;/code&gt; implementation is pretty basic.  No buffering of data is done.  Hence, for efficiency #read(byte[]) should be used instead of #read().  Marks are not supported, but it should be pretty simple to extend the implementation to support this.  A more efficient skip implementation should also be straight-forward.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>connection</FieldName>
            <FieldType>ClientConnection</FieldType>
        </Field>
        <Field>
            <FieldName>blob</FieldName>
            <FieldType>ClientBlob</FieldType>
        </Field>
        <Field>
            <FieldName>currentPos</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>maxPos</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>BlobLocatorInputStream</MethodName>
            <MethodComment>/** 
 * Create an &lt;code&gt;InputStream&lt;/code&gt; for reading the &lt;code&gt;Blob&lt;/code&gt; value represented by the given locator based &lt;code&gt;Blob&lt;/code&gt; object.
 * @param connection connection to be used to read the&lt;code&gt;Blob&lt;/code&gt; value from the server
 * @param blob &lt;code&gt;Blob&lt;/code&gt; object that contains locator forthe &lt;code&gt;Blob&lt;/code&gt; value on the server.
 * @throws SqlException if an error occurs when obtaining thelength of the &lt;code&gt;Blob&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>connection</ParamName>
                    <ParamType>ClientConnection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>blob</ParamName>
                    <ParamType>ClientBlob</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BlobLocatorInputStream</MethodName>
            <MethodComment>/** 
 * Create an &lt;code&gt;InputStream&lt;/code&gt; for reading the &lt;code&gt;Blob&lt;/code&gt; value represented by the given locator based &lt;code&gt;Blob&lt;/code&gt; object.
 * @param connection connection to be used to read the&lt;code&gt;Blob&lt;/code&gt; value from the server
 * @param blob &lt;code&gt;Blob&lt;/code&gt; object that contains locator forthe &lt;code&gt;Blob&lt;/code&gt; value on the server.
 * @param position the position in the &lt;code&gt;Blob&lt;/code&gt; of the firstbyte to read.  
 * @param length the maximum number of bytes to read fromthe &lt;code&gt;Blob&lt;/code&gt;.
 * @throws SqlException if an error occurs when obtaining thelength of the &lt;code&gt;Blob&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>connection</ParamName>
                    <ParamType>ClientConnection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>blob</ParamName>
                    <ParamType>ClientBlob</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>position</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SqlException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * @see java.io.InputStream#read() This method fetches one byte at a time from the server. For more  efficient retrieval, use #read(byte[]).
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>byte[] [bytes=readBytes(1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * @see java.io.InputStream#read(byte[],int,int)
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>off</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [bytes=readBytes(len)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readBytes</MethodName>
            <MethodComment>/** 
 * Read the next &lt;code&gt;len&lt;/code&gt; bytes of the &lt;code&gt;Blob&lt;/code&gt; value from the server.
 * @param len number of bytes to read
 * @throws java.io.IOException Wrapped SqlException if readingfrom server fails.
 * @return &lt;code&gt;byte[]&lt;/code&gt; containing the read bytes
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>