<Class>
    <Id>1977</Id>
    <Package>org.apache.derbyTesting.functionTests.util</Package>
    <ClassName>UniqueRandomSequence</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>UniqueRandomSequence  /** 
 * Utility class that generates a sequence of unique numbers in random order. Example of how to use the generator to print all the numbers from 0 to 9 in random order: &lt;pre&gt; UniqueRandomSequence sequence = new UniqueRandomSequence(10); while (sequence.hasMore()) { System.out.println(sequence.nextValue()); } &lt;/pre&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>numbers</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
        <Field>
            <FieldName>random</FieldName>
            <FieldType>Random</FieldType>
        </Field>
        <Field>
            <FieldName>numbersLeft</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>UniqueRandomSequence</MethodName>
            <MethodComment>/** 
 * Generate a random sequence with all the numbers from 0 up to {@code length-1}.
 * @param length the length of the sequence
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>UniqueRandomSequence</MethodName>
            <MethodComment>/** 
 * Generate a random sequence in the specified range.
 * @param start the smallest number in the sequence
 * @param length the size of the sequence
 * @param step the difference between adjacent numbers if the sequence issorted
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>start</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>step</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasMore</MethodName>
            <MethodComment>/** 
 * Check whether there are more numbers in the sequence.
 * @return {@code true} if there are more numbers in the sequence,{@code false} otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextValue</MethodName>
            <MethodComment>/** 
 * Fetch the next number from the sequence.
 * @return a unique value in this generator's range
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [pos=random.nextInt(numbersLeft)]</InnerVar>
                <InnerVar>int [value=numbers[pos]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>