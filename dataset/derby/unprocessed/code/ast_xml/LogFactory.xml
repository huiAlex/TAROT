<Class>
    <Id>0</Id>
    <Package>org.apache.derby.iapi.store.raw.log</Package>
    <ClassName>LogFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Corruptable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>RUNTIME_ATTRIBUTES</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>RT_READONLY</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>LOG_DIRECTORY_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MODULE</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getLogger</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Logger</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createDataWarningFile</MethodName>
            <MethodComment>/** 
 * Create readme file in log directory warning users against touching any files in the directory
 * @throws StandardException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setRawStoreFactory</MethodName>
            <MethodComment>/** 
 * Make log factory aware of which raw store factory it belongs to
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rsf</ParamName>
                    <ParamType>RawStoreFactory</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>recover</MethodName>
            <MethodComment>/** 
 * Recover the database to a consistent state using the log.  Each implementation of the log factory has its own recovery algorithm, please see the implementation for a description of the specific recovery algorithm it uses.
 * @param dataFactory - the data factory
 * @param transactionFactory - the transaction factory
 * @exception StandardException - encounter exception while recovering.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dataFactory</ParamName>
                    <ParamType>DataFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transactionFactory</ParamName>
                    <ParamType>TransactionFactory</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkpoint</MethodName>
            <MethodComment>/** 
 * Checkpoint the rawstore. The frequency of checkpoint is determined by 2 persistent service properties, RawStore.LOG_SWITCH_INTERVAL and RawStore.CHECKPOINT_INTERVAL.   By default, LOG_SWITCH_INTERVAL is every 1M bytes of log record written.  User can change this value by setting the property to some other values during boot time.   The legal range of LOG_SWITCH_INTERVAL is from 100K to 128M. By default, CHECKPOINT_INTERVAL equals 10M, but user can set it to less if more frequent checkpoint is desired.  The legal range of CHECKPOINT_INTERVAL is from 100K to 128M.
 * @param rawStoreFactory - the raw store
 * @param dataFactory - the data factory
 * @param transactionFactory - the transaction factory
 * @param wait - if true waits for any existing checkpoint to complete and then executes and waits for another checkpoint. if false if another thead is executing a checkpoint  routine will return immediately.
 * @return true if checkpoint is successful,  Will return false if waitis false and the routine finds another thread executing a  checkpoint.
 * @exception StandardException - got exception while doing checkpoint.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawStoreFactory</ParamName>
                    <ParamType>RawStoreFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataFactory</ParamName>
                    <ParamType>DataFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transactionFactory</ParamName>
                    <ParamType>TransactionFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wait</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flush</MethodName>
            <MethodComment>/** 
 * Flush all unwritten log record up to the log instance indicated to disk.
 * @param where flush log up to here
 * @exception StandardException cannot flush log file due to sync error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>where</ParamName>
                    <ParamType>LogInstant</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openForwardsFlushedScan</MethodName>
            <MethodComment>/** 
 * Get a LogScan to scan flushed records from the log. &lt;P&gt; MT- read only
 * @param startAt - the LogInstant where we start our scan. null meansstart at the beginning of the log. This function raises an error if startAt is a LogInstant which is not in the log.
 * @return the LogScan.
 * @exception StandardException Standard Derby error policyNOTE: This will be removed after the LogSniffer Rewrite.
 */
</MethodComment>
            <ReturnType>LogScan</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>startAt</ParamName>
                    <ParamType>LogInstant</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openFlushedScan</MethodName>
            <MethodComment>/** 
 * Get a ScanHandle to scan flushed records from the log. &lt;P&gt; MT- read only
 * @param startAt - the LogInstant where we start our scan. null meansstart at the beginning of the log. This function raises an error if startAt is a LogInstant which is not in the log.
 * @param groupsIWant - log record groups the scanner wants.
 * @return the LogScan.
 * @exception StandardException Standard Derby error policy
 */
</MethodComment>
            <ReturnType>ScanHandle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>startAt</ParamName>
                    <ParamType>DatabaseInstant</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>groupsIWant</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openForwardsScan</MethodName>
            <MethodComment>/** 
 * Get a LogScan to scan the log in a forward direction. &lt;P&gt; MT- read only
 * @param startAt - the LogInstant where we start our scan. null meansstart at the beginning of the log. This function raises an error if startAt is a LogInstant which is not in the log.
 * @param stopAt - the LogInstant where we stop our scan. null meansstop at the end of the log. This function raises an error if stopAt is a LogInstant which is not in the log.
 * @return the LogScan.
 * @exception StandardException Standard Derby error policy
 */
</MethodComment>
            <ReturnType>LogScan</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>startAt</ParamName>
                    <ParamType>LogInstant</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stopAt</ParamName>
                    <ParamType>LogInstant</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFirstUnflushedInstant</MethodName>
            <MethodComment>/** 
 * Get the instant for the last record in the log.
 */
</MethodComment>
            <ReturnType>LogInstant</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFirstUnflushedInstantAsLong</MethodName>
            <MethodComment>/** 
 * Get the log instant long value of the first log record that has not  been flushed. Only works after recover() has finished, or (if in slave  replication mode) after calling initializeReplicationSlaveRole.
 * @return the log instant long value of the first log record that has not been flushed
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>freezePersistentStore</MethodName>
            <MethodComment>/** 
 * Stop making any change to the persistent store
 * @exception StandardException Standard Derby exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unfreezePersistentStore</MethodName>
            <MethodComment>/** 
 * Can start making change to the persistent store again
 * @exception StandardException Standard Derby exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>logArchived</MethodName>
            <MethodComment>/** 
 * checks whether is log archive mode is enabled or not.
 * @return true if the log is being archived.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inReplicationMasterMode</MethodName>
            <MethodComment>/** 
 * Used to determine if the replication master mode has been started, and the logging for unlogged operations needs to be enabled.
 * @return true If the master replication mode is turned on and the unlogged operations need to be logged. false If the master replication mode is turned off and the  unlogged operations need not be logged.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLogFactoryProperties</MethodName>
            <MethodComment>/** 
 * Get JBMS properties relevant to the log factory
 * @exception StandardException Standard Derby Error Policy
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>set</ParamName>
                    <ParamType>PersistentSet</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLogDirectory</MethodName>
            <MethodComment>/** 
 * Return the location of the log directory.
 * @exception StandardException Standard Derby Error Policy
 */
</MethodComment>
            <ReturnType>StorageFile</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCanonicalLogPath</MethodName>
            <MethodComment>/** 
 * Return the canonical directory of the PARENT of the log directory.  The log directory live in the "log" subdirectory of this path.  If the log is at the default location (underneath the database directory), this returns null.  Should only be called after the log factory is booted.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>enableLogArchiveMode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>disableLogArchiveMode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deleteOnlineArchivedLogFiles</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inRFR</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkpointInRFR</MethodName>
            <MethodComment>/** 
 * redoing a checkpoint  during rollforward recovery
 * @param cinstant The LogInstant of the checkpoint
 * @param redoLWM  Redo Low Water Mark in the check point record
 * @param undoLWM Undo Low Water Mark in the checkpoint
 * @param df - the data factory
 * @exception StandardException - encounter exception during checkpoint
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cinstant</ParamName>
                    <ParamType>LogInstant</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>redoLWM</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>undoLWM</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>df</ParamName>
                    <ParamType>DataFactory</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startLogBackup</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>toDir</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>endLogBackup</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>toDir</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>abortLogBackup</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setDatabaseEncrypted</MethodName>
            <MethodComment>/** 
 * Sets whether the database is encrypted, all the transaction log has to be encrypted, and flush the log if requested. &lt;p&gt; Log needs to be flushed first if the cryptographic state of the database changes (for instance re-encryption with a new key).
 * @param isEncrypted {@code true} if the database is encrypted,{@code false} if not
 * @param flushLog {@code true} if log needs to be flushed,{@code false} otherwise
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isEncrypted</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flushLog</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startNewLogFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isCheckpointInLastLogFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deleteLogFileAfterCheckpointLogFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkVersion</MethodName>
            <MethodComment>/** 
 * Check to see if a database has been upgraded to the required level in order to use a store feature.
 * @param requiredMajorVersion  required database Engine major version
 * @param requiredMinorVersion  required database Engine minor version
 * @param feature Non-null to throw an exception, null to return the state of the version match.
 * @return &lt;code&gt; true &lt;/code&gt; if the database has been upgraded to the required level, &lt;code&gt; false &lt;/code&gt; otherwise.
 * @exception StandardException if the database is not at the require version  when &lt;code&gt;feature&lt;/code&gt; feature is  not &lt;code&gt; null &lt;/code&gt;. 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>requiredMajorVersion</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>requiredMinorVersion</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>feature</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startReplicationMasterRole</MethodName>
            <MethodComment>/** 
 * Make this LogFactory pass log records to the MasterFactory every time a log record is appended to the log on disk, and notify the MasterFactory when a log disk flush has taken place. Not implemented by ReadOnly.
 * @param masterFactory The MasterFactory service responsible forcontrolling the master side replication behaviour.
 * @exception StandardException Standard Derby exception policy,thrown on replication startup error. Will only be thrown if replication is attempted started on a readonly database.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>masterFactory</ParamName>
                    <ParamType>MasterFactory</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stopReplicationMasterRole</MethodName>
            <MethodComment>/** 
 * Stop this LogFactory from passing log records to the MasterFactory and from notifying the MasterFactory when a log disk flush has taken place. Not implemented by ReadOnly.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>