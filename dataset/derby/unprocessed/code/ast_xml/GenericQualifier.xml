<Class>
    <Id>1722</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>GenericQualifier</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Qualifier</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GenericQualifier  /** 
 * This is the implementation for Qualifier.  It is used for generated scans.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>columnId</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>operator</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>orderableGetter</FieldName>
            <FieldType>GeneratedMethod</FieldType>
        </Field>
        <Field>
            <FieldName>activation</FieldName>
            <FieldType>Activation</FieldType>
        </Field>
        <Field>
            <FieldName>orderedNulls</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>unknownRV</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>negateCompareResult</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>variantType</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>orderableCache</FieldName>
            <FieldType>DataValueDescriptor</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>GenericQualifier</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>orderableGetter</ParamName>
                    <ParamType>GeneratedMethod</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>orderedNulls</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unknownRV</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>negateCompareResult</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>variantType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumnId</MethodName>
            <MethodComment>/** 
 * @see Qualifier#getColumnId
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOrderable</MethodName>
            <MethodComment>/** 
 * @see Qualifier#getOrderable
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>DataValueDescriptor</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOperator</MethodName>
            <MethodComment>/** 
 * Get the operator to use in the comparison. 
 * @see Qualifier#getOperator
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>negateCompareResult</MethodName>
            <MethodComment>/** 
 * Should the result from the compare operation be negated?  If true then only rows which fail the compare operation will qualify.
 * @see Qualifier#negateCompareResult
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOrderedNulls</MethodName>
            <MethodComment>/** 
 * Get the getOrderedNulls argument to use in the comparison. 
 * @see Qualifier#getOrderedNulls
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUnknownRV</MethodName>
            <MethodComment>/** 
 * Get the getOrderedNulls argument to use in the comparison.
 * @see Qualifier#getUnknownRV
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearOrderableCache</MethodName>
            <MethodComment>/** 
 * Clear the DataValueDescriptor cache, if one exists. (The DataValueDescriptor can be 1 of 3 types: o  VARIANT		  - cannot be cached as its value can  vary within a scan o  SCAN_INVARIANT - can be cached within a scan as its value will not change within a scan o  QUERY_INVARIANT- can be cached across the life of the query as its value will never change o  CONSTANT		  - never changes
 * @see Qualifier#getUnknownRV
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reinitialize</MethodName>
            <MethodComment>/** 
 * This method reinitializes all the state of the Qualifier.  It is used to distinguish between resetting something that is query invariant and something that is constant over every execution of a query.  Basically, clearOrderableCache() will only clear out its cache if it is a VARIANT or SCAN_INVARIANT value.  However, each time a query is executed, the QUERY_INVARIANT qualifiers need to be reset.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>