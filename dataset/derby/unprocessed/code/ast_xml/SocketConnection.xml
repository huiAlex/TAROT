<Class>
    <Id>940</Id>
    <Package>org.apache.derby.impl.store.replication.net</Package>
    <ClassName>SocketConnection</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SocketConnection  /** 
 * This class encapsulates a &lt;code&gt;Socket&lt;/code&gt; connection and has methods that allow to read and write into the Object streams created from this connection.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>socket</FieldName>
            <FieldType>Socket</FieldType>
        </Field>
        <Field>
            <FieldName>objOutputStream</FieldName>
            <FieldType>ObjectOutputStream</FieldType>
        </Field>
        <Field>
            <FieldName>objInputStream</FieldName>
            <FieldType>ObjectInputStream</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SocketConnection</MethodName>
            <MethodComment>/** 
 * Constructor creates the streams from the socket object passed as parameter.
 * @param socket the &lt;code&gt;Socket&lt;/code&gt; object that this classencapsulates.
 * @throws IOException If an exception occurs while creating thestreams from the socket object.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>socket</ParamName>
                    <ParamType>Socket</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readMessage</MethodName>
            <MethodComment>/** 
 * Used to read the object messages that are sent. waits on the input stream until a data is present that can be read and returns this data.
 * @return the data read from the connection.
 * @throws ClassNotFoundException Class of a serialized object cannot be found.
 * @throws IOException if an exception occurs while reading from thestream.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeMessage</MethodName>
            <MethodComment>/** 
 * Used to send the object messages across the socket conection. 
 * @param message the data to be written into the connection.
 * @throws IOException if an exception occurs while writing into thestream.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>objOutputStream;reset;[]</InnerMethodInvoke>
                <InnerMethodInvoke>objOutputStream;writeObject;[message]</InnerMethodInvoke>
                <InnerMethodInvoke>objOutputStream;flush;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tearDown</MethodName>
            <MethodComment>/** 
 * Closes the &lt;code&gt;Socket&lt;/code&gt; and the object streams obtained from it.
 * @throws IOException if an exception occurs while trying to closethe socket or the streams.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>