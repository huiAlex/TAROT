<Class>
    <Id>2004</Id>
    <Package>org.apache.derbyTesting.functionTests.tests.upgradeTests</Package>
    <ClassName>Changes10_3</ClassName>
    <SuperClass>UpgradeChange</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Changes10_3  /** 
 * Upgrade test cases for changes made in 10.3. If the old version is 10.3 or later then these tests will not be run. &lt;BR&gt; 10.3 Upgrade issues
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>UNKNOWN_PROCEDURE</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>suite</MethodName>
            <MethodComment>/** 
 * Return the suite of tests to test the changes made in 10.3.
 * @param phase an integer that indicates the current phase inthe upgrade test.
 * @return the test suite created.
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>phase</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BaseTestSuite [suite=new BaseTestSuite("Upgrade changes for 10.3")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>suite;addTestSuite;[Changes10_3.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Changes10_3</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testCompilationSchema</MethodName>
            <MethodComment>/** 
 * Verify the compilation schema is nullable after upgrade to 10.3 or later. (See DERBY-630)
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DatabaseMetaData [dmd=getConnection().getMetaData()]</InnerVar>
                <InnerVar>ResultSet [rs=dmd.getColumns(null,"SYS","SYSSTATEMENTS","COMPILATIONSCHEMAID")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rs;next;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["SYS.SYSSTATEMENTS.COMPILATIONSCHEMAID IS_NULLABLE", "YES", rs.getString("IS_NULLABLE")]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;next;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["SYS.SYSVIEWS.COMPILATIONSCHEMAID IS_NULLABLE", "YES", rs.getString("IS_NULLABLE")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNegValueSupportedLogRecord</MethodName>
            <MethodComment>/** 
 * In 10.3: We will write a LogRecord with a different format  that can also write negative values. Verify here that a 10.2 Database does not malfunction from this and 10.2 Databases will work with the old LogRecord format.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkDataToCase606</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>start_value</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>end_value</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>PreparedStatement [insert_stmt=prepareStatement("insert into case606 values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)")]</InnerVar>
                <InnerVar>char[] [data_dt=new char[24]]</InnerVar>
                <InnerVar>char[] [data_dt2=new char[50]]</InnerVar>
                <InnerVar>String [data1_str=new String(data_dt)]</InnerVar>
                <InnerVar>String [data2_str=new String(data_dt2)]</InnerVar>
                <InnerVar>String [schema=getTestConfiguration().getUserName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getConnection();setAutoCommit;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>insert_stmt;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;commit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["delete from case606 where case606.keycol &gt; 10000"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;commit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>s;execute;["call SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE('" + schema + "', 'CASE606',1,1,1)"]</InnerMethodInvoke>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;commit;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testImportExportLobsProcedures</MethodName>
            <MethodComment>/** 
 * Simple test to ensure new import/export procedures added in 10.3  are working on hard upgrade to 10.3 from previous derby versions.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testPolicyReloadingProcedure</MethodName>
            <MethodComment>/** 
 * Ensure that the new policy-file-reloading procedure works after hard upgrade to 10.3 from previous derby versions.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [currentPhase=getPhase()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertPolicyReloaderExists</MethodName>
            <MethodComment>/** 
 * Verify that the policy-reloading procedure exists.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;tryReloading;[true, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertPolicyReloaderDoesNotExist</MethodName>
            <MethodComment>/** 
 * Verify whether the policy-reloading procedure exists.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;tryReloading;[false, UNKNOWN_PROCEDURE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tryReloading</MethodName>
            <MethodComment>/** 
 * Call the policy reloading procedure.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>shouldSucceed</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectedSQLState</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [didSucceed=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertEquals;["Reloading results.", shouldSucceed, didSucceed]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkNewHeap</MethodName>
            <MethodComment>/** 
 * Check if we can open the heap. &lt;p&gt; This test just does a simple select to verify that 10.3 heap conglomerate format id's are working right for all the various upgrade scenarios.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Statement [s=createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs=s.executeQuery("select * from " + tableName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>JDBC;assertFullResultSet;[rs, new String[][]{{value}}]</InnerMethodInvoke>
                <InnerMethodInvoke>s;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testNewHeap</MethodName>
            <MethodComment>/** 
 * Test that new format id for Heap is not used in soft upgrade.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>