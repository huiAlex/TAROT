<Class>
    <Id>1651</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>BinaryComparisonOperatorNode</ClassName>
    <SuperClass>BinaryOperatorNode</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BinaryComparisonOperatorNode  /** 
 * This node is the superclass  for all binary comparison operators, such as =, &amp;lt;&amp;gt;, &amp;lt;, etc.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>forQueryRewrite</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>betweenSelectivity</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>BinaryComparisonOperatorNode</MethodName>
            <MethodComment>/** 
 * Constructor for a BinaryComparisonOperatorNode
 * @param leftOperand	The left operand of the comparison
 * @param rightOperand	The right operand of the comparison
 * @param operator		The name of the operator
 * @param methodName	The name of the method to call in the generatedclass
 * @param forQueryRewrite Can be true only if if this node has been added by an internal rewrite of the query. This allows binding to be more liberal when checking  it against allowed syntax. This parameter will be passed FALSE when a new  instance of the node is being created(which is  the majority of the cases). But when an   existing node is getting cloned, the value of this parameter should be passed as the  originalNode.getForQueryRewrite(). Examples of this can be found in Predicate.Java and  PredicateList.java
 * @param cm            The context manager
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leftOperand</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightOperand</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operator</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forQueryRewrite</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setForQueryRewrite</MethodName>
            <MethodComment>/** 
 * This node was generated as part of a query rewrite. Bypass the normal comparability checks.
 * @param val  true if this was for a query rewrite
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>val</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getForQueryRewrite</MethodName>
            <MethodComment>/** 
 * Was this node generated in a query rewrite?
 * @return  true if it was generated in a query rewrite.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setBetweenSelectivity</MethodName>
            <MethodComment>/** 
 * Use between selectivity when calculating the selectivity.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBetweenSelectivity</MethodName>
            <MethodComment>/** 
 * Return whether or not to use the between selectivity for this node.
 * @return Whether or not to use the between selectivity for this node.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bindExpression</MethodName>
            <MethodComment>/** 
 * Bind this comparison operator.  All that has to be done for binding a comparison operator is to bind the operands, check the compatibility of the types, and set the result type to SQLBoolean.
 * @param fromList			The query's FROM list
 * @param subqueryList		The subquery list being built as we find SubqueryNodes
 * @param aggregates        The aggregate list being built as we find AggregateNodes
 * @return	The new top of the expression tree.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>ValueNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fromList</ParamName>
                    <ParamType>FromList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>subqueryList</ParamName>
                    <ParamType>SubqueryList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>aggregates</ParamName>
                    <ParamType>AggregateNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TypeId [leftTypeId=leftOperand.getTypeId()]</InnerVar>
                <InnerVar>TypeId [rightTypeId=rightOperand.getTypeId()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;bindComparisonOperator;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bindComparisonOperator</MethodName>
            <MethodComment>/** 
 * Test the type compatability of the operands and set the type info for this node.  This method is useful both during binding and when we generate nodes within the language module outside of the parser.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [nullableResult]</InnerVar>
                <InnerVar>boolean [forEquals=operator.equals("=") || operator.equals("&lt;&gt;")]</InnerVar>
                <InnerVar>boolean [cmp=leftOperand.getTypeServices().comparable(rightOperand.getTypeServices(),forEquals,getClassFactory())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setType;[new DataTypeDescriptor(TypeId.BOOLEAN_ID,nullableResult)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>preprocess</MethodName>
            <MethodComment>/** 
 * Preprocess an expression tree.  We do a number of transformations here (including subqueries, IN lists, LIKE and BETWEEN) plus subquery flattening. NOTE: This is done before the outer ResultSetNode is preprocessed.
 * @param numTables			Number of tables in the DML Statement
 * @param outerFromList		FromList from outer query block
 * @param outerSubqueryList	SubqueryList from outer query block
 * @param outerPredicateList	PredicateList from outer query block
 * @return		The modified expression
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>ValueNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numTables</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outerFromList</ParamName>
                    <ParamType>FromList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outerSubqueryList</ParamName>
                    <ParamType>SubqueryList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outerPredicateList</ParamName>
                    <ParamType>PredicateList</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eliminateNots</MethodName>
            <MethodComment>/** 
 * Eliminate NotNodes in the current query block.  We traverse the tree,  inverting ANDs and ORs and eliminating NOTs as we go.  We stop at  ComparisonOperators and boolean expressions.  We invert  ComparisonOperators and replace boolean expressions with  boolean expression = false. NOTE: Since we do not recurse under ComparisonOperators, there still could be NotNodes left in the tree.
 * @param underNotNode		Whether or not we are under a NotNode.
 * @return		The modified expression
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>ValueNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>underNotNode</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNegation</MethodName>
            <MethodComment>/** 
 * Negate the comparison.
 * @param leftOperand	The left operand of the comparison operator
 * @param rightOperand	The right operand of the comparison operator
 * @return BinaryOperatorNode	The negated expression
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>BinaryOperatorNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leftOperand</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightOperand</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSwappedEquivalent</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Return a node equivalent to this node, but with the left and right operands swapped. The node type may also be changed if the operator is not symmetric. &lt;/p&gt; &lt;p&gt; This method may for instance be used to normalize a predicate by moving constants to the right-hand side of the comparison. Example: {@code 1 = A} will be transformed to {@code A = 1}, and  {@code 10 &lt; B}will be transformed to  {@code B &gt; 10}. &lt;/p&gt;
 * @return an equivalent expression with the operands swapped
 * @throws StandardException if an error occurs
 */
</MethodComment>
            <ReturnType>BinaryOperatorNode</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>changeToCNF</MethodName>
            <MethodComment>/** 
 * Finish putting an expression into conjunctive normal form.  An expression tree in conjunctive normal form meets the following criteria: o  If the expression tree is not null, the top level will be a chain of AndNodes terminating in a true BooleanConstantNode. o  The left child of an AndNode will never be an AndNode. o  Any right-linked chain that includes an AndNode will be entirely composed of AndNodes terminated by a true BooleanConstantNode. o  The left child of an OrNode will never be an OrNode. o  Any right-linked chain that includes an OrNode will be entirely composed of OrNodes terminated by a false BooleanConstantNode. o  ValueNodes other than AndNodes and OrNodes are considered leaf nodes for purposes of expression normalization. In other words, we won't do any normalization under those nodes. In addition, we track whether or not we are under a top level AndNode.   SubqueryNodes need to know this for subquery flattening.
 * @param underTopAndNode		Whether or not we are under a top level AndNode.
 * @return		The modified expression
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>ValueNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>underTopAndNode</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>genSQLJavaSQLTree</MethodName>
            <MethodComment>/** 
 * @see BinaryOperatorNode#genSQLJavaSQLTree 
 */
</MethodComment>
            <ReturnType>ValueNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>TypeId [leftTypeId=leftOperand.getTypeId()]</InnerVar>
                <InnerVar>TypeId [rightTypeId=rightOperand.getTypeId()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>