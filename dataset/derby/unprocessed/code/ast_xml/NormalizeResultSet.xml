<Class>
    <Id>2132</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>NormalizeResultSet</ClassName>
    <SuperClass>NoPutResultSetImpl</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>CursorResultSet</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>NormalizeResultSet  /** 
 * Cast the rows from the source result set to match the format of the result set for the entire statement.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>source</FieldName>
            <FieldType>NoPutResultSet</FieldType>
        </Field>
        <Field>
            <FieldName>normalizedRow</FieldName>
            <FieldType>ExecRow</FieldType>
        </Field>
        <Field>
            <FieldName>numCols</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>startCol</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>cachedDestinations</FieldName>
            <FieldType>DataValueDescriptor[]</FieldType>
        </Field>
        <Field>
            <FieldName>resultDescription</FieldName>
            <FieldType>ResultDescription</FieldType>
        </Field>
        <Field>
            <FieldName>desiredTypes</FieldName>
            <FieldType>DataTypeDescriptor[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>NormalizeResultSet</MethodName>
            <MethodComment>/** 
 * Constructor for a NormalizeResultSet
 * @param source					The NoPutResultSet from which to get rowsto be normalized
 * @param activation				The activation for this execution
 * @param resultSetNumber			The resultSetNumber
 * @param erdNumber					The integer for the ResultDescription
 * @exception StandardException	on error
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>NoPutResultSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultSetNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>erdNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>optimizerEstimatedRowCount</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>optimizerEstimatedCost</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forUpdate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;recordConstructorTime;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openCore</MethodName>
            <MethodComment>/** 
 * open a scan on the source. scan parameters are evaluated at each open, so there is probably some way of altering their values...
 * @exception StandardException thrown on failure 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>source;openCore;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reopenCore</MethodName>
            <MethodComment>/** 
 * reopen a scan on the table. scan parameters are evaluated at each open, so there is probably some way of altering their values...
 * @exception StandardException thrown if cursor finished.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>source;reopenCore;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNextRowCore</MethodName>
            <MethodComment>/** 
 * @exception StandardException thrown on failure 
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ExecRow [sourceRow=null]</InnerVar>
                <InnerVar>ExecRow [result=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setCurrentRow;[result]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * If the result set has been opened, close the open scan.
 * @exception StandardException thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTimeSpent</MethodName>
            <MethodComment>/** 
 * Return the total amount of time spent in this ResultSet
 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSetENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
 * @return long		The total amount of time spent (in milliseconds).
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [totTime=constructorTime + openTime + nextTime+ closeTime]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRowLocation</MethodName>
            <MethodComment>/** 
 * Gets information from its source. We might want to have this take a CursorResultSet in its constructor some day, instead of doing a cast here?
 * @see CursorResultSet
 * @return the row location of the current cursor row.
 * @exception StandardException thrown on failure 
 */
</MethodComment>
            <ReturnType>RowLocation</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentRow</MethodName>
            <MethodComment>/** 
 * Gets information from last getNextRow call.
 * @see CursorResultSet
 * @return the last row returned.
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>computeStartColumn</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Compute the start column for an update/insert.
 * @param isUpdate  True if we are executing an UPDATE statement
 * @param desc Metadata describing a result row&lt;/p&gt;
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isUpdate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>desc</ParamName>
                    <ParamType>ResultDescription</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [count=desc.getColumnCount()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>normalizeColumn</MethodName>
            <MethodComment>/** 
 * Normalize a column.  For now, this means calling constructors through the type services to normalize a type to itself.  For example, if you're putting a char(30) value into a char(15) column, it calls a SQLChar constructor with the char(30) value, and the constructor truncates the value and makes sure that no non-blank characters are truncated.
 * @param dtd Data type to coerce to
 * @param sourceRow row holding the source column
 * @param sourceColumnPosition position of column in row
 * @param resultCol where to stuff the coerced value
 * @param desc Additional metadata for error reporting if necessary
 * @exception StandardException thrown on failure 
 */
</MethodComment>
            <ReturnType>DataValueDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dtd</ParamName>
                    <ParamType>DataTypeDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sourceRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sourceColumnPosition</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultCol</ParamName>
                    <ParamType>DataValueDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>desc</ParamName>
                    <ParamType>ResultDescription</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor [sourceCol=sourceRow.getColumn(sourceColumnPosition)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>normalizeRow</MethodName>
            <MethodComment>/** 
 * Normalize a row.
 * @param sourceRow		The row to normalize
 * @return	The normalized row
 * @exception StandardException thrown on failure 
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sourceRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [count=resultDescription.getColumnCount()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCachedDestination</MethodName>
            <MethodComment>/** 
 * Get a cached data value descriptor that can receive the normalized value of the specified column.
 * @param col the column number (1-based)
 * @return a data value descriptor of the correct type for the column
 * @throws StandardException if a new data value descriptor cannot becreated
 */
</MethodComment>
            <ReturnType>DataValueDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>col</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [index=col - 1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDesiredType</MethodName>
            <MethodComment>/** 
 * Get a data type descriptor that describes the desired type for the specified column.
 * @param col the column number (1-based)
 * @return a data type descriptor for the column
 */
</MethodComment>
            <ReturnType>DataTypeDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>col</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fetchResultTypes</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Fetch the result datatypes out of the activation. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>DataTypeDescriptor[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>desc</ParamName>
                    <ParamType>ResultDescription</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [count=desc.getColumnCount()]</InnerVar>
                <InnerVar>DataTypeDescriptor[] [result=new DataTypeDescriptor[count]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateRow</MethodName>
            <MethodComment>/** 
 * @see NoPutResultSet#updateRow
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowChanger</ParamName>
                    <ParamType>RowChanger</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>source;updateRow;[row, rowChanger]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>markRowAsDeleted</MethodName>
            <MethodComment>/** 
 * @see NoPutResultSet#markRowAsDeleted
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>source;markRowAsDeleted;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>