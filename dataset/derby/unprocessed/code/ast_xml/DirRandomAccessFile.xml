<Class>
    <Id>753</Id>
    <Package>org.apache.derby.impl.io</Package>
    <ClassName>DirRandomAccessFile</ClassName>
    <SuperClass>RandomAccessFile</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>StorageRandomAccessFile</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DirRandomAccessFile  /** 
 * This class provides a disk based implementation of the StIRandomAccess File interface. It is used by the database engine to access persistent data and transaction logs under the directory (default) subsubprotocol.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>_name</FieldName>
            <FieldType>File</FieldType>
        </Field>
        <Field>
            <FieldName>_mode</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DirRandomAccessFile</MethodName>
            <MethodComment>/** 
 * Construct a StorageRandomAccessFileImpl.
 * @param name The file name.
 * @param mode The file open mode: "r", "rw", "rws", or "rwd". The  "rws" and "rwd" modes specify that the file is tobe synchronized, consistent with the java.io.RandomAccessFile class. However the StorageRandomAccessFile.sync() method will be called even if the file was opened in "rws" or "rwd" mode.  If the "rws" or "rwd" modes are supported then the implementation of StorageRandomAccessFile.sync need not do anything.
 * @exception IllegalArgumentException if the mode argument is not equal to one of "r", "rw".
 * @exception FileNotFoundException if the file exists but is a directory rather than a regularfile, or cannot be opened or created for any other reason .
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mode</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FileNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clone</MethodName>
            <MethodComment>/** 
 * Clone this file abstaction 
 */
</MethodComment>
            <ReturnType>DirRandomAccessFile</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sync</MethodName>
            <MethodComment>/** 
 * Force any changes out to the persistent store.
 * @exception IOException If an IO error occurs.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getFD();sync;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>