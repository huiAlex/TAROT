<Class>
    <Id>811</Id>
    <Package>org.apache.derbyTesting.junit</Package>
    <ClassName>Decorator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Decorator  /** 
 * Utility class that provides static methods to decorate tests. Used as a central collection point for decorators than cannot be simply expressed as a TestSetup class. Typically the decorators will be collections of other decorators
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>Decorator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>encryptedDatabase</MethodName>
            <MethodComment>/** 
 * Decorate a set of tests to use an encrypted single use database. This is to run tests using encryption as a general test and not specific tests of how encryption is handled. E.g. tests of setting various URL attributes would be handled in a specific test. &lt;BR&gt; The database will use the default encryption algorithm. &lt;BR&gt; A boot password (phrase) is used with a random set of characters and digits 16 characters long.
 * @param test test to decorate
 * @return decorated tests
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>test</ParamName>
                    <ParamType>Test</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>encryptedDatabaseBpw</MethodName>
            <MethodComment>/** 
 * Decorate a set of tests to use an encrypted single use database. This is to run tests using encryption as a general test and not specific tests of how encryption is handled. E.g. tests of setting various URL attributes would be handled in a specific test. &lt;BR&gt; The database will use the default encryption algorithm.
 * @param test test to decorate
 * @param bootPassword boot passphrase to use
 * @return decorated tests
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>test</ParamName>
                    <ParamType>Test</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bootPassword</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [attributes=new Properties()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes;setProperty;["dataEncryption", "true"]</InnerMethodInvoke>
                <InnerMethodInvoke>attributes;setProperty;["bootPassword", bootPassword]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>encryptedDatabase</MethodName>
            <MethodComment>/** 
 * Decorate a set of tests to use an encrypted single use database. This is to run tests using encryption as a general test and not specific tests of how encryption is handled. E.g. tests of setting various URL attributes would be handled in a specific test. &lt;BR&gt; The database will use the specified encryption algorithm. &lt;BR&gt; A boot password (phrase) is used with a random set of characters and digits 64 characters long.
 * @param test test to decorate
 * @return decorated tests
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>test</ParamName>
                    <ParamType>Test</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>algorithm</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>encryptedDatabaseBpw</MethodName>
            <MethodComment>/** 
 * Decorate a set of tests to use an encrypted single use database. This is to run tests using encryption as a general test and not specific tests of how encryption is handled. E.g. tests of setting various URL attributes would be handled in a specific test. &lt;BR&gt; The database will use the specified encryption algorithm.
 * @param test test to decorate
 * @param bootPassword boot passphrase to use
 * @return decorated tests
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>test</ParamName>
                    <ParamType>Test</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>algorithm</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bootPassword</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [attributes=new Properties()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes;setProperty;["dataEncryption", "true"]</InnerMethodInvoke>
                <InnerMethodInvoke>attributes;setProperty;["bootPassword", bootPassword]</InnerMethodInvoke>
                <InnerMethodInvoke>attributes;setProperty;["encryptionAlgorithm", algorithm]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBootPhrase</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Random [rand=new Random()]</InnerVar>
                <InnerVar>char[] [bp=new char[length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>territoryCollatedDatabase</MethodName>
            <MethodComment>/** 
 * Decorate a set of tests to use an single use database with TERRITORY_BASED collation set to the passed in locale.
 * @param locale Locale used to set territory JDBC attribute. If nullthen only collation=TERRITORY_BASED will be set.
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>test</ParamName>
                    <ParamType>Test</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>locale</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [attributes=new Properties()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes;setProperty;["collation", "TERRITORY_BASED"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>logDeviceAttributeDatabase</MethodName>
            <MethodComment>/** 
 * Decorate a set of tests to use a single use database with logDevice pointing a log directory to non-default location  
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>test</ParamName>
                    <ParamType>Test</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>logDevice</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [attributes=new Properties()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>territoryCollatedCaseInsensitiveDatabase</MethodName>
            <MethodComment>/** 
 * Decorate a set of tests to use an single use database with TERRITORY_BASED:SECONDARY collation set to the passed in locale.
 * @param locale Locale used to set territory JDBC attribute. If nullthen only collation=TERRITORY_BASED:SECONDARY will be set.
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>test</ParamName>
                    <ParamType>Test</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>locale</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [attributes=new Properties()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>attributes;setProperty;["collation", "TERRITORY_BASED:SECONDARY"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>attributesDatabase</MethodName>
            <MethodComment>/** 
 * Decorate a test (or suite of tests) to use a single use database as the default database with a specified set connection attributes.
 * @param attributes properties to set in the connection URL or in theconnectionAttributes of a data source when connecting to the database
 * @param test Test to decorate
 * @return Decorated test
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>attributes</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>test</ParamName>
                    <ParamType>Test</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNewConfiguration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TestConfiguration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>old</ParamName>
                    <ParamType>TestConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>