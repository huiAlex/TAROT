<Class>
    <Id>438</Id>
    <Package>org.apache.derbyTesting.functionTests.tests.jdbc4</Package>
    <ClassName>VerifySignatures</ClassName>
    <SuperClass>BaseTestCase</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>VerifySignatures  /** 
 * JUnit test which checks that all methods specified by the interfaces in JDBC 4.0 are implemented. The test requires JVM 1.6 to run. Even though this class uses JDBC it extends BaseTestCase as it handles getting connections itself and thus does not need the utility methods or connecion handlng provided by BaseJDBCTestCase.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>JDBC_INTERFACES</FieldName>
            <FieldType>Class[]</FieldType>
        </Field>
        <Field>
            <FieldName>derbyImplementation</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>jdbcInterface</FieldName>
            <FieldType>Class</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>VerifySignatures</MethodName>
            <MethodComment>/** 
 * Creates a new instance.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>suite</MethodName>
            <MethodComment>/** 
 * Build a suite of tests to be run.
 * @return a test suite
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testAllJDBCObjects</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Set&lt;ClassInfo&gt; [classes=new HashSet&lt;ClassInfo&gt;()]</InnerVar>
                <InnerVar>Set&lt;Class&gt; [interfaces=new HashSet&lt;Class&gt;()]</InnerVar>
                <InnerVar>Set&lt;Class&gt; [jdbcInterfaces=getInterfacesToCheck()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;collectClassesFromDataSource;[classes]</InnerMethodInvoke>
                <InnerMethodInvoke>null;collectClassesFromConnectionPoolDataSource;[classes]</InnerMethodInvoke>
                <InnerMethodInvoke>null;collectClassesFromXADataSource;[classes]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addClass;[classes, DriverManager.getDriver(TestConfiguration.getCurrent().getJDBCUrl()).getClass(), java.sql.Driver.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jdbcInterfaces;removeAll;[interfaces]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;["Unchecked interfaces: " + jdbcInterfaces, jdbcInterfaces.isEmpty()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>NoSuchMethodException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>collectClassesFromDataSource</MethodName>
            <MethodComment>/** 
 * Obtain a connection from a &lt;code&gt;DataSource&lt;/code&gt; object and perform JDBC operations on it. Collect the classes of all JDBC objects that are found.
 * @param classes set into which classes are collected
 * @exception SQLException if a database error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classes</ParamName>
                    <ParamType>ClassInfo</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataSource [ds=JDBCDataSource.getDataSource()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>JDBCDataSource;setBeanProperty;[ds, "connectionAttributes", "create=true"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addClass;[classes, ds.getClass(), javax.sql.DataSource.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;collectClassesFromConnection;[ds.getConnection(TestConfiguration.getCurrent().getUserName(),TestConfiguration.getCurrent().getUserPassword()), classes]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>collectClassesFromConnectionPoolDataSource</MethodName>
            <MethodComment>/** 
 * Obtain a connection from a &lt;code&gt;ConnectionPoolDataSource&lt;/code&gt; object and perform JDBC operations on it. Collect the classes of all JDBC objects that are found.
 * @param classes set into which classes are collected
 * @exception SQLException if a database error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classes</ParamName>
                    <ParamType>ClassInfo</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConnectionPoolDataSource [cpds=J2EEDataSource.getConnectionPoolDataSource()]</InnerVar>
                <InnerVar>PooledConnection [pc=cpds.getPooledConnection(TestConfiguration.getCurrent().getUserName(),TestConfiguration.getCurrent().getUserPassword())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addClass;[classes, cpds.getClass(), javax.sql.ConnectionPoolDataSource.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addClass;[classes, pc.getClass(), javax.sql.PooledConnection.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;collectClassesFromConnection;[pc.getConnection(), classes]</InnerMethodInvoke>
                <InnerMethodInvoke>pc;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>collectClassesFromXADataSource</MethodName>
            <MethodComment>/** 
 * Obtain a connection from an &lt;code&gt;XADataSource&lt;/code&gt; object and perform JDBC operations on it. Collect the classes of all JDBC objects that are found.
 * @param classes set into which classes are collected
 * @exception SQLException if a database error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classes</ParamName>
                    <ParamType>ClassInfo</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>XADataSource [xads=J2EEDataSource.getXADataSource()]</InnerVar>
                <InnerVar>XAConnection [xaconn=xads.getXAConnection(TestConfiguration.getCurrent().getUserName(),TestConfiguration.getCurrent().getUserPassword())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addClass;[classes, xads.getClass(), javax.sql.XADataSource.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addClass;[classes, xaconn.getClass(), javax.sql.XAConnection.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;collectClassesFromConnection;[xaconn.getConnection(), classes]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>collectClassesFromConnection</MethodName>
            <MethodComment>/** 
 * Perform JDBC operations on a &lt;code&gt;Connection&lt;/code&gt;. Collect the classes of all JDBC objects that are found.
 * @param conn connection to a database
 * @param classes set into which classes are collected
 * @exception SQLException if a database error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classes</ParamName>
                    <ParamType>ClassInfo</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Savepoint [sp=conn.setSavepoint()]</InnerVar>
                <InnerVar>DatabaseMetaData [dmd=conn.getMetaData()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>conn;setAutoCommit;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addClass;[classes, conn.getClass(), java.sql.Connection.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addClass;[classes, sp.getClass(), java.sql.Savepoint.class]</InnerMethodInvoke>
                <InnerMethodInvoke>conn;releaseSavepoint;[sp]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addClass;[classes, dmd.getClass(), java.sql.DatabaseMetaData.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;collectClassesFromStatement;[conn, classes]</InnerMethodInvoke>
                <InnerMethodInvoke>null;collectClassesFromPreparedStatement;[conn, classes]</InnerMethodInvoke>
                <InnerMethodInvoke>null;collectClassesFromCallableStatement;[conn, classes]</InnerMethodInvoke>
                <InnerMethodInvoke>conn;rollback;[]</InnerMethodInvoke>
                <InnerMethodInvoke>conn;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>collectClassesFromStatement</MethodName>
            <MethodComment>/** 
 * Perform JDBC operations on a &lt;code&gt;Statement&lt;/code&gt;. Collect the classes of all JDBC objects that are found.
 * @param conn connection to a database
 * @param classes set into which classes are collected
 * @exception SQLException if a database error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classes</ParamName>
                    <ParamType>ClassInfo</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Statement [stmt=conn.createStatement()]</InnerVar>
                <InnerVar>ResultSet [rs=stmt.executeQuery("SELECT id, b, c FROM t")]</InnerVar>
                <InnerVar>Blob [b=rs.getBlob(2)]</InnerVar>
                <InnerVar>Clob [c=rs.getClob(3)]</InnerVar>
                <InnerVar>ResultSetMetaData [rsmd=rs.getMetaData()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addClass;[classes, stmt.getClass(), java.sql.Statement.class]</InnerMethodInvoke>
                <InnerMethodInvoke>stmt;execute;["CREATE TABLE t (id INT PRIMARY KEY, " + "b BLOB(10), c CLOB(10))"]</InnerMethodInvoke>
                <InnerMethodInvoke>stmt;execute;["INSERT INTO t (id, b, c) VALUES (1, " + "CAST (" + TestUtil.stringToHexLiteral("101010001101") + "AS BLOB(10)), CAST ('hello' AS CLOB(10)))"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addClass;[classes, rs.getClass(), java.sql.ResultSet.class]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;next;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addClass;[classes, b.getClass(), java.sql.Blob.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addClass;[classes, c.getClass(), java.sql.Clob.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addClass;[classes, rsmd.getClass(), java.sql.ResultSetMetaData.class]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>stmt;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>conn;rollback;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>collectClassesFromPreparedStatement</MethodName>
            <MethodComment>/** 
 * Perform JDBC operations on a &lt;code&gt;PreparedStatement&lt;/code&gt;. Collect the classes of all JDBC objects that are found.
 * @param conn connection to a database
 * @param classes set into which classes are collected
 * @exception SQLException if a database error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classes</ParamName>
                    <ParamType>ClassInfo</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PreparedStatement [ps=conn.prepareStatement("VALUES(1)")]</InnerVar>
                <InnerVar>ResultSet [rs=ps.executeQuery()]</InnerVar>
                <InnerVar>ParameterMetaData [pmd=ps.getParameterMetaData()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addClass;[classes, ps.getClass(), java.sql.PreparedStatement.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addClass;[classes, rs.getClass(), java.sql.ResultSet.class]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addClass;[classes, pmd.getClass(), java.sql.ParameterMetaData.class]</InnerMethodInvoke>
                <InnerMethodInvoke>ps;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>collectClassesFromCallableStatement</MethodName>
            <MethodComment>/** 
 * Perform JDBC operations on a &lt;code&gt;CallableStatement&lt;/code&gt;. Collect the classes of all JDBC objects that are found.
 * @param conn connection to a database
 * @param classes set into which classes are collected
 * @exception SQLException if a database error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classes</ParamName>
                    <ParamType>ClassInfo</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CallableStatement [cs=conn.prepareCall("CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(0)")]</InnerVar>
                <InnerVar>ParameterMetaData [pmd=cs.getParameterMetaData()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addClass;[classes, cs.getClass(), java.sql.CallableStatement.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addClass;[classes, pmd.getClass(), java.sql.ParameterMetaData.class]</InnerMethodInvoke>
                <InnerMethodInvoke>cs;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addClass</MethodName>
            <MethodComment>/** 
 * Adds a &lt;code&gt;ClassInfo&lt;/code&gt; object to a set.
 * @param classes set to which the class should be added
 * @param implementation Derby implementation class
 * @param iface JDBC interface supposed to be implemented
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classes</ParamName>
                    <ParamType>ClassInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>implementation</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>iface</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>classes;add;[new ClassInfo(implementation,iface)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAllInterfaces</MethodName>
            <MethodComment>/** 
 * Get the set consisting of an interface and all its super-interfaces.
 * @param iface an interface
 * @return the set consisting of &lt;code&gt;iface&lt;/code&gt; and all itssuper-interfaces
 */
</MethodComment>
            <ReturnType>Class</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>iface</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Class&gt; [set=new HashSet&lt;Class&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>set;add;[iface]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkImplementationMethod</MethodName>
            <MethodComment>/** 
 * checks that a class implements a specific method.
 * @param derbyImplementation The Derby implementation class which is tested
 * @param ifaceMethod The method that should be implemented.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>derbyImplementation</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ifaceMethod</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Method [impMethod=derbyImplementation.getMethod(ifaceMethod.getName(),ifaceMethod.getParameterTypes())]</InnerVar>
                <InnerVar>StringBuilder [sb=new StringBuilder()]</InnerVar>
                <InnerVar>Class[] [pts=ifaceMethod.getParameterTypes()]</InnerVar>
                <InnerVar>int [modifiers=impMethod.getModifiers()]</InnerVar>
                <InnerVar>Class[] [declaredExceptions=ifaceMethod.getExceptionTypes()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertFalse;["Implementation class is interface", derbyImplementation.isInterface()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;["("]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[")"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertEquals;["Incorrect return type for " + ifaceMethod.getName() + sb.toString(), ifaceMethod.getReturnType(), impMethod.getReturnType()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;["Non-public method", Modifier.isPublic(modifiers)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertFalse;["Abstract method", Modifier.isAbstract(modifiers)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertFalse;["Static method", Modifier.isStatic(modifiers)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>NoSuchMethodException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findCompatibleClass</MethodName>
            <MethodComment>/** 
 * Search an array of classes for a class that is identical to or a super-class of the specified exception class.
 * @param exception an exception class
 * @param declared an array of exception classes declared tobe thrown by a method
 * @return a class that is compatible with the specifiedexception class, or &lt;code&gt;null&lt;/code&gt; if no compatible class is found
 */
</MethodComment>
            <ReturnType>Class</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exception</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declared</ParamName>
                    <ParamType>Class[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInterfacesToCheck</MethodName>
            <MethodComment>/** 
 * Returns the declared set of JDBC interfaces that Derby implements.
 */
</MethodComment>
            <ReturnType>Class</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Set&lt;Class&gt; [jdbcInterfaces=new HashSet&lt;Class&gt;(Arrays.asList(JDBC_INTERFACES))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>jdbcInterfaces;remove;[java.sql.Array.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jdbcInterfaces;remove;[java.sql.NClob.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jdbcInterfaces;remove;[java.sql.Ref.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jdbcInterfaces;remove;[java.sql.SQLData.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jdbcInterfaces;remove;[java.sql.SQLInput.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jdbcInterfaces;remove;[java.sql.SQLOutput.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jdbcInterfaces;remove;[java.sql.SQLXML.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jdbcInterfaces;remove;[java.sql.Struct.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jdbcInterfaces;remove;[javax.sql.RowSet.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jdbcInterfaces;remove;[javax.sql.RowSetInternal.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jdbcInterfaces;remove;[javax.sql.RowSetListener.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jdbcInterfaces;remove;[javax.sql.RowSetMetaData.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jdbcInterfaces;remove;[javax.sql.RowSetReader.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jdbcInterfaces;remove;[javax.sql.RowSetWriter.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jdbcInterfaces;remove;[java.sql.RowId.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jdbcInterfaces;remove;[javax.sql.ConnectionEventListener.class]</InnerMethodInvoke>
                <InnerMethodInvoke>jdbcInterfaces;remove;[javax.sql.StatementEventListener.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ClassInfo</MethodName>
            <MethodComment>/** 
 * Creates a new &lt;code&gt;ClassInfo&lt;/code&gt; instance.
 * @param imp the Derby implementation class
 * @param iface the JDBC interface
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>imp</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>iface</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment>/** 
 * Checks whether this object is equal to another object.
 * @param x another object
 * @return &lt;code&gt;true&lt;/code&gt; if the objects are equal,&lt;code&gt;false&lt;/code&gt; otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>x</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment>/** 
 * Calculate hash code.
 * @return hash code
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>