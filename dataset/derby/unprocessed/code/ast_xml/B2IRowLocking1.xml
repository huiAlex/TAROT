<Class>
    <Id>1410</Id>
    <Package>org.apache.derby.impl.store.access.btree.index</Package>
    <ClassName>B2IRowLocking1</ClassName>
    <SuperClass>B2IRowLocking2</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>BTreeLockingPolicy</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>B2IRowLocking1  /** 
 * The btree locking policy which implements read uncommitted isolation level. It inherits all functionality from B2IRowLocking2 except that it does not get any read row locks (and thus does not release them).  Note that table level and table level intent locking remains the same as B2IRowLocking2 as this is currently the way we prevent concurrent ddl from happening while a read uncommitted scanner is operating in the btree.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>B2IRowLocking1</MethodName>
            <MethodComment>/** 
 * Constructors for This class:
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>locking_policy</ParamName>
                    <ParamType>LockingPolicy</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>base_cc</ParamName>
                    <ParamType>ConglomerateController</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>open_btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lockScanRow</MethodName>
            <MethodComment>/** 
 * Lock a row as part of doing the scan. &lt;p&gt; Lock the row at the given slot (or the previous row if slot is 0). &lt;p&gt; If this routine returns true all locks were acquired while maintaining the latch on leaf.  If this routine returns false, locks may or may not have been acquired, and the routine should be called again after the client has researched the tree to reget the latch on the  appropriate page.
 * @return Whether locks were acquired without releasing latch on leaf.
 * @param open_btree        The open_btree to associate latches with - used if routine has to scan backward.
 * @param pos               The position of the row to lock.
 * @param lock_template     A scratch area to use to read in rows.
 * @param previous_key_lock Is this a previous key lock call?
 * @param forUpdate         Is the scan for update or for read only.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>open_btree</ParamName>
                    <ParamType>OpenBTree</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>BTreeRowPosition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_fetch_desc</ParamName>
                    <ParamType>FetchDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_template</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_row_loc</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>previous_key_lock</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forUpdate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_operation</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unlockScanRecordAfterRead</MethodName>
            <MethodComment>/** 
 * Release read lock on a row. Because this is read uncommitted no S row locks will have been requested, thus none need be released.  The only locks that need to be released are U locks requested if the scan was opened for update.
 * @param pos               The position of the row to unlock.
 * @param forUpdate         Is the scan for update or for read only.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>BTreeRowPosition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forUpdate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>