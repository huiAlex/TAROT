<Class>
    <Id>883</Id>
    <Package>org.apache.derby.impl.sql.catalog</Package>
    <ClassName>IndexInfoImpl</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>IndexInfoImpl  /** 
 * A poor mans structure used in DataDictionaryImpl.java. Used to save information about system indexes.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>irg</FieldName>
            <FieldType>IndexRowGenerator</FieldType>
        </Field>
        <Field>
            <FieldName>conglomerateNumber</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>crf</FieldName>
            <FieldType>CatalogRowFactory</FieldType>
        </Field>
        <Field>
            <FieldName>indexNumber</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>IndexInfoImpl</MethodName>
            <MethodComment>/** 
 * Constructor
 * @param indexNumber			(0-based) number of index within catalog's indexes
 * @param crf					CatalogRowFactory for the catalog
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>crf</ParamName>
                    <ParamType>CatalogRowFactory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConglomerateNumber</MethodName>
            <MethodComment>/** 
 * Get the conglomerate number for the index.
 * @return long	The conglomerate number for the index.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setConglomerateNumber</MethodName>
            <MethodComment>/** 
 * Set the conglomerate number for the index.
 * @param conglomerateNumber	The conglomerateNumber for the index.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conglomerateNumber</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIndexName</MethodName>
            <MethodComment>/** 
 * Get the index name for the index.
 * @return String	The index name for the index.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumnCount</MethodName>
            <MethodComment>/** 
 * Get the column count for the index.
 * @return int	The column count for the index.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIndexRowGenerator</MethodName>
            <MethodComment>/** 
 * Get the IndexRowGenerator for this index.
 * @return IndexRowGenerator	The IRG for this index.
 */
</MethodComment>
            <ReturnType>IndexRowGenerator</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setIndexRowGenerator</MethodName>
            <MethodComment>/** 
 * Set the IndexRowGenerator for this index.
 * @param irg			The IndexRowGenerator for this index.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>irg</ParamName>
                    <ParamType>IndexRowGenerator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBaseColumnPosition</MethodName>
            <MethodComment>/** 
 * Get the base column position for a column within a catalog given the (0-based) column number for the column within the index.
 * @param colNumber		The column number within the index
 * @return int		The base column position for the column.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>colNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isIndexUnique</MethodName>
            <MethodComment>/** 
 * Return whether or not this index is declared unique
 * @return boolean		Whether or not this index is declared unique
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>