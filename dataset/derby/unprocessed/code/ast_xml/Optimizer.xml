<Class>
    <Id>468</Id>
    <Package>org.apache.derby.iapi.sql.compile</Package>
    <ClassName>Optimizer</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Optimizer  /** 
 * Optimizer provides services for optimizing a query. RESOLVE: o  Need to figure out what to do about subqueries, figuring out their attachment points and how to communicate them back to the caller.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MODULE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>JOIN_ORDER_OPTIMIZATION</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>RULE_BASED_OPTIMIZATION</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>NO_TIMEOUT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_MEMORY_PER_TABLE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_DYNAMIC_MATERIALIZED_ROWS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>USE_STATISTICS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>NORMAL_PLAN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SORT_AVOIDANCE_PLAN</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getNextPermutation</MethodName>
            <MethodComment>/** 
 * Iterate through the permutations, returning false when the permutations are exhausted. NOTE - Implementers are responsible for hiding tree pruning of permutations behind this method call.
 * @return boolean	True - An optimizable permutation remains.False - Permutations are exhausted.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNextDecoratedPermutation</MethodName>
            <MethodComment>/** 
 * Iterate through the "decorated permutations", returning false when they are exhausted. NOTE - Implementers are responsible for hiding tree pruning of access methods behind this method call.
 * @return boolean	True - An optimizable decorated permutation remains.False - Decorated permutations are exhausted.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>costPermutation</MethodName>
            <MethodComment>/** 
 * Cost the current permutation. Caller is responsible for pushing all predicates which can be evaluated  prior to costing.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>costOptimizable</MethodName>
            <MethodComment>/** 
 * Cost the current Optimizable with the specified OPL. Caller is responsible for pushing all predicates which can be evaluated  prior to costing.
 * @param optimizable	The Optimizable
 * @param td			TableDescriptor of the Optimizable
 * @param cd			The ConglomerateDescriptor for the conglom to cost(This should change to an object to represent access paths, but for now this is OK).
 * @param predList		The OptimizablePredicateList to apply
 * @param outerCost		The cost of the tables outer to the one beingoptimizer - tells how many outer rows there are.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optimizable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>td</ParamName>
                    <ParamType>TableDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cd</ParamName>
                    <ParamType>ConglomerateDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>predList</ParamName>
                    <ParamType>OptimizablePredicateList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outerCost</ParamName>
                    <ParamType>CostEstimate</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>considerCost</MethodName>
            <MethodComment>/** 
 * Consider the cost of the given optimizable.  This method is like costOptimizable, above, but it is used when the Optimizable does not need help from the optimizer in costing the Optimizable (in practice, all Optimizables except FromBaseTable use this method. Caller is responsible for pushing all predicates which can be evaluated  prior to costing.
 * @param optimizable	The Optimizable
 * @param predList		The OptimizablePredicateList to apply
 * @param estimatedCost	The estimated cost of the given optimizable
 * @param outerCost		The cost of the tables outer to the one beingoptimizer - tells how many outer rows there are.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optimizable</ParamName>
                    <ParamType>Optimizable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>predList</ParamName>
                    <ParamType>OptimizablePredicateList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>estimatedCost</ParamName>
                    <ParamType>CostEstimate</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outerCost</ParamName>
                    <ParamType>CostEstimate</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDataDictionary</MethodName>
            <MethodComment>/** 
 * Return the DataDictionary that the Optimizer is using. This is useful when an Optimizable needs to call optimize() on a child ResultSetNode.
 * @return DataDictionary	DataDictionary that the Optimizer is using.
 */
</MethodComment>
            <ReturnType>DataDictionary</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>modifyAccessPaths</MethodName>
            <MethodComment>/** 
 * Modify the access path for each Optimizable, as necessary.  This includes things like adding result sets to translate from index rows to base rows.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOptimizedCost</MethodName>
            <MethodComment>/** 
 * Get the estimated cost of the optimized query 
 */
</MethodComment>
            <ReturnType>CostEstimate</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFinalCost</MethodName>
            <MethodComment>/** 
 * Get the final estimated cost of the optimized query.  This should be the cost that corresponds to the best overall join order chosen by the optimizer, and thus this method should only be called after optimization is complete (i.e. when modifying access paths).
 */
</MethodComment>
            <ReturnType>CostEstimate</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepForNextRound</MethodName>
            <MethodComment>/** 
 * Prepare for another round of optimization. This method is called before every "round" of optimization, where we define a "round" to be the period between the last time a call to getOptimizer() (on either a ResultSetNode or an OptimizerFactory) returned _this_ Optimizer and the time a call to this Optimizer's getNextPermutation() method returns FALSE.  Any re-initialization of state that is required before each round should be done in this method.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setOuterRows</MethodName>
            <MethodComment>/** 
 * Set the estimated number of outer rows - good for optimizing nested optimizables like subqueries and join nodes.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>outerRowCount</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNumberOfJoinStrategies</MethodName>
            <MethodComment>/** 
 * Get the number of join strategies supported by this optimizer.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tableLockThreshold</MethodName>
            <MethodComment>/** 
 * Get the maximum number of estimated rows touched in a table before we decide to open the table with table locking (as opposed to row locking.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getJoinStrategy</MethodName>
            <MethodComment>/** 
 * Gets a join strategy by number (zero-based).
 */
</MethodComment>
            <ReturnType>JoinStrategy</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>whichStrategy</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getJoinStrategy</MethodName>
            <MethodComment>/** 
 * Gets a join strategy by name.  Returns null if not found. The look-up is case-insensitive.
 */
</MethodComment>
            <ReturnType>JoinStrategy</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>whichStrategy</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLevel</MethodName>
            <MethodComment>/** 
 * Get the level of this optimizer.
 * @return The level of this optimizer.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>uniqueJoinWithOuterTable</MethodName>
            <MethodComment>/** 
 * Tells whether any of the tables outer to the current one has a uniqueness condition on the given predicate list, and if so, how many times each unique key can be seen by the current table.
 * @param predList		The predicate list to check
 * @return	&amp;lt;= 0 means there is no uniqueness condition&amp;gt; 0 means there is a uniqueness condition on an outer table, and the return value is the reciprocal of the maximum number of times the optimizer estimates that each unique key will be returned. For example, 0.5 means the optimizer thinks each distinct join key will be returned at most twice.
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>predList</ParamName>
                    <ParamType>OptimizablePredicateList</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>useStatistics</MethodName>
            <MethodComment>/** 
 * If statistics should be considered by the optimizer while optimizing  a query. The user may disable the use of statistics by setting the property derby.optimizer.useStatistics or by using the property useStatistics in a query.
 * @see #USE_STATISTICS
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMaxMemoryPerTable</MethodName>
            <MethodComment>/** 
 * @return the maximum number of bytes to be used per table.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOptimizableCount</MethodName>
            <MethodComment>/** 
 * Get the number of optimizables being considered by this Optimizer.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOptimizable</MethodName>
            <MethodComment>/** 
 * Get the ith (0-based) Optimizable being considered by this Optimizer.
 */
</MethodComment>
            <ReturnType>Optimizable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>idx</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateBestPlanMaps</MethodName>
            <MethodComment>/** 
 * Process (i.e. add, load, or remove) current best join order as the best one for some outer query or ancestor node, represented by another Optimizer or an instance of FromTable, respectively. Then iterate through our optimizableList and tell each Optimizable to do the same.  See Optimizable.updateBestPlan() for more on why this is necessary.
 * @param action Indicates whether to add, load, or remove the plan
 * @param planKey Object to use as the map key when adding/looking upa plan.  If this is an instance of Optimizer then it corresponds to an outer query; otherwise it's some Optimizable above this Optimizer that could potentially reject plans chosen by this Optimizer.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>action</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>planKey</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>