<Class>
    <Id>441</Id>
    <Package>org.apache.derby.iapi.sql.execute</Package>
    <ClassName>NoPutResultSet</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ResultSet</SuperInterface>
        <SuperInterface>RowLocationRetRowSource</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>NoPutResultSet  /** 
 * The NoPutResultSet interface is used to provide additional operations on result sets that can be used in returning rows up a ResultSet tree. &lt;p&gt; Since the ResulSet operations must also be supported by NoPutResultSets, we extend that interface here as well.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>ABSOLUTE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>RELATIVE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>FIRST</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>NEXT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>LAST</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PREVIOUS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TEMPORARY_RESULT_SET_NUMBER</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>markAsTopResultSet</MethodName>
            <MethodComment>/** 
 * Mark the ResultSet as the topmost one in the ResultSet tree. Useful for closing down the ResultSet on an error.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openCore</MethodName>
            <MethodComment>/** 
 * open a scan on the table. scan parameters are evaluated at each open, so there is probably some way of altering their values... &lt;p&gt; openCore() can only be called on a closed result set.  see reopenCore if you want to reuse an open result set. &lt;p&gt; For NoPutResultSet open() must only be called on the top ResultSet. Opening of NoPutResultSet's below the top result set are implemented by calling openCore.
 * @exception StandardException thrown if cursor finished.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reopenCore</MethodName>
            <MethodComment>/** 
 * reopen the scan.  behaves like openCore() but is  optimized where appropriate (e.g. where scanController has special logic for us).   &lt;p&gt; used by joiners &lt;p&gt; scan parameters are evaluated at each open, so there is probably some way of altering their values...  
 * @exception StandardException thrown if cursor finished.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNextRowCore</MethodName>
            <MethodComment>/** 
 * Return the requested values computed from the next row (if any) for which the restriction evaluates to true. &lt;p&gt; restriction and projection parameters are evaluated for each row.
 * @exception StandardException thrown on failure.
 * @return the next row in the result
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPointOfAttachment</MethodName>
            <MethodComment>/** 
 * Return the point of attachment for this subquery. (Only meaningful for Any and Once ResultSets, which can and will only be at the top of a ResultSet for a subquery.)
 * @return int	Point of attachment (result set number) for thissubquery.  (-1 if not a subquery - also Sanity violation)
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScanIsolationLevel</MethodName>
            <MethodComment>/** 
 * Return the isolation level of the scan in the result set. Only expected to be called for those ResultSets that contain a scan.
 * @return The isolation level of the scan (in TransactionController constants).
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTargetResultSet</MethodName>
            <MethodComment>/** 
 * Notify a NPRS that it is the source for the specified  TargetResultSet.  This is useful when doing bulk insert.
 * @param trs	The TargetResultSet.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>trs</ParamName>
                    <ParamType>TargetResultSet</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setNeedsRowLocation</MethodName>
            <MethodComment>/** 
 * Set whether or not the NPRS need the row location when acting as a row source.  (The target result set determines this.)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>needsRowLocation</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setHasDeferrableChecks</MethodName>
            <MethodComment>/** 
 * Set that we are acting on behalf of an insert result set that has deferrable check constraints
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEstimatedRowCount</MethodName>
            <MethodComment>/** 
 * Get the estimated row count from this result set.
 * @return	The estimated row count (as a double) from this result set.
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resultSetNumber</MethodName>
            <MethodComment>/** 
 * Get the number of this ResultSet, which is guaranteed to be unique within a statement.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCurrentRow</MethodName>
            <MethodComment>/** 
 * Set the current row to the row passed in.
 * @param row the new current row
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>requiresRelocking</MethodName>
            <MethodComment>/** 
 * Do we need to relock the row when going to the heap.
 * @return Whether or not we need to relock the row when going to the heap.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isForUpdate</MethodName>
            <MethodComment>/** 
 * Is this ResultSet or it's source result set for update
 * @return Whether or not the result set is for update.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateRow</MethodName>
            <MethodComment>/** 
 * Updates the resultSet's current row with it's new values after an update has been issued either using positioned update or JDBC's udpateRow method.
 * @param row new values for the currentRow
 * @param rowChanger holds information about row: what columns of it is tobe used for updating, and what underlying base table column each such column corresponds to.
 * @exception StandardException thrown on failure.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowChanger</ParamName>
                    <ParamType>RowChanger</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>markRowAsDeleted</MethodName>
            <MethodComment>/** 
 * Marks the resultSet's currentRow as deleted after a delete has been  issued by either by using positioned delete or JDBC's deleteRow method.
 * @exception StandardException thrown on failure.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>positionScanAtRowLocation</MethodName>
            <MethodComment>/** 
 * Positions the cursor in the specified rowLocation. Used for scrollable insensitive result sets in order to position the cursor back to a row that has already be visited.
 * @param rLoc row location of the current cursor row
 * @exception StandardException thrown on failure toget location from storage engine
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rLoc</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>