<Class>
    <Id>1811</Id>
    <Package>org.apache.derby.impl.jdbc</Package>
    <ClassName>UTF8Reader</ClassName>
    <SuperClass>Reader</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>UTF8Reader  /** 
 * Class for reading characters from streams encoded in the modified UTF-8 format. &lt;p&gt; Note that we often operate on a special Derby stream. A Derby stream is possibly different from a "normal" stream in two ways; an encoded length is inserted at the head of the stream, and if the encoded length is &lt;code&gt;0&lt;/code&gt; a Derby-specific end of stream marker is appended to the data. &lt;p&gt; If the underlying stream is capable of repositioning itself on request, this class supports multiple readers on the same source stream in such a way that the various readers do not interfere with each other (except for serializing access). Each reader instance will have its own pointer into the stream, and request that the stream repositions itself before calling read/skip on the stream.
 * @see PositionedStoreStream
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>READER_CLOSED</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MAXIMUM_BUFFER_SIZE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>in</FieldName>
            <FieldType>InputStream</FieldType>
        </Field>
        <Field>
            <FieldName>positionedIn</FieldName>
            <FieldType>PositionedStream</FieldType>
        </Field>
        <Field>
            <FieldName>rawStreamPos</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>utfCount</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>readerCharCount</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>buffer</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>charactersInBuffer</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>readPositionInBuffer</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>noMoreReads</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>parent</FieldName>
            <FieldType>ConnectionChild</FieldType>
        </Field>
        <Field>
            <FieldName>csd</FieldName>
            <FieldType>CharacterStreamDescriptor</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>UTF8Reader</MethodName>
            <MethodComment>/** 
 * Constructs a reader on top of the source UTF-8 encoded stream.
 * @param csd a description of and reference to the source stream
 * @param conChild the parent object / connection child
 * @param sync synchronization object used when accessing the underlyingdata stream
 * @throws IOException if reading from the underlying stream fails
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>csd</ParamName>
                    <ParamType>CharacterStreamDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conChild</ParamName>
                    <ParamType>ConnectionChild</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sync</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [buffersize=calculateBufferSize(csd)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Reads a single character from the stream.
 * @return A character or &lt;code&gt;-1&lt;/code&gt; if end of stream has been reached.
 * @throws IOException if the stream has been closed, or an exception israised while reading from the underlying stream
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Reads characters into an array.
 * @return The number of characters read, or &lt;code&gt;-1&lt;/code&gt; if the end ofthe stream has been reached.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cbuf</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>off</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>skip</MethodName>
            <MethodComment>/** 
 * Skips characters.
 * @param len the numbers of characters to skip
 * @return The number of characters actually skipped.
 * @throws IllegalArgumentException if the number of characters to skip isnegative
 * @throws IOException if accessing the underlying stream fails
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Close the reader, disallowing further reads.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readInto</MethodName>
            <MethodComment>/** 
 * Reads characters from the stream. &lt;p&gt; Due to internal buffering a smaller number of characters than what is requested might be returned. To ensure that the request is fulfilled, call this method in a loop until the requested number of characters is read or &lt;code&gt;-1&lt;/code&gt; is returned.
 * @param sb the destination buffer
 * @param len maximum number of characters to read
 * @return The number of characters read, or &lt;code&gt;-1&lt;/code&gt; if the end ofthe stream is reached.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sb</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readAsciiInto</MethodName>
            <MethodComment>/** 
 * Reads characters into an array as ASCII characters. &lt;p&gt; Due to internal buffering a smaller number of characters than what is requested might be returned. To ensure that the request is fulfilled, call this method in a loop until the requested number of characters is read or &lt;code&gt;-1&lt;/code&gt; is returned. &lt;p&gt; Characters outside the ASCII range are replaced with an out of range marker.
 * @param abuf the buffer to read into
 * @param off the offset into the destination buffer
 * @param len maximum number of characters to read
 * @return The number of characters read, or &lt;code&gt;-1&lt;/code&gt; if the end ofthe stream is reached.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>abuf</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>off</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>closeIn</MethodName>
            <MethodComment>/** 
 * Close the underlying stream if it is open.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>utfFormatException</MethodName>
            <MethodComment>/** 
 * Convenience method generating an  {@link UTFDataFormatException} andcleaning up the reader state.
 */
</MethodComment>
            <ReturnType>IOException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;closeIn;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fillBuffer</MethodName>
            <MethodComment>/** 
 * Fills the internal character buffer by decoding bytes from the stream.
 * @return &lt;code&gt;true&lt;/code&gt; if the end of the stream is reached,&lt;code&gt;false&lt;/code&gt; if there is apparently more data to be read.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resetUTF8Reader</MethodName>
            <MethodComment>/** 
 * Resets the reader. &lt;p&gt; This method is used internally to achieve better performance.
 * @see #reposition(long)
 * @throws IOException if resetting or reading from the stream fails
 * @throws StandardException if resetting the stream fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.positionedIn;reposition;[csd.getDataOffset()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reposition</MethodName>
            <MethodComment>/** 
 * Repositions the stream so that the next character read will be the character at the requested position. &lt;p&gt; There are three types of repositioning, ordered after increasing cost: &lt;ol&gt; &lt;li&gt;Reposition within current character buffer (small hops forwards and potentially backwards - in range 1 char to {@code MAXIMUM_BUFFER_SIZE} chars)&lt;/li&gt;&lt;li&gt;Forward stream from current position (hops forwards)&lt;/li&gt; &lt;li&gt;Reset stream and skip data (hops backwards)&lt;/li&gt; &lt;/ol&gt;
 * @param requestedCharPos 1-based requested character position
 * @throws IOException if resetting or reading from the stream fails
 * @throws StandardException if resetting the stream fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>requestedCharPos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [currentCharPos=readerCharCount - charactersInBuffer + readPositionInBuffer]</InnerVar>
                <InnerVar>long [difference=(requestedCharPos - 1) - currentCharPos]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>calculateBufferSize</MethodName>
            <MethodComment>/** 
 * Calculates an optimized buffer size. &lt;p&gt; The maximum size allowed is returned if the specified values don't give enough information to say a smaller buffer size is preferable.
 * @param csd stream descriptor
 * @return An (sub)optimal buffer size.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>csd</ParamName>
                    <ParamType>CharacterStreamDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [bufferSize=MAXIMUM_BUFFER_SIZE]</InnerVar>
                <InnerVar>long [knownLength=csd.getCharLength()]</InnerVar>
                <InnerVar>long [maxCharLength=csd.getMaxCharLength()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>persistentSkip</MethodName>
            <MethodComment>/** 
 * Skips the requested number of characters.
 * @param toSkip number of characters to skip
 * @throws EOFException if there are too few characters in the stream
 * @throws IOException if reading from the stream fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>toSkip</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [remaining=toSkip]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>