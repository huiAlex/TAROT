<Class>
    <Id>1063</Id>
    <Package>org.apache.derby.impl.store.raw.xact</Package>
    <ClassName>RowLocking3Escalate</ClassName>
    <SuperClass>ContainerLocking3</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RowLocking3Escalate  /** 
 * A locking policy that implements row level locking with isolation degree 3.
 * @see org.apache.derby.iapi.store.raw.LockingPolicy
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>RowLocking3Escalate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lf</ParamName>
                    <ParamType>LockFactory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lockContainer</MethodName>
            <MethodComment>/** 
 * Escalates Row Locking 3 to Container Locking 3. &lt;p&gt; This call is made by code which tracks the number of locks on a  container. When the number of locks exceeds the escalate threshold the caller creates this new locking policy, calls lockContainer(),  and substitues it for the old locking policy.  The lockContainer call determines which table lock to get (S or X), gets that table lock, and then releases the row locks on the table. It is assumed that this is called on a open container for lock only. &lt;p&gt;
 * @param t            Transaction to associate lock with.
 * @param container    Container to lock.
 * @param waitForLock  Ignored - will never wait for a lock.
 * @param forUpdate    Ignored, mode determined from current lock state.
 * @return true if the lock was obtained, false if it wasn't. False should only be returned if the waitForLock policy was set to "false," and the lock was unavailable.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>container</ParamName>
                    <ParamType>ContainerHandle</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>waitForLock</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forUpdate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [gotLock=super.lockContainer(t,container,waitForLock,forUpdate)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>lf;unlockGroup;[t.getCompatibilitySpace(), t, new EscalateContainerKey(container.getId())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>