<Class>
    <Id>1394</Id>
    <Package>org.apache.derby.iapi.services.monitor</Package>
    <ClassName>ModuleFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ModuleFactory  /** 
 * The monitor provides a central registry for all modules in the system, and manages loading, starting, and finding them.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>findModule</MethodName>
            <MethodComment>/** 
 * Find the module in the system with the given module protocol, protocolVersion and identifier.
 * @return The module instance if found, or null.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>service</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>protocol</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>identifier</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getServiceName</MethodName>
            <MethodComment>/** 
 * Return the name of the service that the passed in module lives in.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>serviceModule</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLocale</MethodName>
            <MethodComment>/** 
 * Return the locale of the service that the passed in module lives in. Will return null if no-locale has been defined.
 */
</MethodComment>
            <ReturnType>Locale</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>serviceModule</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLocaleFromString</MethodName>
            <MethodComment>/** 
 * Translate a string of the form ll[_CC[_variant]] to a Locale. This is in the Monitor because we want this translation to be in only one place in the code.
 */
</MethodComment>
            <ReturnType>Locale</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>localeDescription</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLocale</MethodName>
            <MethodComment>/** 
 * Set the locale for the service *outside* of boot time.
 * @param userDefinedLocale	A String in the form xx_YY, where xx is thelanguage code and YY is the country code.
 * @return		The new Locale for the service
 * @exception StandardException	Thrown on error
 */
</MethodComment>
            <ReturnType>Locale</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>serviceModule</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>userDefinedLocale</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLocale</MethodName>
            <MethodComment>/** 
 * Set the locale for the service at boot time. The passed-in properties must be the one passed to the boot method.
 * @exception StandardException	Derby error.
 */
</MethodComment>
            <ReturnType>Locale</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>serviceProperties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>userDefinedLocale</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getServiceType</MethodName>
            <MethodComment>/** 
 * Return the PersistentService object for a service. Will return null if the service does not exist.
 */
</MethodComment>
            <ReturnType>PersistentService</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>serviceModule</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getServiceProvider</MethodName>
            <MethodComment>/** 
 * Return the PersistentService for a subsubprotocol.
 * @return the PersistentService or null if it does not exist
 * @exception StandardException
 */
</MethodComment>
            <ReturnType>PersistentService</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>subSubProtocol</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getApplicationProperties</MethodName>
            <MethodComment>/** 
 * Return the application set of properties which correspond to the set of properties in the file derby.properties.
 */
</MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shutdown</MethodName>
            <MethodComment>/** 
 * Shut down the complete system that was started by this Monitor. Will cause the stop() method to be called on each loaded module.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shutdown</MethodName>
            <MethodComment>/** 
 * Shut down a service that was started by this Monitor. Will cause the stop() method to be called on each loaded module. Requires that a context stack exist.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>service</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>classFromIdentifier</MethodName>
            <MethodComment>/** 
 * Obtain a class that supports the given identifier.
 * @param identifier	identifer to associate with class
 * @return a reference InstanceGetter
 * @exception StandardException See Monitor.classFromIdentifier
 */
</MethodComment>
            <ReturnType>InstanceGetter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>identifier</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newInstanceFromIdentifier</MethodName>
            <MethodComment>/** 
 * Obtain an new instance of a class that supports the given identifier.
 * @param identifier	identifer to associate with class
 * @return a reference to a newly created object
 * @exception StandardException See Monitor.newInstanceFromIdentifier
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>identifier</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEnvironment</MethodName>
            <MethodComment>/** 
 * Return the environment object that this system was booted in. This is a free form object that is set by the method the system is booted. For example when running in a Marimba system it is set to the maribma application context. In most environments it will be set to a java.io.File object representing the system home directory. Code that call this method usualy have predefined knowledge of the type of the returned object, e.g. Marimba store code knows that this will be set to a marimba application context.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getServiceList</MethodName>
            <MethodComment>/** 
 * Return an array of the service identifiers that are running and implement the passed in protocol (java interface class name). This list is a snapshot of the current running systesm, once the call returns the service may have been shutdown or new ones added.
 * @return The list of service names, if no services exist thatimplement the protocol an array with zero elements is returned.
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>protocol</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startPersistentService</MethodName>
            <MethodComment>/** 
 * Start a persistent service. &lt;BR&gt; &lt;B&gt;Do not call directly - use Monitor.startPersistentService()&lt;/B&gt; &lt;P&gt; The poperty set passed in is for boot options for the modules required to start the service. It does not support defining different or new modules implementations.
 * @param serviceName Name of the service to be started
 * @param properties Property set made available to all modules bootedfor this service, through their ModuleControl.boot method.
 * @return true if the service type is handled by the monitor, false if it isn't
 * @exception StandardException An attempt to start the service failed.
 * @see Monitor#startPersistentService
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>serviceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createPersistentService</MethodName>
            <MethodComment>/** 
 * Create a persistent service. &lt;BR&gt; &lt;B&gt;Do not call directly - use Monitor.startPersistentService()&lt;/B&gt;
 * @exception StandardException An attempt to create the service failed.
 * @see Monitor#createPersistentService
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>factoryInterface</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>serviceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removePersistentService</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startNonPersistentService</MethodName>
            <MethodComment>/** 
 * Start a non-persistent service. &lt;BR&gt; &lt;B&gt;Do not call directly - use Monitor.startNonPersistentService()&lt;/B&gt;
 * @exception StandardException An attempt to start the service failed.
 * @see Monitor#startNonPersistentService
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>factoryInterface</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>serviceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCanonicalServiceName</MethodName>
            <MethodComment>/** 
 * Canonicalize a service name, mapping different user-specifications of a database name onto a single, standard name.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>userSpecifiedName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findService</MethodName>
            <MethodComment>/** 
 * Find a service. &lt;BR&gt; &lt;B&gt;Do not call directly - use Monitor.findService()&lt;/B&gt;
 * @return a refrence to a module represeting the service or null if the service does not exist.
 * @see Monitor#findService
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>protocol</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>identifier</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startModule</MethodName>
            <MethodComment>/** 
 * Start a module. &lt;BR&gt; &lt;B&gt;Do not call directly - use Monitor.startSystemModule() or Monitor.bootServiceModule()&lt;/B&gt;
 * @exception StandardException An attempt to start the module failed.
 * @see Monitor#startSystemModule
 * @see Monitor#bootServiceModule
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>create</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>service</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>protocol</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>identifier</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSystemStreams</MethodName>
            <MethodComment>/** 
 * Get the defined default system streams object.
 */
</MethodComment>
            <ReturnType>InfoStreams</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startServices</MethodName>
            <MethodComment>/** 
 * Start all services identified by derby.service. in the property set. If bootAll is true the services that are persistent will be booted.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bootAll</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getJVMProperty</MethodName>
            <MethodComment>/** 
 * Return a property from the JVM's system set. In a Java2 environment this will be executed as a privileged block if and only if the property starts with 'derby.'. If a SecurityException occurs, null is returned.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDaemonThread</MethodName>
            <MethodComment>/** 
 * Get a newly created background thread. The thread is set to be a daemon but is not started.
 */
</MethodComment>
            <ReturnType>Thread</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>task</ParamName>
                    <ParamType>Runnable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>setMinPriority</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isDaemonThread</MethodName>
            <MethodComment>/** 
 * Check if a thread is a daemon thread created by  {@link #getDaemonThread}.
 * @param thread the thread to check
 * @return {@code true} if {@code thread} was created by{@code getDaemonThread()},  {@code false} otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>thread</ParamName>
                    <ParamType>Thread</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEngineVersion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ProductVersionHolder</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUUIDFactory</MethodName>
            <MethodComment>/** 
 * Get the UUID factory for the system.  The UUID factory provides methods to create and recreate database unique identifiers.
 */
</MethodComment>
            <ReturnType>org.apache.derby.iapi.services.uuid.UUIDFactory</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTimerFactory</MethodName>
            <MethodComment>/** 
 * Get the Timer factory for the system. The Timer factory provides access to Timer objects for various purposes.
 * @return the system's Timer factory.
 */
</MethodComment>
            <ReturnType>org.apache.derby.iapi.services.timer.TimerFactory</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>