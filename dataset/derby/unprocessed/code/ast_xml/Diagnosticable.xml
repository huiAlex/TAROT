<Class>
    <Id>1804</Id>
    <Package>org.apache.derby.iapi.services.diag</Package>
    <ClassName>Diagnosticable</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Diagnosticable  /** 
 * The Diagnosticable class implements the Diagnostics protocol, and can be used as the parent class for all other Diagnosticable objects.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>diag</MethodName>
            <MethodComment>/** 
 * Default implementation of diagnostic on the object. &lt;p&gt; This routine returns a string with whatever diagnostic information you would like to provide about this associated object passed in the init() call. &lt;p&gt; This routine should be overriden by a real implementation of the diagnostic information you would like to provide. &lt;p&gt;
 * @return A string with diagnostic information about the object.
 * @exception StandardException  Standard Derby exception policy
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>diag_detail</MethodName>
            <MethodComment>/** 
 * Default implementation of detail diagnostic on the object. &lt;p&gt; This interface provides a way for an object to pass back pieces of information as requested by the caller.  The information is passed back and forth through the properties argument.  It is expected that the caller knows what kind of information to ask for, and correctly handles the situation when the diagnostic object can't provide the information. &lt;p&gt; As an example assume an object TABLE exists, and that we have created an object D_TABLE that knows how to return the number of pages in the TABLE object.  The code to get that information out would looks something like the following: &lt;p&gt; print_num_pages(Object table) { Properties prop = new Properties(); prop.put(Page.DIAG_NUM_PAGES,        ""); DiagnosticUtil.findDiagnostic(table).diag_detail(prop); System.out.println( "number of pages = " + prop.getProperty(Page.DIAG_NUM_PAGES)); } &lt;p&gt; This routine should be overriden if there is detail diagnostics to be provided by a real implementation. &lt;p&gt;
 * @exception StandardException  Standard Derby exception policy
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prop</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>