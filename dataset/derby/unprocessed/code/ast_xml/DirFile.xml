<Class>
    <Id>462</Id>
    <Package>org.apache.derby.impl.io</Package>
    <ClassName>DirFile</ClassName>
    <SuperClass>File</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>StorageFile</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DirFile  /** 
 * This class provides a disk based implementation of the StorageFile interface. It is used by the database engine to access persistent data and transaction logs under the directory (default) subsubprotocol.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>lockFileOpen</FieldName>
            <FieldType>RandomAccessFile</FieldType>
        </Field>
        <Field>
            <FieldName>lockFileChannel</FieldName>
            <FieldType>FileChannel</FieldType>
        </Field>
        <Field>
            <FieldName>dbLock</FieldName>
            <FieldType>FileLock</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DirFile</MethodName>
            <MethodComment>/** 
 * Construct a DirFile from a path name.
 * @param path The path name.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DirFile</MethodName>
            <MethodComment>/** 
 * Construct a DirFile from a directory name and a file name.
 * @param directoryName The directory part of the path name.
 * @param fileName The name of the file within the directory.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>directoryName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DirFile</MethodName>
            <MethodComment>/** 
 * Construct a DirFile from a directory name and a file name.
 * @param directoryName The directory part of the path name.
 * @param fileName The name of the file within the directory.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>directoryName</ParamName>
                    <ParamType>DirFile</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParentDir</MethodName>
            <MethodComment>/** 
 * Get the name of the parent directory if this name includes a parent.
 * @return An StorageFile denoting the parent directory of this StorageFile, if it has a parent, null ifit does not have a parent.
 */
</MethodComment>
            <ReturnType>StorageFile</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [parent=getParent()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOutputStream</MethodName>
            <MethodComment>/** 
 * Creates an output stream from a file name.
 * @return an output stream suitable for writing to the file.
 * @exception FileNotFoundException if the file exists but is a directoryrather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason.
 */
</MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FileNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOutputStream</MethodName>
            <MethodComment>/** 
 * Creates an output stream from a file name.
 * @param append If true then data will be appended to the end of the file, if it already exists.If false and a normal file already exists with this name the file will first be truncated to zero length.
 * @return an output stream suitable for writing to the file.
 * @exception FileNotFoundException if the file exists but is a directoryrather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason.
 */
</MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>append</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [exists=exists()]</InnerVar>
                <InnerVar>OutputStream [result=new FileOutputStream(this,append)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FileNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInputStream</MethodName>
            <MethodComment>/** 
 * Creates an input stream from a file name.
 * @return an input stream suitable for reading from the file.
 * @exception FileNotFoundException if the file is not found.
 */
</MethodComment>
            <ReturnType>InputStream</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FileNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExclusiveFileLock</MethodName>
            <MethodComment>/** 
 * Get an exclusive lock. This is used to ensure that two or more JVMs do not open the same database at the same time.
 * @return EXCLUSIVE_FILE_LOCK_NOT_AVAILABLE if the lock cannot be acquired because it is already held.&lt;br&gt;EXCLUSIVE_FILE_LOCK if the lock was successfully acquired.&lt;br&gt; NO_FILE_LOCK_SUPPORT if the system does not support exclusive locks.&lt;br&gt;
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [validExclusiveLock=false]</InnerVar>
                <InnerVar>int [status]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>releaseExclusiveFileLock</MethodName>
            <MethodComment>/** 
 * Release the resource associated with an earlier acquired exclusive lock
 * @see #getExclusiveFileLock
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRandomAccessFile</MethodName>
            <MethodComment>/** 
 * Get a random access (read/write) file.
 * @param mode "r", "rw", "rws", or "rwd". The "rws" and "rwd" modes specifythat the data is to be written to persistent store, consistent with the java.io.RandomAccessFile class ("synchronized" with the persistent storage, in the file system meaning of the word "synchronized").  However the implementation is not required to implement the "rws" or "rwd" modes. The implementation may treat "rws" and "rwd" as "rw". It is up to the user of this interface to call the StorageRandomAccessFile.sync method. If the "rws" or "rwd" modes are supported and the RandomAccessFile was opened in "rws" or "rwd" mode then the implementation of StorageRandomAccessFile.sync need not do anything.
 * @return an object that can be used for random access to the file.
 * @exception IllegalArgumentException if the mode argument is not equal to one of "r", "rw".
 * @exception FileNotFoundException if the file exists but is a directory rather than a regularfile, or cannot be opened or created for any other reason .
 */
</MethodComment>
            <ReturnType>StorageRandomAccessFile</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mode</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FileNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>renameTo</MethodName>
            <MethodComment>/** 
 * Rename the file denoted by this name.  Note that StorageFile objects are immutable. This method renames the  underlying file, it does not change this StorageFile object. The  StorageFile object denotes the same name as before, however the exists() method will return false after the renameTo method executes successfully. &lt;p&gt; It is not specified whether this method will succeed if a file  already exists under the new name.
 * @param newName the new name.
 * @return &lt;b&gt;true&lt;/b&gt; if the rename succeeded, &lt;b&gt;false&lt;/b&gt; if not.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newName</ParamName>
                    <ParamType>StorageFile</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [rename_status=super.renameTo((File)newName)]</InnerVar>
                <InnerVar>int [retry_count=1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deleteAll</MethodName>
            <MethodComment>/** 
 * Deletes the named file and, if it is a directory, all the files and directories it contains.
 * @return &lt;b&gt;true&lt;/b&gt; if the named file or directory is successfully deleted, &lt;b&gt;false&lt;/b&gt; if not
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String[] [childList=super.list()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>limitAccessToOwner</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>FileUtil;limitAccessToOwner;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>