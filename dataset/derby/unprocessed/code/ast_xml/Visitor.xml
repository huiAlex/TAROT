<Class>
    <Id>539</Id>
    <Package>org.apache.derby.iapi.sql.compile</Package>
    <ClassName>Visitor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Visitor  /** 
 * A visitor is an object that traverses the querytree and performs some action. 
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment>/** 
 * This is the default visit operation on a  QueryTreeNode.  It just returns the node.  This will typically suffice as the default visit  operation for most visitors unless the visitor  needs to count the number of nodes visited or  something like that. &lt;p&gt; Visitors will overload this method by implementing a version with a signature that matches a specific type of node.  For example, if I want to do something special with aggregate nodes, then that Visitor will implement a  &lt;I&gt; visit(AggregateNode node)&lt;/I&gt; method which does the aggregate specific processing.
 * @param node 	the node to process
 * @return a query tree node.  Often times this isthe same node that was passed in, but Visitors that replace nodes with other nodes will use this to return the new replacement node.
 * @exception StandardException may be throw an erroras needed by the visitor (i.e. may be a normal error if a particular node is found, e.g. if checking  a group by, we don't expect to find any ColumnReferences that aren't under an AggregateNode -- the easiest thing to do is just throw an error when we find the questionable node).
 */
</MethodComment>
            <ReturnType>Visitable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Visitable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitChildrenFirst</MethodName>
            <MethodComment>/** 
 * Method that is called to see if  {@code visit()} should be called onthe children of  {@code node} before it is called on {@code node} itself.If this method always returns  {@code true}, the visitor will walk the tree bottom-up. If it always returns  {@code false}, the tree is visited top-down.
 * @param node the top node of a sub-tree about to be visited
 * @return {@code true} if {@code node}'s children should be visited before  {@code node},  {@code false} otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Visitable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stopTraversal</MethodName>
            <MethodComment>/** 
 * Method that is called to see if query tree traversal should be stopped before visiting all nodes. Useful for short circuiting traversal if we already know we are done.
 * @return true/false
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>skipChildren</MethodName>
            <MethodComment>/** 
 * Method that is called to indicate whether we should skip all nodes below this node for traversal.  Useful if we want to effectively ignore/prune all branches under a particular  node.   &lt;p&gt; Differs from stopTraversal() in that it only affects subtrees, rather than the entire traversal.
 * @param node 	the node to process
 * @return true/false
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Visitable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>