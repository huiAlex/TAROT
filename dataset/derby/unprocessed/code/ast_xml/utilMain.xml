<Class>
    <Id>956</Id>
    <Package>org.apache.derby.impl.tools.ij</Package>
    <ClassName>utilMain</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>utilMain  /** 
 * This class is utilities specific to the two ij Main's. This factoring enables sharing the functionality for single and dual connection ij runs.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>commandGrabber</FieldName>
            <FieldType>StatementFinder[]</FieldType>
        </Field>
        <Field>
            <FieldName>charStream</FieldName>
            <FieldType>UCode_CharStream</FieldType>
        </Field>
        <Field>
            <FieldName>ijTokMgr</FieldName>
            <FieldType>ijTokenManager</FieldType>
        </Field>
        <Field>
            <FieldName>ijParser</FieldName>
            <FieldType>ij</FieldType>
        </Field>
        <Field>
            <FieldName>connEnv</FieldName>
            <FieldType>ConnectionEnv[]</FieldType>
        </Field>
        <Field>
            <FieldName>currCE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>numConnections</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>fileInput</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>initialFileInput</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>mtUse</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>firstRun</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>out</FieldName>
            <FieldType>LocalizedOutput</FieldType>
        </Field>
        <Field>
            <FieldName>ignoreErrors</FieldName>
            <FieldType>Hashtable</FieldType>
        </Field>
        <Field>
            <FieldName>showErrorCode</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>ijExceptionTrace</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BUFFEREDFILESIZE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>oldGrabbers</FieldName>
            <FieldType>Stack</FieldType>
        </Field>
        <Field>
            <FieldName>oldGrabbers</FieldName>
            <FieldType>StatementFinder</FieldType>
        </Field>
        <Field>
            <FieldName>langUtil</FieldName>
            <FieldType>LocalizedResource</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>utilMain</MethodName>
            <MethodComment>/** 
 * Set up the test to run with 'numConnections' connections/users.
 * @param numConnections	The number of connections/users to test.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numConnections</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>LocalizedOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ijFatalException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>utilMain</MethodName>
            <MethodComment>/** 
 * Set up the test to run with 'numConnections' connections/users. This overload allows the choice of whether the system properties will be used or not.
 * @param numConnections	The number of connections/users to test.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numConnections</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>LocalizedOutput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>loadSystemProperties</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ijFatalException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>utilMain</MethodName>
            <MethodComment>/** 
 * Set up the test to run with 'numConnections' connections/users.
 * @param numConnections	The number of connections/users to test.
 * @param ignoreErrors		A list of errors to ignore.  If null,all errors are printed out and nothing is fatal.  If non-null, if an error is hit and it is in this list, it is silently	 ignore.  Otherwise, an ijFatalException is thrown.  ignoreErrors is used for stress tests.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numConnections</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>LocalizedOutput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ignoreErrors</ParamName>
                    <ParamType>Hashtable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ijFatalException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initFromEnvironment</MethodName>
            <MethodComment>/** 
 * Initialize the connections from the environment.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ijParser;initFromEnvironment;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>go</MethodName>
            <MethodComment>/** 
 * run ij over the specified input, sending output to the specified output. Any prior input and output will be lost.
 * @param in source for input to ij
 * @param out sink for output from ij
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>LocalizedInput[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>LocalizedOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ijParser;setConnection;[connEnv[currCE], (numConnections &gt; 1)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;runScriptGuts;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;cleanupGo;[in]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ijFatalException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>goScript</MethodName>
            <MethodComment>/** 
 * Support to run a script. Performs minimal setup to set the passed in connection into the existing ij setup, ConnectionEnv.
 * @param conn
 * @param in
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>LocalizedInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>connEnv[0];addSession;[conn, (String)null]</InnerMethodInvoke>
                <InnerMethodInvoke>ijParser;setConnection;[connEnv[0], (numConnections &gt; 1)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;supportIJProperties;[connEnv[0]]</InnerMethodInvoke>
                <InnerMethodInvoke>commandGrabber[0];ReInit;[in]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>supportIJProperties</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>env</ParamName>
                    <ParamType>ConnectionEnv</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [showNoCountForSelect=Boolean.valueOf(util.getSystemProperty("ij.showNoCountForSelect")).booleanValue()]</InnerVar>
                <InnerVar>boolean [showNoConnectionsAtStart=Boolean.valueOf(util.getSystemProperty("ij.showNoConnectionsAtStart")).booleanValue()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>JDBCDisplayUtil;setShowSelectCount;[!showNoCountForSelect]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runScriptGuts</MethodName>
            <MethodComment>/** 
 * Run the guts of the script. Split out to allow calling from the full ij and the minimal goScript.
 * @return The number of errors seen in the script.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [scriptErrorCount=0]</InnerVar>
                <InnerVar>boolean [done=false]</InnerVar>
                <InnerVar>String [command=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cleanupGo</MethodName>
            <MethodComment>/** 
 * Perform cleanup after a script has been run. Close the input streams if required and shutdown derby on an exit.
 * @param in
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>LocalizedInput[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>displayResult</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>LocalizedOutput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>ijResult</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conn</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doCatch</MethodName>
            <MethodComment>/** 
 * catch processing on failed commands. This really ought to be in ij somehow, but it was easier to catch in Main.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleSQLException</MethodName>
            <MethodComment>/** 
 * This routine displays SQL exceptions and decides whether they are fatal or not, based on the ignoreErrors field. If they are fatal, an ijFatalException is thrown. Lifted from ij/util.java:ShowSQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>LocalizedOutput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>SQLException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [errorCode]</InnerVar>
                <InnerVar>String [sqlState=null]</InnerVar>
                <InnerVar>SQLException [fatalException=null]</InnerVar>
                <InnerVar>boolean [syntaxErrorOccurred=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ijFatalException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doTrace</MethodName>
            <MethodComment>/** 
 * stack trace dumper
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;flush;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newInput</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FileInputStream [newFile=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>oldGrabbers;push;[commandGrabber[currCE]]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newResourceInput</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resourceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InputStream [is=util.getResourceAsStream(resourceName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>oldGrabbers;push;[commandGrabber[currCE]]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doPrompt</MethodName>
            <MethodComment>/** 
 * REMIND: eventually this might be part of StatementFinder, used at each carriage return to show that it is still "live" when it is reading multi-line input.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newStatement</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>LocalizedOutput</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;flush;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setMtUse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkScrollableCursor</MethodName>
            <MethodComment>/** 
 * Check that the cursor is scrollable.
 * @param rs the ResultSet to check
 * @param operation which operation this is checked for
 * @exception ijException if the cursor isn't scrollable
 * @exception SQLException if a database error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rs</ParamName>
                    <ParamType>ResultSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ijException</ExceptionType>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>absolute</MethodName>
            <MethodComment>/** 
 * Position on the specified row of the specified ResultSet.
 * @param rs	The specified ResultSet.
 * @param row	The row # to move to.(Negative means from the end of the result set.)
 * @return	NULL.
 * @exception SQLException thrown on error.(absolute() not supported pre-JDBC2.0)
 */
</MethodComment>
            <ReturnType>ijResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rs</ParamName>
                    <ParamType>ResultSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkScrollableCursor;[rs, "ABSOLUTE"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>relative</MethodName>
            <MethodComment>/** 
 * Move the cursor position by the specified amount.
 * @param rs	The specified ResultSet.
 * @param row	The # of rows to move.(Negative means toward the beginning of the result set.)
 * @return	NULL.
 * @exception SQLException thrown on error.(relative() not supported pre-JDBC2.0)
 */
</MethodComment>
            <ReturnType>ijResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rs</ParamName>
                    <ParamType>ResultSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkScrollableCursor;[rs, "RELATIVE"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>beforeFirst</MethodName>
            <MethodComment>/** 
 * Position before the first row of the specified ResultSet and return NULL to the user.
 * @param rs	The specified ResultSet.
 * @return	NULL.
 * @exception SQLException thrown on error.(beforeFirst() not supported pre-JDBC2.0)
 */
</MethodComment>
            <ReturnType>ijResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rs</ParamName>
                    <ParamType>ResultSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkScrollableCursor;[rs, "BEFORE FIRST"]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;beforeFirst;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>first</MethodName>
            <MethodComment>/** 
 * Position on the first row of the specified ResultSet and return that row to the user.
 * @param rs	The specified ResultSet.
 * @return	The first row of the ResultSet.
 * @exception SQLException thrown on error.(first() not supported pre-JDBC2.0)
 */
</MethodComment>
            <ReturnType>ijResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rs</ParamName>
                    <ParamType>ResultSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkScrollableCursor;[rs, "FIRST"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>afterLast</MethodName>
            <MethodComment>/** 
 * Position after the last row of the specified ResultSet and return NULL to the user.
 * @param rs	The specified ResultSet.
 * @return	NULL.
 * @exception SQLException thrown on error.(afterLast() not supported pre-JDBC2.0)
 */
</MethodComment>
            <ReturnType>ijResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rs</ParamName>
                    <ParamType>ResultSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkScrollableCursor;[rs, "AFTER LAST"]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;afterLast;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>last</MethodName>
            <MethodComment>/** 
 * Position on the last row of the specified ResultSet and return that row to the user.
 * @param rs	The specified ResultSet.
 * @return	The last row of the ResultSet.
 * @exception SQLException thrown on error.(last() not supported pre-JDBC2.0)
 */
</MethodComment>
            <ReturnType>ijResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rs</ParamName>
                    <ParamType>ResultSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkScrollableCursor;[rs, "LAST"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>previous</MethodName>
            <MethodComment>/** 
 * Position on the previous row of the specified ResultSet and return that row to the user.
 * @param rs	The specified ResultSet.
 * @return	The previous row of the ResultSet.
 * @exception SQLException thrown on error.(previous() not supported pre-JDBC2.0)
 */
</MethodComment>
            <ReturnType>ijResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rs</ParamName>
                    <ParamType>ResultSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkScrollableCursor;[rs, "PREVIOUS"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentRowNumber</MethodName>
            <MethodComment>/** 
 * Get the current row number
 * @param rs	The specified ResultSet.
 * @return	The current row number
 * @exception SQLException thrown on error.(getRow() not supported pre-JDBC2.0)
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rs</ParamName>
                    <ParamType>ResultSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkScrollableCursor;[rs, "GETCURRENTROWNUMBER"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>