<Class>
    <Id>478</Id>
    <Package>org.apache.derby.impl.store.access</Package>
    <ClassName>RllRAMAccessManager</ClassName>
    <SuperClass>RAMAccessManager</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RllRAMAccessManager  /** 
 * Implements the row level locking accessmanager.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>system_lock_level</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>RllRAMAccessManager</MethodName>
            <MethodComment>/** 
 * Constructors for This class:
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSystemLockLevel</MethodName>
            <MethodComment>/** 
 * Return the locking level of the system. &lt;p&gt; This routine controls the lowest level of locking enabled for all locks for all tables accessed through this accessmanager.  The concrete  implementation may set this value always to table level locking for a client configuration, or it may set it to row level locking for a server configuration. &lt;p&gt; If TransactionController.MODE_RECORD is returned table may either be locked at table or row locking depending on the type of access expected (ie. level 3 will require table locking for heap scans.)
 * @return TransactionController.MODE_TABLE if only table locking allowed,else returns TransactionController.MODE_RECORD.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bootLookupSystemLockLevel</MethodName>
            <MethodComment>/** 
 * Query property system to get the System lock level. &lt;p&gt; This routine will be called during boot after access has booted far  enough, to allow access to the property conglomerate.  This routine will call the property system and set the value to be returned by getSystemLockLevel(). &lt;p&gt;
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tc</ParamName>
                    <ParamType>TransactionController</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>