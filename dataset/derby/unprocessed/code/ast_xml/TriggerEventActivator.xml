<Class>
    <Id>140</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>TriggerEventActivator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TriggerEventActivator  /** 
 * Responsible for firing a trigger or set of triggers based on an event.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>lcc</FieldName>
            <FieldType>LanguageConnectionContext</FieldType>
        </Field>
        <Field>
            <FieldName>triggerInfo</FieldName>
            <FieldType>TriggerInfo</FieldType>
        </Field>
        <Field>
            <FieldName>tec</FieldName>
            <FieldType>InternalTriggerExecutionContext</FieldType>
        </Field>
        <Field>
            <FieldName>executors</FieldName>
            <FieldType>GenericTriggerExecutor[][]</FieldType>
        </Field>
        <Field>
            <FieldName>activation</FieldName>
            <FieldType>Activation</FieldType>
        </Field>
        <Field>
            <FieldName>cc</FieldName>
            <FieldType>ConnectionContext</FieldType>
        </Field>
        <Field>
            <FieldName>statementText</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>dmlType</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>tableId</FieldName>
            <FieldType>UUID</FieldType>
        </Field>
        <Field>
            <FieldName>tableName</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>TriggerEventActivator</MethodName>
            <MethodComment>/** 
 * Basic constructor
 * @param lcc			the lcc
 * @param triggerInfo	the trigger information 
 * @param dmlType		Type of DML for which this trigger is being fired.
 * @param activation	the activation.
 * @param aiCounters	vector of ai counters 
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lcc</ParamName>
                    <ParamType>LanguageConnectionContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>triggerInfo</ParamName>
                    <ParamType>TriggerInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dmlType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>aiCounters</ParamName>
                    <ParamType>AutoincrementCounter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setupExecutors;[triggerInfo]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reopen</MethodName>
            <MethodComment>/** 
 * Reopen the trigger activator.  Just creates a new trigger execution context.  Note that close() still must be called when you are done -- you cannot just do a reopen() w/o a first doing a close.
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setupExecutors;[triggerInfo]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupExecutors</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>triggerInfo</ParamName>
                    <ParamType>TriggerInfo</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;List&lt;TriggerDescriptor&gt;&gt; [executorLists=new ArrayList&lt;List&lt;TriggerDescriptor&gt;&gt;(TriggerEvent.MAX_EVENTS)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>notifyEvent</MethodName>
            <MethodComment>/** 
 * Handle the given event.
 * @param event	a trigger event
 * @param brs the before result set.  Typicallya TemporaryRowHolderResultSet but sometimes a BulkTableScanResultSet
 * @param ars the after result set. Typicallya TemporaryRowHolderResultSet but sometimes a BulkTableScanResultSet
 * @param colsReadFromTable   columns required from the trigger tableby the triggering sql
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>event</ParamName>
                    <ParamType>TriggerEvent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>brs</ParamName>
                    <ParamType>CursorResultSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ars</ParamName>
                    <ParamType>CursorResultSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>colsReadFromTable</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [eventNumber=event.getNumber()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tec;setCurrentTriggerEvent;[event]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cleanup</MethodName>
            <MethodComment>/** 
 * Clean up and release resources.
 * @exception StandardException on unexpected error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>