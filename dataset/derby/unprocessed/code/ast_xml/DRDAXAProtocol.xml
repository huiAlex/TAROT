<Class>
    <Id>544</Id>
    <Package>org.apache.derby.impl.drda</Package>
    <ClassName>DRDAXAProtocol</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DRDAXAProtocol  /** 
 * This class translates DRDA XA protocol from an application requester to XA calls for Derby and then translates the results from Derby to DRDA for return to the application requester. This class requires the use of javax.transaction.xa classes from j2ee, so is separated from DRDAConnThread, because of the additional library requirements
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>connThread</FieldName>
            <FieldType>DRDAConnThread</FieldType>
        </Field>
        <Field>
            <FieldName>reader</FieldName>
            <FieldType>DDMReader</FieldType>
        </Field>
        <Field>
            <FieldName>writer</FieldName>
            <FieldType>DDMWriter</FieldType>
        </Field>
        <Field>
            <FieldName>xid</FieldName>
            <FieldType>Xid</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DRDAXAProtocol</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>connThread</ParamName>
                    <ParamType>DRDAConnThread</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseSYNCCTL</MethodName>
            <MethodComment>/** 
 * Parse SYNCCTL - Parse SYNCCTL command for XAMGR lvl 7
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [codePoint=reader.getCodePoint(CodePoint.SYNCTYPE)]</InnerVar>
                <InnerVar>int [syncType=parseSYNCTYPE()]</InnerVar>
                <InnerVar>int [xaflags=0]</InnerVar>
                <InnerVar>boolean [readXAFlags=false]</InnerVar>
                <InnerVar>Xid [xid=null]</InnerVar>
                <InnerVar>long [xaTimeout=-1]</InnerVar>
                <InnerVar>boolean [readXATimeout=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>reader;markCollection;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DRDAProtocolException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseSYNCTYPE</MethodName>
            <MethodComment>/** 
 * parse SYNCTYPE for XAMGR lvl 7 return synctype value  CodePoint.SYNCTYPE_NEW_UOW -&amp;gt; XAResource.start() CodePoint.SYNCTYPE_END_UOW -&amp;gt; XAResource.end() CodePoint.SYNCTYPE_PREPARE -&amp;gt; XAResource.prepare() CodePoint.SYNCTYPE_MIGRATE -&amp;gt; not supported  //SYNCPT MGR LEVEL 5 CodePoint.SYNCTYPE_REQ_COMMIT -&amp;gt; not supported //SYNCPT MGR LEVEL 5 CodePoint.SYNCTYPE_COMMITTED -&amp;gt; XAResource.commit()   or local commit for null XID CodePoint.SYNCTYPE_REQ_LOG -&amp;gt;  not supported CodePoint.SYNCTYPE_REQ_FORGET -&amp;gt; XAResource.forget() CodePoint.SYNCTYPE_ROLLBACK -&amp;gt; XAResource.rollback() CodePoint.SYNCTYPE_MIGRATED -&amp;gt; not supported CodePoint.SYNCTYPE_INDOUBT   -&amp;gt; XAResource.recover();
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DRDAProtocolException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseXID</MethodName>
            <MethodComment>/** 
 * Parse XID formatId -1 translates into a null XID and a local transaction
 */
</MethodComment>
            <ReturnType>Xid</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [formatId=reader.readNetworkInt()]</InnerVar>
                <InnerVar>byte[] [gtrid=null]</InnerVar>
                <InnerVar>byte[] [bqual=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DRDAProtocolException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseXAFlags</MethodName>
            <MethodComment>/** 
 * parse XAFlags 
 * @return XAFlags value
 * @throws DRDAProtocolException
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DRDAProtocolException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseXATimeout</MethodName>
            <MethodComment>/** 
 * Parses a XA transaction timout value.
 * @return A timeout value.
 * @throws DRDAProtocolException
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DRDAProtocolException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startXATransaction</MethodName>
            <MethodComment>/** 
 * Start the xa transaction. Send SYNCRRD response
 * @param xid - XID (formatId = -1 for local transaction)
 * @param xaflags - xaflags
 * @param xaTimeout - The timeout for the global transaction in millis(or -1 if not specified)
 * @throws DRDAProtocolException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>xaflags</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>xaTimeout</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>XAResource [xaResource=getXAResource()]</InnerVar>
                <InnerVar>int [xaRetVal=XAResource.XA_OK]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeSYNCCRD;[CodePoint.SYNCTYPE_NEW_UOW, xaRetVal, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DRDAProtocolException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>commitTransaction</MethodName>
            <MethodComment>/** 
 * Commit  the xa transaction. Send SYNCCRD response
 * @param xid - XID (formatId = -1 for local transaction)
 * @param xaflags - xaflags
 * @throws DRDAProtocolException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>xaflags</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [local=(xid.getFormatId() == -1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DRDAProtocolException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>commitLocalTransaction</MethodName>
            <MethodComment>/** 
 * Commit local transaction. Send SYNCCRD response.
 * @throws DRDAProtocolException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [xaRetVal=XAResource.XA_OK]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeSYNCCRD;[CodePoint.SYNCTYPE_COMMITTED, xaRetVal, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DRDAProtocolException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>commitXATransaction</MethodName>
            <MethodComment>/** 
 * Commit  the xa transaction. Send SYNCCRD response.
 * @param xid - XID 
 * @param xaflags - xaflags
 * @throws DRDAProtocolException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>xaflags</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>XAResource [xaResource=getXAResource()]</InnerVar>
                <InnerVar>int [xaRetVal=XAResource.XA_OK]</InnerVar>
                <InnerVar>boolean [isOnePhase=(xaflags &amp; XAResource.TMONEPHASE) != 0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeSYNCCRD;[CodePoint.SYNCTYPE_COMMITTED, xaRetVal, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DRDAProtocolException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rollbackTransaction</MethodName>
            <MethodComment>/** 
 * Rollback transaction. Optionally send SYNCCRD response.
 * @param xid  Xid for rollback for global transaction.If xid formatid is -1 it represents a local transaction
 * @param sendSYNCCRD Indicates whether the function shouldsend a SYNCCRD response
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sendSYNCCRD</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [local=(xid.getFormatId() == -1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DRDAProtocolException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rollbackLocalTransaction</MethodName>
            <MethodComment>/** 
 * Rollback a local transaction. Optionally send SYNCCRD response.
 * @param sendSYNCCRD Indicates whether the function shouldsend a SYNCCRD response
 * @throws DRDAProtocolException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sendSYNCCRD</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [xaRetVal=XAResource.XA_OK]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DRDAProtocolException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rollbackXATransaction</MethodName>
            <MethodComment>/** 
 * Rollback the xa transaction. Optionally send SYNCCRD response.
 * @param xid - XID 
 * @param sendSYNCCRD Indicates whether the function shouldsend a SYNCCRD response
 * @throws DRDAProtocolException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sendSYNCCRD</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>XAResource [xaResource=getXAResource()]</InnerVar>
                <InnerVar>int [xaRetVal=XAResource.XA_OK]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DRDAProtocolException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>endXA</MethodName>
            <MethodComment>/** 
 * End  the xa transaction. Send SYNCRRD response
 * @param xid - XID 
 * @param xaflags - xaflags
 * @throws DRDAProtocolException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>xaflags</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>XAResource [xaResource=getXAResource()]</InnerVar>
                <InnerVar>int [xaRetVal=XAResource.XA_OK]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeSYNCCRD;[CodePoint.SYNCTYPE_END_UOW, xaRetVal, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DRDAProtocolException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareXATransaction</MethodName>
            <MethodComment>/** 
 * Prepare the xa transaction. Send SYNCCRD response.
 * @param xid - XID 
 * @throws DRDAProtocolException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>XAResource [xaResource=getXAResource()]</InnerVar>
                <InnerVar>int [xaRetVal]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeSYNCCRD;[CodePoint.SYNCTYPE_PREPARE, xaRetVal, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DRDAProtocolException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forgetXATransaction</MethodName>
            <MethodComment>/** 
 * Forget the xa transaction. Send SYNCCRD response.
 * @param xid - XID 
 * @throws DRDAProtocolException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>XAResource [xaResource=getXAResource()]</InnerVar>
                <InnerVar>int [xaRetVal=XAResource.XA_OK]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeSYNCCRD;[CodePoint.SYNCTYPE_REQ_FORGET, xaRetVal, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DRDAProtocolException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>recoverXA</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;recoverXA;[XAResource.TMSTARTRSCAN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DRDAProtocolException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>recoverXA</MethodName>
            <MethodComment>/** 
 * Call recover. Send SYNCCRD response with indoubt list
 * @throws DRDAProtocolException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xaflags</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>XAResource [xaResource=getXAResource()]</InnerVar>
                <InnerVar>int [xaRetVal=XAResource.XA_OK]</InnerVar>
                <InnerVar>Xid[] [indoubtXids=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeSYNCCRD;[CodePoint.SYNCTYPE_INDOUBT, xaRetVal, indoubtXids]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DRDAProtocolException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeSYNCCRD</MethodName>
            <MethodComment>/** 
 * Write SYNCCRD (SYNCCTL response)
 * @param synctype - XA Command to send response for see  parseSYNCTYPE
 * @param xaRetVal - return value from XA command
 * @param xids - list of xids to return for recover. null for other commands
 * @throws DRDAProtocolException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>synctype</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>xaRetVal</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>xids</ParamName>
                    <ParamType>Xid[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>writer;createDssReply;[]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;startDdm;[CodePoint.SYNCCRD]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;startDdm;[CodePoint.XARETVAL]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;writeInt;[xaRetVal]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;endDdm;[]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;endDdmAndDss;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DRDAProtocolException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writePRPHRCLST</MethodName>
            <MethodComment>/** 
 * write PRPHRCLST (indoubt list)
 * @param xids - list of indoubt xa transactions obtained from recover
 * @throws DRDAProtocolException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xids</ParamName>
                    <ParamType>Xid[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [xidcnt=(xids == null ? 0 : xids.length)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>writer;startDdm;[CodePoint.PRPHRCLST]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;writeScalar2Bytes;[CodePoint.XIDCNT, xidcnt]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;endDdm;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DRDAProtocolException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeXID</MethodName>
            <MethodComment>/** 
 * write XID
 * @param xid - XID to write
 * @throws DRDAProtocolException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xid</ParamName>
                    <ParamType>Xid</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [formatId=xid.getFormatId()]</InnerVar>
                <InnerVar>byte[] [gtrid=xid.getGlobalTransactionId()]</InnerVar>
                <InnerVar>byte[] [bqual=xid.getBranchQualifier()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>writer;startDdm;[CodePoint.XID]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;writeInt;[formatId]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;writeInt;[gtrid.length]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;writeInt;[bqual.length]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;writeBytes;[gtrid]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;writeBytes;[bqual]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;endDdm;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DRDAProtocolException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getXAResource</MethodName>
            <MethodComment>/** 
 * get XAResource for the connection
 * @return XAResource
 */
</MethodComment>
            <ReturnType>XAResource</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>syncTypeToString</MethodName>
            <MethodComment>/** 
 * printable syncType for debug output
 * @param syncType
 * @return - sync type meaning
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>syncType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>xaflagsToString</MethodName>
            <MethodComment>/** 
 * printable xaflags
 * @param xaflags
 * @return printable xaflags for debug output
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xaflags</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processXAException</MethodName>
            <MethodComment>/** 
 * return xa exception errorCode. print to console for debug output.
 * @param xe - XA Exception
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xe</ParamName>
                    <ParamType>XAException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [xaRetVal=xe.errorCode]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResourceAdapter</MethodName>
            <MethodComment>/** 
 * @return The ResourceAdapter instance forthe underlying database.
 */
</MethodComment>
            <ReturnType>ResourceAdapter</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rollbackCurrentTransaction</MethodName>
            <MethodComment>/** 
 * This function rollbacks the current global transaction associated with the XAResource or a local transaction. The function should be called only in exceptional cases - like client socket is closed. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>