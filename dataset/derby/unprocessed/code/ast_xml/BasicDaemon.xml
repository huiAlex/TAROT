<Class>
    <Id>357</Id>
    <Package>org.apache.derby.impl.services.daemon</Package>
    <ClassName>BasicDaemon</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>DaemonService</SuperInterface>
        <SuperInterface>Runnable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BasicDaemon  /** 
 * A BasicDaemon is a background worker thread which does asynchronous I/O and general clean up.  It should not be used as a general worker thread for parallel execution.  One cannot count on the order of request or count on when the daemon will wake up, even with serviceNow requests.  Request are not persistent and not recoverable, they are all lost when the system crashes or is shutdown. System shutdown, even orderly ones, do not wait for daemons to finish its work or empty its queue.  Furthermore, any Serviceable subscriptions, including onDemandOnly, must tolerate spurious services.  The BasicDaemon will setup a context manager with no context on it.  The Serviceable object's performWork must provide useful context on the context manager to do its work.  The BasicDaemon will wrap performWork call with try / catch block and will use the ContextManager's error handling to clean up any error.  The BasicDaemon will guarentee serviceNow request will not be lost as long as the jbms does not crash - however, if N serviceNow requests are made by the same client, it may only be serviced once, not N times. Many Serviceable object will subscribe to the same BasicDaemon.  Their performWork method should be well behaved - in other words, it should not take too long or hog too many resources or deadlock with anyone else.  And it cannot (should not) error out. The BasicDaemon implementation manages the DaemonService's data structure, handles subscriptions and enqueues requests, and determine the service schedule for its Serviceable objects.  The BasicDaemon keeps an array (Vector) of Serviceable subscriptions it also keeps 2 queues for clients that uses it for one time service - the 1st queue is for a serviceNow enqueue request, the 2nd queue is for non serviceNow enqueue request. This BasicDaemon services its clients in the following order: 1. any subscribed client that have made a serviceNow request that has not been fulfilled  2. serviceable clients on the 1st queue 3. all subscribed clients that are not onDemandOnly 4. serviceable clients 2nd queue
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>numClients</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>OPTIMAL_QUEUE_SIZE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>subscription</FieldName>
            <FieldType>Vector</FieldType>
        </Field>
        <Field>
            <FieldName>subscription</FieldName>
            <FieldType>ServiceRecord</FieldType>
        </Field>
        <Field>
            <FieldName>contextService</FieldName>
            <FieldType>ContextService</FieldType>
        </Field>
        <Field>
            <FieldName>contextMgr</FieldName>
            <FieldType>ContextManager</FieldType>
        </Field>
        <Field>
            <FieldName>highPQ</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>highPQ</FieldName>
            <FieldType>ServiceRecord</FieldType>
        </Field>
        <Field>
            <FieldName>normPQ</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>normPQ</FieldName>
            <FieldType>ServiceRecord</FieldType>
        </Field>
        <Field>
            <FieldName>nextService</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>awakened</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>waiting</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>inPause</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>running</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>stopRequested</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>stopped</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>lastServiceTime</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>earlyWakeupCount</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>BasicDaemon</MethodName>
            <MethodComment>/** 
 * make a BasicDaemon
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>contextService</ParamName>
                    <ParamType>ContextService</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>subscribe</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newClient</ParamName>
                    <ParamType>Serviceable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>onDemandOnly</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [clientNumber]</InnerVar>
                <InnerVar>ServiceRecord [clientRecord]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unsubscribe</MethodName>
            <MethodComment>/** 
 * Removes a client from the list of subscribed clients. The call does not wait for the daemon to finish the work it is currently performing. Therefore, the client must tolerate that its &lt;code&gt;performWork()&lt;/code&gt; method could be invoked even after the call to &lt;code&gt;unsubscribe()&lt;/code&gt; has returned (but not more than once).
 * @param clientNumber client identifier
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clientNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>subscription;set;[clientNumber, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serviceNow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clientNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ServiceRecord [clientRecord=(ServiceRecord)subscription.get(clientNumber)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>clientRecord;called;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;wakeUp;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>enqueue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newClient</ParamName>
                    <ParamType>Serviceable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>serviceNow</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ServiceRecord [clientRecord=new ServiceRecord(newClient,false,false)]</InnerVar>
                <InnerVar>List&lt;ServiceRecord&gt; [queue=serviceNow ? highPQ : normPQ]</InnerVar>
                <InnerVar>int [highPQsize]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clear</MethodName>
            <MethodComment>/** 
 * Get rid of all queued up Serviceable tasks.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>normPQ;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>highPQ;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextAssignment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ServiceRecord</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>urgent</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ServiceRecord [clientRecord]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serviceClient</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clientRecord</ParamName>
                    <ParamType>ServiceRecord</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Serviceable [client=clientRecord.client]</InnerVar>
                <InnerVar>ContextManager [cm=contextMgr]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>clientRecord;serviced;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>contextService;setCurrentContextManager;[contextMgr]</InnerMethodInvoke>
                <InnerMethodInvoke>contextMgr;cleanupOnError;[StandardException.normalClose(), false]</InnerMethodInvoke>
                <InnerMethodInvoke>contextService;resetCurrentContextManager;[contextMgr]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pause</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resume</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stop</MethodName>
            <MethodComment>/** 
 * Finish what we are doing and at the next convenient moment, get rid of the thread and make the daemon object goes away if possible. remember we are calling from another thread
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;pause;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>waitUntilQueueIsEmpty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stopRequested</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inPause</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>wakeUp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rest</MethodName>
            <MethodComment>/** 
 * Returns true if awakened by some notification, false if wake up by timer
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [urgentOnly]</InnerVar>
                <InnerVar>boolean [checkWallClock=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>work</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>urgentOnly</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ServiceRecord [work]</InnerVar>
                <InnerVar>int [serviceCount=0]</InnerVar>
                <InnerVar>int [yieldFactor=10]</InnerVar>
                <InnerVar>int [yieldCount=OPTIMAL_QUEUE_SIZE / yieldFactor]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>yield</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Thread [currentThread=Thread.currentThread()]</InnerVar>
                <InnerVar>int [oldPriority=currentThread.getPriority()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setThreadPriority</MethodName>
            <MethodComment>/** 
 * Change the priority of the current thread, but only if it was created by  {@link ModuleFactory#getDaemonThread}.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mf</ParamName>
                    <ParamType>ModuleFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>priority</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Thread [t=Thread.currentThread()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t;setPriority;[priority]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMonitor</MethodName>
            <MethodComment>/** 
 * Privileged Monitor lookup. Must be package private so that user code can't call this entry point.
 */
</MethodComment>
            <ReturnType>ModuleFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ModuleFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>