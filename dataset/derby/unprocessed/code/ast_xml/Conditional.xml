<Class>
    <Id>2032</Id>
    <Package>org.apache.derby.impl.services.bytecode</Package>
    <ClassName>Conditional</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Conditional  /** 
 * A Conditional represents an if/then/else block. When this is created the code  will already have the conditional check code. The code is optimized for branch offsets that fit in 2 bytes, though will handle 4 byte offsets. &lt;code&gt; if condition then code else code &lt;/code&gt; what actually gets built is &lt;code&gt; if !condition branch to eb: then code goto end:  // skip else eb: else code end: &lt;/code&gt; If no else condition was provided then the code is: &lt;code&gt; if !condition branch to end: then code end: &lt;/code&gt; Note all branches here are using relative offsets, not absolute program counters. If the then code leads to the conditional branch offset being too big (&amp;gt;32k) because the then code is larger than 32767 bytes then this is built: &lt;code&gt; // when else code is present if condition branch to tb: (relative offset +8) goto_w eb: // indirect for else block (5 bytes) tb: then code (&amp;gt; 32767 bytes) goto end: eb: else code end: &lt;/code&gt; &lt;code&gt; // when only then code is present if condition branch to tb: (relative offset +8) goto_w end: // indirect for else block (5 bytes) tb: then code (&amp;gt; 32767 bytes) end: &lt;/code&gt; If there is an else branch and only it is larger than 32767 bytes then the code is: &lt;code&gt; if !condition branch to eb: (offset increased by two over previous value) then code goto_w end:  // skip else eb: else code (&amp;gt; 32767 bytes) end: &lt;/code&gt; This has one special case where the size of conditional branch to eb: now must change from a 16bit value to a 32 bit value. The generated code for this is the same as when both the then code and the else code require 32bit offsets for the branches. This code is: &lt;code&gt; if condition branch to tb: (relative offset +8) goto_w eb: // indirect for else block (5 bytes) tb: then code (&amp;gt; 32767 bytes) goto_w end: eb: else code (&amp;gt; 32767 bytes) end: &lt;/code&gt; In theory, at the moment this should not happen as this would mean a total code size that exceeds the limit on the code size for a method (64k). This code handles this case as it does occur if the limit for a branch is lowered for testing purposes, to ensure the complete set of branch re-write code works. This lowering of the limit can be done by changing the constant BRANCH16LIMIT.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>BRANCH16LIMIT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>parent</FieldName>
            <FieldType>Conditional</FieldType>
        </Field>
        <Field>
            <FieldName>if_pc</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>stack</FieldName>
            <FieldType>Type[]</FieldType>
        </Field>
        <Field>
            <FieldName>thenGoto_pc</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>Conditional</MethodName>
            <MethodComment>/** 
 * Start a conditional block.
 * @param parent Current conditional block, null if no nesting is going on.
 * @param chunk CodeChunk this conditional lives in
 * @param ifOpcode Opcode for the if check.
 * @param entryStack Type stack on entering the conditional then block.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>Conditional</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>chunk</ParamName>
                    <ParamType>CodeChunk</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ifOpcode</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>entryStack</ParamName>
                    <ParamType>Type[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>chunk;addInstrU2;[ifOpcode, 0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startElse</MethodName>
            <MethodComment>/** 
 * Complete the 'then' block and start the 'else' block for this conditional
 * @param chunk CodeChunk this conditional lives in
 * @param thenStack Type stack on completing the conditional then block.
 * @return the type stack on entering the then block
 */
</MethodComment>
            <ReturnType>Type[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>BCMethod</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>chunk</ParamName>
                    <ParamType>CodeChunk</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>thenStack</ParamName>
                    <ParamType>Type[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Type[] [entryStack=stack]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>chunk;addInstrU2;[VMOpcode.GOTO, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;fillIn;[mb, chunk, if_pc, chunk.getPC()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>end</MethodName>
            <MethodComment>/** 
 * Complete the conditional and patch up any jump instructions.
 * @param chunk CodeChunk this conditional lives in
 * @param elseStack Current stack, which is the stack at the end of the else
 * @param stackNumber Current number of valid elements in elseStack
 * @return The conditional this conditional was nested in, if any.
 */
</MethodComment>
            <ReturnType>Conditional</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>BCMethod</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>chunk</ParamName>
                    <ParamType>CodeChunk</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>elseStack</ParamName>
                    <ParamType>Type[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stackNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [branch_pc]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;fillIn;[mb, chunk, branch_pc, chunk.getPC()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fillIn</MethodName>
            <MethodComment>/** 
 * Fill in the offsets for a conditional or goto instruction that were dummied up as zero during code generation. Handles modifying branch logic when the offset for the branch is greater than can fit in 16 bits. In this case a GOTO_W with a 32 bit offset will be used, see details within the method for how this is acheived in all situations. This method might insert instructions in the already generated byte code, thus increasing the program counter.
 * @param mb Method this conditional is for
 * @param chunk Our code chunk
 * @param branch_pc pc of the branch or goto opcode in the code stream
 * @param target_pc pc where we want to jump to.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>BCMethod</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>chunk</ParamName>
                    <ParamType>CodeChunk</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>branch_pc</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>target_pc</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [offset=target_pc - branch_pc]</InnerVar>
                <InnerVar>short [branchOpcode=chunk.getOpcode(branch_pc)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>