<Class>
    <Id>900</Id>
    <Package>org.apache.derbyTesting.unitTests.services</Package>
    <ClassName>T_LockFactory</ClassName>
    <SuperClass>T_MultiIterations</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>T_LockFactory  /** 
 * Protocol unit test for the LockManager.
 * @see LockFactory
 * @see org.apache.derbyTesting.unitTests.harness.UnitTest
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>ITERATIONS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>lf</FieldName>
            <FieldType>LockFactory</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>T_LockFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getModuleToTestProtocolName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupTest</MethodName>
            <MethodComment>/** 
 * Run all the tests, each test that starts with 'S' is a single user test, each test that starts with 'M' is a multi-user test.
 * @exception T_Fail The test failed in some way.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runTestSet</MethodName>
            <MethodComment>/** 
 * Run once per-iteration to run the actual test.
 * @exception T_Fail the test failed in some way.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>S001</MethodName>
            <MethodComment>/** 
 * Single user API test 001. Lock an single object in a single group with all lock methods and then unlock the object with all unlock methods.
 * @exception StandardException	An exception thrown by a method of LockFactory
 * @exception T_Fail	Some behaviour of the LockFactory is incorrect
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CompatibilitySpace [cs=lf.createCompatibilitySpace(null)]</InnerVar>
                <InnerVar>Object [g0=new Object()]</InnerVar>
                <InnerVar>Lockable [l0=new T_L1()]</InnerVar>
                <InnerVar>int [count]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkLockCount;[cs, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g0, l0, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g0, l0, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g0, l0, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;unlock;[cs, g0, l0, null]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;unlock;[cs, g0, l0, null]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g0, l0, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g0, l0, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g0, l0, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 3]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;unlockGroup;[cs, g0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g0, l0, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g0, l0, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g0, l0, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 3]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;unlock;[cs, g0, l0, null]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;unlock;[cs, g0, l0, null]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;unlock;[cs, g0, l0, null]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g0, l0, null, 1000]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["S001"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>S002</MethodName>
            <MethodComment>/** 
 * Single user API test 002. Lock an object in different groups and check unlocks apply to a single group.
 * @exception StandardException	An exception thrown by a method of LockFactory
 * @exception T_Fail	Some behaviour of the LockFactory is incorrect
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CompatibilitySpace [cs=lf.createCompatibilitySpace(null)]</InnerVar>
                <InnerVar>Object [g0=new Object()]</InnerVar>
                <InnerVar>Object [g1=new Object()]</InnerVar>
                <InnerVar>Lockable [l0=new T_L1()]</InnerVar>
                <InnerVar>int [count]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkLockCount;[cs, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g0, l0, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g1, l0, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g0, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g1, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g1, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g1, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g0, l0, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g1, l0, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;unlockGroup;[cs, g1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g0, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g1, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;unlockGroup;[cs, g0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g1, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["S002"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>S003</MethodName>
            <MethodComment>/** 
 * Single user API test 003. Lock multiple objects in different groups and check unlocks apply to a single group.
 * @exception StandardException	An exception thrown by a method of LockFactory
 * @exception T_Fail	Some behaviour of the LockFactory is incorrect
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CompatibilitySpace [cs=lf.createCompatibilitySpace(null)]</InnerVar>
                <InnerVar>Object [g0=new Object()]</InnerVar>
                <InnerVar>Object [g1=new Object()]</InnerVar>
                <InnerVar>Lockable [l0=new T_L1()]</InnerVar>
                <InnerVar>Lockable [l1=new T_L1()]</InnerVar>
                <InnerVar>Lockable [l2=new T_L1()]</InnerVar>
                <InnerVar>int [count]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkLockCount;[cs, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g0, l0, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g1, l0, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g1, l1, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g1, l2, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g0, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g1, 3]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 4]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;unlock;[cs, g1, l1, null]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g0, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g1, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 3]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;unlockGroup;[cs, g1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g0, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g1, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;unlockGroup;[cs, g0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g1, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["S003"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>S004</MethodName>
            <MethodComment>/** 
 * Single user API test 004. Lock multiple objects in different groups and transfer locks between groups.
 * @exception StandardException	An exception thrown by a method of LockFactory
 * @exception T_Fail	Some behaviour of the LockFactory is incorrect
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CompatibilitySpace [cs=lf.createCompatibilitySpace(null)]</InnerVar>
                <InnerVar>Object [g0=new Object()]</InnerVar>
                <InnerVar>Object [g1=new Object()]</InnerVar>
                <InnerVar>Object [g2=new Object()]</InnerVar>
                <InnerVar>Lockable [l0=new T_L1()]</InnerVar>
                <InnerVar>Lockable [l1=new T_L1()]</InnerVar>
                <InnerVar>Lockable [l2=new T_L1()]</InnerVar>
                <InnerVar>int [count=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkLockCount;[cs, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g0, l0, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g1, l0, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g1, l1, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g1, l2, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g0, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g1, 3]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 4]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;transfer;[cs, g0, g1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g1, 4]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 4]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;transfer;[cs, g0, g2]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g1, 4]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g2, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 4]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs, g2, l0, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g2, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 5]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;transfer;[cs, g1, g2]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g1, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g2, 5]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 5]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;transfer;[cs, g2, g1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g1, 5]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g2, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 5]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;unlockGroup;[cs, g2]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g1, 5]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g2, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 5]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;unlockGroup;[cs, g1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g1, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g2, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["S004"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>S005</MethodName>
            <MethodComment>/** 
 * Single user API test 005. Create two compatability spaces and ensure that locks block each other out.
 * @exception StandardException	An exception thrown by a method of LockFactory
 * @exception T_Fail	Some behaviour of the LockFactory is incorrect
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CompatibilitySpace [cs0=lf.createCompatibilitySpace(null)]</InnerVar>
                <InnerVar>CompatibilitySpace [cs1=lf.createCompatibilitySpace(null)]</InnerVar>
                <InnerVar>Object [g0=new Object()]</InnerVar>
                <InnerVar>Object [g1=new Object()]</InnerVar>
                <InnerVar>Lockable [l0=new T_L1()]</InnerVar>
                <InnerVar>Lockable [l1=new T_L1()]</InnerVar>
                <InnerVar>Lockable [l2=new T_L1()]</InnerVar>
                <InnerVar>int [count]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkLockCount;[cs0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs1, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs0, g0, l0, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs1, g1, l1, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs0, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs1, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs0, g0, l2, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs0, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs1, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;unlock;[cs0, g0, l2, null]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs0, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs1, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;lockObject;[cs1, g1, l2, null, C_LockFactory.WAIT_FOREVER]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs0, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs1, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;unlockGroup;[cs0, g0]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;unlockGroup;[cs1, g1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs1, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["S005"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>S007</MethodName>
            <MethodComment>/** 
 * Single user API test 007. Tests on groups and compatibility spaces never seen by the lock manager.
 * @exception StandardException	An exception thrown by a method of LockFactory
 * @exception T_Fail	Some behaviour of the LockFactory is incorrect
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CompatibilitySpace [cs=lf.createCompatibilitySpace(null)]</InnerVar>
                <InnerVar>Object [g0=new Object()]</InnerVar>
                <InnerVar>Object [g1=new Object()]</InnerVar>
                <InnerVar>Lockable [l0=new T_L1()]</InnerVar>
                <InnerVar>int [count]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkLockCount;[cs, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;unlockGroup;[cs, g0]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;unlockGroup;[cs, cs]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;unlock;[cs, g0, l0, null]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;transfer;[cs, g0, g1]</InnerMethodInvoke>
                <InnerMethodInvoke>lf;transfer;[cs, g1, g0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockCount;[cs, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkLockGroupCount;[cs, g1, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["S007"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>M001</MethodName>
            <MethodComment>/** 
 * Multi-user test 001. Create two lockable objects and pass them off to two threads. Each thread will run lock the first object, set its value then lock the second object and set its value, yield and then release the lock on one and then on two. Various checks are made to ensure the values are as expected.
 * @exception StandardException	An exception thrown by a method of LockFactory
 * @exception T_Fail	Some behaviour of the LockFactory is incorrect
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Lockable[] [locks=new T_L1[2]]</InnerVar>
                <InnerVar>T_User [u1=new T_User(1,lf,locks,ITERATIONS,10 * ITERATIONS)]</InnerVar>
                <InnerVar>T_User [u2=new T_User(1,lf,locks,ITERATIONS,20 * ITERATIONS)]</InnerVar>
                <InnerVar>Thread [t1=new Thread(u1)]</InnerVar>
                <InnerVar>Thread [t2=new Thread(u2)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t1;start;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t2;start;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["M001"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>M002</MethodName>
            <MethodComment>/** 
 * Multi-user test 002 Create a single lockable and have three threads lock it, yield and then release it. The single lockable can only have one locker.
 * @exception StandardException	An exception thrown by a method of LockFactory
 * @exception T_Fail	Some behaviour of the LockFactory is incorrect
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Lockable[] [locks=new T_L1[1]]</InnerVar>
                <InnerVar>T_User [u1=new T_User(2,lf,locks,ITERATIONS,10 * ITERATIONS)]</InnerVar>
                <InnerVar>T_User [u2=new T_User(2,lf,locks,ITERATIONS,20 * ITERATIONS)]</InnerVar>
                <InnerVar>T_User [u3=new T_User(2,lf,locks,ITERATIONS,30 * ITERATIONS)]</InnerVar>
                <InnerVar>Thread [t1=new Thread(u1)]</InnerVar>
                <InnerVar>Thread [t2=new Thread(u2)]</InnerVar>
                <InnerVar>Thread [t3=new Thread(u3)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t1;start;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t2;start;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t3;start;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["M002"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>M003</MethodName>
            <MethodComment>/** 
 * Multi-user test 003 Create a single lockable and have three threads lock it, yield and then release it. The single lockable is a semaphore that can have two lockers.
 * @exception StandardException	An exception thrown by a method of LockFactory
 * @exception T_Fail	Some behaviour of the LockFactory is incorrect
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Lockable[] [locks=new Lockable[1]]</InnerVar>
                <InnerVar>T_User [u1=new T_User(3,lf,locks,ITERATIONS,0)]</InnerVar>
                <InnerVar>T_User [u2=new T_User(3,lf,locks,ITERATIONS,0)]</InnerVar>
                <InnerVar>T_User [u3=new T_User(3,lf,locks,ITERATIONS,0)]</InnerVar>
                <InnerVar>Thread [t1=new Thread(u1)]</InnerVar>
                <InnerVar>Thread [t2=new Thread(u2)]</InnerVar>
                <InnerVar>Thread [t3=new Thread(u3)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t1;start;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t2;start;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t3;start;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["M003"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>M004</MethodName>
            <MethodComment>/** 
 * Multi-user test 004 As M003 but each thread will lock the object twice, to ensure that lock manager grantes the lock when the compatability space and qualifier match.
 * @exception StandardException	An exception thrown by a method of LockFactory
 * @exception T_Fail	Some behaviour of the LockFactory is incorrect
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Lockable[] [locks=new Lockable[1]]</InnerVar>
                <InnerVar>T_User [u1=new T_User(4,lf,locks,ITERATIONS,0)]</InnerVar>
                <InnerVar>T_User [u2=new T_User(4,lf,locks,ITERATIONS,0)]</InnerVar>
                <InnerVar>T_User [u3=new T_User(4,lf,locks,ITERATIONS,0)]</InnerVar>
                <InnerVar>Thread [t1=new Thread(u1)]</InnerVar>
                <InnerVar>Thread [t2=new Thread(u2)]</InnerVar>
                <InnerVar>Thread [t3=new Thread(u3)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t1;start;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t2;start;[]</InnerMethodInvoke>
                <InnerMethodInvoke>t3;start;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;PASS;["M004"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkLockCount</MethodName>
            <MethodComment>/** 
 * Check to see if the total number of locks we have is as expected.
 * @exception T_Fail	Number of locks is not as expected.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cs</ParamName>
                    <ParamType>CompatibilitySpace</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expected</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [expect=expected != 0]</InnerVar>
                <InnerVar>boolean [got=lf.areLocksHeld(cs)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkLockGroupCount</MethodName>
            <MethodComment>/** 
 * Check to see if the number of locks in a group we have is as expected.
 * @exception T_Fail	Number of locks is not as expected.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cs</ParamName>
                    <ParamType>CompatibilitySpace</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>group</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expected</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [expect=expected != 0]</InnerVar>
                <InnerVar>boolean [got=lf.areLocksHeld(cs,group)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startSystemModule</MethodName>
            <MethodComment>/** 
 * Privileged startup. Must be private so that user code can't call this entry point.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>factoryInterface</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>