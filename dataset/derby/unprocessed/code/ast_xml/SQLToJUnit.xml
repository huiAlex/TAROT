<Class>
    <Id>1745</Id>
    <Package>org.apache.derbyTesting.functionTests.util</Package>
    <ClassName>SQLToJUnit</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SQLToJUnit  /** 
 * Convert a SQL script to a JUnit test. Usage: java org.apache.derbyTesting.functionTests.util.SQLToJUnit &lt;embedded_sql_out_file&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DEFAULT_LEFT_MARGIN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>leftMargin</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>IJ_COMMENT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>IJ_WARNING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>JAVA_COMMENT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>RS_META_OBJECT_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>RS_OBJECT_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CSTMT_OBJECT_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PSTMT_OBJECT_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SQL_WARN_OBJECT_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>IJ_PROMPT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CONN_OBJECT_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>STMT_OBJECT_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>USER_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>getWarningLogic</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DDL_NO_RC_COMMANDS</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>DDL_RC_COMMANDS</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>QUERY_COMMANDS</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>IJ_COMMANDS</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>EXEC_QUERY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>EXEC_DDL_NO_ROW_COUNT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>EXEC_DDL_WITH_ROW_COUNT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PREPARE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>P_EXECUTE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>CALL_STMT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMMENT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>AUTOCOMMIT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMMIT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ROLLBACK</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SET_SCHEMA</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>REMOVE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>GRANT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>GET_CURSOR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>CURSOR_NEXT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>CURSOR_CLOSE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>CONNECT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SET_CONNECTION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>REVOKE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>IJ_COMMAND</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ROW_COUNT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>BLANK_LINE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SQL_ERROR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SQL_WARNING</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>IWARNING</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>UNKNOWN_LINE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LINE_LENGTH</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>prevLineType</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>jTestName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ijScript</FieldName>
            <FieldType>BufferedReader</FieldType>
        </Field>
        <Field>
            <FieldName>junit</FieldName>
            <FieldType>BufferedWriter</FieldType>
        </Field>
        <Field>
            <FieldName>tmpBuf</FieldName>
            <FieldType>StringBuffer</FieldType>
        </Field>
        <Field>
            <FieldName>gotRuntimeStatistics</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>numIgnored</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>numUnconverted</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>multipleUserConnections</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>userConnections</FieldName>
            <FieldType>Properties</FieldType>
        </Field>
        <Field>
            <FieldName>usersConnected</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>anonymousCount</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>main</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convert</MethodName>
            <MethodComment>/** 
 * Convert .sql test output to JUnit JDBC code. This keeps two lines/blocks of output at a time in currLineType and nextLineType so that the result of statement executions can be handled along with the executing statement, for example to generate the necessary asserts for errors or resultsets.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writePrologue;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadIJScript</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeJavaLine</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lineToWrite</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>followupLine</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [writeEOL=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;strip;[lineToWrite, IJ_PROMPT]</InnerMethodInvoke>
                <InnerMethodInvoke>lineToWrite;delete;[0, lineToWrite.length()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeJDBCCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stmt</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [resultType=getLineType(result)]</InnerVar>
                <InnerVar>boolean [success=(resultType != SQL_ERROR)]</InnerVar>
                <InnerVar>String [indent=""]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeFailStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stmt</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stmtName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>compileTime</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [sqlState=extractSQLState(result)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>junit;write;[sqlState]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;["\", "]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeAssertDDLCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stmt</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ddlCount</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stmtName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>junit;write;["assertUpdateCount("]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;[stmtName]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;[", "]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;[extractRowCount(ddlCount)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>extractRowCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sBuf</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [lineType=getLineType(sBuf)]</InnerVar>
                <InnerVar>String [rowCount=sBuf.substring(0,sBuf.indexOf(" ")).trim()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sBuf;delete;[0, sBuf.length()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeGetCursor</MethodName>
            <MethodComment>/** 
 * Write JDBC code for an ij statement of the form: get cursor c1 as 'select * from t1' 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stmt</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indent</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [pos_1=stmt.indexOf("cursor") + 7]</InnerVar>
                <InnerVar>int [pos_2=stmt.indexOf(" as ")]</InnerVar>
                <InnerVar>String [cName=stmt.substring(pos_1,pos_2).trim()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>junit;write;["PreparedStatement ps_"]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;[cName]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;[" = prepareStatement("]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeJUnitEOL;[]</InnerMethodInvoke>
                <InnerMethodInvoke>stmt;delete;[0, stmt.indexOf("'") + 1]</InnerMethodInvoke>
                <InnerMethodInvoke>stmt;delete;[stmt.lastIndexOf("'"), stmt.length()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;collapseQuotes;[stmt, '\'']</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeQuotedLine;[stmt, indent]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeJUnitEOL;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeJUnitEOL;[]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;["ResultSet "]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;[cName]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;[" = ps_"]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;[cName]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;[".executeQuery();"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeJUnitEOL;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeMaxLenLine</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>aLine</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>prefix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>suffix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [prefixLen=(prefix == null) ? 0 : prefix.length()]</InnerVar>
                <InnerVar>int [suffixLen=(suffix == null) ? 0 : suffix.length()]</InnerVar>
                <InnerVar>String [s]</InnerVar>
                <InnerVar>int [pos=-1]</InnerVar>
                <InnerVar>boolean [firstLine=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>escapeQuotes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>aLine</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [len=aLine.length()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>collapseQuotes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>aLine</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>quote</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [len=aLine.length()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>strip</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>toStrip</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>strip</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>StringBuffer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sBuf</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>toStrip</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [pos=0]</InnerVar>
                <InnerVar>int [len=toStrip.length()]</InnerVar>
                <InnerVar>boolean [okayToStrip=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLineType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sBuf</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLineType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isDDLWithRowCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isDDLNoRowCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isQueryStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isIjCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeAssertResultSet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rsAsText</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BufferedReader [rsReader=new BufferedReader(new StringReader(rsAsText.toString()))]</InnerVar>
                <InnerVar>int [rowCount=0]</InnerVar>
                <InnerVar>int [colCount=0]</InnerVar>
                <InnerVar>boolean [wroteDecl=false]</InnerVar>
                <InnerVar>StringBuffer [sBuf=new StringBuffer()]</InnerVar>
                <InnerVar>StringTokenizer [tkzr=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rsAsText;delete;[0, rsAsText.length()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>extractSQLState</MethodName>
            <MethodComment>/** 
 * Extract out the SQLSTATE.  Messages are of the form "ERROR &lt;SQLSTATE&gt;: ..." or "WARNING &lt;SQLSTATE&gt;: ...". or "ERROR ... SQLSTATE &lt;SQLSTATE&gt;"
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>errString</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [sqlState]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeAssertSQLState</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sqlState</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>objName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>junit;write;["assertSQLState(\""]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;[sqlState]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;["\", "]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;[objName]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;[");"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeAssertWarning</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>warnString</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [indent="    "]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>junit;write;[getWarningLogic]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;[indent]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;["assertNotNull(\"Expected warning but found none\", "]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;[SQL_WARN_OBJECT_NAME]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;[");"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeJUnitEOL;[]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;[indent]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeAssertSQLState;[extractSQLState(warnString), SQL_WARN_OBJECT_NAME]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeJUnitEOL;[]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;[indent]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;["sqlWarn = null;"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeJUnitEOL;[]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;["}"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeQuotedLine</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>line</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indent</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>junit;write;[indent]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;["    \""]</InnerMethodInvoke>
                <InnerMethodInvoke>null;escapeQuotes;[line]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeMaxLenLine;[line, indent + "    + \"", "\""]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;["\");"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeJUnitEOL</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>junit;write;["\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>junit;write;[leftMargin]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNextIjCommand</MethodName>
            <MethodComment>/** 
 * Return one ij command, or if it's a result set, return the entire result set in the StringBuffer.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>aLine</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [c=0]</InnerVar>
                <InnerVar>boolean [done=false]</InnerVar>
                <InnerVar>StringBuffer [targetBuf=aLine]</InnerVar>
                <InnerVar>String [nextline=null]</InnerVar>
                <InnerVar>boolean [insideRS=false]</InnerVar>
                <InnerVar>boolean [gotFirstComment=false]</InnerVar>
                <InnerVar>boolean [gotCommand=false]</InnerVar>
                <InnerVar>boolean [readFromTmpBuf=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>haveNonCommand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>aLine</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [lType=getLineType(aLine)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ignorableLine</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lineType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writePrologue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [prologueText="\npublic final class IJToJUnitTest extends BaseJDBCTestCase {\n\n" + "    /**\n" + "     * Public constructor required for running test as standalone JUnit.\n"+ "     */\n"+ "    public IJToJUnitTest(String name)\n"+ "    {\n"+ "        super(name);\n"+ "    }\n\n"+ "    public static Test suite()\n"+ "    {\n"+ "        BaseTestSuite suite = "+ "new BaseTestSuite(\"IJToJUnitTest Test\");\n"+ "        suite.addTest(TestConfiguration.defaultSuite(IJToJUnitTest.class));\n"+ "        return suite;\n"+ "    }\n\n"+ "    public void test_IJToJUnitTest() throws Exception\n"+ "    {\n"+ "        ResultSet rs = null;\n"+ "        ResultSetMetaData rsmd;\n"+ "        SQLWarning sqlWarn = null;\n\n"+ "        PreparedStatement pSt;\n"+ "        CallableStatement cSt;\n"+ "        Statement st = createStatement();\n\n"+ "        String [][] expRS;\n"+ "        String [] expColNames;\n\n"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>junit;write;[prologueText.replaceAll("IJToJUnitTest",jTestName)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>