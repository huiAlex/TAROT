<Class>
    <Id>1771</Id>
    <Package>org.apache.derby.iapi.services.memory</Package>
    <ClassName>LowMemory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LowMemory  /** 
 * Methods to aid classes recover from OutOfMemoryErrors by denying or reducing service rather than a complete shutdown of the JVM. It's intended that classes use to functionality to allow then to deny service when memory is low to allow the JVM to recover, rather than start new operations that are probably doomed to failure due to the low memory. &lt;P&gt; Expected usage is one instance of this class per major logical operation, e.g. creating a connection, preparing a statement, adding an entry to a specific cache etc. &lt;BR&gt; The logical operation would call isLowMemory() before starting the operation, and thrown a static exception if it returns true. &lt;BR&gt; If during the operation an OutOfMemoryException is thrown the operation would call setLowMemory() and throw its static exception representing low memory. &lt;P&gt; Future enhancments could be a callback mechanism for modules where they register they can reduce memory usage on a low memory situation. These callbacks would be triggered by a call to setLowMemory. For example the page cache could reduce its current size by 10% in a low memory situation.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>lowMemory</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>whenLowMemorySet</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>setLowMemory</MethodName>
            <MethodComment>/** 
 * Set a low memory watermark where the owner of this object just hit an OutOfMemoryError. The caller is assumed it has just freed up any references it obtained during the operation, so that the freeMemory call as best as it can reflects the memory before the action that caused the OutOfMemoryError, not part way through the action.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isLowMemory</MethodName>
            <MethodComment>/** 
 * Return true if a low memory water mark has been set and the current free memory is lower than it. Otherwise return false.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>