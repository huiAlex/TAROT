<Class>
    <Id>2102</Id>
    <Package>org.apache.derby.iapi.services.io</Package>
    <ClassName>FormatableInstanceGetter</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>InstanceGetter</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>FormatableInstanceGetter  /** 
 * Class that loads Formattables (typically from disk)through one level of indirection. A concrete implementation of this class is registered as the class to handle a number of format identifiers in RegisteredFormatIds. When the in-memory representation of RegisteredFormatIds is set up an instance of the concrete class will be created for each format identifier the class is registered for, and each instances will have its setFormatId() called once with the appropriate format identifier. &lt;BR&gt; When a Formattable object is read from disk and its registered class is an instance of FormatableInstanceGetter the getNewInstance() method will be called to create the object. The implementation can use the fmtId field to determine the class of the instance to be returned. &lt;BR&gt; Instances of FormatableInstanceGetter are system wide, that is there is a single set of RegisteredFormatIds per system.
 * @see RegisteredFormatIds
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>fmtId</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>setFormatId</MethodName>
            <MethodComment>/** 
 * Set the format identifier that this instance will be loading from disk.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fmtId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>