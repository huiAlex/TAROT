<Class>
    <Id>1279</Id>
    <Package>org.apache.derby.iapi.services.cache</Package>
    <ClassName>Cacheable</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Cacheable  /** 
 * Any object that implements this interface can be cached using the services of the CacheManager/CacheFactory. In addition to implementing this interface the class must be public and it must have a public no-arg constructor. This is because the cache manager will construct objects itself and then set their identity by calling the setIdentity method. &lt;P&gt; A Cacheable object has five states: &lt;OL&gt; &lt;OL&gt; &lt;LI&gt; No identity - The object is only accessable by the cache manager &lt;LI&gt; Identity, clean, unkept - The object has an identity, is clean but is only accessable by the cache manager &lt;LI&gt; Identity, clean, kept - The object has an identity, is clean, and is in use by one or more threads  &lt;LI&gt; Identity, kept, dirty - The object has an identity, is dirty, and is in use by one or more threads  &lt;LI&gt; Identity, unkept, dirty - The object has an identity, is dirty but is only accessable by the cache manager &lt;/OL&gt; &lt;/OL&gt; &lt;BR&gt; While the object is kept it is guaranteed not to change identity. While it is unkept no-one outside of the cache manager can have a reference to the object. The cache manager returns kept objects and they return to the unkept state when all the current users of the object have released it. &lt;BR&gt; It is required that the object can only move into a dirty state while it is kept. &lt;BR&gt; MT - Mutable : thread aware - Calls to Cacheable method must only be made by the cache manager or the object itself.
 * @see CacheManager
 * @see CacheFactory
 * @see Class#newInstance
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>setIdentity</MethodName>
            <MethodComment>/** 
 * Set the identity of the object. &lt;p&gt; Set the identity of the object to represent an item that already exists, e.g. an existing container. The object will be in the No Identity state, ie. it will have just been created or clearIdentity() was just called.  &lt;BR&gt; The object must copy the information out of key, not just store a reference to key. After this call the expression getIdentity().equals(key) must return true. &lt;BR&gt; If the class of the object needs to change (e.g. to support a different format) then the object should create a new object, call its initParameter() with the parameters the original object was called with, set its identity and return a reference to it. The cache manager will discard the reference to the old object.  &lt;BR&gt; If an exception is thrown the object must be left in the no-identity state. &lt;BR&gt; MT - single thread required - Method must only be called be cache manager and the cache manager will guarantee only one thread can be calling it.
 * @return an object reference if the object can take on the identity, null otherwise.
 * @exception StandardException Standard Derby Policy
 * @see CacheManager#find
 */
</MethodComment>
            <ReturnType>Cacheable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createIdentity</MethodName>
            <MethodComment>/** 
 * Create a new item. &lt;p&gt; Create a new item and set the identity of the object to represent it. The object will be in the No Identity state, ie. it will have just been created or clearIdentity() was just called.  &lt;BR&gt; The object must copy the information out of key, not just store a reference to key if the key is not immutable. After this call the expression getIdentity().equals(key) must return true. &lt;BR&gt; &lt;BR&gt; If the class of the object needs to change (e.g. to support a different format) then the object should create a new object, call its initParameter() with the parameters the original object was called with, set its identity and return a reference to it. The cache manager will discard the reference to the old object.  &lt;BR&gt; If an exception is thrown the object must be left in the no-identity state. &lt;BR&gt; MT - single thread required - Method must only be called be cache manager and the cache manager will guarantee only one thread can be calling it.
 * @return an object reference if the object can take on the identity, null otherwise.
 * @exception StandardException If forCreate is true and the object cannot be created.
 * @see CacheManager#create
 */
</MethodComment>
            <ReturnType>Cacheable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>createParameter</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearIdentity</MethodName>
            <MethodComment>/** 
 * Put the object into the No Identity state.  &lt;BR&gt; MT - single thread required - Method must only be called be cache manager and the cache manager will guarantee only one thread can be calling it.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIdentity</MethodName>
            <MethodComment>/** 
 * Get the identity of this object. &lt;BR&gt; MT - thread safe.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isDirty</MethodName>
            <MethodComment>/** 
 * Returns true of the object is dirty.  May be called when the object is kept or unkept. &lt;BR&gt; MT - thread safe 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clean</MethodName>
            <MethodComment>/** 
 * Clean the object. It is up to the object to ensure synchronization of the isDirty() and clean() method calls. &lt;BR&gt; If forRemove is true then the  object is being removed due to an explict remove request, in this case the cache manager will have called this method regardless of the state of the isDirty()  &lt;BR&gt; If an exception is thrown the object must be left in the clean state. &lt;BR&gt; MT - thread safe - Can be called at any time by the cache manager, it is the responsibility of the object implementing Cacheable to ensure any users of the object do not conflict with the clean call.
 * @exception StandardException Standard Derby error policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>forRemove</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>