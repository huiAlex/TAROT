<Class>
    <Id>2013</Id>
    <Package>org.apache.derby.client.am</Package>
    <ClassName>StatementCacheInteractor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StatementCacheInteractor  /** 
 * Utility class encapsulating the logic for interacting with the JDBC statement cache when creating new logical statements. &lt;p&gt; This class was introduced to share code between the pre-JDBC 4 and the JDBC 4+ versions of the JDBC classes. &lt;p&gt; The pattern for the  {@code prepareX} methods is:&lt;ol&gt; &lt;li&gt;Generate a key for the statement to create.&lt;/li&gt; &lt;li&gt;Consult cache to see if an existing statement can be used.&lt;/li&gt; &lt;li&gt;Create new statement on physical connection if necessary.&lt;/li&gt; &lt;li&gt;Return reference to existing or newly created statement.&lt;/li&gt; &lt;/ol&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>JDBCStatementCache</FieldType>
        </Field>
        <Field>
            <FieldName>physicalConnection</FieldName>
            <FieldType>ClientConnection</FieldType>
        </Field>
        <Field>
            <FieldName>openLogicalStatements</FieldName>
            <FieldType>ArrayList</FieldType>
        </Field>
        <Field>
            <FieldName>openLogicalStatements</FieldName>
            <FieldType>LogicalStatementEntity</FieldType>
        </Field>
        <Field>
            <FieldName>connCloseInProgress</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>StatementCacheInteractor</MethodName>
            <MethodComment>/** 
 * Creates a new JDBC statement cache interactor.
 * @param cache statement cache
 * @param physicalConnection associated physical connection
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cache</ParamName>
                    <ParamType>JDBCStatementCache</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>physicalConnection</ParamName>
                    <ParamType>ClientConnection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareStatement</MethodName>
            <MethodComment>/** 
 * @see java.sql.Connection#prepareStatement(String)
 */
</MethodComment>
            <ReturnType>PreparedStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sql</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StatementKey [stmtKey=StatementKeyFactory.newPrepared(sql,physicalConnection.getCurrentSchemaName(),physicalConnection.holdability())]</InnerVar>
                <InnerVar>PreparedStatement [ps=cache.getCached(stmtKey)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareStatement</MethodName>
            <MethodComment>/** 
 * @see java.sql.Connection#prepareStatement(String,int,int)
 */
</MethodComment>
            <ReturnType>PreparedStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sql</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultSetType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultSetConcurrency</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StatementKey [stmtKey=StatementKeyFactory.newPrepared(sql,physicalConnection.getCurrentSchemaName(),resultSetType,resultSetConcurrency,physicalConnection.holdability())]</InnerVar>
                <InnerVar>PreparedStatement [ps=cache.getCached(stmtKey)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareStatement</MethodName>
            <MethodComment>/** 
 * @see java.sql.Connection#prepareStatement(String,int,int,int)
 */
</MethodComment>
            <ReturnType>PreparedStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sql</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultSetType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultSetConcurrency</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultSetHoldability</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StatementKey [stmtKey=StatementKeyFactory.newPrepared(sql,physicalConnection.getCurrentSchemaName(),resultSetType,resultSetConcurrency,resultSetHoldability)]</InnerVar>
                <InnerVar>PreparedStatement [ps=cache.getCached(stmtKey)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareStatement</MethodName>
            <MethodComment>/** 
 * @see java.sql.Connection#prepareStatement(String,int)
 */
</MethodComment>
            <ReturnType>PreparedStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sql</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>autoGeneratedKeys</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StatementKey [stmtKey=StatementKeyFactory.newPrepared(sql,physicalConnection.getCurrentSchemaName(),physicalConnection.getHoldability(),autoGeneratedKeys)]</InnerVar>
                <InnerVar>PreparedStatement [ps=cache.getCached(stmtKey)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareCall</MethodName>
            <MethodComment>/** 
 * @see java.sql.Connection#prepareCall(String)
 */
</MethodComment>
            <ReturnType>CallableStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sql</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StatementKey [stmtKey=StatementKeyFactory.newCallable(sql,physicalConnection.getCurrentSchemaName(),physicalConnection.holdability())]</InnerVar>
                <InnerVar>CallableStatement [cs=(CallableStatement)cache.getCached(stmtKey)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareCall</MethodName>
            <MethodComment>/** 
 * @see java.sql.Connection#prepareCall(String,int,int)
 */
</MethodComment>
            <ReturnType>CallableStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sql</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultSetType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultSetConcurrency</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StatementKey [stmtKey=StatementKeyFactory.newCallable(sql,physicalConnection.getCurrentSchemaName(),resultSetType,resultSetConcurrency,physicalConnection.holdability())]</InnerVar>
                <InnerVar>CallableStatement [cs=(CallableStatement)cache.getCached(stmtKey)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareCall</MethodName>
            <MethodComment>/** 
 * @see java.sql.Connection#prepareCall(String,int,int,int)
 */
</MethodComment>
            <ReturnType>CallableStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sql</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultSetType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultSetConcurrency</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultSetHoldability</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StatementKey [stmtKey=StatementKeyFactory.newCallable(sql,physicalConnection.getCurrentSchemaName(),resultSetType,resultSetConcurrency,resultSetHoldability)]</InnerVar>
                <InnerVar>CallableStatement [cs=(CallableStatement)cache.getCached(stmtKey)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>closeOpenLogicalStatements</MethodName>
            <MethodComment>/** 
 * Closes all open logical statements created by this cache interactor. &lt;p&gt; A cache interactor is bound to a single (caching) logical connection.
 * @throws SQLException if closing an open logical connection fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.openLogicalStatements;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>markClosed</MethodName>
            <MethodComment>/** 
 * Designates the specified logical statement as closed.
 * @param logicalStmt the logical statement being closed
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>logicalStmt</ParamName>
                    <ParamType>LogicalStatementEntity</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createLogicalPreparedStatement</MethodName>
            <MethodComment>/** 
 * Creates a logical prepared statement.
 * @param ps the underlying physical prepared statement
 * @param stmtKey the statement key for the physical statement
 * @return A logical prepared statement.
 * @throws SQLException if creating a logical prepared statement fails
 */
</MethodComment>
            <ReturnType>PreparedStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ps</ParamName>
                    <ParamType>PreparedStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stmtKey</ParamName>
                    <ParamType>StatementKey</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LogicalPreparedStatement [logicalPs=ClientDriver.getFactory().newLogicalPreparedStatement(ps,stmtKey,this)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.openLogicalStatements;add;[logicalPs]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createLogicalCallableStatement</MethodName>
            <MethodComment>/** 
 * Creates a logical callable statement.
 * @param cs the underlying physical callable statement
 * @param stmtKey the statement key for the physical statement
 * @return A logical callable statement.
 * @throws SQLException if creating a logical callable statement fails
 */
</MethodComment>
            <ReturnType>CallableStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cs</ParamName>
                    <ParamType>CallableStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stmtKey</ParamName>
                    <ParamType>StatementKey</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LogicalCallableStatement [logicalCs=ClientDriver.getFactory().newLogicalCallableStatement(cs,stmtKey,this)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.openLogicalStatements;add;[logicalCs]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCache</MethodName>
            <MethodComment>/** 
 * Returns the associated statement cache.
 * @return A statement cache.
 */
</MethodComment>
            <ReturnType>JDBCStatementCache</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>