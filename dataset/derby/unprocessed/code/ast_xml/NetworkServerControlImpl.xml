<Class>
    <Id>699</Id>
    <Package>org.apache.derby.impl.drda</Package>
    <ClassName>NetworkServerControlImpl</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>NetworkServerControlImpl  /** 
 * NetworkServerControlImpl does all the work for NetworkServerControl
 * @see NetworkServerControl for description
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>NO_USAGE_MSGS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMMANDS</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>COMMAND_ARGS</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
        <Field>
            <FieldName>COMMAND_START</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMMAND_SHUTDOWN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMMAND_TRACE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMMAND_TRACEDIRECTORY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMMAND_TESTCONNECTION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMMAND_LOGCONNECTIONS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMMAND_SYSINFO</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMMAND_RUNTIME_INFO</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMMAND_MAXTHREADS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMMAND_TIMESLICE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMMAND_PROPERTIES</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMMAND_UNKNOWN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DASHARGS</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>DASHARG_PORT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DASHARG_DATABASE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DASHARG_USER</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DASHARG_PASSWORD</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DASHARG_LOADSYSIBM</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DASHARG_ENCALG</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DASHARG_ENCPRV</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DASHARG_BOOTPASSWORD</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DASHARG_HOST</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DASHARG_SESSION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DASHARG_UNSECURE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DASHARG_SSL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_PROTOCOL_VERSION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SHUTDOWN_WITH_CREDENTIAL_PROTOCOL_VERSION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_ALLOWED_PROTOCOL_VERSION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMMAND_HEADER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REPLY_HEADER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REPLY_HEADER_LENGTH</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>OK</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>WARNING</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ERROR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SQLERROR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SQLWARNING</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DRDA_PROP_MESSAGES</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DRDA_PROP_DEBUG</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CLOUDSCAPE_DRIVER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>UNEXPECTED_ERR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MIN_MAXTHREADS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MIN_TIMESLICE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>USE_DEFAULT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_MAXTHREADS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_TIMESLICE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_HOST</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DRDA_MSG_PREFIX</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_LOCALE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_LOCALE_COUNTRY</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SHUTDOWN_CHECK_ATTEMPTS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SHUTDOWN_CHECK_INTERVAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MAXREPLY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>att_srvclsnm</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ATT_SRVNAM</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>att_extnam</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>att_srvrlslv</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>prdId</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>prdIdBytes_</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>buildNumber</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>versionString</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CCSIDSBC</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>CCSIDMBC</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_ENCODING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_CHARSET</FieldName>
            <FieldType>Charset</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_CCSID</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SPACE_CHAR</FieldName>
            <FieldType>byte</FieldType>
        </Field>
        <Field>
            <FieldName>MGR_LEVELS</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
        <Field>
            <FieldName>logWriter</FieldName>
            <FieldType>PrintWriter</FieldType>
        </Field>
        <Field>
            <FieldName>cloudscapeLogWriter</FieldName>
            <FieldType>PrintWriter</FieldType>
        </Field>
        <Field>
            <FieldName>cloudscapeDriver</FieldName>
            <FieldType>Driver</FieldType>
        </Field>
        <Field>
            <FieldName>ERRTYPE_SEVERE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ERRTYPE_USER</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ERRTYPE_INFO</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ERRTYPE_UNKNOWN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>commandArgs</FieldName>
            <FieldType>Vector</FieldType>
        </Field>
        <Field>
            <FieldName>commandArgs</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>databaseArg</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>userArg</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>passwordArg</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>bootPasswordArg</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>encAlgArg</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>encPrvArg</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>hostArg</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>hostAddress</FieldName>
            <FieldType>InetAddress</FieldType>
        </Field>
        <Field>
            <FieldName>sessionArg</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>unsecureArg</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>mc</FieldName>
            <FieldType>memCheck</FieldType>
        </Field>
        <Field>
            <FieldName>replyBuffer</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>replyBufferCount</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>replyBufferPos</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>portNumber</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>traceDirectory</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>traceDirectorySync</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>traceAll</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>traceAllSync</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>serverStartSync</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>logConnections</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>logConnectionsSync</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>minThreads</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>maxThreads</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>threadsSync</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>timeSlice</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>timeSliceSync</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>keepAlive</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>minPoolSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>maxPoolSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>poolSync</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>debugOutput</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>cleanupOnStart</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>restartFlag</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>INVALID_OR_NOTSET_SECURITYMECHANISM</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>allowOnlySecurityMechanism</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>clientSocket</FieldName>
            <FieldType>Socket</FieldType>
        </Field>
        <Field>
            <FieldName>clientIs</FieldName>
            <FieldType>InputStream</FieldType>
        </Field>
        <Field>
            <FieldName>clientOs</FieldName>
            <FieldType>OutputStream</FieldType>
        </Field>
        <Field>
            <FieldName>byteArrayOs</FieldName>
            <FieldType>ByteArrayOutputStream</FieldType>
        </Field>
        <Field>
            <FieldName>commandOs</FieldName>
            <FieldType>DataOutputStream</FieldType>
        </Field>
        <Field>
            <FieldName>shutdownSync</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>shutdown</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>connNum</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>serverSocket</FieldName>
            <FieldType>ServerSocket</FieldType>
        </Field>
        <Field>
            <FieldName>serverInstance</FieldName>
            <FieldType>NetworkServerControlImpl</FieldType>
        </Field>
        <Field>
            <FieldName>langUtil</FieldName>
            <FieldType>LocalizedResource</FieldType>
        </Field>
        <Field>
            <FieldName>clientLocale</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>localAddresses</FieldName>
            <FieldType>ArrayList</FieldType>
        </Field>
        <Field>
            <FieldName>localAddresses</FieldName>
            <FieldType>InetAddress</FieldType>
        </Field>
        <Field>
            <FieldName>sessionTable</FieldName>
            <FieldType>Hashtable</FieldType>
        </Field>
        <Field>
            <FieldName>sessionTable</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>currentSession</FieldName>
            <FieldType>Session</FieldType>
        </Field>
        <Field>
            <FieldName>threadList</FieldName>
            <FieldType>Vector</FieldType>
        </Field>
        <Field>
            <FieldName>threadList</FieldName>
            <FieldType>DRDAConnThread</FieldType>
        </Field>
        <Field>
            <FieldName>runQueue</FieldName>
            <FieldType>Vector</FieldType>
        </Field>
        <Field>
            <FieldName>runQueue</FieldName>
            <FieldType>Session</FieldType>
        </Field>
        <Field>
            <FieldName>freeThreads</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>appRequesterTable</FieldName>
            <FieldType>Hashtable</FieldType>
        </Field>
        <Field>
            <FieldName>appRequesterTable</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>propertyFileName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>thisControl</FieldName>
            <FieldType>NetworkServerControlImpl</FieldType>
        </Field>
        <Field>
            <FieldName>shutdownDatabasesOnShutdown</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>SSL_OFF</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SSL_BASIC</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SSL_PEER_AUTHENTICATION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>sslMode</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SUPPORTS_EUSRIDPWD</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>nextThreadNumber</FieldName>
            <FieldType>AtomicInteger</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>logWriter</MethodName>
            <MethodComment>/** 
 * Get the log writer we're using 
 */
</MethodComment>
            <ReturnType>PrintWriter</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getHost</MethodName>
            <MethodComment>/** 
 * Get the host where we listen for connections.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPort</MethodName>
            <MethodComment>/** 
 * Get the port where we listen for connections.
 * @return the port number
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runningUnsecure</MethodName>
            <MethodComment>/** 
 * Return true if the customer forcibly overrode our decision to install a default SecurityManager.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>NetworkServerControlImpl</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;init;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;getPropertyInfo;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>NetworkServerControlImpl</MethodName>
            <MethodComment>/** 
 * Internal constructor for NetworkServerControl API. 
 * @param address InetAddress to listen on, throws NPE if null
 * @param portNumber portNumber to listen on, -1 use property or default
 * @throws Exception on error
 * @see NetworkServerControl
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>address</ParamName>
                    <ParamType>InetAddress</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>portNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>NetworkServerControlImpl</MethodName>
            <MethodComment>/** 
 * Internal constructor for NetworkServerControl API. 
 * @param userName the user name for actions requiring authorization
 * @param password the password for actions requiring authorization
 * @throws Exception on error
 * @see NetworkServerControl
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>userName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>password</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>NetworkServerControlImpl</MethodName>
            <MethodComment>/** 
 * Internal constructor for NetworkServerControl API. 
 * @param address InetAddress to listen on, throws NPE if null
 * @param portNumber portNumber to listen on, -1 use property or default
 * @param userName the user name for actions requiring authorization
 * @param password the password for actions requiring authorization
 * @throws Exception on error
 * @see NetworkServerControl
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>address</ParamName>
                    <ParamType>InetAddress</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>portNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>userName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>password</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [codeSet=PropertyUtil.getSystemProperty(LocalizedResource.ENV_CODESET)]</InnerVar>
                <InnerVar>String [locale=PropertyUtil.getSystemProperty(LocalizedResource.ENV_LOCALE)]</InnerVar>
                <InnerVar>ProductVersionHolder [myPVH=getNetProductVersionHolder()]</InnerVar>
                <InnerVar>String [majorStr=String.valueOf(myPVH.getMajorVersion())]</InnerVar>
                <InnerVar>String [minorStr=String.valueOf(myPVH.getMinorVersion())]</InnerVar>
                <InnerVar>String [drdaMaintStr=String.valueOf(myPVH.getDrdaMaintVersion())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makePrintWriter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PrintWriter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDriver</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Driver</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLogWriter</MethodName>
            <MethodComment>/** 
 * Set the output stream for console messages If this is set to null, no messages will be written to the console
 * @param outWriter output stream for console messages
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>outWriter</ParamName>
                    <ParamType>PrintWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>consoleError</MethodName>
            <MethodComment>/** 
 * Write an error message to console output stream and throw an exception for this error
 * @param msg   error message
 * @exception Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;consoleMessage;[msg, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>debugOutput</MethodName>
            <MethodComment>/** 
 * Return the debug state 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>att_extnam</MethodName>
            <MethodComment>/** 
 * Return the att_extnam server attribute 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>att_srvclsnm</MethodName>
            <MethodComment>/** 
 * Return the att_srvclsnm server attribute 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>att_srvrlslv</MethodName>
            <MethodComment>/** 
 * Return the att_srvrlslv server attribute 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prdId</MethodName>
            <MethodComment>/** 
 * Return the product id 
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prdIdBytes</MethodName>
            <MethodComment>/** 
 * Return the bytes of the product id 
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>consoleExceptionPrint</MethodName>
            <MethodComment>/** 
 * Write an exception to console output stream, but only if debugOutput is true.
 * @param e exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Exception</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>consoleExceptionPrintTrace</MethodName>
            <MethodComment>/** 
 * Write an exception (with trace) to console output stream.
 * @param e exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PrintWriter [lw=logWriter]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;consoleMessage;[e.getMessage(), true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>consoleMessage</MethodName>
            <MethodComment>/** 
 * Write a message to console output stream
 * @param msg   message
 * @param printTimeStamp Whether to prepend a timestamp to the message or not
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>printTimeStamp</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PrintWriter [lw=logWriter]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment>/** 
 * Start a network server.  Launches a separate thread with  DRDAServerStarter.  Want to use Monitor.startModule, so it can all get shutdown when Derby shuts down, but  can't get it working right now.
 * @param consoleWriter   PrintWriter to which server console will be output. Null will disable console output.
 * @exception Exception throws an exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>consoleWriter</ParamName>
                    <ParamType>PrintWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DRDAServerStarter [starter=new DRDAServerStarter()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>starter;setStartInfo;[hostAddress, portNumber, consoleWriter]</InnerMethodInvoke>
                <InnerMethodInvoke>this;setLogWriter;[consoleWriter]</InnerMethodInvoke>
                <InnerMethodInvoke>null;startNetworkServer;[]</InnerMethodInvoke>
                <InnerMethodInvoke>starter;boot;[false, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createServerSocket</MethodName>
            <MethodComment>/** 
 * Create the right kind of server socket
 */
</MethodComment>
            <ReturnType>ServerSocket</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;buildLocalAddressList;[hostAddress]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEnabledProtocols</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sslServerSocket</ParamName>
                    <ParamType>SSLServerSocket</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [sbf=new StringBuffer()]</InnerVar>
                <InnerVar>String[] [enabledProtocols=sslServerSocket.getEnabledProtocols()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>blockingStart</MethodName>
            <MethodComment>/** 
 * Start a network server
 * @param consoleWriter   PrintWriter to which server console will be output. Null will disable console output.
 * @exception Exception throws an exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>consoleWriter</ParamName>
                    <ParamType>PrintWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ManagementService [mgmtService=((ManagementService)getSystemModule(Module.JMX))]</InnerVar>
                <InnerVar>Object [versionMBean=mgmtService.registerMBean(new Version(getNetProductVersionHolder(),SystemPermission.SERVER),VersionMBean.class,"type=Version,jar=derbynet.jar")]</InnerVar>
                <InnerVar>Object [networkServerMBean=mgmtService.registerMBean(new NetworkServerMBeanImpl(this),NetworkServerMBean.class,"type=NetworkServer")]</InnerVar>
                <InnerVar>ClientThread [clientThread=AccessController.doPrivileged(new PrivilegedExceptionAction&lt;ClientThread&gt;(){
  public ClientThread run() throws Exception {
    return new ClientThread(thisControl,serverSocket);
  }
}
)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;startNetworkServer;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setLogWriter;[consoleWriter]</InnerMethodInvoke>
                <InnerMethodInvoke>clientThread;start;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ServerSocket</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClientThread</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>clientThread;interrupt;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>threadi;interrupt;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>consolePrintAndIgnore</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msgProp</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Exception</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>printTimeStamp</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;consoleExceptionPrintTrace;[e]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startNetworkServer</MethodName>
            <MethodComment>/** 
 * Load Derby and save driver for future use. We can't call Driver Manager when the client connects,  because they might be holding the DriverManager lock.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [restartCheck=this.restartFlag]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shutdown</MethodName>
            <MethodComment>/** 
 * Shutdown a network server
 * @exception Exception throws an exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>PrintWriter [savWriter]</InnerVar>
                <InnerVar>int [ntry]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>write</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flush</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkShutdownPrivileges</MethodName>
            <MethodComment>/** 
 * @throws SQLException if authentication or privileges check fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>AuthenticationService [auth=((AuthenticationService)findService(AuthenticationService.MODULE,"authentication"))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>directShutdown</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkShutdownPrivileges;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;directShutdownInternal;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>directShutdownInternal</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isServerStarted</MethodName>
            <MethodComment>/** 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ping</MethodName>
            <MethodComment>/** 
 * Ping opening an new socket and close it.
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pingWithNoOpen</MethodName>
            <MethodComment>/** 
 * Ping the server using the client socket that is already open.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [database=null]</InnerVar>
                <InnerVar>String [user=null]</InnerVar>
                <InnerVar>String [password=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>trace</MethodName>
            <MethodComment>/** 
 * Turn tracing on or off for all sessions
 * @param on            true to turn tracing on, false to turn tracing off
 * @exception Exception throws an exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>on</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;trace;[0, on]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>trace</MethodName>
            <MethodComment>/** 
 * Turn tracing on or off for one session or all sessions
 * @param connNum   the connNum of the session, 0 if all sessions
 * @param on            true to turn tracing on, false to turn tracing off
 * @exception Exception throws an exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>connNum</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>on</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>consoleTraceMessage</MethodName>
            <MethodComment>/** 
 * Print trace change message to console
 * @param on            true to print tracing on, false to print tracing off
 * @exception Exception throws an exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>connNum</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>on</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [messageID]</InnerVar>
                <InnerVar>String[] [args=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;consolePropertyMessage;[messageID, args]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>logConnections</MethodName>
            <MethodComment>/** 
 * Turn logging connections on or off. When logging is turned on a message is written to derby.log each time a connection is made.
 * @param on            true to turn on, false to turn  off
 * @exception Exception throws an exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>on</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sendSetTraceDirectory</MethodName>
            <MethodComment>/** 
 * @see NetworkServerControl#setTraceDirectory
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>traceDirectory</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sysinfo</MethodName>
            <MethodComment>/** 
 * @see NetworkServerControl#getSysinfo
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runtimeInfo</MethodName>
            <MethodComment>/** 
 * @see NetworkServerControl#getRuntimeInfo
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>usage</MethodName>
            <MethodComment>/** 
 * Display usage information
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>netSetMaxThreads</MethodName>
            <MethodComment>/** 
 * Connect to  network server and set connection maxthread parameter
 * @param max       maximum number of connections, if 0, connectionscreated when no free connection available if -1, use default
 * @exception Exception throws an exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>max</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>netSetTimeSlice</MethodName>
            <MethodComment>/** 
 * Set network server connection timeslice parameter
 * @param timeslice amount of time given to each session before yielding toanother session, if 0, never yield. if -1, use default.
 * @exception Exception throws an exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>timeslice</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentProperties</MethodName>
            <MethodComment>/** 
 * Get current properties
 * @return Properties object containing properties
 * @exception Exception throws an exception if an error occurs
 */
</MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUniqueThreadName</MethodName>
            <MethodComment>/** 
 * Get a thread name that is both meaningful and unique (primarily for debugging purposes).
 * @param base the first part of the thread name (the meaningful part)
 * @return a unique thread name that starts with {@code base} and isfollowed by an underscore and a unique sequence number
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>base</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeFromSessionTable</MethodName>
            <MethodComment>/** 
 * Remove session from session table
 * @param sessionid     id of session to be removed
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sessionid</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sessionTable;remove;[sessionid]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processCommands</MethodName>
            <MethodComment>/** 
 * processCommands reads and processes NetworkServerControlImpl commands sent to the network server over the socket.  The protocol used is 4 bytes     - String CMD: 2 bytes     - Protocol version 1 byte      - length of locale (0 for default) n bytes - locale 1 byte      - length of codeset (0 for default) n bytes - codeset 1 byte      - command n bytes     - parameters for the command The server returns 4 bytes     - String RPY: for most commands 1 byte      - command result, 0 - OK, 1 - warning, 2 - error if warning or error 1 bytes     - length of message key n bytes     - message key 1 byte      - number of parameters to message {2 bytes        - length of parameter n bytes     - parameter} for each parameter for sysinfo 1 byte      - command result, 0 - OK, 1 - warning, 2 - error if OK  2 bytes     - length of sysinfo n bytes     - sysinfo Note, the 3rd byte of the command must not be 'D0' to distinquish it from DSS structures. The protocol for the parameters for each command follows: Command: trace &lt;connection id&gt; {on | off} Protocol: 4 bytes     - connection id - connection id of 0 means all sessions 1 byte      - 0 off, 1 on Command: logConnections {on | off} Protocol: 1 byte      - 0 off, 1 on Command: shutdown // DERBY-2109: transmit user credentials for System Privileges check 2 bytes     - length of user name n bytes     - user name 2 bytes     - length of password n bytes     - password Command: sysinfo No parameters Command: dbstart Protocol: 2 bytes     - length of database name n bytes     - database name 2 bytes     - length of boot password n bytes     - boot password 2 bytes     - length of encryption algorithm n bytes     - encryption algorithm 2 bytes     - length of encryption provider n bytes     - encryption provider 2 bytes     - length of user name n bytes     - user name 2 bytes     - length of password n bytes     - password Command: dbshutdown Protocol: 2 bytes     - length of database name n bytes     - database name 2 bytes     - length of user name n bytes     - user name 2 bytes     - length of password n bytes     - password Command: connpool Protocol: 2 bytes     - length of database name, if 0, default for all databases is set n bytes     - database name 2 bytes     - minimum number of connections, if 0, connection pool not used if value is -1 use default 2 bytes     - maximum number of connections, if 0, connections are created as needed, if value is -1 use default Command: maxthreads Protocol: 2 bytes     - maximum number of threads Command: timeslice Protocol: 4 bytes     - timeslice value Command: tracedirectory Protocol: 2 bytes     - length of directory name n bytes     - directory name Command: test connection Protocol: 2 bytes     - length of database name if 0, just the connection to the network server is tested and user name and password aren't sent n bytes     - database name 2 bytes     - length of user name (optional) n bytes     - user name 2 bytes     - length of password  (optional) n bytes     - password The calling routine is synchronized so that multiple threads don't clobber each other. This means that configuration commands will be serialized. This shouldn't be a problem since they should be fairly rare.
 * @param reader    input reader for command
 * @param writer output writer for command
 * @param session   session information
 * @exception Throwable throws an exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>DDMReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>writer</ParamName>
                    <ParamType>DDMWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>session</ParamName>
                    <ParamType>Session</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>logConnectionsChange</MethodName>
            <MethodComment>/** 
 * Record a change to the connection logging mode 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>on</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [args=null]</InnerVar>
                <InnerVar>String [messageID]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;consolePropertyMessage;[messageID, args]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNextSession</MethodName>
            <MethodComment>/** 
 * Get the next session for the thread to work on Called from DRDAConnThread after session completes or timeslice exceeded.    If there is a waiting session, pick it up and put currentSession  at the back of the queue if there is one.
 * @param currentSession    session thread is currently working on
 * @return  next session to work on, could be same as current session
 */
</MethodComment>
            <ReturnType>Session</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>currentSession</ParamName>
                    <ParamType>Session</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Session [retval=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAppRequester</MethodName>
            <MethodComment>/** 
 * Get the stored application requester or store if we haven't seen it yet
 * @param appRequester Application Requester to look for
 * @return  stored application requester
 */
</MethodComment>
            <ReturnType>AppRequester</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>appRequester</ParamName>
                    <ParamType>AppRequester</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AppRequester [s=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getManagerLevel</MethodName>
            <MethodComment>/** 
 * Get the server manager level for a given manager
 * @param manager codepoint for manager
 * @return manager level
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>manager</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [mindex=CodePoint.getManagerIndex(manager)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>supportsCCSID</MethodName>
            <MethodComment>/** 
 * Check whether a CCSID code page is supported
 * @param ccsid CCSID to check
 * @return true if supported; false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ccsid</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>consolePropertyMessage</MethodName>
            <MethodComment>/** 
 * Put property message on console
 * @param msgProp       message property key
 * @param printTimeStamp whether to prepend a timestamp to the message
 * @throws Exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msgProp</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>printTimeStamp</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;consolePropertyMessageWork;[msgProp, null, printTimeStamp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>consolePropertyMessage</MethodName>
            <MethodComment>/** 
 * Put property message on console
 * @param msgProp       message property key
 * @param arg           argument for message
 * @throws Exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msgProp</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;consolePropertyMessageWork;[msgProp, new String[]{arg}, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>consolePropertyMessage</MethodName>
            <MethodComment>/** 
 * Put property message on console
 * @param msgProp       message property key
 * @param args          argument array for message
 * @throws Exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msgProp</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;consolePropertyMessageWork;[msgProp, args, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isCmd</MethodName>
            <MethodComment>/** 
 * Is this the command protocol
 * @param val
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>val</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeCommandReplyHeader</MethodName>
            <MethodComment>/** 
 * Write Command reply
 * @param writer    writer to use 
 * @throws Exception if a problem occurs sending OK
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>writer</ParamName>
                    <ParamType>DDMWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>writer;setCMDProtocol;[]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;writeString;[REPLY_HEADER]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sendOK</MethodName>
            <MethodComment>/** 
 * Send OK from server to client after processing a command
 * @param writer    writer to use for sending OK
 * @throws Exception if a problem occurs sending OK
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>writer</ParamName>
                    <ParamType>DDMWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeCommandReplyHeader;[writer]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;writeByte;[OK]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;flush;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sendOKInt</MethodName>
            <MethodComment>/** 
 * Send OK and int value
 * @param writer writer to use for sending
 * @param val   int val to send
 * @throws Exception if a problem occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>writer</ParamName>
                    <ParamType>DDMWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>val</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeCommandReplyHeader;[writer]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;writeByte;[OK]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;writeNetworkInt;[val]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;flush;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sendMessage</MethodName>
            <MethodComment>/** 
 * Send Error or Warning from server to client after processing a command
 * @param writer    writer to use for sending message
 * @param messageType   1 for Warning, 2 for Error 3 for SQLError
 * @param message   message
 * @throws Exception if a problem occurs sending message
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>writer</ParamName>
                    <ParamType>DDMWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>messageType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeCommandReplyHeader;[writer]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;writeByte;[messageType]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;writeLDString;[message]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;flush;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sendSQLMessage</MethodName>
            <MethodComment>/** 
 * Send SQL Exception from server to client after processing a command
 * @param writer    writer to use for sending message
 * @param se        Derby exception
 * @param type      type of exception, SQLERROR or SQLWARNING
 * @throws Exception if a problem occurs sending message
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>writer</ParamName>
                    <ParamType>DDMWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>se</ParamName>
                    <ParamType>SQLException</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [locMsg=new StringBuffer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;sendMessage;[writer, type, locMsg.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sendSysInfo</MethodName>
            <MethodComment>/** 
 * Send SysInfo information from server to client
 * @param writer    writer to use for sending sysinfo
 * @throws Exception if a problem occurs sending value
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>writer</ParamName>
                    <ParamType>DDMWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [sysinfo=new StringBuffer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sysinfo;append;[getNetSysInfo()]</InnerMethodInvoke>
                <InnerMethodInvoke>sysinfo;append;[getCLSSysInfo()]</InnerMethodInvoke>
                <InnerMethodInvoke>writer;flush;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sendRuntimeInfo</MethodName>
            <MethodComment>/** 
 * Send RuntimeInfo information from server to client
 * @param writer    writer to use for sending sysinfo
 * @throws Exception if a problem occurs sending value
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>writer</ParamName>
                    <ParamType>DDMWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>writer;flush;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sendPropInfo</MethodName>
            <MethodComment>/** 
 * Send property information from server to client
 * @param writer    writer to use for sending sysinfo
 * @throws Exception if a problem occurs sending value
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>writer</ParamName>
                    <ParamType>DDMWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNetSysInfo</MethodName>
            <MethodComment>/** 
 * Get Net Server information
 * @return system information for the Network Server
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>StringBuffer [sysinfo=new StringBuffer()]</InnerVar>
                <InnerVar>LocalizedResource [localLangUtil=langUtil]</InnerVar>
                <InnerVar>Properties [p=getPropertyValues()]</InnerVar>
                <InnerVar>ByteArrayOutputStream [bos=new ByteArrayOutputStream()]</InnerVar>
                <InnerVar>PrintStream [ps=new PrintStream(bos)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sysinfo;append;[localLangUtil.getTextMessage("DRDA_SysInfoBanner.I") + "\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>sysinfo;append;[localLangUtil.getTextMessage("DRDA_SysInfoVersion.I") + " " + att_srvrlslv]</InnerMethodInvoke>
                <InnerMethodInvoke>sysinfo;append;["  "]</InnerMethodInvoke>
                <InnerMethodInvoke>sysinfo;append;[localLangUtil.getTextMessage("DRDA_SysInfoBuild.I") + " " + buildNumber]</InnerMethodInvoke>
                <InnerMethodInvoke>sysinfo;append;["  "]</InnerMethodInvoke>
                <InnerMethodInvoke>sysinfo;append;[localLangUtil.getTextMessage("DRDA_SysInfoDrdaPRDID.I") + " " + prdId]</InnerMethodInvoke>
                <InnerMethodInvoke>sysinfo;append;["\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>p;list;[ps]</InnerMethodInvoke>
                <InnerMethodInvoke>sysinfo;append;[bos.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRuntimeInfo</MethodName>
            <MethodComment>/** 
 * @see NetworkServerControl#getRuntimeInfo
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCLSSysInfo</MethodName>
            <MethodComment>/** 
 * Get Derby information
 * @return system information for Derby
 * @throws IOException if a problem occurs encoding string
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ByteArrayOutputStream [bos=new ByteArrayOutputStream()]</InnerVar>
                <InnerVar>LocalizedResource [localLangUtil=langUtil]</InnerVar>
                <InnerVar>LocalizedOutput [aw=localLangUtil.getNewOutput(bos)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>org.apache.derby.impl.tools.sysinfo.Main;getMainInfo;[aw, false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseArgs</MethodName>
            <MethodComment>/** 
 * Parse the command-line arguments. As a side-effect, fills in various instance fields. This method was carved out of executeWork() so that NetworkServerControl can figure out whether to install a security manager before the server actually comes up. This is part of the work for DERBY-2196.
 * @param args  array of arguments indicating command to be executed
 * @return the command to be executed
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [command=findCommand(args)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executeWork</MethodName>
            <MethodComment>/** 
 * Execute the command given on the command line
 * @param command   The command to execute. The command itself was determined by an earlier call to parseArgs().
 * @exception Exception throws an exception if an error occurssee class comments for more information
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [min]</InnerVar>
                <InnerVar>int [max]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runQueueAdd</MethodName>
            <MethodComment>/** 
 * Add session to the run queue
 * @param clientSession session needing work
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clientSession</ParamName>
                    <ParamType>Session</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findCommand</MethodName>
            <MethodComment>/** 
 * Go through the arguments and find the command and save the dash arguments and arguments to the command.  Only one command is allowed in the argument list.
 * @param args  arguments to search
 * @return  command
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processDashArg</MethodName>
            <MethodComment>/** 
 * Get the dash argument. Optional arguments are formated as -x value.
 * @param pos   starting point
 * @param args  arguments to search
 * @return  command
 * @exception Exception thrown if an error occurs
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char [c=args[pos].charAt(1)]</InnerVar>
                <InnerVar>int [dashArg=-1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isOn</MethodName>
            <MethodComment>/** 
 * Is string "on" or "off"
 * @param arg   string to check
 * @return  true if string is "on", false if string is "off"
 * @exception Exception thrown if string is not one of "on" or "off"
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>closeSocket</MethodName>
            <MethodComment>/** 
 * Close the resources associated with the opened socket.
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setUpSocket</MethodName>
            <MethodComment>/** 
 * Set up client socket to send a command to the network server
 * @exception Exception thrown if exception encountered
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Socket</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownHostException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>java.security.NoSuchAlgorithmException</ExceptionType>
                <ExceptionType>java.security.KeyManagementException</ExceptionType>
                <ExceptionType>java.security.NoSuchProviderException</ExceptionType>
                <ExceptionType>java.security.KeyStoreException</ExceptionType>
                <ExceptionType>java.security.UnrecoverableKeyException</ExceptionType>
                <ExceptionType>java.security.cert.CertificateException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeSSLv3andSSLv2Hello</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>enabledProtocols</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [supportedProtocols=new String[enabledProtocols.length]]</InnerVar>
                <InnerVar>int [supportedProtocolsCount=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkAddressIsLocal</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inetAddr</ParamName>
                    <ParamType>InetAddress</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;consolePropertyMessage;["DRDA_NeedLocalHost.S", new String[]{inetAddr.getHostName(),serverSocket.getInetAddress().getHostName()}]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownHostException</ExceptionType>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildLocalAddressList</MethodName>
            <MethodComment>/** 
 * Build local address list to allow admin commands.
 * @param bindAddr Address on which server was startedNote: Some systems may not support localhost. In that case a console message will print for the localhost entries, but the server will continue to start.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bindAddr</ParamName>
                    <ParamType>InetAddress</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>localAddresses;add;[bindAddr]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unknownHostException</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeCommandHeader</MethodName>
            <MethodComment>/** 
 * Write command header consisting of command header string and default protocol version and command. At this point, all the commands except shutdown with username/passwrod use default protocol version.
 * @param command   command to be written
 * @exception Exception throws an exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeCommandHeader;[command, DEFAULT_PROTOCOL_VERSION]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeCommandHeader</MethodName>
            <MethodComment>/** 
 * Write command header consisting of command header string and passed protocol version and command. At this point, all the commands except shutdown with username/passwrod use default protocol version.
 * @param command   command to be written
 * @param protocol_version_for_command protocol version to be usedfor the given command
 * @exception Exception throws an exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>protocol_version_for_command</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeLDString</MethodName>
            <MethodComment>/** 
 * Write length delimited string string
 * @param msg   string to be written
 * @exception Exception throws an exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeString</MethodName>
            <MethodComment>/** 
 * Write string
 * @param msg String to write
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [msgBytes=msg.getBytes(DEFAULT_ENCODING)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>commandOs;write;[msgBytes, 0, msgBytes.length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeShort</MethodName>
            <MethodComment>/** 
 * Write short
 * @param value value to be written
 * @exception Exception throws an exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeByte</MethodName>
            <MethodComment>/** 
 * Write byte
 * @param value value to be written
 * @exception Exception throws an exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>send</MethodName>
            <MethodComment>/** 
 * Send client message to server
 * @exception Exception throws an exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clientSocketError</MethodName>
            <MethodComment>/** 
 * Stream error writing to client socket
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>IOException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;consoleExceptionPrintTrace;[e]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readResult</MethodName>
            <MethodComment>/** 
 * Read result from sending client message to server
 * @exception Exception throws an exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [messageType=replyBuffer[replyBufferPos++] &amp; 0xFF]</InnerVar>
                <InnerVar>String [message=readLDString()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;fillReplyBuffer;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;readCommandReplyHeader;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ensureDataInBuffer</MethodName>
            <MethodComment>/** 
 * Ensure the reply buffer is large enough to hold all the data; don't just rely on OS level defaults
 * @param minimumBytesNeeded    size of buffer required
 * @param failOnEOS tells whether or not an error should be raised ifend-of-stream is reached before the requested amount of bytes could be read
 * @exception Exception throws an exception if a problem reading the reply
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>minimumBytesNeeded</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>failOnEOS</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fillReplyBuffer</MethodName>
            <MethodComment>/** 
 * Fill the reply buffer with the reply allocates a reply buffer if one doesn't exist
 * @exception Exception throws an exception if a problem reading the reply
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readCommandReplyHeader</MethodName>
            <MethodComment>/** 
 * Read the command reply header from the server
 * @exception Exception throws an exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [header=new String(replyBuffer,0,REPLY_HEADER_LENGTH,DEFAULT_ENCODING)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;ensureDataInBuffer;[REPLY_HEADER_LENGTH, false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readShort</MethodName>
            <MethodComment>/** 
 * Read short from buffer
 * @exception Exception throws an exception if an error occurs
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;ensureDataInBuffer;[2, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readInt</MethodName>
            <MethodComment>/** 
 * Read int from buffer
 * @exception Exception throws an exception if an error occurs
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;ensureDataInBuffer;[4, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readStringReply</MethodName>
            <MethodComment>/** 
 * Read String reply
 * @param msgKey    error message key
 * @return string value or null 
 * @exception Exception throws an error if problems reading reply
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msgKey</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;fillReplyBuffer;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;readCommandReplyHeader;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readLDString</MethodName>
            <MethodComment>/** 
 * Read length delimited string from a buffer
 * @return string value from buffer
 * @exception Exception throws an error if problems reading reply
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [strlen=readShort()]</InnerVar>
                <InnerVar>String [retval=new String(replyBuffer,replyBufferPos,strlen,DEFAULT_ENCODING)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;ensureDataInBuffer;[strlen, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readBytesReply</MethodName>
            <MethodComment>/** 
 * Read Bytes reply
 * @param msgKey    error message key
 * @return string value or null 
 * @exception Exception throws an error if problems reading reply
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msgKey</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;fillReplyBuffer;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;readCommandReplyHeader;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readLDBytes</MethodName>
            <MethodComment>/** 
 * Read length delimited bytes from a buffer
 * @return byte array from buffer
 * @exception Exception throws an error if problems reading reply
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [len=readShort()]</InnerVar>
                <InnerVar>byte[] [retval=new byte[len]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;ensureDataInBuffer;[len, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPropertyInfo</MethodName>
            <MethodComment>/** 
 * Initialize fields from system properties
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [directory=PropertyUtil.getSystemProperty(Property.SYSTEM_HOME_PROPERTY)]</InnerVar>
                <InnerVar>String [propval=PropertyUtil.getSystemProperty(Property.DRDA_PROP_LOGCONNECTIONS)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setSSLMode;[getSSLModeValue(propval)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSecMecValue</MethodName>
            <MethodComment>/** 
 * Retrieve the SECMEC integer value from the user friendly security mechanism name
 * @param s  security mechanism name
 * @return integer value , return the SECMEC value for the security mechanism as defined by DRDA spec or INVALID_OR_NOTSET_SECURITYMECHANISM if 's' passed is invalid  or not supported security  mechanism
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [secmec=INVALID_OR_NOTSET_SECURITYMECHANISM]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStringValueForSecMec</MethodName>
            <MethodComment>/** 
 * Retrieve the string name for the integer secmec value
 * @param secmecVal   secmec value
 * @return String - return the string name corresponding to the secmec value if recognized else returns null
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>secmecVal</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>supportsEUSRIDPWD</MethodName>
            <MethodComment>/** 
 * This method returns whether EUSRIDPWD security mechanism is supported or not. See class static block for more info.
 * @return true if EUSRIDPWD is supported, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSSLModeValue</MethodName>
            <MethodComment>/** 
 * Get the SSL-mode from a string.
 * @param s the SSL-mode string ("off"/"false", "on"/"true" or"authenticate"/"auth"
 * @return SSL_OFF, SSL_BASIC or SSL_PEER_AUTHENTICATION. Will default toSSL_OFF if the input does not match one of the four listed above.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSSLModeString</MethodName>
            <MethodComment>/** 
 * Get the string value of the SSL-mode. This is the inverse of getSSLModeValue.
 * @param i The SSL-mode value (SSL_OFF, SSL_BASIC orSSL_PEER_AUTHENTICATION)
 * @return The string representation ("off","on" or"autneticate"). Will default to SSL_OFF for other values than those listed above.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>i</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIntPropVal</MethodName>
            <MethodComment>/** 
 * Get integer property values
 * @param propName  property name
 * @param propVal   string property value
 * @return integer value
 * @exception Exception if not a valid integer
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>propName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propVal</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [val=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>consolePropertyMessageWork</MethodName>
            <MethodComment>/** 
 * Handle console error message - display on console and if it is a user error, display usage - if user error or severe error, throw exception with message key and message
 * @param messageKey    message key
 * @param args          arguments to message
 * @param printTimeStamp whether to prepend a timestamp to the message
 * @throws Exception if an error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>messageKey</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>printTimeStamp</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [locMsg=null]</InnerVar>
                <InnerVar>int [type=getMessageType(messageKey)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;consoleMessage;[locMsg, printTimeStamp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>throwSQLException</MethodName>
            <MethodComment>/** 
 * Throw a SQL Exception which was sent over by a server Format of the msg is SQLSTATE:localized message\nSQLSTATE:next localized message
 * @param msg       msg containing SQL Exception
 * @throws SQLException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SQLException [se=null]</InnerVar>
                <InnerVar>SQLException [ne]</InnerVar>
                <InnerVar>SQLException [ce=null]</InnerVar>
                <InnerVar>StringBuffer [strbuf=new StringBuffer()]</InnerVar>
                <InnerVar>StringTokenizer [tokenizer=new StringTokenizer(msg,"\n")]</InnerVar>
                <InnerVar>String [sqlstate=null]</InnerVar>
                <InnerVar>String [str]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>throwSQLWarning</MethodName>
            <MethodComment>/** 
 * Throw a SQL Warning which was sent over by a server Format of the msg is SQLSTATE:localized message\nSQLSTATE:next localized message
 * @param msg       msg containing SQL Warning
 * @throws SQLWarning
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SQLWarning [se=null]</InnerVar>
                <InnerVar>SQLWarning [ne]</InnerVar>
                <InnerVar>SQLWarning [ce=null]</InnerVar>
                <InnerVar>StringBuffer [strbuf=new StringBuffer()]</InnerVar>
                <InnerVar>StringTokenizer [tokenizer=new StringTokenizer(msg,"\n")]</InnerVar>
                <InnerVar>String [sqlstate=null]</InnerVar>
                <InnerVar>String [str]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLWarning</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>throwUnexpectedException</MethodName>
            <MethodComment>/** 
 * Print a trace for the (unexpected) exception received, then throw a generic exception indicating that 1) an unexpected exception was thrown, and 2) we've already printed the trace (so don't do it again).
 * @param e An unexpected exception.
 * @throws Exception with message UNEXPECTED_ERR.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Exception</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;consoleExceptionPrintTrace;[e]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>localizeMessage</MethodName>
            <MethodComment>/** 
 * Convenience routine so that NetworkServerControl can localize messages.
 * @param msgProp   message key
 * @param args      arguments to message
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msgProp</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>localizeMessage</MethodName>
            <MethodComment>/** 
 * Localize a message given a particular AppUI 
 * @param msgProp   message key
 * @param localLangUtil LocalizedResource to use to localize message
 * @param args      arguments to message
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msgProp</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>localLangUtil</ParamName>
                    <ParamType>LocalizedResource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object[] [argMsg=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMessageType</MethodName>
            <MethodComment>/** 
 * Determine type of message
 * @param msg       message
 * @return message type
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [startpos=msg.indexOf('.') + 1]</InnerVar>
                <InnerVar>char [type=msg.charAt(startpos)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isMsgProperty</MethodName>
            <MethodComment>/** 
 * Determine whether string is a property key or not property keys start with DRDA_MSG_PREFIX
 * @param msg       message
 * @return true if it is a property key; false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLogConnections</MethodName>
            <MethodComment>/** 
 * Get the current value of logging connections
 * @return true if logging connections is on; false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLogConnections</MethodName>
            <MethodComment>/** 
 * Set the current value of logging connections
 * @param value true to turn logging connections on; false to turn it off
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSecurityMechanism</MethodName>
            <MethodComment>/** 
 * Set the security mechanism for derby.drda.securityMechanism If this property is set, server will only allow connections from client with this security mechanism. This method will map the user friendly string representing  the security mechanism to the corresponding drda secmec value
 * @param s security mechanism string value
 * @throws Exception if  value to set is invalid
 * @see Property#DRDA_PROP_SECURITYMECHANISM 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSecurityMechanism</MethodName>
            <MethodComment>/** 
 * get the security mechanism (secmec value) that the server will accept connections from.
 * @return the securitymechanism value. It is value that the derby.drda.securityMechanism was set to, if it is not set, then it is equal to INVALID_OR_NOTSET_SECURITYMECHANISM
 * @see Property#DRDA_PROP_SECURITYMECHANISM 
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTrace</MethodName>
            <MethodComment>/** 
 * Set the trace on/off for all sessions, or one session, depending on whether we got -s argument.
 * @param on    true to turn trace on; false to turn it off
 * @return true if set false if an error occurred
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>on</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [setTraceSuccessful=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTimeSlice</MethodName>
            <MethodComment>/** 
 * Get the current value of the time slice
 * @return time slice value
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTimeSlice</MethodName>
            <MethodComment>/** 
 * Set the current value of  time slice
 * @param value time slice value
 * @exception Exception if value is &amp;lt; 0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getKeepAlive</MethodName>
            <MethodComment>/** 
 * Get the current value of keepAlive to configure how long the server should keep the socket alive for a disconnected client
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMinThreads</MethodName>
            <MethodComment>/** 
 * Get the current value of minimum number of threads to create at start
 * @return value of minimum number of threads
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setMinThreads</MethodName>
            <MethodComment>/** 
 * Set the current value of minimum number of threads to create at start
 * @param value  value of minimum number of threads
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMaxThreads</MethodName>
            <MethodComment>/** 
 * Get the current value of maximum number of threads to create 
 * @return value of maximum number of threads
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setMaxThreads</MethodName>
            <MethodComment>/** 
 * Set the current value of maximum number of threads to create 
 * @param value value of maximum number of threads
 * @exception Exception if value is less than 0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSSLMode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSSLMode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTraceAll</MethodName>
            <MethodComment>/** 
 * Get the current value of whether to trace all the sessions
 * @return true if tracing is on for all sessions; false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTraceAll</MethodName>
            <MethodComment>/** 
 * Set the current value of whether to trace all the sessions
 * @param value true if tracing is on for all sessions; false otherwise
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTraceDirectory</MethodName>
            <MethodComment>/** 
 * Get the current value of trace directory
 * @return trace directory
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTraceDirectory</MethodName>
            <MethodComment>/** 
 * Set the current value of trace directory
 * @param value trace directory
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>wrapSQLError</MethodName>
            <MethodComment>/** 
 * Wrap SQL Error - display to console and raise exception
 * @param messageKey    Derby SQL Exception message id
 * @exception Exception raises exception for message
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>messageKey</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;consolePropertyMessage;["DRDA_SQLException.S", messageKey]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>wrapSQLWarning</MethodName>
            <MethodComment>/** 
 * Wrap SQL Warning - display to console and raise exception
 * @param messageKey    Derby SQL Exception message id
 * @exception Exception raises exception for message
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>messageKey</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;consolePropertyMessage;["DRDA_SQLWarning.I", messageKey]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPropertyValues</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Constructs an object containing network server related properties and their values. Some properties are only included if set. Some  other properties are included with a default value if not set.&lt;/p&gt; &lt;p&gt; This method is accessing the local JVM in which the network server instance is actually running (i.e. no networking).&lt;/p&gt; &lt;p&gt; This method is package private to allow access from relevant MBean  implementations in the same package.&lt;/p&gt;
 * @return a collection of network server properties and their current values
 */
</MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Properties [retval=new Properties()]</InnerVar>
                <InnerVar>String [tracedir=getTraceDirectory()]</InnerVar>
                <InnerVar>String [startDRDA=PropertyUtil.getSystemProperty(Property.START_DRDA)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>retval;put;[Property.DRDA_PROP_PORTNUMBER, Integer.toString(portNumber)]</InnerMethodInvoke>
                <InnerMethodInvoke>retval;put;[Property.DRDA_PROP_HOSTNAME, hostArg]</InnerMethodInvoke>
                <InnerMethodInvoke>retval;put;[Property.DRDA_PROP_KEEPALIVE, Boolean.toString(keepAlive)]</InnerMethodInvoke>
                <InnerMethodInvoke>retval;put;[Property.DRDA_PROP_TRACEALL, Boolean.toString(getTraceAll())]</InnerMethodInvoke>
                <InnerMethodInvoke>retval;put;[Property.DRDA_PROP_MINTHREADS, Integer.toString(getMinThreads())]</InnerMethodInvoke>
                <InnerMethodInvoke>retval;put;[Property.DRDA_PROP_MAXTHREADS, Integer.toString(getMaxThreads())]</InnerMethodInvoke>
                <InnerMethodInvoke>retval;put;[Property.DRDA_PROP_TIMESLICE, Integer.toString(getTimeSlice())]</InnerMethodInvoke>
                <InnerMethodInvoke>retval;put;[Property.DRDA_PROP_TIMESLICE, Integer.toString(getTimeSlice())]</InnerMethodInvoke>
                <InnerMethodInvoke>retval;put;[Property.DRDA_PROP_LOGCONNECTIONS, Boolean.toString(getLogConnections())]</InnerMethodInvoke>
                <InnerMethodInvoke>retval;put;[Property.START_DRDA, (startDRDA == null) ? "false" : startDRDA]</InnerMethodInvoke>
                <InnerMethodInvoke>retval;put;[Property.DRDA_PROP_SSL_MODE, getSSLModeString(getSSLMode())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addSession</MethodName>
            <MethodComment>/** 
 * Add a session - for use by &lt;code&gt;ClientThread&lt;/code&gt;. Put the session into the session table and the run queue. Start a new &lt;code&gt;DRDAConnThread&lt;/code&gt; if there are more sessions waiting than there are free threads, and the maximum number of threads is not exceeded. &lt;p&gt;&lt;code&gt;addSession()&lt;/code&gt; should only be called from one thread at a time.
 * @param clientSocket the socket to read from and write to
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clientSocket</ParamName>
                    <ParamType>Socket</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [connectionNumber=++connNum]</InnerVar>
                <InnerVar>Session [session=new Session(this,connectionNumber,clientSocket,getTraceDirectory(),getTraceAll())]</InnerVar>
                <InnerVar>boolean [enoughThreads]</InnerVar>
                <InnerVar>DRDAConnThread [thread=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sessionTable;put;[connectionNumber, session]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeThread</MethodName>
            <MethodComment>/** 
 * Remove a thread from the thread list. Should be called when a &lt;code&gt;DRDAConnThread&lt;/code&gt; has been closed.
 * @param thread the closed thread
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>thread</ParamName>
                    <ParamType>DRDAConnThread</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>threadList;remove;[thread]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getShutdownSync</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getShutdown</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildRuntimeInfo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>locallangUtil</ParamName>
                    <ParamType>LocalizedResource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [s=locallangUtil.getTextMessage("DRDA_RuntimeInfoBanner.I") + "\n"]</InnerVar>
                <InnerVar>int [sessionCount=0]</InnerVar>
                <InnerVar>int [waitingSessions=0]</InnerVar>
                <InnerVar>Runtime [rt=Runtime.getRuntime()]</InnerVar>
                <InnerVar>long [totalmem=rt.totalMemory()]</InnerVar>
                <InnerVar>long [freemem=rt.freeMemory()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rt;gc;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBytesRead</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [count=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBytesWritten</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [count=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getActiveSessions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [count=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRunQueueSize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getThreadListSize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConnectionNumber</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setClientLocale</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>locale</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNetProductVersionHolder</MethodName>
            <MethodComment>/** 
 * Retrieve product version information We need to make sure that this method gets the stream and passes it to  ProductVersionHolder, because it lives in the Network Server jar and won't be readily available to ProductVersionHolder when running under security manager.
 */
</MethodComment>
            <ReturnType>ProductVersionHolder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ProductVersionHolder [myPVH=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ProductVersionHolder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>InputStream [versionStream=getClass().getResourceAsStream(ProductGenusNames.NET_INFO)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownHostException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSystemModule</MethodName>
            <MethodComment>/** 
 * Privileged module lookup. Must be private so that user code can't call this entry point.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>factoryInterface</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findService</MethodName>
            <MethodComment>/** 
 * Privileged service lookup. Must be private so that user code can't call this entry point.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>factoryInterface</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>serviceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>