<Class>
    <Id>899</Id>
    <Package>org.apache.derby.jdbc</Package>
    <ClassName>ClientDataSource</ClassName>
    <SuperClass>BasicClientDataSource40</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Referenceable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ClientDataSource  /** 
 * This data source is suitable for a client/server use of Derby, running on full Java SE 6 and higher, corresponding to JDBC 4.0 and higher. &lt;p/&gt; ClientDataSource is a simple data source implementation that can be used for establishing connections in a non-pooling, non-distributed environment. The class ClientConnectionPoolDataSource can be used in a connection pooling environment, and the class ClientXADataSource can be used in a distributed, and pooling environment. &lt;p&gt;The example below registers a DNC data source object with a JNDI naming service. &lt;pre&gt; org.apache.derby.client.ClientDataSource dataSource = new org.apache.derby.client.ClientDataSource (); dataSource.setServerName ("my_derby_database_server"); dataSource.setDatabaseName ("my_derby_database_name"); javax.naming.Context context = new javax.naming.InitialContext(); context.bind ("jdbc/my_datasource_name", dataSource); &lt;/pre&gt; The first line of code in the example creates a data source object. The next two lines initialize the data source's properties. Then a Java object that references the initial JNDI naming context is created by calling the InitialContext() constructor, which is provided by JNDI. System properties (not shown) are used to tell JNDI the service provider to use. The JNDI name space is hierarchical, similar to the directory structure of many file systems. The data source object is bound to a logical JNDI name by calling Context.bind(). In this case the JNDI name identifies a subcontext, "jdbc", of the root naming context and a logical name, "my_datasource_name", within the jdbc subcontext. This is all of the code required to deploy a data source object within JNDI. This example is provided mainly for illustrative purposes. We expect that developers or system administrators will normally use a GUI tool to deploy a data source object. &lt;p/&gt; Once a data source has been registered with JNDI, it can then be used by a JDBC application, as is shown in the following example. &lt;pre&gt; javax.naming.Context context = new javax.naming.InitialContext (); javax.sql.DataSource dataSource = (javax.sql.DataSource) context.lookup ("jdbc/my_datasource_name"); java.sql.Connection connection = dataSource.getConnection ("user", "password"); &lt;/pre&gt; The first line in the example creates a Java object that references the initial JNDI naming context. Next, the initial naming context is used to do a lookup operation using the logical name of the data source. The Context.lookup() method returns a reference to a Java Object, which is narrowed to a javax.sql.DataSource object. In the last line, the DataSource.getConnection() method is called to produce a database connection. &lt;p/&gt; This simple data source subclass of BasicClientDataSource40 maintains it's own private &lt;code&gt;password&lt;/code&gt; property. &lt;p/&gt; The specified password, along with the user, is validated by DERBY. This property can be overwritten by specifying the password parameter on the DataSource.getConnection() method call. &lt;p/&gt; This password property is not declared transient, and therefore may be serialized to a file in clear-text, or stored to a JNDI server in clear-text when the data source is saved. Care must taken by the user to prevent security breaches. &lt;p/&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>className__</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ClientDataSource</MethodName>
            <MethodComment>/** 
 * Creates a simple DERBY data source with default property values for a non-pooling, non-distributed environment. No particular DatabaseName or other properties are associated with the data source. &lt;p/&gt; Every Java Bean should provide a constructor with no arguments since many beanboxes attempt to instantiate a bean by invoking its no-argument constructor.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReference</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Reference</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Reference [ref=new Reference(this.getClass().getName(),ClientDataSourceFactory.class.getName(),null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addBeanProperties;[ref]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>NamingException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addBeanProperties</MethodName>
            <MethodComment>/** 
 * Add Java Bean properties to the reference using StringRefAddr for each property. List of bean properties is defined from the public getXXX() methods on this object that take no arguments and return short, int, boolean or String. The StringRefAddr has a key of the Java bean property name, converted from the method name. E.g. traceDirectory for traceDirectory.
 * @param ref The referenced object
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ref</ParamName>
                    <ParamType>Reference</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [p=getProperties(this)]</InnerVar>
                <InnerVar>Enumeration&lt;?&gt; [e=p.propertyNames()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>