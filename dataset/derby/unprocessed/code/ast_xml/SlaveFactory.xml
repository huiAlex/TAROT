<Class>
    <Id>1128</Id>
    <Package>org.apache.derby.iapi.store.replication.slave</Package>
    <ClassName>SlaveFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SlaveFactory  /** 
 * &lt;p&gt;  This is the interface for the replication slave controller service. The slave controller service is booted when this instance of Derby will have the replication slave role for this database. &lt;/p&gt;  &lt;p&gt;  The replication slave service is responsible for managing all replication related functionality on the slave side of replication. This includes connecting to the master and apply log records received from the master. &lt;/p&gt; 
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MODULE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SLAVE_DB</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REPLICATION_MODE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SLAVE_MODE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SLAVE_PRE_MODE</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>startSlave</MethodName>
            <MethodComment>/** 
 * Start slave replication. This method establishes a network connection with the associated replication master and starts a daemon that applies operations received from the master (in the form of log records) to the local slave database.
 * @param rawStore The RawStoreFactory for the database
 * @param logFac The LogFactory ensuring recoverability for this database
 * @exception StandardException Thrown if the slave could not bestarted.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawStore</ParamName>
                    <ParamType>RawStoreFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>logFac</ParamName>
                    <ParamType>LogFactory</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stopSlave</MethodName>
            <MethodComment>/** 
 * Stop replication slave mode. Causes the database to abort the boot process, and should only be used when shutting down this database. If forcedStop is false, the method will fail with an exception if connected with the master. If forcedStop is true, the  slave will be shut down even if connected to the master. A forcedStop  value of true should only be used by system shutdown.
 * @param forcedStop Determines whether or not an exception shouldbe thrown when this method is called while the network connection to the master is up.
 * @exception StandardException Thrown if slave is connected withmaster and forcedStop is false.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>forcedStop</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>failover</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Used to turn this slave instance of the database into a normal instance that clients can connect to, assuming that the connection with the master is down. This is typically done in cases where a fatal error has happened on the master instance of the database, or when the master database is unreachable due to network problems. &lt;/p&gt; &lt;p&gt; By calling failover, this slave instance of the database will be recovered so that all committed operations that have been received from the master are reflected here. On the other hand, operations from transactions where the commit log record has not been received from the master will not be reflected. &lt;/p&gt; &lt;p&gt; Note that even though an operation has been executed (and even committed) on the master, it is not neccessarily reflected in the slave instance of the database. This depends on the replication strategy used by the MasterFactory. &lt;/p&gt;
 * @exception StandardException Thrown if slave is connected withmaster
 * @see org.apache.derby.iapi.store.replication.master.MasterFactory
 * @see org.apache.derby.impl.store.replication.master.MasterController#flushedTo
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isStarted</MethodName>
            <MethodComment>/** 
 * Check whether or not slave replication mode has been successfully started.
 * @return true if slave replication mode has startedsuccessfully, false if slave mode startup is not yet confirmed
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>