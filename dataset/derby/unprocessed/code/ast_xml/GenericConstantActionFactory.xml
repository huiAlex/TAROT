<Class>
    <Id>719</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>GenericConstantActionFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GenericConstantActionFactory  /** 
 * Factory for creating ConstantActions. &lt;P&gt;Implemetation note: For most operations, the ResultSetFactory determines if the operation is allowed in a readonly/target database. Because we perform JAR add/drop/replace with a utility rather than using normal language processing we never get a result set for these operations. For this reason, the ConstantActionFactory rather than the ResultSetFactory checks if the these operations are allowed.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>GenericConstantActionFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSetConstraintsConstantAction</MethodName>
            <MethodComment>/** 
 * Get ConstantAction for SET CONSTRAINTS statement.
 * @param constraints  The constraints to set, if null,set them ALL.
 * @param initiallyDeferred   ncodes IMMEDIATE (false), DEFERRED (true)
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constraints</ParamName>
                    <ParamType>TableName</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>initiallyDeferred</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAlterTableConstantAction</MethodName>
            <MethodComment>/** 
 * Make the AlterAction for an ALTER TABLE statement.
 * @param sd			descriptor for the schema that table lives in.
 * @param tableName	Name of table.
 * @param tableId		UUID of table.
 * @param tableConglomerateId	heap conglomerate id of table
 * @param tableType	Type of table (e.g., BASE).
 * @param columnInfo	Information on all the columns in the table.
 * @param constraintActions	ConstraintConstantAction[] for constraints
 * @param lockGranularity	The lock granularity.
 * @param compressTable	Whether or not this is a compress table
 * @param behavior			drop behavior of dropping column
 * @param sequential	If compress table/drop column, whether or not sequential
 * @param truncateTable	    Whether or not this is a truncate table
 * @param purge				PURGE during INPLACE COMPRESS?
 * @param defragment			DEFRAGMENT during INPLACE COMPRESS?
 * @param truncateEndOfTable	TRUNCATE END during INPLACE COMPRESS?
 * @param updateStatistics		TRUE means we are here to update statistics
 * @param updateStatisticsAll	TRUE means we are here to update statisticsof all the indexes. False means we are here to update statistics of only one index.
 * @param dropStatistics		TRUE means we are here to drop statistics
 * @param dropStatisticsAll	TRUE means we are here to drop statisticsof all the indexes. False means we are here to drop statistics of only one index.
 * @param indexNameForStatistics	Will name the index whose statisticswill be updated/dropped. This param is looked at only if  updateStatisticsAll/dropStatisticsAll is set to false and updateStatistics/dropStatistics is set to true. .
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sd</ParamName>
                    <ParamType>SchemaDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableConglomerateId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnInfo</ParamName>
                    <ParamType>ColumnInfo[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraintActions</ParamName>
                    <ParamType>ConstraintConstantAction[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockGranularity</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>compressTable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>behavior</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sequential</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>truncateTable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>purge</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defragment</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>truncateEndOfTable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>updateStatistics</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>updateStatisticsAll</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dropStatistics</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dropStatisticsAll</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexNameForStatistics</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCreateConstraintConstantAction</MethodName>
            <MethodComment>/** 
 * Make a ConstantAction for a constraint.
 * @param constraintName	Constraint name.
 * @param constraintType	Constraint type.
 * @param constraintCharacteristics Constraint characteristics, see  {@link org.apache.derby.impl.sql.compile.ConstraintDefinitionNode#characteristics}
 * @param forCreateTable   True if for a CREATE TABLE
 * @param tableName		Table name.
 * @param tableId			UUID of table.
 * @param schemaName		Schema that table lives in.
 * @param columnNames		String[] for column names
 * @param indexAction		IndexConstantAction for constraint (if necessary)
 * @param constraintText	Text for check constraint
 * @param otherConstraint	The referenced constraint, if a foreign key constraint
 * @param providerInfo Information on all the Providers
 */
</MethodComment>
            <ReturnType>CreateConstraintConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constraintName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraintType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraintCharacteristics</ParamName>
                    <ParamType>boolean[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forCreateTable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexAction</ParamName>
                    <ParamType>IndexConstantAction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraintText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>otherConstraint</ParamName>
                    <ParamType>ConstraintInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>providerInfo</ParamName>
                    <ParamType>ProviderInfo[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCreateIndexConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a CREATE INDEX statement.
 * @param forCreateTable Executed as part of a CREATE TABLE
 * @param unique		True means it will be a unique index
 * @param uniqueWithDuplicateNulls  True means index check and disallowany duplicate key if key has no  column with a null value.  If any  column in the key has a null value, no checking is done and insert will always succeed.
 * @param hasDeferrableChecking True if the index is used to back adeferrable constraint
 * @param initiallyDeferred  True means the deferrable constraint hasdeferred mode initially.
 * @param constraintType  The constraint type
 * @param indexType	The type of index (BTREE, for example)
 * @param schemaName			the schema that table (and index) lives in.
 * @param indexName	Name of the index
 * @param tableName	Name of table the index will be on
 * @param tableId		UUID of table.
 * @param columnNames	Names of the columns in the index, in order
 * @param isAscending	Array of booleans telling asc/desc on each column
 * @param isConstraint	TRUE if index is backing up a constraint, else FALSE
 * @param conglomerateUUID	ID of conglomerate
 * @param properties	The optional properties list associated with the index.
 */
</MethodComment>
            <ReturnType>IndexConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>forCreateTable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unique</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>uniqueWithDuplicateNulls</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hasDeferrableChecking</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>initiallyDeferred</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraintType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isAscending</ParamName>
                    <ParamType>boolean[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isConstraint</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conglomerateUUID</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCreateAliasConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a CREATE ALIAS statement.
 * @param aliasName		Name of alias.
 * @param schemaName		Alias's schema. 
 * @param javaClassName	Name of java class.
 * @param aliasType		The alias type
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>aliasName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>javaClassName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>aliasInfo</ParamName>
                    <ParamType>AliasInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>aliasType</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCreateSchemaConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a CREATE SCHEMA statement.
 * @param schemaName	Name of table.
 * @param aid			Authorizaton id
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>aid</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCreateRoleConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a CREATE ROLE statement.
 * @param roleName	Name of role.
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>roleName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSetRoleConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a SET ROLE statement.
 * @param roleName  Name of role
 * @param type      Literal (== 0)or ?    (== StatementType.SET_ROLE_DYNAMIC)
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>roleName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCreateSequenceConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a CREATE SEQUENCE statement.
 * @param sequenceName	Name of sequence.
 * @param dataType
 * @param initialValue
 * @param stepValue
 * @param maxValue
 * @param minValue
 * @param cycle
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sequenceName</ParamName>
                    <ParamType>TableName</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataType</ParamName>
                    <ParamType>DataTypeDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>initialValue</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stepValue</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxValue</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>minValue</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cycle</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCreateTableConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a CREATE TABLE statement.
 * @param schemaName	name for the schema that table lives in.
 * @param tableName	Name of table.
 * @param tableType	Type of table (e.g., BASE, global temporary table).
 * @param columnInfo	Information on all the columns in the table.(REMIND tableDescriptor ignored)
 * @param constraintActions	CreateConstraintConstantAction[] for constraints
 * @param properties	Optional table properties
 * @param lockGranularity	The lock granularity.
 * @param onCommitDeleteRows	If true, on commit delete rows else on commit preserve rows of temporary table.
 * @param onRollbackDeleteRows	If true, on rollback, delete rows from temp tables which were logically modified. true is the only supported value
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnInfo</ParamName>
                    <ParamType>ColumnInfo[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraintActions</ParamName>
                    <ParamType>CreateConstraintConstantAction[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockGranularity</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>onCommitDeleteRows</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>onRollbackDeleteRows</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSavepointConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a savepoint statement (ROLLBACK savepoint, RELASE savepoint and SAVEPOINT).
 * @param savepointName	name for the savepoint.
 * @param statementType	Type of savepoint statement ie rollback, release or set savepoint
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>savepointName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>statementType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCreateViewConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a CREATE VIEW statement.
 * @param schemaName	Name of the schema that table lives in.
 * @param tableName	Name of table.
 * @param tableType	Type of table (in this case TableDescriptor.VIEW_TYPE).
 * @param viewText		Text of query expression for view definition
 * @param checkOption	Check option type
 * @param columnInfo	Information on all the columns in the table.
 * @param providerInfo Information on all the Providers
 * @param compSchemaId	ID of schema in which the view is to be boundwhen accessed in the future. (REMIND tableDescriptor ignored)
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>viewText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>checkOption</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnInfo</ParamName>
                    <ParamType>ColumnInfo[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>providerInfo</ParamName>
                    <ParamType>ProviderInfo[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>compSchemaId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDeleteConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a Replicated DELETE statement.
 * @param conglomId			Conglomerate ID.
 * @param tableType			type of this table
 * @param heapSCOCI			StaticCompiledOpenConglomInfo for heap.
 * @param irgs					Index descriptors
 * @param indexCIDS			Conglomerate IDs of indices
 * @param indexSCOCIs	StaticCompiledOpenConglomInfos for indexes.
 * @param deferred				True means deferred delete
 * @param tableIsPublished		true if table is published
 * @param tableID				table id
 * @param lockMode				The lock mode to use(row or table, see TransactionController)
 * @param keySignature     	signature for the key(null for source)
 * @param keyPositions     	positions of primary key columns in base row
 * @param keyConglomId  		conglomerate id for the key(-1 for the souce)
 * @param schemaName    		schemaName(null for source)
 * @param tableName        	tableName(null for source)
 * @param resultDescription	A description of the columns in the rowto be deleted.  Only set in replication or during cascade Delete.
 * @param fkInfo				Array of structures containing foreign key info, if any (may be null)
 * @param triggerInfo			Array of structures containing triggerinfo, if any (may be null)
 * @param numColumns			Number of columns to read
 * @param dependencyId			UUID for dependency system
 * @param baseRowReadList      Map of columns read in.  1 based.
 * @param baseRowReadMap		BaseRowReadMap[heapColId]-&amp;gt;ReadRowColumnId.
 * @param streamStorableHeapColIds Null for non rep. (0 based)
 * @param singleRowSource		Whether or not source is a single row source
 * @param underMerge   True if this is an action of a MERGE statement.
 * @exception StandardException		Thrown on failure
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conglomId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>heapSCOCI</ParamName>
                    <ParamType>StaticCompiledOpenConglomInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>irgs</ParamName>
                    <ParamType>IndexRowGenerator[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexCIDS</ParamName>
                    <ParamType>long[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexSCOCIs</ParamName>
                    <ParamType>StaticCompiledOpenConglomInfo[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>deferred</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableIsPublished</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableID</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockMode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>deleteToken</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keySignature</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keyPositions</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keyConglomId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultDescription</ParamName>
                    <ParamType>ResultDescription</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fkInfo</ParamName>
                    <ParamType>FKInfo[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>triggerInfo</ParamName>
                    <ParamType>TriggerInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>baseRowReadList</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>baseRowReadMap</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>streamStorableHeapColIds</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numColumns</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dependencyId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>singleRowSource</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dependentConstantActions</ParamName>
                    <ParamType>ConstantAction[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>underMerge</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDropConstraintConstantAction</MethodName>
            <MethodComment>/** 
 * Make ConstantAction to drop a constraint.
 * @param constraintName	Constraint name.
 * @param constraintSchemaName		Constraint Schema Name
 * @param tableName		Table name.
 * @param tableId			UUID of table.
 * @param tableSchemaName				the schema that table lives in.
 * @param indexAction		IndexConstantAction for constraint (if necessary)
 * @param behavior			The drop behavior (e.g. StatementType.RESTRICT)
 * @param verifyType       Verify that the constraint is of this type.
 */
</MethodComment>
            <ReturnType>ConstraintConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constraintName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraintSchemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableSchemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexAction</ParamName>
                    <ParamType>IndexConstantAction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>behavior</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>verifyType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAlterConstraintConstantAction</MethodName>
            <MethodComment>/** 
 * Make ConstantAction to drop a constraint.
 * @param constraintName   Constraint name.
 * @param constraintSchemaName     Constraint Schema Name
 * @param characteristics  The presumably altered characteristics
 * @param tableName        Table name.
 * @param tableId          UUID of table.
 * @param tableSchemaName  The schema that table lives in.
 * @param indexAction      IndexConstantAction for constraint (if necessary)
 */
</MethodComment>
            <ReturnType>ConstraintConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constraintName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraintSchemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>characteristics</ParamName>
                    <ParamType>boolean[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableSchemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexAction</ParamName>
                    <ParamType>IndexConstantAction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDropIndexConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a DROP INDEX statement.
 * @param fullIndexName		Fully qualified index name
 * @param indexName			Index name.
 * @param tableName			The table name
 * @param schemaName					Schema that index lives in.
 * @param tableId				UUID for table
 * @param tableConglomerateId	heap conglomerate ID for table
 */
</MethodComment>
            <ReturnType>IndexConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullIndexName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableConglomerateId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDropAliasConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a DROP ALIAS statement.
 * @param aliasName			Alias name.
 * @param aliasType			Alias type.
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sd</ParamName>
                    <ParamType>SchemaDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>aliasName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>aliasType</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDropRoleConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a DROP ROLE statement.
 * @param roleName			role name to be dropped
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>roleName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDropSequenceConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a DROP SEQUENCE statement.
 * @param sd the schema the sequence object belongs to
 * @param seqName	name of sequence to be dropped
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sd</ParamName>
                    <ParamType>SchemaDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>seqName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDropSchemaConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a DROP SCHEMA statement.
 * @param schemaName			Table name.
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDropTableConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a DROP TABLE statement.
 * @param fullTableName		Fully qualified table name
 * @param tableName			Table name.
 * @param sd					Schema that table lives in.
 * @param conglomerateNumber	Conglomerate number for heap
 * @param tableId				UUID for table
 * @param behavior			drop behavior, CASCADE, RESTRICT or DEFAULT
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullTableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sd</ParamName>
                    <ParamType>SchemaDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conglomerateNumber</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>behavior</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDropViewConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a DROP VIEW statement.
 * @param fullTableName		Fully qualified table name
 * @param tableName			Table name.
 * @param sd					Schema that view lives in.
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullTableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sd</ParamName>
                    <ParamType>SchemaDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRenameConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a RENAME TABLE/COLUMN/INDEX statement.
 * @param fullTableName Fully qualified table name
 * @param tableName   Table name.
 * @param oldObjectName   Old object name
 * @param newObjectName   New object name.
 * @param sd    Schema that table lives in.
 * @param tableId   UUID for table
 * @param usedAlterTable	True if used Alter Table command, false if used Rename
 * @param renamingWhat	Value indicates if Rename Column/Index.
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullTableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>oldObjectName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newObjectName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sd</ParamName>
                    <ParamType>SchemaDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>usedAlterTable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>renamingWhat</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInsertConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a INSERT statement.
 * @param conglomId		Conglomerate ID.
 * @param heapSCOCI		StaticCompiledOpenConglomInfo for target heap.
 * @param irgs				Index descriptors
 * @param indexCIDS		Conglomerate IDs of indices
 * @param indexSCOCIs		StaticCompiledOpenConglomInfos for indexes.
 * @param indexNames		Names of indices on this table for error reporting.
 * @param deferred			True means deferred insert
 * @param tableIsPublished	true if table is published, false otherwise
 * @param tableID			table id
 * @param hasDeferrableChecks The target table has deferrable CHECK constraints
 * @param targetProperties Properties on the target table
 * @param fkInfo			Array of structures containing foreign key info, if any (may be null)
 * @param triggerInfo		Array of structures containing trigger info, 
 * @param streamStorableHeapColIds Null for non rep. (0 based)if any (may be null)
 * @param indexedCols		boolean[] of which (0-based) columns are indexed.
 * @param dependencyId		UUID for dependency system
 * @param stageControl		Stage Control Tokens
 * @param ddlList			List of DDL to log. This is for BULK INSERT into a published table at the Source.
 * @param singleRowSource	Whether or not source is a single row source
 * @param autoincRowLocation array of row locations into syscolumns forautoincrement columns
 * @param underMerge   True if this is an INSERT action of a MERGE statement.
 * @param identitySequenceUUIDString   For 10.11 and higher, the handle on the sequence for the identity column
 * @exception StandardException		Thrown on failure
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tableDescriptor</ParamName>
                    <ParamType>TableDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conglomId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>heapSCOCI</ParamName>
                    <ParamType>StaticCompiledOpenConglomInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>irgs</ParamName>
                    <ParamType>IndexRowGenerator[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexCIDS</ParamName>
                    <ParamType>long[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexSCOCIs</ParamName>
                    <ParamType>StaticCompiledOpenConglomInfo[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>deferred</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableIsPublished</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hasDeferrableChecks</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableID</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockMode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>insertToken</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowSignature</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>targetProperties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fkInfo</ParamName>
                    <ParamType>FKInfo[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>triggerInfo</ParamName>
                    <ParamType>TriggerInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>streamStorableHeapColIds</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexedCols</ParamName>
                    <ParamType>boolean[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dependencyId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stageControl</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ddlList</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>singleRowSource</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>autoincRowLocation</ParamName>
                    <ParamType>RowLocation[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>underMerge</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>identitySequenceUUIDString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUpdatableVTIConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for an updatable VTI statement.
 * @param statementType             Statement type, cf.{@link org.apache.derby.vti.DeferModification#INSERT_STATEMENT} etc.
 * @param deferred                  Deferred processing mode?
 * @exception StandardException		Thrown on failure
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statementType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>deferred</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUpdatableVTIConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for an updatable VTI statement.
 * @param statementType    Statement type, cf.{@link org.apache.derby.vti.DeferModification#INSERT_STATEMENT} etc.
 * @param deferred         Deferred processing mode?
 * @param changedColumnIds Array of ids of changed columns
 * @exception StandardException		Thrown on failure
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statementType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>deferred</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>changedColumnIds</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLockTableConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a LOCK TABLE statement.
 * @param fullTableName		Full name of the table.
 * @param conglomerateNumber	Conglomerate number for the heap
 * @param exclusiveMode		Whether or not to get an exclusive lock.
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullTableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conglomerateNumber</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>exclusiveMode</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSetSchemaConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a SET SCHEMA statement.
 * @param schemaName	Name of schema.
 * @param type			Literal, USER or ?
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSetTransactionIsolationConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a SET TRANSACTION ISOLATION statement.
 * @param isolationLevel	The new isolation level.
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isolationLevel</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUpdateConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for an UPDATE statement.
 * @param targetTableDesc      Descriptor for the updated table
 * @param heapSCOCI			StaticCompiledOpenConglomInfo for heap.
 * @param irgs					Index descriptors
 * @param indexCIDS			Conglomerate IDs of indices
 * @param indexSCOCIs          StaticCompiledOpenConglomInfos for indexes.
 * @param indexNames
 * @param deferred				True means deferred update
 * @param targetUUID			UUID of target table
 * @param lockMode				The lock mode to use(row or table, see TransactionController)
 * @param tableIsPublished		true if table is published, false otherwise
 * @param changedColumnIds		Array of ids of changes columns
 * @param keyPositions     	positions of primary key columns in base row
 * @param updateToken
 * @param fkInfo				Array of structures containing foreign key info, if any (may be null)
 * @param triggerInfo			Array of structures containing trigger info, 
 * @param baseRowReadList      Map of columns read in.  1 based.
 * @param baseRowReadMap		map of columns to be selected from the base row(partial row). 1 based.
 * @param streamStorableHeapColIds Null for non rep. (0 based)
 * @param numColumns			The number of columns being read.
 * @param positionedUpdate		is this a positioned update
 * @param singleRowSource		Whether or not source is a single row source
 * @param autoincRowLocation array of row locations into syscolumns forautoincrement columns
 * @param underMerge   True if this is an action of a MERGE statement.
 * @param identitySequenceUUIDString   For 10.11 and higher, the handle on the sequence for the identity column
 * @return                     The constant action constructed
 * @exception StandardException Thrown on failure
 */
</MethodComment>
            <ReturnType>UpdateConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>targetTableDesc</ParamName>
                    <ParamType>TableDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>heapSCOCI</ParamName>
                    <ParamType>StaticCompiledOpenConglomInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>irgs</ParamName>
                    <ParamType>IndexRowGenerator[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexCIDS</ParamName>
                    <ParamType>long[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexSCOCIs</ParamName>
                    <ParamType>StaticCompiledOpenConglomInfo[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indexNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>deferred</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>targetUUID</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lockMode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableIsPublished</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>changedColumnIds</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>keyPositions</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>updateToken</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fkInfo</ParamName>
                    <ParamType>FKInfo[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>triggerInfo</ParamName>
                    <ParamType>TriggerInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>baseRowReadList</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>baseRowReadMap</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>streamStorableHeapColIds</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numColumns</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>positionedUpdate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>singleRowSource</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>autoincRowLocation</ParamName>
                    <ParamType>RowLocation[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>underMerge</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>identitySequenceUUIDString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAuthorizer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Authorizer</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>LanguageConnectionContext [lcc=(LanguageConnectionContext)getContext(LanguageConnectionContext.CONTEXT_ID)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCreateTriggerConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a CREATE TRIGGER statement.
 * @param triggerSchemaName		Name of the schema that trigger lives in.
 * @param triggerName	Name of trigger
 * @param eventMask		TriggerDescriptor.TRIGGER_EVENT_XXXX
 * @param isBefore		is this a before (as opposed to after) trigger 
 * @param isRow			is this a row trigger or statement trigger
 * @param isEnabled		is this trigger enabled or disabled
 * @param triggerTable	the table upon which this trigger is defined
 * @param whenSPSId		the sps id for the when clause (may be null)
 * @param whenText		the text of the when clause (may be null)
 * @param actionSPSId	the spsid for the trigger action (may be null)
 * @param actionText	the text of the trigger action (may be null)
 * @param spsCompSchemaId	the compilation schema for the action and whenspses.   If null, will be set to the current default schema
 * @param referencedCols	what columns does this trigger reference (may be null)
 * @param referencedColsInTriggerAction	what columns does the trigger action reference through old/new transition variables (may be null)
 * @param originalWhenText The original user text of the WHEN clause (may be null)
 * @param originalActionText The original user text of the trigger action
 * @param referencingOld whether or not OLD appears in REFERENCING clause
 * @param referencingNew whether or not NEW appears in REFERENCING clause
 * @param oldReferencingName old referencing table name, if any, that appears in REFERCING clause
 * @param newReferencingName new referencing table name, if any, that appears in REFERCING clause
 * @param providerInfo array of providers that the trigger depends on
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>triggerSchemaName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>triggerName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>eventMask</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isBefore</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isRow</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isEnabled</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>triggerTable</ParamName>
                    <ParamType>TableDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>whenSPSId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>whenText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actionSPSId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actionText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>spsCompSchemaId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>referencedCols</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>referencedColsInTriggerAction</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>originalWhenText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>originalActionText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>referencingOld</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>referencingNew</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>oldReferencingName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newReferencingName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>providerInfo</ParamName>
                    <ParamType>ProviderInfo[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDropTriggerConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a DROP TRIGGER statement.
 * @param sd					Schema that stored prepared statement lives in.
 * @param triggerName			Name of the Trigger
 * @param tableId				The table this trigger is defined upon
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sd</ParamName>
                    <ParamType>SchemaDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>triggerName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableId</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDropStatisticsConstantAction</MethodName>
            <MethodComment>/** 
 * Make the constant action for Drop Statistics statement.
 * @param sd			Schema Descriptor of the schema in which the object resides. 
 * @param fullTableName full name of the object for which statistics arebeing dropped.
 * @param objectName	 object name for which statistics are being dropped.
 * @param forTable 		 is it an index or table whose statistics aer beingconsigned to the garbage heap?
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sd</ParamName>
                    <ParamType>SchemaDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fullTableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>objectName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forTable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGrantConstantAction</MethodName>
            <MethodComment>/** 
 * Make the constant action for a Grant statement
 * @param privileges The list of privileges to be granted
 * @param grantees The list of grantees
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>privileges</ParamName>
                    <ParamType>PrivilegeInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>grantees</ParamName>
                    <ParamType>List</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGrantRoleConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a GRANT role statement.
 * @param roleNames list of roles to be granted
 * @param grantees  list of authentication ids (user or roles) towhich roles(s) are to be granted
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>roleNames</ParamName>
                    <ParamType>List</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>grantees</ParamName>
                    <ParamType>List</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRevokeConstantAction</MethodName>
            <MethodComment>/** 
 * Make the constant action for a Revoke statement
 * @param privileges The list of privileges to be revokeed
 * @param grantees The list of grantees
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>privileges</ParamName>
                    <ParamType>PrivilegeInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>grantees</ParamName>
                    <ParamType>List</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRevokeRoleConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a REVOKE role statement.
 * @param roleNames list of roles to be revoked
 * @param grantees  list of authentication ids (user or roles) for whomroles are to be revoked
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>roleNames</ParamName>
                    <ParamType>List</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>grantees</ParamName>
                    <ParamType>List</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMatchingClauseConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a WHEN [ NOT ] MATCHED clause.
 */
</MethodComment>
            <ReturnType>ConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clauseType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>matchRefinementName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>thenColumnSignature</ParamName>
                    <ParamType>ResultDescription</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowMakingMethodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resultSetFieldName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>actionMethodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>thenAction</ParamName>
                    <ParamType>ConstantAction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMergeConstantAction</MethodName>
            <MethodComment>/** 
 * Make the ConstantAction for a MERGE statement.
 */
</MethodComment>
            <ReturnType>MergeConstantAction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>matchingClauses</ParamName>
                    <ParamType>ConstantAction[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContext</MethodName>
            <MethodComment>/** 
 * Privileged lookup of a Context. Must be private so that user code can't call this entry point.
 */
</MethodComment>
            <ReturnType>Context</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>contextID</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Context</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>