<Class>
    <Id>723</Id>
    <Package>org.apache.derby.impl.jdbc</Package>
    <ClassName>EncryptedLOBFile</ClassName>
    <SuperClass>LOBFile</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>EncryptedLOBFile  /** 
 * This class is a wrapper class on top of StorageRandomAccess to provide common methods to write in encrypted file. This class is NOT thread safe. The user class should take care of synchronization if being used in multi threaded environment.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>blockSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>tail</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>tailSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>currentPos</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>df</FieldName>
            <FieldType>DataFactory</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>EncryptedLOBFile</MethodName>
            <MethodComment>/** 
 * Constructs the EncryptedLOBFile object with encryption support.
 * @param lobFile StorageFile Object for which file will be created
 * @param df data factory for encryption and decription
 * @throws FileNotFoundException if the file exists but is a directory orcannot be opened
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lobFile</ParamName>
                    <ParamType>StorageFile</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>df</ParamName>
                    <ParamType>DataFactory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FileNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBlocks</MethodName>
            <MethodComment>/** 
 * Find the blocks containing the data we are interested in.
 * @param pos first position we are interested in
 * @param len number of bytes of interest
 * @return byte array containing all the blocks of data the specifiedregion spans over
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [startPos=pos - pos % blockSize]</InnerVar>
                <InnerVar>long [endPos=(pos + len + blockSize - 1) / blockSize * blockSize]</InnerVar>
                <InnerVar>byte[] [data=new byte[(int)(endPos - startPos)]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>length</MethodName>
            <MethodComment>/** 
 * Returns file length.
 * @return file length
 * @throws IOException if an I/O error occurs
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFilePointer</MethodName>
            <MethodComment>/** 
 * Returns the currrent position in the file.
 * @return current position of file pointer
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>seek</MethodName>
            <MethodComment>/** 
 * Sets the current file pointer to specific location.
 * @param pos new position
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [fileLength=super.length()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>write</MethodName>
            <MethodComment>/** 
 * Writes one byte into the file.
 * @param b byte value
 * @throws IOException if disk operation fails
 * @throws StandardException if error occurred during encryption/decryption
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [length=super.length()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>write</MethodName>
            <MethodComment>/** 
 * Writes length number of bytes from buffer starting from off position.
 * @param b byte array containing bytes to be written
 * @param off starting offset of the byte array from where thedata should be written to the file
 * @param len number of bytes to be written
 * @throws IOException if disk operation fails
 * @throws StandardException if error occurred during encryption/decryption
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>off</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [fileLength=super.length()]</InnerVar>
                <InnerVar>int [pos=(int)(currentPos - fileLength)]</InnerVar>
                <InnerVar>int [finalPos=pos + len]</InnerVar>
                <InnerVar>int [encLength=finalPos - finalPos % blockSize]</InnerVar>
                <InnerVar>int [leftOver=finalPos % blockSize]</InnerVar>
                <InnerVar>byte[] [clearText=new byte[encLength]]</InnerVar>
                <InnerVar>byte[] [cypherText=new byte[clearText.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;arraycopy;[tail, 0, clearText, 0, pos]</InnerMethodInvoke>
                <InnerMethodInvoke>System;arraycopy;[b, off, clearText, pos, encLength - pos]</InnerMethodInvoke>
                <InnerMethodInvoke>System;arraycopy;[b, off + len - leftOver, tail, 0, leftOver]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>write</MethodName>
            <MethodComment>/** 
 * Write the buffer into file at current position. It overwrites the data if current position is in the middle of the file and appends into the file if the total length exceeds the file size.
 * @param b byte array to be written
 * @throws IOException if disk operation fails
 * @throws StandardException if error occurred during encryption/decryption
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;write;[b, 0, b.length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readByte</MethodName>
            <MethodComment>/** 
 * Reads one byte from file.
 * @return byte
 * @throws IOException if disk operation fails
 * @throws StandardException if error occurred during decryption
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>long [fileLength=super.length()]</InnerVar>
                <InnerVar>byte [cypherText[]=getBlocks(currentPos,1)]</InnerVar>
                <InnerVar>byte[] [clearText=new byte[cypherText.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>df;decrypt;[cypherText, 0, cypherText.length, clearText, 0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Reads len or remaining bytes in the file (whichever is lower) bytes into buff starting from off position of the buffer.
 * @param buff byte array to fill read bytes
 * @param off offset of buff where the byte will be written
 * @param len number of bytes to be read
 * @return number of bytes read
 * @throws IOException if disk operation fails
 * @throws StandardException if error occurred during decryption
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buff</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>off</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [fileLength=super.length()]</InnerVar>
                <InnerVar>int [newLen=(int)Math.min(tailSize - currentPos + fileLength,len)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;arraycopy;[tail, (int)(currentPos - fileLength), buff, off, newLen]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLength</MethodName>
            <MethodComment>/** 
 * Sets the file length to a given size. If the new size is smaller than the file length the file is truncated.
 * @param size new  file size. Must be lower than file length.
 * @throws IOException if file i/o fails
 * @throws StandardException if error occurred during decryption
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>size</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [fileLength=super.length()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>