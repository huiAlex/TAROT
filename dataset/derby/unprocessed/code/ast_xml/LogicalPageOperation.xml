<Class>
    <Id>574</Id>
    <Package>org.apache.derby.impl.store.raw.data</Package>
    <ClassName>LogicalPageOperation</ClassName>
    <SuperClass>PageBasicOperation</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>LogicalUndoable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LogicalPageOperation  /** 
 * An abstract class that is used for logical log operation.  A logical log operation is one where the undo of the operation may be applied to a different page than the original operation. &lt;PRE&gt;
 * @derby.formatId	no format id, an abstract class.
 * @derby.purpose	provide methods for logical undo
 * @derby.upgrade
 * @derby.diskLayout PageBasicOperation	the super class recordId(CompressedInt)	the recordId this operation affects undo(LogicalUndo)		the piece of code that can figure out which page  the row has moved into OptionalData	none
 * @derby.endFormat &lt;/PRE&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>undo</FieldName>
            <FieldType>LogicalUndo</FieldType>
        </Field>
        <Field>
            <FieldName>recordId</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>LogicalPageOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>LogicalPageOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>BasePage</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>undo</ParamName>
                    <ParamType>LogicalUndo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>recordId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeExternal</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>CompressedNumber;writeInt;[out, recordId]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[undo]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readExternal</MethodName>
            <MethodComment>/** 
 * Read this in
 * @exception IOException error reading from log stream
 * @exception ClassNotFoundException log stream corrupted
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>ObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateUndo</MethodName>
            <MethodComment>/** 
 * Generate a Compensation (PageUndoOperation) that will rollback the changes of this page operation. If this Page operation cannot or need not be rolled back (redo only), overwrite this function to return null.
 * @see LogicalUndo
 * @exception StandardException Standard Derby policy.
 * @exception IOException Method may read from ObjectInput
 */
</MethodComment>
            <ReturnType>Compensation</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>LimitObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContainer</MethodName>
            <MethodComment>/** 
 * Return the container handle where the log operated on
 */
</MethodComment>
            <ReturnType>ContainerHandle</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resetRecordHandle</MethodName>
            <MethodComment>/** 
 * After the logical undo logic figures out where the real record that needs roll back is, reset this log operation to refer to that record
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rh</ParamName>
                    <ParamType>RecordHandle</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;resetPageNumber;[rh.getPageNumber()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRecordHandle</MethodName>
            <MethodComment>/** 
 * Return the record handle that correspond to the record that was changed during roll forward.  This is used as a hint by logical undo as a good place to look for the record to apply the roll back.
 */
</MethodComment>
            <ReturnType>RecordHandle</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reclaimPrepareLocks</MethodName>
            <MethodComment>/** 
 * reclaim locks associated with the changes in this log record. &lt;p&gt;
 * @param locking_policy  The locking policy to use to claim the locks.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>locking_policy</ParamName>
                    <ParamType>LockingPolicy</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ContainerHandle [ch=t.openContainer(getPageId().getContainerId(),locking_policy,(ContainerHandle.MODE_FORUPDATE | ContainerHandle.MODE_OPEN_FOR_LOCK_ONLY | ContainerHandle.MODE_LOCK_NOWAIT))]</InnerVar>
                <InnerVar>boolean [lock_granted=locking_policy.lockRecordForWrite(t,getRecordHandle(),false,false)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;releaseResource;[t]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findLogicalPage</MethodName>
            <MethodComment>/** 
 * Find the page that the rollback operation should be applied to. &lt;P&gt;The actual logical log operation is expected to implement Undoable.generateUndo.  This utility function findLogicalPage is provided for the common case scenario of using a LogicalUndo interface to find the undo page.  The subclass that implements Undoable.generateUndo can use this function to find the logical page with its LogicalUndo callback function. This method can be used with the default releaseResource(). &lt;P&gt;During recovery redo, the logging system is page oriented and will use the pageID stored in the PageUndoOperation to find the page.  The page will be latched and released using the default findpage and releaseResource - this.releaseResource() will still be called so it has to know not to release any resource it did not acquire.
 * @param xact	the transaction doing the compensating
 * @param in		optional input
 * @return the compensation operation that will rollback this change 
 * @exception StandardException Standard Derby error policy
 * @exception IOException Method may read from ObjectInput
 * @see PageBasicOperation
 * @see Undoable#generateUndo
 * @see org.apache.derby.iapi.store.raw.Loggable#releaseResource
 */
</MethodComment>
            <ReturnType>BasePage</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>undo</ParamName>
                    <ParamType>LogicalUndo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>LimitObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [okExit=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;releaseResource;[xact]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>undoMe</MethodName>
            <MethodComment>/** 
 * Undo the change indicated by this log operation and optional data. The undoPage and undoRecordId is the page, record the undo should apply to. The undoRecorId differs from the roll forward recordId if the undoPage differs from the page the roll forward operation was applied to, in other words, the record moved to another page and the recordId changed. &lt;BR&gt;A logical operation can at most deal with 1 record. &lt;P&gt; The available() method of in indicates how much data can be read, i.e. how much was originally written. &lt;BR&gt;&lt;B&gt;In this RawStore implementation, should only only be called via CompOp.doMe&lt;/B&gt;.
 * @param xact			the Transaction doing the rollback
 * @param undoPage		the page to rollback changes on
 * @param undoRecordId	the recordId to rollback changes on
 * @param CLRinstant	the log instant of this (PageUndo) operation
 * @param in			optional data for the rollback operation
 * @exception IOException Can be thrown by any of the methods of ObjectInput.
 * @exception StandardException Standard Derby policy.		
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>undoPage</ParamName>
                    <ParamType>BasePage</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>undoRecordId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>CLRinstant</ParamName>
                    <ParamType>LogInstant</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>LimitObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>