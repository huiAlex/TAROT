<Class>
    <Id>1512</Id>
    <Package>org.apache.derby.iapi.store.access.conglomerate</Package>
    <ClassName>Conglomerate</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Storable</SuperInterface>
        <SuperInterface>DataValueDescriptor</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Conglomerate  /** 
 * A conglomerate is an abstract storage structure (they correspond to access methods).  The Conglomerate interface corresponds to a single instance of a conglomerate. In other words, for each conglomerate in the system, there will be one object implementing Conglomerate. &lt;P&gt; The Conglomerate interface is implemented by each access method. The implementation must maintain enough information to properly open the conglomerate and scans, and to drop the conglomerate. This information typically will include the id of the container or containers in which the conglomerate is stored, and my also include property information. &lt;P&gt; Conglomerates are created by a conglomerate factory.  The access manager stores them in a directory (which is why they implement Storable).
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>addColumn</MethodName>
            <MethodComment>/** 
 * Add a column to the conglomerate. &lt;p&gt; This routine update's the in-memory object version of the  Conglomerate to have one more column of the type described by the input template column. Note that not all conglomerates may support this feature.
 * @param xact_manager     The TransactionController under which this operation takes place.
 * @param column_id        The column number to add this column at.
 * @param template_column  An instance of the column to be added to table.
 * @param collation_id     Collation id of the added column.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column_id</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>template_column</ParamName>
                    <ParamType>Storable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>collation_id</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>drop</MethodName>
            <MethodComment>/** 
 * Drop this conglomerate.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fetchMaxOnBTree</MethodName>
            <MethodComment>/** 
 * Retrieve the maximum value row in an ordered conglomerate. &lt;p&gt; Returns true and fetches the rightmost row of an ordered conglomerate  into "fetchRow" if there is at least one row in the conglomerate.  If there are no rows in the conglomerate it returns false. &lt;p&gt; Non-ordered conglomerates will not implement this interface, calls will generate a StandardException. &lt;p&gt; RESOLVE - this interface is temporary, long term equivalent (and more)  functionality will be provided by the openBackwardScan() interface.  
 * @param xact_manager    The TransactionController under which this operation takes place.
 * @param rawtran         The raw store xact to associate all ops with.
 * @param conglomId       The identifier of the conglomerateto open the scan for.
 * @param open_mode       Specifiy flags to control opening of table.  OPENMODE_FORUPDATE - if set open the table for update otherwise open table shared.
 * @param lock_level      One of (MODE_TABLE, MODE_RECORD, or MODE_NONE).
 * @param locking_policy  The LockingPolicy to use to open the conglomerate.
 * @param isolation_level The isolation level to lock the conglomerate at.One of (ISOLATION_READ_COMMITTED,  ISOLATION_REPEATABLE_READ, or  ISOLATION_SERIALIZABLE).
 * @param scanColumnList  A description of which columns to return from every fetch in the scan. fetchRow   and scanColumnList work together to describe the row to be returned by the scan -  see RowUtil for description of how these three  parameters work together to describe a "row".
 * @param fetchRow        The row to retrieve the maximum value into.
 * @return boolean indicating if a row was found and retrieved or not.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conglomId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>open_mode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>locking_policy</ParamName>
                    <ParamType>LockingPolicy</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isolation_level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scanColumnList</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fetchRow</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContainerid</MethodName>
            <MethodComment>/** 
 * Get the containerid of conglomerate. &lt;p&gt; Will have to change when a conglomerate could have more than one  containerid.
 * @return The containerid.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getId</MethodName>
            <MethodComment>/** 
 * Get the id of the container of the conglomerate. &lt;p&gt; Will have to change when a conglomerate could have more than one  container.  The ContainerKey is a combination of the container id and segment id.
 * @return The ContainerKey.
 */
</MethodComment>
            <ReturnType>ContainerKey</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStaticCompiledConglomInfo</MethodName>
            <MethodComment>/** 
 * Return static information about the conglomerate to be included in a a compiled plan. &lt;p&gt; The static info would be valid until any ddl was executed on the  conglomid, and would be up to the caller to throw away when that  happened.  This ties in with what language already does for other  invalidation of static info.  The type of info in this would be  containerid and array of format id's from which templates can be created. The info in this object is read only and can be shared among as many  threads as necessary. &lt;p&gt;
 * @return The static compiled information.
 * @param tc        The TransactionController under which this operation takes place.
 * @param conglomId The identifier of the conglomerate to open.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>StaticCompiledOpenConglomInfo</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tc</ParamName>
                    <ParamType>TransactionController</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conglomId</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDynamicCompiledConglomInfo</MethodName>
            <MethodComment>/** 
 * Return dynamic information about the conglomerate to be dynamically  reused in repeated execution of a statement. &lt;p&gt; The dynamic info is a set of variables to be used in a given  ScanController or ConglomerateController.  It can only be used in one  controller at a time.  It is up to the caller to insure the correct  thread access to this info.  The type of info in this is a scratch  template for btree traversal, other scratch variables for qualifier  evaluation, ... &lt;p&gt;
 * @return The dynamic information.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>DynamicCompiledOpenConglomInfo</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTemporary</MethodName>
            <MethodComment>/** 
 * Is this conglomerate temporary? &lt;p&gt;
 * @return whether conglomerate is temporary or not.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>load</MethodName>
            <MethodComment>/** 
 * Bulk load into the conglomerate. &lt;p&gt; Individual rows that are loaded into the conglomerate are not logged. After this operation, the underlying database must be backed up with a database backup rather than an transaction log backup (when we  have them). This warning is put here for the benefit of future  generation. &lt;p&gt;
 * @param xact_manager  The TransactionController under which this operationtakes place.
 * @param createConglom If true, the conglomerate is being created in the same operation as the openAndLoadConglomerate.   The enables further optimization as recovery does not require page allocation to be logged. 
 * @param rowSource     Where the rows come from.
 * @return The number of rows loaded.
 * @exception StandardException Standard exception policy.  If conglomerage supports uniqueness checks and has been created to  disallow duplicates, and one of the rows being loaded had key columns  which were duplicate of a row already in the conglomerate, then  raise SQLState.STORE_CONGLOMERATE_DUPLICATE_KEY_EXCEPTION.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>createConglom</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowSource</ParamName>
                    <ParamType>RowLocationRetRowSource</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>open</MethodName>
            <MethodComment>/** 
 * Open a conglomerate controller. &lt;p&gt;
 * @return The open ConglomerateController.
 * @param xact_manager   The access xact to associate all ops on cc with.
 * @param rawtran        The raw store xact to associate all ops on cc with.
 * @param open_mode      A bit mask of TransactionController.MODE_* bits,indicating info about the open.
 * @param lock_level     Either TransactionController.MODE_TABLE orTransactionController.MODE_RECORD, as passed into the openConglomerate() call.
 * @param locking_policy The LockingPolicy to use to open the conglomerate.
 * @exception StandardException  Standard exception policy.
 * @see TransactionController
 */
</MethodComment>
            <ReturnType>ConglomerateController</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hold</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>open_mode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>locking_policy</ParamName>
                    <ParamType>LockingPolicy</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>static_info</ParamName>
                    <ParamType>StaticCompiledOpenConglomInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dynamic_info</ParamName>
                    <ParamType>DynamicCompiledOpenConglomInfo</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openScan</MethodName>
            <MethodComment>/** 
 * Open a scan controller.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>ScanManager</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hold</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>open_mode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>locking_policy</ParamName>
                    <ParamType>LockingPolicy</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isolation_level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scanColumnList</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startKeyValue</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startSearchOperator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qualifier</ParamName>
                    <ParamType>Qualifier</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stopKeyValue</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stopSearchOperator</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>static_info</ParamName>
                    <ParamType>StaticCompiledOpenConglomInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dynamic_info</ParamName>
                    <ParamType>DynamicCompiledOpenConglomInfo</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>defragmentConglomerate</MethodName>
            <MethodComment>/** 
 * Online compress table. Returns a ScanManager which can be used to move rows around in a table, creating a block of free pages at the end of the table.  The process of executing the scan will move rows from the end  of the table toward the beginning.  The GroupFetchScanController will return the old row location, the new row location, and the actual data  of any row moved.  Note that this scan only returns moved rows, not an entire set of rows, the scan is designed specifically to be used by either explicit user call of the SYSCS_ONLINE_COMPRESS_TABLE() procedure, or internal background calls to compress the table. The old and new row locations are returned so that the caller can update any indexes necessary. This scan always returns all collumns of the row. All inputs work exactly as in openScan().  The return is  a GroupFetchScanController, which only allows fetches of groups of rows from the conglomerate. &lt;p&gt; Note that all Conglomerates may not implement openCompressScan(),  currently only the Heap conglomerate implements this scan.
 * @return The GroupFetchScanController to be used to fetch the rows.
 * @param hold                  see openScan()
 * @param open_mode             see openScan()
 * @param lock_level            see openScan()
 * @param isolation_level       see openScan()
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>ScanManager</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hold</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>open_mode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lock_level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>locking_policy</ParamName>
                    <ParamType>LockingPolicy</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isolation_level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>purgeConglomerate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compressConglomerate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openStoreCost</MethodName>
            <MethodComment>/** 
 * Return an open StoreCostController for the conglomerate. &lt;p&gt; Return an open StoreCostController which can be used to ask about  the estimated row counts and costs of ScanController and  ConglomerateController operations, on the given conglomerate. &lt;p&gt;
 * @param xact_manager The TransactionController under which this operation takes place.
 * @param rawtran  raw transaction context in which scan is managed.
 * @return The open StoreCostController.
 * @exception StandardException  Standard exception policy.
 * @see StoreCostController
 */
</MethodComment>
            <ReturnType>StoreCostController</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact_manager</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rawtran</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>