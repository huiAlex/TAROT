<Class>
    <Id>1156</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>OffsetOrderVisitor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Visitor</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>OffsetOrderVisitor  /** 
 * Get all nodes of a certain type in a query tree, and return them in the order in which they appear in the original SQL text. This visitor is useful when rewriting SQL queries by replacing certain tokens in the original query.
 * @param &lt; T &gt; the type of nodes to collect
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>COMPARATOR</FieldName>
            <FieldType>Comparator</FieldType>
        </Field>
        <Field>
            <FieldName>COMPARATOR</FieldName>
            <FieldType>QueryTreeNode</FieldType>
        </Field>
        <Field>
            <FieldName>nodeClass</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>nodeClass</FieldName>
            <FieldType>T</FieldType>
        </Field>
        <Field>
            <FieldName>nodes</FieldName>
            <FieldType>TreeSet</FieldType>
        </Field>
        <Field>
            <FieldName>nodes</FieldName>
            <FieldType>T</FieldType>
        </Field>
        <Field>
            <FieldName>lowOffset</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>highOffset</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node1</ParamName>
                    <ParamType>QueryTreeNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node2</ParamName>
                    <ParamType>QueryTreeNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>OffsetOrderVisitor</MethodName>
            <MethodComment>/** 
 * Create a new  {@code OffsetOrderVisitor} that collects nodes of thespecified type. The nodes must have begin offset and end offset in the range given by the  {@code low} and {@code high} parameters.
 * @param nodeClass the type of nodes to collect
 * @param low the lowest begin offset to accept (inclusive)
 * @param high the highest end offset to accept (exclusive)
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nodeClass</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>low</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>high</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Visitable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Visitable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitChildrenFirst</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Visitable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stopTraversal</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>skipChildren</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Visitable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNodes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>