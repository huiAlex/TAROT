<Class>
    <Id>2005</Id>
    <Package>org.apache.derby.impl.jdbc</Package>
    <ClassName>ClobAsciiStream</ClassName>
    <SuperClass>OutputStream</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ClobAsciiStream  /** 
 * Wrap a Writer as an OutputStream to support Clob.setAsciiStream(). Any value written to the OutputStream is a valid ASCII value (0-255 from JDBC 4 spec appendix C2) thus this class simply passes the written values onto the Writer.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>writer</FieldName>
            <FieldType>Writer</FieldType>
        </Field>
        <Field>
            <FieldName>buffer</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ClobAsciiStream</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>writer</ParamName>
                    <ParamType>Writer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>write</MethodName>
            <MethodComment>/** 
 * Writes the specified byte to this output stream. &lt;p&gt; The general contract for &lt;code&gt;write&lt;/code&gt; is that one byte is written to the output stream. The byte to be written is the eight low-order bits of the argument &lt;code&gt;b&lt;/code&gt;. The 24 high-order bits of &lt;code&gt;b&lt;/code&gt; are ignored.
 * @param b   the &lt;code&gt;byte&lt;/code&gt;.
 * @exception IOException  if an I/O error occurs. In particular, an &lt;code&gt;IOException&lt;/code&gt; may be thrown if the  output stream has been closed.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>writer;write;[b &amp; 0xff]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>write</MethodName>
            <MethodComment>/** 
 * Writes &lt;code&gt;len&lt;/code&gt; bytes from the specified byte array  starting at offset &lt;code&gt;off&lt;/code&gt; to this output stream.  &lt;p&gt; The general contract for &lt;code&gt;write(b, off, len)&lt;/code&gt; is that  some of the bytes in the array &lt;code&gt;b&lt;/code&gt; are written to the  output stream in order; element &lt;code&gt;b[off]&lt;/code&gt; is the first  byte written and &lt;code&gt;b[off+len-1]&lt;/code&gt; is the last byte written  by this operation. &lt;p&gt; The &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt; calls  the write method of one argument on each of the bytes to be  written out. Subclasses are encouraged to override this method and  provide a more efficient implementation.  &lt;p&gt; If &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, a  &lt;code&gt;NullPointerException&lt;/code&gt; is thrown. &lt;p&gt; If &lt;code&gt;off&lt;/code&gt; is negative, or &lt;code&gt;len&lt;/code&gt; is negative, or  &lt;code&gt;off+len&lt;/code&gt; is greater than the length of the array  &lt;code&gt;b&lt;/code&gt;, then an &lt;tt&gt;IndexOutOfBoundsException&lt;/tt&gt; is thrown.
 * @param b     the data.
 * @param off   the start offset in the data.
 * @param len   the number of bytes to write.
 * @exception IOException  if an I/O error occurs. In particular, an &lt;code&gt;IOException&lt;/code&gt; is thrown if the output  stream is closed.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>off</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>