<Class>
    <Id>310</Id>
    <Package>org.apache.derbyTesting.functionTests.tests.memorydb</Package>
    <ClassName>ClusMog</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ClusMog  /** 
 * Simple utility to compute/recover the parameters of a mixture-of-Gaussian distribution from independent samples.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>max_n</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>n</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>weight</FieldName>
            <FieldType>double</FieldType>
        </Field>
        <Field>
            <FieldName>mean</FieldName>
            <FieldType>double</FieldType>
        </Field>
        <Field>
            <FieldName>var</FieldName>
            <FieldType>double</FieldType>
        </Field>
        <Field>
            <FieldName>bracket</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ns</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>sample</FieldName>
            <FieldType>double</FieldType>
        </Field>
        <Field>
            <FieldName>min_sample_size_per_cluster</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ClusMog</MethodName>
            <MethodComment>/** 
 * default constructor 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cluster</MethodName>
            <MethodComment>/** 
 * Compute/recover the parameters of a mixture-of-Gaussian distribution from given independent samples.
 * @param n number of clusters (Gaussian components) to output
 * @param center initial cluster centers for iterative refinement
 * @param ns number of input samples
 * @param sample input samples; will be sorted in ascending order during use
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>n</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>center</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ns</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sample</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>double [thresh=1.0e-6]</InnerVar>
                <InnerVar>double [oldmsr=Double.MAX_VALUE]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setCenters;[n, center]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setSamples;[ns, sample]</InnerMethodInvoke>
                <InnerMethodInvoke>null;initEM;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;computeWeights;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;printMog;["JAVA-COMPUTED", n, weight, mean, var]</InnerMethodInvoke>
                <InnerMethodInvoke>BaseTestCase;println;["msr = (" + oldmsr + ")"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>uniform</MethodName>
            <MethodComment>/** 
 * Compute an initial configuration of cluster centers uniformly spaced over the range of the input samples, for subsequent iterative refinement.
 * @param n number of clusters to output
 * @param center initial uniform cluster centers to compute
 * @param ns number of input samples
 * @param sample array of input samples
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>n</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>center</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ns</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sample</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>double [min_x=Double.MAX_VALUE, max_x=-Double.MAX_VALUE]</InnerVar>
                <InnerVar>double [length=max_x - min_x]</InnerVar>
                <InnerVar>double [increment=length / n]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>random</MethodName>
            <MethodComment>/** 
 * Compute an initial configuration of cluster centers uniformly distributed over the range of the input samples, for subsequent iterative refinement.
 * @param n number of clusters to output
 * @param center initial uniform cluster centers to compute
 * @param ns number of input samples
 * @param sample array of input samples
 * @param rng random number generator
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>n</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>center</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ns</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sample</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rng</ParamName>
                    <ParamType>Random</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>double [min_x=Double.MAX_VALUE, max_x=-Double.MAX_VALUE]</InnerVar>
                <InnerVar>double [length=max_x - min_x]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCenters</MethodName>
            <MethodComment>/** 
 * Initialize cluster centers for EM iterations. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>n</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>center</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSamples</MethodName>
            <MethodComment>/** 
 * Specify the input samples to work with. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ns</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sample</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [min_sample_size=n * min_sample_size_per_cluster]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initEM</MethodName>
            <MethodComment>/** 
 * Initialize the EM (expectation-maximization) iterations. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Arrays;sort;[sample, 0, ns]</InnerMethodInvoke>
                <InnerMethodInvoke>Arrays;sort;[mean, 0, n]</InnerMethodInvoke>
                <InnerMethodInvoke>null;maximization;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expectation</MethodName>
            <MethodComment>/** 
 * (Re-)compute cluster centers while holding cluster brackets fixed. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>maximization</MethodName>
            <MethodComment>/** 
 * (Re-)compute cluster brackets while holding cluster centers fixed. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>measure</MethodName>
            <MethodComment>/** 
 * Compute a measure of total quantization error. 
 */
</MethodComment>
            <ReturnType>double</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>double [sum=0.0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>computeWeights</MethodName>
            <MethodComment>/** 
 * Compute cluster weights. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printMog</MethodName>
            <MethodComment>/** 
 * Print out the clustering configuration. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>label</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>n</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>weight</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mean</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>var</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>BaseTestCase;println;[label + ": n = " + n]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>