<Class>
    <Id>972</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>UserAggregateDefinition</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>AggregateDefinition</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>UserAggregateDefinition  /** 
 * Definition for user-defined aggregates.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>INPUT_TYPE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RETURN_TYPE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>AGGREGATOR_TYPE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>AGGREGATOR_PARAM_COUNT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DERBY_BYTE_ARRAY_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_alias</FieldName>
            <FieldType>AliasDescriptor</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>UserAggregateDefinition</MethodName>
            <MethodComment>/** 
 * Conjure out of thin air.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>alias</ParamName>
                    <ParamType>AliasDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAliasDescriptor</MethodName>
            <MethodComment>/** 
 * Get the wrapped alias descriptor 
 */
</MethodComment>
            <ReturnType>AliasDescriptor</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAggregator</MethodName>
            <MethodComment>/** 
 * Determines the result datatype and verifies that the input datatype is correct.
 * @param inputType	the input type
 * @param aggregatorClass (Output arg) the name of the Derby execution-time class which wraps the aggregate logic
 * @return the result type of the user-defined aggregator
 */
</MethodComment>
            <ReturnType>DataTypeDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputType</ParamName>
                    <ParamType>DataTypeDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>aggregatorClass</ParamName>
                    <ParamType>StringBuffer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>vetCompatibility</MethodName>
            <MethodComment>/** 
 * Verify that an actual type is compatible with the expected type.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>actualClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expectedClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sqlState</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>castInputValue</MethodName>
            <MethodComment>/** 
 * Wrap the input operand in an implicit CAST node as necessary in order to coerce it the correct type for the aggregator. Return null if no cast is necessary.
 */
</MethodComment>
            <ReturnType>ValueNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputValue</ParamName>
                    <ParamType>ValueNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AggregateAliasInfo [aai=(AggregateAliasInfo)_alias.getAliasInfo()]</InnerVar>
                <InnerVar>DataTypeDescriptor [expectedInputType=DataTypeDescriptor.getType(aai.getForType())]</InnerVar>
                <InnerVar>DataTypeDescriptor [actualInputType=inputValue.getTypeServices()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getJavaClass</MethodName>
            <MethodComment>/** 
 * Get the Java class corresponding to a Derby datatype.
 */
</MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classFactory</ParamName>
                    <ParamType>ClassFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dtd</ParamName>
                    <ParamType>DataTypeDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>JSQLType [jsqlType=new JSQLType(dtd)]</InnerVar>
                <InnerVar>String [javaClassName=MethodCallNode.getObjectTypeName(jsqlType,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>aggregatorInstantiation</MethodName>
            <MethodComment>/** 
 * Make a "Could not instantiate aggregator" exception.
 */
</MethodComment>
            <ReturnType>StandardException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>