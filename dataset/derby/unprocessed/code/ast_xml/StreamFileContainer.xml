<Class>
    <Id>1807</Id>
    <Package>org.apache.derby.impl.store.raw.data</Package>
    <ClassName>StreamFileContainer</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>TypedFormat</SuperInterface>
        <SuperInterface>PrivilegedExceptionAction</SuperInterface>
        <SuperInterface>Object</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StreamFileContainer  /** 
 * The format of this stream file is: (RH) (FH) (field data) (FH) (field data) ........ (FH) (field data) Record header is stored once at the beginning of the file for all the rows stored in this file. Record Header indicates how many fields are in each row. Then we just stored all the column from each row. Field header stored on this file is fixed size with fieldDataLength size set to LARGE_SLOT_SIZE (4) bytes. NOTE: No locks are used in this container.  All transaction are not logged.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>formatIdInteger</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LARGE_SLOT_SIZE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MIN_BUFFER_SIZE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>FIELD_STATUS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>FIELD_HEADER_SIZE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>identity</FieldName>
            <FieldType>ContainerKey</FieldType>
        </Field>
        <Field>
            <FieldName>dataFactory</FieldName>
            <FieldType>BaseDataFileFactory</FieldType>
        </Field>
        <Field>
            <FieldName>bufferSize</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>file</FieldName>
            <FieldType>StorageFile</FieldType>
        </Field>
        <Field>
            <FieldName>fileOut</FieldName>
            <FieldType>OutputStream</FieldType>
        </Field>
        <Field>
            <FieldName>out</FieldName>
            <FieldType>DynamicByteArrayOutputStream</FieldType>
        </Field>
        <Field>
            <FieldName>logicalDataOut</FieldName>
            <FieldType>FormatIdOutputStream</FieldType>
        </Field>
        <Field>
            <FieldName>fileIn</FieldName>
            <FieldType>InputStream</FieldType>
        </Field>
        <Field>
            <FieldName>bufferedIn</FieldName>
            <FieldType>BufferedInputStream</FieldType>
        </Field>
        <Field>
            <FieldName>decryptIn</FieldName>
            <FieldType>DecryptInputStream</FieldType>
        </Field>
        <Field>
            <FieldName>limitIn</FieldName>
            <FieldType>LimitInputStream</FieldType>
        </Field>
        <Field>
            <FieldName>logicalDataIn</FieldName>
            <FieldType>FormatIdInputStream</FieldType>
        </Field>
        <Field>
            <FieldName>recordHeader</FieldName>
            <FieldType>StoredRecordHeader</FieldType>
        </Field>
        <Field>
            <FieldName>ciphertext</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>zeroBytes</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>STORAGE_FILE_EXISTS_ACTION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>STORAGE_FILE_DELETE_ACTION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>STORAGE_FILE_MKDIRS_ACTION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>STORAGE_FILE_GET_OUTPUT_STREAM_ACTION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>STORAGE_FILE_GET_INPUT_STREAM_ACTION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>actionCode</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>actionStorageFile</FieldName>
            <FieldType>StorageFile</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>StreamFileContainer</MethodName>
            <MethodComment>/** 
 * Constructor.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>identity</ParamName>
                    <ParamType>ContainerKey</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataFactory</ParamName>
                    <ParamType>BaseDataFileFactory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>StreamFileContainer</MethodName>
            <MethodComment>/** 
 * Constructor &lt;p&gt; when rowSource is passed to the constructor, it will be loaded into the  container after the container has been created. &lt;p&gt;
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>identity</ParamName>
                    <ParamType>ContainerKey</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataFactory</ParamName>
                    <ParamType>BaseDataFileFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>prop</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>open</MethodName>
            <MethodComment>/** 
 * Open a stream file container. &lt;p&gt; Open a container. Open the file that maps to this container, if the file does not exist then we assume the container was never created and return. If the file exists but we have trouble opening it then we throw some  exception. &lt;p&gt;
 * @return The opened StreamFileContainer.
 * @param forUpdate     Currently only accepts false, updating and existingstream file container is not currently supported.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>StreamFileContainer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>forUpdate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * Close the stream file. &lt;p&gt; Close this stream file, and all streams associated with it. &lt;p&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeFormatId</MethodName>
            <MethodComment>/** 
 * Return my format identifier.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContainerProperties</MethodName>
            <MethodComment>/** 
 * Request the system properties associated with a stream container.  &lt;p&gt; Request the value of properties associated with a stream container.  The following properties can be requested: derby.storage.streamFileBufferSize &lt;p&gt; To get the value of a particular property add it to the property list, and on return the value of the property will be set to it's current  value.  For example: get_prop(ConglomerateController cc) { Properties prop = new Properties(); prop.put("derby.storage.streamFileBufferSize", ""); cc.getContainerProperties(prop); System.out.println( "stream table's buffer size = " +  prop.getProperty("derby.storage.streamFileBufferSize"); }
 * @param prop   Property list to fill in.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prop</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AccessFactory [af=(AccessFactory)getServiceModule(dataFactory,AccessFactory.MODULE)]</InnerVar>
                <InnerVar>TransactionController [tc=(af == null) ? null : af.getTransaction(getContextService().getCurrentContextManager())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIdentity</MethodName>
            <MethodComment>/** 
 * Request the container key associated with the stream container. 
 */
</MethodComment>
            <ReturnType>ContainerKey</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>use</MethodName>
            <MethodComment>/** 
 * Can I use this container? &lt;p&gt; This method always return true right now. In the future when there are different uses for this container, we may need to add qualifications for this.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>handle</ParamName>
                    <ParamType>StreamContainerHandle</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>load</MethodName>
            <MethodComment>/** 
 * load data into this container. &lt;p&gt; populate the stream container with data in the rowSource &lt;p&gt;
 * @param rowSource The row source to get rows to load into this container.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rowSource</ParamName>
                    <ParamType>RowSource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [encrypted=dataFactory.databaseEncrypted()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeToFile</MethodName>
            <MethodComment>/** 
 * Write the buffer to the file. &lt;p&gt; If the database is encrypted, the dataFactory.getEncryptionBlockSize() - 1 reserved bytes will be used to pad the byte array to be dataFactory.getEncryptionBlockSize() aligned.  Before the bytes are encrypted and written to the file stream, the actual length of the byte array is written out as a compressed  integer.  This number will be used when decrypting the data. If the database is not encrypted, then, we don't reserve the bytes  upfront, and we simple just write the bytes out to the file stream.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeColumn</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [fieldStatus=FIELD_STATUS]</InnerVar>
                <InnerVar>int [beginPosition=out.getPosition()]</InnerVar>
                <InnerVar>int [fieldDataLength=0]</InnerVar>
                <InnerVar>int [endPosition=out.getPosition()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>StoredFieldHeader;write;[out, fieldStatus, fieldDataLength, LARGE_SLOT_SIZE]</InnerMethodInvoke>
                <InnerMethodInvoke>out;setPosition;[beginPosition]</InnerMethodInvoke>
                <InnerMethodInvoke>StoredFieldHeader;write;[out, fieldStatus, fieldDataLength, LARGE_SLOT_SIZE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fetchNext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [inUserCode=false]</InnerVar>
                <InnerVar>int [columnId=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeContainer</MethodName>
            <MethodComment>/** 
 * Close the stream file and remove the file.
 * @exception StandardException Segment directory cannot be created
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFileName</MethodName>
            <MethodComment>/** 
 * Return a file name for the identity. &lt;p&gt; Return a valid file name for the identity, or null if the data directory for this segment cannot be created
 * @exception StandardException Segment directory cannot be created
 */
</MethodComment>
            <ReturnType>StorageFile</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>identity</ParamName>
                    <ParamType>ContainerKey</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forCreate</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errorOK</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>privExists</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>StorageFile</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>privMkdirs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>StorageFile</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>privDelete</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>StorageFile</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>privGetOutputStream</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>StorageFile</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FileNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>privGetInputStream</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>StorageFile</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FileNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContextService</MethodName>
            <MethodComment>/** 
 * Privileged lookup of the ContextService. Must be private so that user code can't call this entry point.
 */
</MethodComment>
            <ReturnType>ContextService</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ContextService</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getServiceModule</MethodName>
            <MethodComment>/** 
 * Privileged module lookup. Must be private so that user code can't call this entry point.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>serviceModule</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>factoryInterface</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>