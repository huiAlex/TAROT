<Class>
    <Id>1084</Id>
    <Package>org.apache.derby.iapi.sql.execute</Package>
    <ClassName>ExecAggregator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Formatable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ExecAggregator  /** 
 * An ExecAggregator is the interface that execution uses to an aggregate.  System defined aggregates will implement this directly.  &lt;P&gt; The life time of an ExecAggregator is as follows. &lt;OL&gt; &lt;LI&gt; An ExecAggregator instance is created using the defined class name. &lt;LI&gt; Its setup() method is called to define its role (COUNT(*), SUM, etc.). &lt;LI&gt; Its newAggregator() method may be called any number of times to create new working aggregators as required. These aggregators have the same role and must be created in an initialized state. &lt;LI&gt; accumlate and merge will be called across these set of aggregators &lt;LI&gt; One of these aggregators will be used as the final one for obtaining the result &lt;/OL&gt; &lt;P&gt;
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>setup</MethodName>
            <MethodComment>/** 
 * Set's up the aggregate for processing.
 * @param classFactory Database-specific class factory.
 * @param aggregateName   For builtin aggregates, this is a SQL aggregate name like MAX. For user-defined aggregates, this is the name of the user-written class which implements org.apache.derby.agg.Aggregator.
 * @param returnDataType  The type returned by the getResult() method.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classFactory</ParamName>
                    <ParamType>ClassFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>aggregateName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>returnDataType</ParamName>
                    <ParamType>DataTypeDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>accumulate</MethodName>
            <MethodComment>/** 
 * Iteratively accumulates the addend into the aggregator. Called on each member of the set of values that is being aggregated.
 * @param addend	the DataValueDescriptor addend (current input to the aggregation)
 * @param ga		a result set getter
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>addend</ParamName>
                    <ParamType>DataValueDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ga</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>merge</MethodName>
            <MethodComment>/** 
 * Merges one aggregator into a another aggregator. Merges two partial aggregates results into a single result. Needed for: &lt;UL&gt; &lt;LI&gt; parallel aggregation &lt;/LI&gt; &lt;LI&gt; vector aggregation (GROUP BY) &lt;/LI&gt; &lt;LI&gt; distinct aggregates (e.g. MAX(DISTINCT Col)) &lt;/LI&gt;&lt;/UL&gt;&lt;p&gt; An example of a merge would be: given two COUNT()  aggregators, C1 and C2, a merge of C1 into C2 would set C1.count += C2.count.  So, given a &lt;i&gt;CountAggregator&lt;/i&gt; with a &lt;i&gt;getCount()&lt;/i&gt; method that returns its counts, its  merge method might look like this: &lt;pre&gt; public void merge(ExecAggregator inputAggregator) throws StandardException { &amp;nbsp;&amp;nbsp;&amp;nbsp;count += ((CountAccgregator)inputAggregator).getCount(); } &lt;/pre&gt;
 * @param inputAggregator	the other Aggregator (input partial aggregate)
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputAggregator</ParamName>
                    <ParamType>ExecAggregator</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResult</MethodName>
            <MethodComment>/** 
 * Produces the result to be returned by the query. The last processing of the aggregate.
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>DataValueDescriptor</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newAggregator</MethodName>
            <MethodComment>/** 
 * Return a new initialized copy of this aggregator, any state set by the setup() method of the original Aggregator must be copied into the new aggregator.
 * @return ExecAggregator the new aggregator
 */
</MethodComment>
            <ReturnType>ExecAggregator</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>didEliminateNulls</MethodName>
            <MethodComment>/** 
 * Return true if the aggregation eliminated at least one null from the input data set.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>