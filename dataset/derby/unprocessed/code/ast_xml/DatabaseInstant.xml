<Class>
    <Id>30</Id>
    <Package>org.apache.derby.iapi.store.access</Package>
    <ClassName>DatabaseInstant</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Serializable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DatabaseInstant  /** 
 * A DatabaseInstant is a quantity which the database associates with events to collate them. This interface is used in the column SYS.SYSSYNCINSTANTS.INSTANT. &lt;P&gt; Assume a database associates a DatabaseInstant to an event E1. We call this I(E1). Also assume the same Database associates a DatabaseInstant to a second event E2. We call this I(E2). By definition &lt;OL&gt; &lt;LI&gt; If I(E1) &amp;lt; I(E2) event E1 occurred before event E2 &lt;LI&gt; If I(E2) = I(E2) event E1 is the same event as E2 &lt;LI&gt; If I(E1) &amp;gt; I(E2) event E1 occurred after event E2 &lt;/OL&gt; &lt;P&gt;It is not meaningful to compare a DatabaseInstant from one database with a DatabaseInstant from another. The result of such a comparison is undefined. Because a database may construct, store and compare huge numbers of DatabaseInstants, this interface does not require an implementation to notice when a caller compares a DatabaseInstants from different databases. &lt;P&gt; Any implementation of this interface must implement value equality, thus implementing equals() and hashCode() methods.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>lessThan</MethodName>
            <MethodComment>/** 
 * Return true if this DatabaseInstant is before another DatabaseInstant from the same database.
 * @param other a DatabaseInstant from the same database asthis. 
 * @return the comparison result. If 'other' is from another databasethe result is undefined.  
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>other</ParamName>
                    <ParamType>DatabaseInstant</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment>/** 
 * Return true if this DatabaseInstant equals DatabaseInstant from the same database.
 * @param other a DatabaseInstant from the same database asthis. 
 * @return the comparison result. If 'other' is from another databasethe result is undefined.  
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>other</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment>/** 
 * Return the next higher DatabaseInstant. There is no requirement that a transaction with the next instant exist in the database. It is required that this.lessThan( this.next()), and that no instant can be between this and this.next(). If the DatabaseInstant is implemented using a integer then next() should return a new DatabaseInstant formed by adding one to the integer.
 * @return the next possible DatabaseInstant
 */
</MethodComment>
            <ReturnType>DatabaseInstant</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prior</MethodName>
            <MethodComment>/** 
 * Return the next lower DatabaseInstant. There is no requirement that a transaction with the next instant exist in the database. It is required that this.prior().lessThan( this), and that no instant can be between this and this.prior(). If the DatabaseInstant is implemented using a integer then prior() should return a new DatabaseInstant formed by subtracting one from the integer.
 * @return the prior possible DatabaseInstant
 */
</MethodComment>
            <ReturnType>DatabaseInstant</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * Convert the database instant to a string. This is mainly used for debugging.
 * @return a string representation of the instant.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>