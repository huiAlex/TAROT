<Class>
    <Id>745</Id>
    <Package>org.apache.derby.iapi.util</Package>
    <ClassName>StringUtil</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StringUtil  /** 
 * A set of public static methods for dealing with Strings
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>hex_table</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>formatForPrint</MethodName>
            <MethodComment>/** 
 * Used to print out a string for error messages,  chops is off at 60 chars for historical reasons.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toStringArray</MethodName>
            <MethodComment>/** 
 * A method that receive an array of Objects and return a  String array representation of that array.
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>objArray</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [idx]</InnerVar>
                <InnerVar>int [len=objArray.length]</InnerVar>
                <InnerVar>String[] [strArray=new String[len]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAsciiBytes</MethodName>
            <MethodComment>/** 
 * Get 7-bit ASCII character array from input String. The lower 7 bits of each character in the input string is assumed to be the ASCII character value. Hexadecimal - Character | 00 NUL| 01 SOH| 02 STX| 03 ETX| 04 EOT| 05 ENQ| 06 ACK| 07 BEL| | 08 BS | 09 HT | 0A NL | 0B VT | 0C NP | 0D CR | 0E SO | 0F SI | | 10 DLE| 11 DC1| 12 DC2| 13 DC3| 14 DC4| 15 NAK| 16 SYN| 17 ETB| | 18 CAN| 19 EM | 1A SUB| 1B ESC| 1C FS | 1D GS | 1E RS | 1F US | | 20 SP | 21  ! | 22  " | 23  # | 24  $ | 25  % | 26  &amp;amp; | 27  ' | | 28  ( | 29  ) | 2A  * | 2B  + | 2C  , | 2D  - | 2E  . | 2F  / | | 30  0 | 31  1 | 32  2 | 33  3 | 34  4 | 35  5 | 36  6 | 37  7 | | 38  8 | 39  9 | 3A  : | 3B  ; | 3C  &amp;lt; | 3D  = | 3E  &amp;gt; | 3F  ? | | 40  @ | 41  A | 42  B | 43  C | 44  D | 45  E | 46  F | 47  G | | 48  H | 49  I | 4A  J | 4B  K | 4C  L | 4D  M | 4E  N | 4F  O | | 50  P | 51  Q | 52  R | 53  S | 54  T | 55  U | 56  V | 57  W | | 58  X | 59  Y | 5A  Z | 5B  [ | 5C  \ | 5D  ] | 5E  ^ | 5F  _ | | 60  ` | 61  a | 62  b | 63  c | 64  d | 65  e | 66  f | 67  g | | 68  h | 69  i | 6A  j | 6B  k | 6C  l | 6D  m | 6E  n | 6F  o | | 70  p | 71  q | 72  r | 73  s | 74  t | 75  u | 76  v | 77  w | | 78  x | 79  y | 7A  z | 7B  { | 7C  | | 7D  } | 7E  ~ | 7F DEL|
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char[] [c=input.toCharArray()]</InnerVar>
                <InnerVar>byte[] [b=new byte[c.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>trimTrailing</MethodName>
            <MethodComment>/** 
 * Trim off trailing blanks but not leading blanks
 * @param str
 * @return The input with trailing blanks stipped off
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [len=str.length()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>truncate</MethodName>
            <MethodComment>/** 
 * Truncate a String to the given length with no warnings or error raised if it is bigger.
 * @param value String to be truncated
 * @param length	Maximum length of string
 * @return Returns value if value is null or value.length() is less or equal to than length, otherwise a String representingvalue truncated to length.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>slice</MethodName>
            <MethodComment>/** 
 * Return a slice (substring) of the passed in value, optionally trimmed. WARNING - endOffset is inclusive for historical reasons, unlike String.substring() which has an exclusive ending offset.
 * @param value Value to slice, must be non-null.
 * @param beginOffset Inclusive start character
 * @param endOffset Inclusive end character
 * @param trim To trim or not to trim
 * @return Sliceed value.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>beginOffset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>endOffset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trim</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [retval=value.substring(beginOffset,endOffset + 1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toHexString</MethodName>
            <MethodComment>/** 
 * Convert a byte array to a String with a hexidecimal format. The String may be converted back to a byte array using fromHexString. &lt;BR&gt; For each byte (b) two characaters are generated, the first character represents the high nibble (4 bits) in hexidecimal (&lt;code&gt;b &amp;amp; 0xf0&lt;/code&gt;), the second character represents the low nibble (&lt;code&gt;b &amp;ampxs; 0x0f&lt;/code&gt;). &lt;BR&gt; The byte at &lt;code&gt;data[offset]&lt;/code&gt; is represented by the first two characters in the returned String.
 * @param data	byte array
 * @param offset	starting byte (zero based) to convert.
 * @param length	number of bytes to convert.
 * @return the String (with hexidecimal format) form of the byte array
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [s=new StringBuffer(length * 2)]</InnerVar>
                <InnerVar>int [end=offset + length]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fromHexString</MethodName>
            <MethodComment>/** 
 * Convert a hexidecimal string generated by toHexString() back into a byte array.
 * @param s String to convert
 * @param offset starting character (zero based) to convert.
 * @param length number of characters to convert.
 * @return the converted byte array. Returns null if the length isnot a multiple of 2.
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [byteArray=new byte[length / 2]]</InnerVar>
                <InnerVar>int [j=0]</InnerVar>
                <InnerVar>int [end=offset + length]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hexDump</MethodName>
            <MethodComment>/** 
 * Convert a byte array to a human-readable String for debugging purposes.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte [byte_value]</InnerVar>
                <InnerVar>StringBuffer [str=new StringBuffer(data.length * 3)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>str;append;["Hex dump:\n"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>SQLToUpperCase</MethodName>
            <MethodComment>/** 
 * Convert string to uppercase Always use the java.util.ENGLISH locale
 * @param s   string to uppercase
 * @return uppercased string
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>SQLEqualsIgnoreCase</MethodName>
            <MethodComment>/** 
 * Compares two strings  Strings will be uppercased in english and compared equivalent to s1.equalsIgnoreCase(s2) throws NPE if s1 is null
 * @param s1  first string to compare
 * @param s2  second string to compare
 * @return   true if the two upppercased ENGLISH values are equalreturn false if s2 is null
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s1</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>s2</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>normalizeSQLIdentifier</MethodName>
            <MethodComment>/** 
 * Normalize a SQL identifer, up-casing if &lt;regular identifer&gt;, and handling of &lt;delimited identifer&gt; (SQL 2003, section 5.2). The normal form is used internally in Derby.
 * @param id syntacically correct SQL identifier
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compressQuotes</MethodName>
            <MethodComment>/** 
 * Compress 2 adjacent (single or double) quotes into a single (s or d) quote when found in the middle of a String. NOTE:  """" or '''' will be compressed into "" or ''. This function assumes that the leading and trailing quote from a string or delimited identifier have already been removed.
 * @param source string to be compressed
 * @param quotes string containing two single or double quotes.
 * @return String where quotes have been compressed
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>quotes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [result=source]</InnerVar>
                <InnerVar>int [index]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>quoteString</MethodName>
            <MethodComment>/** 
 * Quote a string so that it can be used as an identifier or a string literal in SQL statements. Identifiers are surrounded by double quotes and string literals are surrounded by single quotes. If the string contains quote characters, they are escaped.
 * @param source the string to quote
 * @param quote the character to quote the string with (' or &amp;quot;)
 * @return a string quoted with the specified quote character
 * @see #quoteStringLiteral(String)
 * @see IdUtil#normalToDelimited(String)
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>quote</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [quoted=new StringBuffer(source.length() + 2)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>quoted;append;[quote]</InnerMethodInvoke>
                <InnerMethodInvoke>quoted;append;[quote]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>quoteStringLiteral</MethodName>
            <MethodComment>/** 
 * Quote a string so that it can be used as a string literal in an SQL statement.
 * @param string the string to quote
 * @return the string surrounded by single quotes and with proper escapingof any single quotes inside the string
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>string</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ensureIndent</MethodName>
            <MethodComment>/** 
 * Utility for formatting which bends a multi-line string into shape for outputting it in a context where there is &lt;i&gt;depth&lt;/i&gt; tabs. Trailing newlines are discarded as well. &lt;p&gt; Replace     "^[\t]*" with "depth" number of tabs.&lt;br&gt; Replace     "\n+$" with "". Replace all "\n[\t]*" with "\n" + "depth" number of tabs.&lt;br&gt; &lt;/p&gt;
 * @param formatted string to sanitize
 * @param depth indentation level the string is to be printed at (0,1,2..)
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>formatted</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>depth</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [indent=new StringBuffer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doRegExpA</MethodName>
            <MethodComment>/** 
 * Reg.exp substitute:&lt;br/&gt; &lt;p/&gt; Pattern pat_a = Pattern.compile("\\A\\t*");&lt;br/&gt; Matcher m_a = pat_a.matcher(src);&lt;br/&gt; src = m_a.replaceFirst(indent.toString());&lt;br/&gt;
 * @param src source string in which to substitute indent
 * @param indent indentation to lead source
 * @return new version of src after substitution
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>src</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indent</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [result=new StringBuffer()]</InnerVar>
                <InnerVar>int [idx=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>result;append;[indent]</InnerMethodInvoke>
                <InnerMethodInvoke>result;append;[src.substring(idx)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doRegExpB</MethodName>
            <MethodComment>/** 
 * Reg.exp substitute:&lt;br/&gt; &lt;p/&gt; Pattern pat_b = Pattern.compile("\\n+\\Z");&lt;br/&gt; Matcher m_b = pat_b.matcher(formatted);&lt;br/&gt; formatted = m_b.replaceFirst("");&lt;br/&gt;
 * @param src source string in which to substitute
 * @return new version of src after substitution
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>src</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [result=new StringBuffer()]</InnerVar>
                <InnerVar>int [idx=src.length() - 1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>result;append;[src.substring(0,idx + 1)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doRegExpC</MethodName>
            <MethodComment>/** 
 * Reg.exp substitute:&lt;br/&gt; &lt;p/&gt; Pattern pat_c = Pattern.compile("\\n\\t*");&lt;br/&gt; Matcher m_c = pat_c.matcher(formatted);&lt;br/&gt; formatted = m_c.replaceAll("\n" + indent.toString());&lt;br/&gt;
 * @param src source string in which to substitute indent
 * @param indent indentation to lead source
 * @return new version of src after substitution
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>src</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indent</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [result=new StringBuffer()]</InnerVar>
                <InnerVar>int [idx=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shortDBName</MethodName>
            <MethodComment>/** 
 * Get the short database name from the canonical name.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>canonicalDBName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>separatorChar</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [lastSep=canonicalDBName.lastIndexOf(separatorChar)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>