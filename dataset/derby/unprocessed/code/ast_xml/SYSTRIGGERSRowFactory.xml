<Class>
    <Id>886</Id>
    <Package>org.apache.derby.impl.sql.catalog</Package>
    <ClassName>SYSTRIGGERSRowFactory</ClassName>
    <SuperClass>CatalogRowFactory</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SYSTRIGGERSRowFactory  /** 
 * Factory for creating a SYSTRIGGERS row.
 * @version 0.1
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>TABLENAME_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_TRIGGERID</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_TRIGGERNAME</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_SCHEMAID</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_CREATIONTIMESTAMP</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_EVENT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_FIRINGTIME</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_TYPE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_STATE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_TABLEID</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_WHENSTMTID</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_ACTIONSTMTID</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_REFERENCEDCOLUMNS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_TRIGGERDEFINITION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_REFERENCINGOLD</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_REFERENCINGNEW</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_OLDREFERENCINGNAME</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_NEWREFERENCINGNAME</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_WHENCLAUSETEXT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_COLUMN_COUNT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_INDEX1_ID</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_INDEX2_ID</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYSTRIGGERS_INDEX3_ID</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>indexColumnPositions</FieldName>
            <FieldType>int[][]</FieldType>
        </Field>
        <Field>
            <FieldName>uniqueness</FieldName>
            <FieldType>boolean[]</FieldType>
        </Field>
        <Field>
            <FieldName>uuids</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>UTC</FieldName>
            <FieldType>TimeZone</FieldType>
        </Field>
        <Field>
            <FieldName>dataDictionary</FieldName>
            <FieldType>DataDictionary</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SYSTRIGGERSRowFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dd</ParamName>
                    <ParamType>DataDictionary</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>uuidf</ParamName>
                    <ParamType>UUIDFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ef</ParamName>
                    <ParamType>ExecutionFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dvf</ParamName>
                    <ParamType>DataValueFactory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;initInfo;[SYSTRIGGERS_COLUMN_COUNT, TABLENAME_STRING, indexColumnPositions, uniqueness, uuids]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeRow</MethodName>
            <MethodComment>/** 
 * Make a SYSTRIGGERS row. 
 * @return	Row suitable for inserting into SYSTRIGGERS.
 * @exception StandardException thrown on failure
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>td</ParamName>
                    <ParamType>TupleDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>TupleDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeEmptyRowForCurrentVersion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeRow</MethodName>
            <MethodComment>/** 
 * Helper method that contains common logic for  {@code makeRow()} and{@code makeEmptyRowForCurrentVersion()}. Creates a row for the SYSTRIGGERS conglomerate.
 * @param td the {@code TriggerDescriptor} to create a row from (can be{@code null} if the returned row should be empty)
 * @param columnCount the number of columns in the returned row (used fortrimming off columns in soft upgrade mode to match the format in the old dictionary version)
 * @return a row for the SYSTRIGGERS conglomerate
 * @throws StandardException if an error happens when creating the row
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>td</ParamName>
                    <ParamType>TupleDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnCount</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=null]</InnerVar>
                <InnerVar>UUID [uuid=null]</InnerVar>
                <InnerVar>UUID [suuid=null]</InnerVar>
                <InnerVar>UUID [tuuid=null]</InnerVar>
                <InnerVar>UUID [actionSPSID=null]</InnerVar>
                <InnerVar>UUID [whenSPSID=null]</InnerVar>
                <InnerVar>Timestamp [createTime=null]</InnerVar>
                <InnerVar>String [event=null]</InnerVar>
                <InnerVar>String [time=null]</InnerVar>
                <InnerVar>String [type=null]</InnerVar>
                <InnerVar>String [enabled=null]</InnerVar>
                <InnerVar>String [triggerDefinition=null]</InnerVar>
                <InnerVar>String [oldReferencingName=null]</InnerVar>
                <InnerVar>String [newReferencingName=null]</InnerVar>
                <InnerVar>ReferencedColumns [rcd=null]</InnerVar>
                <InnerVar>boolean [referencingOld=false]</InnerVar>
                <InnerVar>boolean [referencingNew=false]</InnerVar>
                <InnerVar>String [whenClauseText=null]</InnerVar>
                <InnerVar>ExecRow [row=getExecutionFactory().getValueRow(columnCount)]</InnerVar>
                <InnerVar>SQLTimestamp [creationTimestamp=(createTime == null) ? new SQLTimestamp(null) : new SQLTimestamp(createTime,getCalendarForCreationTimestamp())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>row;setColumn;[1, new SQLChar((uuid == null) ? null : uuid.toString())]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[2, new SQLVarchar(name)]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[3, new SQLChar((suuid == null) ? null : suuid.toString())]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[4, creationTimestamp]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[5, new SQLChar(event)]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[6, new SQLChar(time)]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[7, new SQLChar(type)]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[8, new SQLChar(enabled)]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[9, new SQLChar((tuuid == null) ? null : tuuid.toString())]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[10, new SQLChar((whenSPSID == null) ? null : whenSPSID.toString())]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[11, new SQLChar((actionSPSID == null) ? null : actionSPSID.toString())]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[12, new UserType(rcd)]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[13, dvf.getLongvarcharDataValue(triggerDefinition)]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[14, new SQLBoolean(referencingOld)]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[15, new SQLBoolean(referencingNew)]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[16, new SQLVarchar(oldReferencingName)]</InnerMethodInvoke>
                <InnerMethodInvoke>row;setColumn;[17, new SQLVarchar(newReferencingName)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCalendarForCreationTimestamp</MethodName>
            <MethodComment>/** 
 * Get a calendar instance with the correct time zone for storing and retrieving creation timestamps. Creation timestamps are stored in UTC to avoid ambiguities around the change from daylight saving time to standard time, or other time zone changes. If the data dictionary version is less than 10.11, however, the timestamps are stored in the local time zone.
 * @return a calendar instance that can be used for storing and retrievingtrigger creation timestamps
 * @throws StandardException if an error occurs
 */
</MethodComment>
            <ReturnType>Calendar</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildDescriptor</MethodName>
            <MethodComment>/** 
 * Make an  Tuple Descriptor out of a SYSTRIGGERS row
 * @param row 					a SYSTRIGGERS row
 * @param parentTupleDescriptor	unused
 * @param dd 					dataDictionary
 * @return	a  descriptor equivalent to a SYSTRIGGERS row
 * @exception StandardException thrown on failure
 */
</MethodComment>
            <ReturnType>TupleDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentTupleDescriptor</ParamName>
                    <ParamType>TupleDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dd</ParamName>
                    <ParamType>DataDictionary</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor [col]</InnerVar>
                <InnerVar>String [name]</InnerVar>
                <InnerVar>char [theChar]</InnerVar>
                <InnerVar>String [uuidStr]</InnerVar>
                <InnerVar>String [triggerDefinition]</InnerVar>
                <InnerVar>String [oldReferencingName]</InnerVar>
                <InnerVar>String [newReferencingName]</InnerVar>
                <InnerVar>UUID [uuid]</InnerVar>
                <InnerVar>UUID [suuid]</InnerVar>
                <InnerVar>UUID [tuuid]</InnerVar>
                <InnerVar>UUID [actionSPSID=null]</InnerVar>
                <InnerVar>UUID [whenSPSID=null]</InnerVar>
                <InnerVar>Timestamp [createTime]</InnerVar>
                <InnerVar>int [eventMask=0]</InnerVar>
                <InnerVar>boolean [isBefore]</InnerVar>
                <InnerVar>boolean [isRow]</InnerVar>
                <InnerVar>boolean [isEnabled]</InnerVar>
                <InnerVar>boolean [referencingOld]</InnerVar>
                <InnerVar>boolean [referencingNew]</InnerVar>
                <InnerVar>ReferencedColumns [rcd]</InnerVar>
                <InnerVar>TriggerDescriptor [descriptor]</InnerVar>
                <InnerVar>DataDescriptorGenerator [ddg=dd.getDataDescriptorGenerator()]</InnerVar>
                <InnerVar>String [whenClauseText=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildColumnList</MethodName>
            <MethodComment>/** 
 * Builds a list of columns suitable for creating this Catalog. The last column, the serialized statement, is not added to the column list.  This is done deliberately to make it a 'hidden' column -- one that is not visible to customers, but is visible to the system.
 * @return array of SystemColumn suitable for making this catalog.
 */
</MethodComment>
            <ReturnType>SystemColumn[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCharBoolean</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>col</ParamName>
                    <ParamType>DataValueDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trueValue</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>falseValue</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char [theChar=col.getString().charAt(0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getHeapColumnCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [supportsWhenClause=dataDictionary.checkVersion(DataDictionary.DD_VERSION_DERBY_10_11,null)]</InnerVar>
                <InnerVar>int [heapCols=super.getHeapColumnCount()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>