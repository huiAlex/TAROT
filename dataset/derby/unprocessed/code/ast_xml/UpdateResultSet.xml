<Class>
    <Id>1757</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>UpdateResultSet</ClassName>
    <SuperClass>DMLWriteGeneratedColumnsResultSet</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>UpdateResultSet  /** 
 * Update the rows from the specified base table. This will cause constraints to be checked and triggers to be executed based on the c's and t's compiled into the update plan.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>tc</FieldName>
            <FieldType>TransactionController</FieldType>
        </Field>
        <Field>
            <FieldName>newBaseRow</FieldName>
            <FieldType>ExecRow</FieldType>
        </Field>
        <Field>
            <FieldName>row</FieldName>
            <FieldType>ExecRow</FieldType>
        </Field>
        <Field>
            <FieldName>deferredSparseRow</FieldName>
            <FieldType>ExecRow</FieldType>
        </Field>
        <Field>
            <FieldName>constants</FieldName>
            <FieldType>UpdateConstantAction</FieldType>
        </Field>
        <Field>
            <FieldName>savedSource</FieldName>
            <FieldType>NoPutResultSet</FieldType>
        </Field>
        <Field>
            <FieldName>rowChanger</FieldName>
            <FieldType>RowChanger</FieldType>
        </Field>
        <Field>
            <FieldName>deferredBaseCC</FieldName>
            <FieldType>ConglomerateController</FieldType>
        </Field>
        <Field>
            <FieldName>deferredUniqueCIDs</FieldName>
            <FieldType>long[]</FieldType>
        </Field>
        <Field>
            <FieldName>deferredUniqueCreated</FieldName>
            <FieldType>boolean[]</FieldType>
        </Field>
        <Field>
            <FieldName>deferredUniqueCC</FieldName>
            <FieldType>ConglomerateController</FieldType>
        </Field>
        <Field>
            <FieldName>deferredUniqueScans</FieldName>
            <FieldType>ScanController[]</FieldType>
        </Field>
        <Field>
            <FieldName>deletedRowHolder</FieldName>
            <FieldType>TemporaryRowHolderImpl</FieldType>
        </Field>
        <Field>
            <FieldName>insertedRowHolder</FieldName>
            <FieldType>TemporaryRowHolderImpl</FieldType>
        </Field>
        <Field>
            <FieldName>riChecker</FieldName>
            <FieldType>RISetChecker</FieldType>
        </Field>
        <Field>
            <FieldName>triggerInfo</FieldName>
            <FieldType>TriggerInfo</FieldType>
        </Field>
        <Field>
            <FieldName>triggerActivator</FieldName>
            <FieldType>TriggerEventActivator</FieldType>
        </Field>
        <Field>
            <FieldName>updatingReferencedKey</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>updatingForeignKey</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>numOpens</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>heapConglom</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>fkInfoArray</FieldName>
            <FieldType>FKInfo[]</FieldType>
        </Field>
        <Field>
            <FieldName>baseRowReadList</FieldName>
            <FieldType>FormatableBitSet</FieldType>
        </Field>
        <Field>
            <FieldName>generationClauses</FieldName>
            <FieldType>GeneratedMethod</FieldType>
        </Field>
        <Field>
            <FieldName>checkGM</FieldName>
            <FieldType>GeneratedMethod</FieldType>
        </Field>
        <Field>
            <FieldName>resultWidth</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>numberOfBaseColumns</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>deferredTempRow</FieldName>
            <FieldType>ExecRow</FieldType>
        </Field>
        <Field>
            <FieldName>deferredBaseRow</FieldName>
            <FieldType>ExecRow</FieldType>
        </Field>
        <Field>
            <FieldName>oldDeletedRow</FieldName>
            <FieldType>ExecRow</FieldType>
        </Field>
        <Field>
            <FieldName>triggerResultDescription</FieldName>
            <FieldType>ResultDescription</FieldType>
        </Field>
        <Field>
            <FieldName>lockMode</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>deferred</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>beforeUpdateCopyRequired</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>violatingCheckConstraints</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>violatingCheckConstraints</FieldName>
            <FieldType>UUID</FieldType>
        </Field>
        <Field>
            <FieldName>deferredChecks</FieldName>
            <FieldType>BackingStoreHashtable</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>UpdateResultSet</MethodName>
            <MethodComment>/** 
 * @param source update rows come from source
 * @param generationClauses	Generated method for computed generation clauses
 * @param checkGM	Generated method for enforcing check constraints
 * @param activation The activation
 * @exception StandardException thrown on error
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>NoPutResultSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>generationClauses</ParamName>
                    <ParamType>GeneratedMethod</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>checkGM</ParamName>
                    <ParamType>GeneratedMethod</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>UpdateResultSet</MethodName>
            <MethodComment>/** 
 * @param source update rows come from source
 * @param generationClauses	Generated method for computed generation clauses
 * @param checkGM	Generated method for enforcing check constraints
 * @param activation Activation
 * @param constantActionItem  id of the update constant action saved object
 * @param rsdItem  id of the Result Description saved object
 * @exception StandardException thrown on error
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>NoPutResultSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>generationClauses</ParamName>
                    <ParamType>GeneratedMethod</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>checkGM</ParamName>
                    <ParamType>GeneratedMethod</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constantActionItem</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rsdItem</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>UpdateResultSet</MethodName>
            <MethodComment>/** 
 * @param source update rows come from source
 * @param generationClauses	Generated method for computed generation clauses
 * @param checkGM	Generated method for enforcing check constraints
 * @param activation
 * @param passedInConstantAction
 * @param passedInRsd
 * @exception StandardException thrown on error
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>NoPutResultSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>generationClauses</ParamName>
                    <ParamType>GeneratedMethod</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>checkGM</ParamName>
                    <ParamType>GeneratedMethod</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>activation</ParamName>
                    <ParamType>Activation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>passedInConstantAction</ParamName>
                    <ParamType>ConstantAction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>passedInRsd</ParamName>
                    <ParamType>ResultDescription</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;initializeAIcache;[constants.getAutoincRowLocation()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>open</MethodName>
            <MethodComment>/** 
 * @exception StandardException Standard Derby error policy
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setup;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;collectAffectedRows;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;saveAIcacheInformation;[constants.getSchemaName(), constants.getTableName(), constants.getColumnNames()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;cleanUp;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setup</MethodName>
            <MethodComment>/** 
 * @exception StandardException Standard Derby error policy
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [firstOpen=(rowChanger == null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;verifyAutoGeneratedRScolumnsList;[constants.targetUUID]</InnerMethodInvoke>
                <InnerMethodInvoke>rowChanger;open;[lockMode]</InnerMethodInvoke>
                <InnerMethodInvoke>null;firstExecuteSpecialHandlingAutoGen;[firstOpen, rowChanger, constants.targetUUID]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkStreamCols</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FormatableBitSet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DataValueDescriptor[] [cols=row.getRowArray()]</InnerVar>
                <InnerVar>FormatableBitSet [streamCols=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>objectifyStream</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tempRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>streamCols</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor[] [cols=tempRow.getRowArray()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateCheckConstraints</MethodName>
            <MethodComment>/** 
 * Run check constraints against the current row. Raise an error if a check constraint is violated, unless all the offending checks are deferred, in which case a false value will be returned. A NULL value will be interpreted as success (not violation).
 * @exception StandardException thrown on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [result=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>collectAffectedRows</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [rowsFound=false]</InnerVar>
                <InnerVar>TableScanResultSet [tableScan=(TableScanResultSet)activation.getForUpdateIndexScan()]</InnerVar>
                <InnerVar>boolean [notifyCursor=(tableScan != null)]</InnerVar>
                <InnerVar>boolean [checkStream=(deferred &amp;&amp; rowsFound &amp;&amp; !constants.singleRowSource)]</InnerVar>
                <InnerVar>FormatableBitSet [streamCols=(checkStream ? checkStreamCols() : null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNextRowCore</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>NoPutResultSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ExecRow [nextRow=super.getNextRowCore(source)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processMergeRow</MethodName>
            <MethodComment>/** 
 * &lt;p&gt; Special handling if this is an UPDATE action of a MERGE statement. &lt;/p&gt;
 */
</MethodComment>
            <ReturnType>ExecRow</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sourceRS</ParamName>
                    <ParamType>NoPutResultSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>notifyForUpdateCursor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newBaseRow</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rl</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tableScan</ParamName>
                    <ParamType>TableScanResultSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int[] [indexCols=tableScan.indexCols]</InnerVar>
                <InnerVar>int[] [changedCols=constants.changedColumnIds]</InnerVar>
                <InnerVar>boolean [placedForward=false, ascending, decided=false, overlap=false]</InnerVar>
                <InnerVar>int [basePos, k]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fireBeforeTriggers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fireAfterTriggers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateDeferredRows</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runChecker</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>restrictCheckOnly</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>foundRow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>checkRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>colsToCheck</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rowHolder</ParamName>
                    <ParamType>TemporaryRowHolderImpl</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ExecRow [scanRow]</InnerVar>
                <InnerVar>boolean [foundMatch=false]</InnerVar>
                <InnerVar>Object[] [checkRowArray=checkRow.getRowArray()]</InnerVar>
                <InnerVar>DataValueDescriptor [checkCol]</InnerVar>
                <InnerVar>DataValueDescriptor [scanCol]</InnerVar>
                <InnerVar>CursorResultSet [rs=rowHolder.getResultSet()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cleanUp</MethodName>
            <MethodComment>/** 
 * @see ResultSet#cleanUp
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rowChangerFinish</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rowChanger;finish;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rememberConstraint</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cid</ParamName>
                    <ParamType>UUID</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>violatingCheckConstraints;add;[cid]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSetAutoincrementValue</MethodName>
            <MethodComment>/** 
 * getSetAutoincrementValue will get the autoincrement value of the  columnPosition specified for the target table. If increment is  non-zero we will also update the autoincrement value. 
 * @param columnPosition	position of the column in the table (1-based)
 * @param increment			amount of increment. 
 * @exception StandardException if anything goes wrong.
 */
</MethodComment>
            <ReturnType>NumberDataValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnPosition</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>increment</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [index=columnPosition - 1]</InnerVar>
                <InnerVar>NumberDataValue [newValue]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initializeAIcache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rla</ParamName>
                    <ParamType>RowLocation[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>