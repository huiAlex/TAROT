<Class>
    <Id>906</Id>
    <Package>org.apache.derby.iapi.db</Package>
    <ClassName>Factory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Factory  /** 
 * &lt;P&gt; Callers of these methods must be within the context of a Derby statement execution otherwise a SQLException will be thrown. &lt;BR&gt; There are two basic ways to call these methods. &lt;OL&gt; &lt;LI&gt; Within a SQL statement. &lt;PRE&gt; -- checkpoint the database CALL org.apache.derby.iapi.db.Factory:: getDatabaseOfConnection().checkpoint(); &lt;/PRE&gt; &lt;LI&gt; In a server-side JDBC method. &lt;PRE&gt; import org.apache.derby.iapi.db.*; ... // checkpoint the database Database db = Factory.getDatabaseOfConnection(); db.checkpoint(); &lt;/PRE&gt; &lt;/OL&gt; This class can only be used within an SQL-J statement, a Java procedure or a server side Java method. &lt;p&gt;This class can be accessed using the class alias &lt;code&gt; FACTORY &lt;/code&gt; in SQL-J statements.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getDatabaseOfConnection</MethodName>
            <MethodComment>/** 
 * &lt;P&gt; Returns the Database object associated with the current connection.
 * @exception SQLException Not in a connection context.
 */
</MethodComment>
            <ReturnType>org.apache.derby.database.Database</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>LanguageConnectionContext [lcc=ConnectionUtil.getCurrentLCC()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTriggerExecutionContext</MethodName>
            <MethodComment>/** 
 * Get the TriggerExecutionContext for the current connection of the connection.
 * @return the TriggerExecutionContext if called from the contextof a trigger; otherwise, null.
 * @exception SQLException Not in a connection or trigger context.
 */
</MethodComment>
            <ReturnType>TriggerExecutionContext</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>LanguageConnectionContext [lcc=ConnectionUtil.getCurrentLCC()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>