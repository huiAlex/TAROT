<Class>
    <Id>1357</Id>
    <Package>org.apache.derby.impl.store.access.sort</Package>
    <ClassName>MergeSort</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Sort</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MergeSort  /** 
 * A sort implementation which does the sort in-memory if it can, but which can do an external merge sort so that it can sort an arbitrary number of rows.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>STATE_CLOSED</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>STATE_INITIALIZED</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>STATE_INSERTING</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>STATE_DONE_INSERTING</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>STATE_SCANNING</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>STATE_DONE_SCANNING</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>state</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>template</FieldName>
            <FieldType>DataValueDescriptor[]</FieldType>
        </Field>
        <Field>
            <FieldName>columnOrdering</FieldName>
            <FieldType>ColumnOrdering</FieldType>
        </Field>
        <Field>
            <FieldName>columnOrderingMap</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>columnOrderingAscendingMap</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>columnOrderingNullsLowMap</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>sortObserver</FieldName>
            <FieldType>SortObserver</FieldType>
        </Field>
        <Field>
            <FieldName>alreadyInOrder</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>inserter</FieldName>
            <FieldType>MergeInserter</FieldType>
        </Field>
        <Field>
            <FieldName>scan</FieldName>
            <FieldType>Scan</FieldType>
        </Field>
        <Field>
            <FieldName>mergeRuns</FieldName>
            <FieldType>Vector</FieldType>
        </Field>
        <Field>
            <FieldName>mergeRuns</FieldName>
            <FieldType>Long</FieldType>
        </Field>
        <Field>
            <FieldName>sortBuffer</FieldName>
            <FieldType>SortBuffer</FieldType>
        </Field>
        <Field>
            <FieldName>sortBufferMax</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>sortBufferMin</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>properties</FieldName>
            <FieldType>Properties</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>open</MethodName>
            <MethodComment>/** 
 * Open a sort controller. &lt;p&gt; This implementation only supports a single sort controller per sort.
 * @see Sort#open
 */
</MethodComment>
            <ReturnType>SortController</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tran</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openSortScan</MethodName>
            <MethodComment>/** 
 * Open a scan controller.
 * @see Sort#openSortScan
 */
</MethodComment>
            <ReturnType>ScanManager</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tran</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hold</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openSortRowSource</MethodName>
            <MethodComment>/** 
 * Open a row source to get rows out of the sorter.
 * @see Sort#openSortRowSource
 */
</MethodComment>
            <ReturnType>ScanControllerRowSource</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tran</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ScanControllerRowSource [rowSource=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>drop</MethodName>
            <MethodComment>/** 
 * Drop the sort.
 * @see Sort#drop
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tran</ParamName>
                    <ParamType>TransactionController</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;dropMergeRuns;[(TransactionManager)tran]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkColumnOrdering</MethodName>
            <MethodComment>/** 
 * Check the column ordering against the template, making sure that each column is present in the template, is not mentioned more than once, and that the columns isn't  {@code null}. &lt;p&gt; Intended to be called as part of a sanity check. All columns are orderable, since  {@code DataValueDescriptor} extends {@code Orderable}.
 * @return {@code true} if the ordering is valid, {@code false} if not.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnOrdering</ParamName>
                    <ParamType>ColumnOrdering</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [templateNColumns=template.length]</InnerVar>
                <InnerVar>boolean [seen[]=new boolean[templateNColumns]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkColumnTypes</MethodName>
            <MethodComment>/** 
 * Check that the columns in the row agree with the columns in the template, both in number and in type. &lt;p&gt; XXX (nat) Currently checks that the classes implementing each column are the same -- is this right?
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [nCols=row.length]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r1</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>r2</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [colsToCompare=this.columnOrdering.length]</InnerVar>
                <InnerVar>int [r]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initialize</MethodName>
            <MethodComment>/** 
 * Go from the CLOSED to the INITIALIZED state.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnOrdering</ParamName>
                    <ParamType>ColumnOrdering</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sortObserver</ParamName>
                    <ParamType>SortObserver</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>alreadyInOrder</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>estimatedRows</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sortBufferMax</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doneInserting</MethodName>
            <MethodComment>/** 
 * An inserter is closing.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inserter</ParamName>
                    <ParamType>MergeInserter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sortBuffer</ParamName>
                    <ParamType>SortBuffer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mergeRuns</ParamName>
                    <ParamType>Long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doneScanning</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scan</ParamName>
                    <ParamType>Scan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sortBuffer</ParamName>
                    <ParamType>SortBuffer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doneScanning</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scan</ParamName>
                    <ParamType>Scan</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sortBuffer</ParamName>
                    <ParamType>SortBuffer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mergeRuns</ParamName>
                    <ParamType>Long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;doneScanning;[scan, sortBuffer]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dropMergeRuns</MethodName>
            <MethodComment>/** 
 * Get rid of the merge runs, if there are any. Must not cause any errors because it's called during error processing.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tran</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>multiStageMerge</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tran</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Enumeration&lt;Long&gt; [e]</InnerVar>
                <InnerVar>int [maxMergeRuns=sortBuffer.capacity()]</InnerVar>
                <InnerVar>Vector&lt;Long&gt; [subset]</InnerVar>
                <InnerVar>Vector&lt;Long&gt; [leftovers]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createMergeRun</MethodName>
            <MethodComment>/** 
 * Remove all the rows from the sort buffer and store them in a temporary conglomerate.  The temporary conglomerate is a "merge run".  Returns the container id of the merge run.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tran</ParamName>
                    <ParamType>TransactionManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sortBuffer</ParamName>
                    <ParamType>SortBuffer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SortBufferRowSource [rowSource=new SortBufferRowSource(sortBuffer,(TransactionManager)null,sortObserver,true,sortBufferMax)]</InnerVar>
                <InnerVar>Transaction [rawTran=tran.getRawStoreXact()]</InnerVar>
                <InnerVar>int [segmentId=StreamContainerHandle.TEMPORARY_SEGMENT]</InnerVar>
                <InnerVar>long [id=rawTran.addAndLoadStreamContainer(segmentId,properties,rowSource)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>