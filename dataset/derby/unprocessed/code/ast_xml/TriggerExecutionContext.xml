<Class>
    <Id>1441</Id>
    <Package>org.apache.derby.iapi.db</Package>
    <ClassName>TriggerExecutionContext</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TriggerExecutionContext  /** 
 * A trigger execution context holds information that is available from the context of a trigger invocation.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>UPDATE_EVENT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DELETE_EVENT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>INSERT_EVENT</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getTargetTableName</MethodName>
            <MethodComment>/** 
 * Get the target table name upon which the  trigger event is declared.
 * @return the target table
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTargetTableId</MethodName>
            <MethodComment>/** 
 * Get the target table UUID upon which the  trigger event is declared.
 * @return the uuid of the target table
 */
</MethodComment>
            <ReturnType>UUID</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEventType</MethodName>
            <MethodComment>/** 
 * Get the type for the event that caused the trigger to fire.
 * @return the event type (e.g. UPDATE_EVENT)
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEventStatementText</MethodName>
            <MethodComment>/** 
 * Get the text of the statement that caused the trigger to fire.
 * @return the statement text.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOldRowSet</MethodName>
            <MethodComment>/** 
 * Returns a result set of the old (before) images of the changed rows. For a row trigger, this result set will have a single row.  For a statement trigger, this result set has every row that has changed or will change.  If a statement trigger does not affect  a row, then the result set will be empty (i.e. ResultSet.next() will return false). &lt;p&gt; Will return null if the call is inapplicable for the trigger that is currently executing.  For example, will return null if called during a the firing of an INSERT trigger.
 * @return the ResultSet containing before images of the rows changed by the triggering event.  May return null.
 * @exception SQLException if called after the triggering event hascompleted
 */
</MethodComment>
            <ReturnType>ResultSet</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNewRowSet</MethodName>
            <MethodComment>/** 
 * Returns a result set of the new (after) images of the changed rows. For a row trigger, this result set will have a single row.  For a statement trigger, this result set has every row that has changed or will change.  If a statement trigger does not affect  a row, then the result set will be empty (i.e. ResultSet.next() will return false). &lt;p&gt; Will return null if the call is inapplicable for the trigger that is currently executing.  For example, will return null if  called during the firing of a DELETE trigger.
 * @return the ResultSet containing after images of the rows changed by the triggering event.  May return null.
 * @exception SQLException if called after the triggering event hascompleted
 */
</MethodComment>
            <ReturnType>ResultSet</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOldRow</MethodName>
            <MethodComment>/** 
 * Like getOldRowSet(), but returns a result set positioned on the first row of the before (old) result set.  Used as a convenience to get a column for a row trigger.  Equivalent to getOldRowSet() followed by next(). &lt;p&gt; Will return null if the call is inapplicable for the trigger that is currently executing.  For example, will return null if called during a the firing of an INSERT trigger.
 * @return the ResultSet positioned on the old row image.  Mayreturn null.
 * @exception SQLException if called after the triggering event hascompleted
 */
</MethodComment>
            <ReturnType>ResultSet</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNewRow</MethodName>
            <MethodComment>/** 
 * Like getNewRowSet(), but returns a result set positioned on the first row of the after (new) result set.  Used as a convenience to get a column for a row trigger.  Equivalent to getNewRowSet() followed by next(). &lt;p&gt; Will return null if the call is inapplicable for the trigger that is currently executing.  For example, will return null if  called during the firing of a DELETE trigger.
 * @return the ResultSet positioned on the new row image.  Mayreturn null.
 * @exception SQLException if called after the triggering event hascompleted
 */
</MethodComment>
            <ReturnType>ResultSet</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAutoincrementValue</MethodName>
            <MethodComment>/** 
 * Get the last auto-increment value for the specified column.
 * @param identity the fully qualified name of the identity column
 * @return the last auto-increment value, or {@code null} if not found
 */
</MethodComment>
            <ReturnType>Long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>identity</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>