<Class>
    <Id>424</Id>
    <Package>org.apache.derby.impl.sql.execute</Package>
    <ClassName>GenericAggregator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GenericAggregator  /** 
 * Adaptor that sits between execution layer and aggregates.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>aggInfo</FieldName>
            <FieldType>AggregatorInfo</FieldType>
        </Field>
        <Field>
            <FieldName>aggregatorColumnId</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>inputColumnId</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>resultColumnId</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>cf</FieldName>
            <FieldType>ClassFactory</FieldType>
        </Field>
        <Field>
            <FieldName>cachedAggregator</FieldName>
            <FieldType>ExecAggregator</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>GenericAggregator</MethodName>
            <MethodComment>/** 
 * Constructor:
 * @param aggInfo 	information about the user aggregate
 * @param cf		the class factory. 
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>aggInfo</ParamName>
                    <ParamType>AggregatorInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cf</ParamName>
                    <ParamType>ClassFactory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initialize</MethodName>
            <MethodComment>/** 
 * Initialize the aggregator
 * @param row 	the row with the aggregator to be initialized
 * @exception StandardException  on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>UserDataValue [aggregatorColumn=(UserDataValue)row.getColumn(aggregatorColumnId + 1)]</InnerVar>
                <InnerVar>ExecAggregator [ua=(ExecAggregator)aggregatorColumn.getObject()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>accumulate</MethodName>
            <MethodComment>/** 
 * Accumulate the aggregate results.  This is the guts of the aggregation.  We will call the user aggregate on itself to do the aggregation.
 * @param inputRow 	the row with the input colum
 * @param accumulateRow 	the row with the aggregator 
 * @exception StandardException  on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>accumulateRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor [inputColumn=null]</InnerVar>
                <InnerVar>DataValueDescriptor [aggregatorColumn=accumulateRow.getColumn(aggregatorColumnId + 1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;accumulate;[inputColumn, aggregatorColumn]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>accumulate</MethodName>
            <MethodComment>/** 
 * Accumulate the aggregate results.  This is the guts of the aggregation.  We will call the user aggregate on itself to do the aggregation.
 * @param inputRow 	the row with the input colum
 * @param accumulateRow 	the row with the aggregator 
 * @exception StandardException  on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputRow</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>accumulateRow</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor [inputColumn=null]</InnerVar>
                <InnerVar>DataValueDescriptor [aggregatorColumn=(DataValueDescriptor)accumulateRow[aggregatorColumnId]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;accumulate;[inputColumn, aggregatorColumn]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>accumulate</MethodName>
            <MethodComment>/** 
 * Accumulate the aggregate results.  This is the guts of the aggregation.  We will call the user aggregate on itself to do the aggregation.
 * @param inputColumn 
 * @param aggregatorColumn
 * @exception StandardException  on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputColumn</ParamName>
                    <ParamType>DataValueDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>aggregatorColumn</ParamName>
                    <ParamType>DataValueDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ExecAggregator [ua]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ua;accumulate;[inputColumn, this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>merge</MethodName>
            <MethodComment>/** 
 * Merge the aggregate results.  This is the guts of the aggregation.  We will call the user aggregate on itself to do the aggregation.
 * @param inputRow 	the row with the input colum
 * @param mergeRow 	the row with the aggregator 
 * @exception StandardException  on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mergeRow</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor [mergeColumn=mergeRow.getColumn(aggregatorColumnId + 1)]</InnerVar>
                <InnerVar>DataValueDescriptor [inputColumn=inputRow.getColumn(aggregatorColumnId + 1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;merge;[inputColumn, mergeColumn]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>merge</MethodName>
            <MethodComment>/** 
 * Merge the aggregate results.  This is the guts of the aggregation.  We will call the user aggregate on itself to do the aggregation.
 * @param inputRow 	the row with the input colum
 * @param mergeRow 	the row with the aggregator 
 * @exception StandardException  on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputRow</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mergeRow</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor [mergeColumn=(DataValueDescriptor)mergeRow[aggregatorColumnId]]</InnerVar>
                <InnerVar>DataValueDescriptor [inputColumn=(DataValueDescriptor)inputRow[aggregatorColumnId]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;merge;[inputColumn, mergeColumn]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finish</MethodName>
            <MethodComment>/** 
 * Get the results of the aggregation and put it in the result column.
 * @param row	the row with the result and the aggregator
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataValueDescriptor [outputColumn=row.getColumn(resultColumnId + 1)]</InnerVar>
                <InnerVar>DataValueDescriptor [aggregatorColumn=row.getColumn(aggregatorColumnId + 1)]</InnerVar>
                <InnerVar>ExecAggregator [ua=(ExecAggregator)aggregatorColumn.getObject()]</InnerVar>
                <InnerVar>DataValueDescriptor [result=ua.getResult()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAggregatorInstance</MethodName>
            <MethodComment>/** 
 * Get a new instance of the aggregator and initialize it.
 * @return an exec aggregator
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>ExecAggregator</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ExecAggregator [aggregatorInstance]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumnId</MethodName>
            <MethodComment>/** 
 * Return the column id that is being aggregated
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInputColumnValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DataValueDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>ExecRow</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>merge</MethodName>
            <MethodComment>/** 
 * Merge two partial aggregations.  This is how the sorter merges partial aggregates.
 * @exception StandardException on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>aggregatorColumnIn</ParamName>
                    <ParamType>Storable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>aggregatorColumnOut</ParamName>
                    <ParamType>Storable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ExecAggregator [uaIn]</InnerVar>
                <InnerVar>ExecAggregator [uaOut]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>uaOut;merge;[uaIn]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAggregatorInfo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AggregatorInfo</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>