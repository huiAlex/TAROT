<Class>
    <Id>820</Id>
    <Package>org.apache.derby.diag</Package>
    <ClassName>StatementDuration</ClassName>
    <SuperClass>VTITemplate</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StatementDuration  /** 
 * StatementDuration is a virtual table which can be used to analyze the execution duration of the statements of "interest" in db2j.&lt;!-- --&gt;log or a specified file when db2j.&lt;!-- --&gt;language.&lt;!-- --&gt;logStatementText=true. &lt;P&gt;A limitation is that, for each transaction ID, a row will not be returned for the last	statement with that transaction id.  (Transaction IDs change within a connection after a commit or rollback, if the transaction that just ended modified data.) &lt;P&gt;The execution duration is the time between the beginning of execution of two successive statements.  There are a number of reasons why this time may not be accurate.  The duration could include time spent in the application waiting for user input, doing other work, etc. It may also only include a portion of the actual execution time, if the application executes a new statement before draining the previous open ResultSet.  StatementDuration can be used to get a rough sense of where the bottlenecks in an application's JDBC code are. &lt;P&gt;The StatementDuration virtual table has the following columns: &lt;UL&gt;&lt;LI&gt;TS varchar(26) - not nullable.  The timestamp of the statement.&lt;/LI&gt; &lt;LI&gt;THREADID varchar(80) - not nullable.  The thread name.&lt;/LI&gt; &lt;LI&gt;XID varchar(15) - not nullable.  The transaction ID.&lt;/LI&gt; &lt;LI&gt;LOGTEXT long varchar - nullable.  Text of the statement or commit or rollback.&lt;/LI&gt; &lt;LI&gt;DURATION varchar(10) - not nullable.  Duration, in milliseconds, of the statement.&lt;/LI&gt; &lt;/UL&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>gotFile</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>inputFileStreamReader</FieldName>
            <FieldType>InputStreamReader</FieldType>
        </Field>
        <Field>
            <FieldName>inputStream</FieldName>
            <FieldType>InputStream</FieldType>
        </Field>
        <Field>
            <FieldName>bufferedReader</FieldName>
            <FieldType>BufferedReader</FieldType>
        </Field>
        <Field>
            <FieldName>inputFileName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>hashTable</FieldName>
            <FieldType>Hashtable</FieldType>
        </Field>
        <Field>
            <FieldName>hashTable</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>line</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>endTimestampIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>threadIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>xidIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>lccidIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>currentRow</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>END_TIMESTAMP</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BEGIN_THREAD_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>END_THREAD_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BEGIN_XID_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>END_XID_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BEGIN_EXECUTING_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>END_EXECUTING_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>columnInfo</FieldName>
            <FieldType>ResultColumnDescriptor[]</FieldType>
        </Field>
        <Field>
            <FieldName>metadata</FieldName>
            <FieldType>ResultSetMetaData</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>StatementDuration</MethodName>
            <MethodComment>/** 
 * StatementDuration() accesses the error log in derby.system.home, if set, otherwise it looks in the current directory. StatementDuration('filename') will access the specified file name.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [home=AccessController.doPrivileged(new PrivilegedAction&lt;String&gt;(){
  public String run(){
    return System.getProperty(Property.SYSTEM_HOME_PROPERTY);
  }
}
)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>DiagUtil;checkAccess;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>StatementDuration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputFileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>DiagUtil;checkAccess;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMetaData</MethodName>
            <MethodComment>/** 
 * @see java.sql.ResultSet#getMetaData
 */
</MethodComment>
            <ReturnType>ResultSetMetaData</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment>/** 
 * @see java.sql.ResultSet#next
 * @exception SQLException If database access error occurs.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stringToTimestamp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Timestamp</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>raw</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [trimmed=raw.trim()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * @see java.sql.ResultSet#close
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getString</MethodName>
            <MethodComment>/** 
 * All columns in StatementDuration VTI have String data types.
 * @see java.sql.ResultSet#getString
 * @exception SQLException If database access error occurs.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupColumn</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>wasNull</MethodName>
            <MethodComment>/** 
 * @see java.sql.ResultSet#wasNull
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>