<Class>
    <Id>2099</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>BitConstantNode</ClassName>
    <SuperClass>ConstantNode</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>BitConstantNode</MethodName>
            <MethodComment>/** 
 * @param t The TypeId for the type of the node
 * @param cm context manager
 * @throws StandardException
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>TypeId</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BitConstantNode</MethodName>
            <MethodComment>/** 
 * @param hexString hexadecimally coded bit string
 * @param bitLength desired length of the bit string
 * @param cm context manager
 * @throws StandardException
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>hexString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bitLength</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cm</ParamName>
                    <ParamType>ContextManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [nv=StringUtil.fromHexString(hexString,0,hexString.length())]</InnerVar>
                <InnerVar>BitDataValue [dvd=getDataValueFactory().getBitDataValue(nv)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>dvd;setWidth;[bitLength, 0, false]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setValue;[dvd]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConstantValueAsObject</MethodName>
            <MethodComment>/** 
 * Return an Object representing the bind time value of this expression tree.  If the expression tree does not evaluate to a constant at bind time then we return null. This is useful for bind time resolution of VTIs. RESOLVE: What do we do for primitives?
 * @return	An Object representing the bind time value of this expression tree.(null if not a bind time constant.)
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateConstant</MethodName>
            <MethodComment>/** 
 * This generates the proper constant.  It is implemented by every specific constant node (e.g. IntConstantNode).
 * @param acb	The ExpressionClassBuilder for the class being built
 * @param mb	The method the code to place the code
 * @exception StandardException		Thrown on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>acb</ParamName>
                    <ParamType>ExpressionClassBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mb</ParamName>
                    <ParamType>MethodBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [bytes=value.getBytes()]</InnerVar>
                <InnerVar>String [hexLiteral=org.apache.derby.iapi.util.StringUtil.toHexString(bytes,0,bytes.length)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mb;push;[hexLiteral]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[0]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;push;[hexLiteral.length()]</InnerMethodInvoke>
                <InnerMethodInvoke>mb;callMethod;[VMOpcode.INVOKESTATIC, "org.apache.derby.iapi.util.StringUtil", "fromHexString", "byte[]", 3]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>