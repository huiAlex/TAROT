<Class>
    <Id>663</Id>
    <Package>org.apache.derby.iapi.services.locks</Package>
    <ClassName>LockFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>PropertySetCallback</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LockFactory  /** 
 * Generic locking of objects. Enables deadlock detection. &lt;BR&gt; MT - Mutable - Container Object - Thread Safe
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>createCompatibilitySpace</MethodName>
            <MethodComment>/** 
 * Create an object which can be used as a compatibility space. A compatibility space object can only be used in the &lt;code&gt;LockFactory&lt;/code&gt; that created it.
 * @param owner the owner of the compatibility space (typically atransaction object). Might be &lt;code&gt;null&lt;/code&gt;.
 * @return an object which represents a compatibility space
 */
</MethodComment>
            <ReturnType>CompatibilitySpace</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>owner</ParamName>
                    <ParamType>LockOwner</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lockObject</MethodName>
            <MethodComment>/** 
 * Lock an object within a compatibility space and associate the lock with a group object, waits up to timeout milli-seconds for the object to become unlocked. A  timeout of 0 means do not wait for the lock to be unlocked. Note the actual time waited is approximate. &lt;P&gt; A compatibility space in an space where lock requests are assumed to be compatible and granted by the lock manager if the trio {compatibilitySpace, ref, qualifier} are equal (i.e. reference equality for qualifier and compatibilitySpace, equals() method for ref). Granted by the lock manager means that the Lockable object may or may  not be queried to see if the request is compatible. &lt;BR&gt; A compatibility space is not assumed to be owned by a single thread.
 * @param compatibilitySpace object defining compatibility space
 * @param group handle of group, must be private to a thread.
 * @param ref reference to object to be locked
 * @param qualifier A qualification of the request.
 * @param timeout the maximum time to wait in milliseconds, LockFactory.NO_WAIT means don't wait.
 * @return true if the lock was obtained, false if timeout is equal to LockFactory.NO_WAIT and the lockcould not be granted.
 * @exception StandardException if a deadlock has occurred (message idwill be LockFactory.Deadlock), or if the wait for the lock timed out (message id will be LockFactory.TimeOut), or if another thread interrupted this thread while it was waiting for the lock (this will be a StandardException with a nested InterruptedException, and the message id will be LockFactory.InterruptedExceptionId), or if any other error occurs when locking the object
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>compatibilitySpace</ParamName>
                    <ParamType>CompatibilitySpace</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>group</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ref</ParamName>
                    <ParamType>Lockable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qualifier</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>timeout</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unlock</MethodName>
            <MethodComment>/** 
 * Unlock a single lock on a single object held within this compatibility space and locked with the supplied qualifier.
 * @param compatibilitySpace object defining compatibility space
 * @param group handle of group.
 * @param ref Reference to object to be unlocked.
 * @param qualifier qualifier of lock to be unlocked
 * @return number of locks released (one or zero).
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>compatibilitySpace</ParamName>
                    <ParamType>CompatibilitySpace</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>group</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ref</ParamName>
                    <ParamType>Lockable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qualifier</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unlockGroup</MethodName>
            <MethodComment>/** 
 * Unlock all locks in a group. 
 * @param compatibilitySpace object defining compatibility space
 * @param group handle of group that objects were locked with.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>compatibilitySpace</ParamName>
                    <ParamType>CompatibilitySpace</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>group</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unlockGroup</MethodName>
            <MethodComment>/** 
 * Unlock all locks on a group that match the passed in value.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>compatibilitySpace</ParamName>
                    <ParamType>CompatibilitySpace</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>group</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>Matchable</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transfer</MethodName>
            <MethodComment>/** 
 * Transfer a set of locks from one group to another.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>compatibilitySpace</ParamName>
                    <ParamType>CompatibilitySpace</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>oldGroup</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newGroup</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>anyoneBlocked</MethodName>
            <MethodComment>/** 
 * Returns true if locks held by anyone are blocking anyone else
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>areLocksHeld</MethodName>
            <MethodComment>/** 
 * Return true if locks are held in this compatibility space and this group.
 * @param group handle of group that objects were locked with.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>compatibilitySpace</ParamName>
                    <ParamType>CompatibilitySpace</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>group</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>areLocksHeld</MethodName>
            <MethodComment>/** 
 * Return true if locks are held in this compatibility space.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>compatibilitySpace</ParamName>
                    <ParamType>CompatibilitySpace</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>zeroDurationlockObject</MethodName>
            <MethodComment>/** 
 * Lock an object with zero duration within a compatibility space, waits up to timeout milli-seconds for the object to become unlocked. A  timeout of 0 means do not wait for the lock to be unlocked. Note the actual time waited is approximate. &lt;P&gt; Zero duration means the lock is released as soon as it is obtained. &lt;P&gt; A compatibility space in an space where lock requests are assumed to be compatible and granted by the lock manager if the trio {compatibilitySpace, ref, qualifier} are equal (i.e. reference equality for qualifier and compatibilitySpace, equals() method for ref). Granted by the lock manager means that the Lockable object may or may  not be queried to see if the request is compatible. &lt;BR&gt; A compatibility space is not assumed to be owned by a single thread.
 * @param compatibilitySpace object defining compatibility space
 * @param ref reference to object to be locked
 * @param qualifier A qualification of the request.
 * @param timeout the maximum time to wait in milliseconds, LockFactory.NO_WAIT means don't wait.
 * @return true if the lock was obtained, false if timeout is equal to LockFactory.NO_WAIT and the lockcould not be granted.
 * @exception StandardException if a deadlock has occurred (message idwill be LockFactory.Deadlock), or if the wait for the lock timed out (message id will be LockFactory.TimeOut), or if another thread interrupted this thread while it was waiting for the lock (this will be a StandardException with a nested InterruptedException, and the message id will be LockFactory.InterruptedExceptionId), or if any other error occurs when locking the object
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>compatibilitySpace</ParamName>
                    <ParamType>CompatibilitySpace</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ref</ParamName>
                    <ParamType>Lockable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qualifier</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>timeout</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isLockHeld</MethodName>
            <MethodComment>/** 
 * Check to see if a specific lock is held.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>compatibilitySpace</ParamName>
                    <ParamType>CompatibilitySpace</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>group</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ref</ParamName>
                    <ParamType>Lockable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qualifier</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWaitTimeout</MethodName>
            <MethodComment>/** 
 * Get the lock timeout in milliseconds. A negative number means that there is no timeout.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLimit</MethodName>
            <MethodComment>/** 
 * Install a limit that is called when the size of the group exceeds the required limit. &lt;BR&gt; It is not guaranteed that the callback method (Limit.reached) is called as soon as the group size exceeds the given limit. If the callback method does not result in a decrease in the number of locks held then the lock factory implementation may delay calling the method again. E.g. with a limit of 500 and a reached() method that does nothing, may result in the call back method only being called when the group size reaches 550. &lt;BR&gt; Only one limit may be in place for a group at any time.
 * @see Limit
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>compatibilitySpace</ParamName>
                    <ParamType>CompatibilitySpace</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>group</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>limit</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>callback</ParamName>
                    <ParamType>Limit</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearLimit</MethodName>
            <MethodComment>/** 
 * Clear a limit set by setLimit.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>compatibilitySpace</ParamName>
                    <ParamType>CompatibilitySpace</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>group</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeVirtualLockTable</MethodName>
            <MethodComment>/** 
 * Make a virtual lock table for diagnostics.
 */
</MethodComment>
            <ReturnType>Enumeration</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>