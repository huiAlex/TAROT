<Class>
    <Id>1256</Id>
    <Package>org.apache.derby.iapi.store.raw</Package>
    <ClassName>Loggable</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Formatable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Loggable  /** 
 * A Loggable is a record of a change of state or an event that happened  in the RawStore in the context of a transaction. All changes in the RawStore must be logged. This is the root class for all log operations.
 * @see Transaction#logAndDo
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>FIRST</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LAST</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMPENSATION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>BI_LOG</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMMIT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ABORT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PREPARE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>XA_NEEDLOCK</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RAWSTORE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>FILE_RESOURCE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>CHECKSUM</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>doMe</MethodName>
            <MethodComment>/** 
 * Apply the change indicated by this operation and optional data. &lt;B&gt;If this method fail, the system will be shut down because the log record has already been written to disk.  Moreover, the log record will be replayed during recovery and this doMe method will be called on the same page again, so if it fails again, recovery will fail and the database cannot be started.  So it is very important to make sure that every resource you need, such as disk space, has been acquired before the logAndDo method is called! &lt;/B&gt; &lt;BR&gt;This method cannot acquire any resource (like latching of a page) since it is called underneath the logging system, ie., the log record has already been written to the log stream. &lt;P&gt; The available() method of in indicates how much data can be read, i.e. how much was originally written.
 * @param xact			the Transaction
 * @param instant		the log instant of this operation
 * @param in			optional data
 * @exception IOException Can be thrown by any of the methods of in.
 * @exception StandardException Standard Derby policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>instant</ParamName>
                    <ParamType>LogInstant</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>LimitObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPreparedLog</MethodName>
            <MethodComment>/** 
 * The log operations are responsible to create the ByteArray, and the log operations should write out any optional data for the change to the  ByteArray. The ByteArray can be prepared when the log operation is constructed, or it can be prepared when getPreparedLog() is called. Called by the log manager to allow the log operation to pass the buffer which contains optional data that will be available in to doMe()  methods.
 * @exception StandardException Standard Derby policy.
 */
</MethodComment>
            <ReturnType>ByteArray</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>needsRedo</MethodName>
            <MethodComment>/** 
 * Determine if the operation should be reapplied in recovery redo. If redo is needed, acquire any resource that is necessary for the loggable's doMe method.  These need to be released in the releaseResource method. &lt;P&gt; The sequence of events in recovery redo of a Loggable operation is: &lt;NL&gt; &lt;LI&gt; Get the loggable operation.  If loggable.needsRedo is false, then no need to redo this operation. &lt;LI&gt; If loggable.needsRedo is true, all the resources necessary for applying the doMe is acquired in needsRedo. &lt;LI&gt; If the loggable is actually a compensation operation, then the logging system will find the undoable operation that needs to be undone, call compensation.setUndoOp with the undoable operation. &lt;LI&gt; The recovery system then calls loggable.doMe, which re-applies the loggable operation, or re-applies the compensation operation &lt;LI&gt; The recovery system then calls loggable.releaseResource. &lt;/NL&gt;
 * @param xact		The transaction trying to redo this operation
 * @return true if operation needs redoing, false if not.
 * @exception StandardException Standard Derby policy.
 * @see Loggable#releaseResource
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>releaseResource</MethodName>
            <MethodComment>/** 
 * Release any resource that was acquired for doMe for rollback or recovery redo. This resource is acquired in either generateUndo (if this is a compensation operation during run time rollback or recovery rollback) or in needsRedo (if this is during recovery redo).  The run time transaction context should have all the resource already acquird for run time roll forward, so there is no need to releaseResource during run time roll forward. This method must be safe to be called multiple times.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xact</ParamName>
                    <ParamType>Transaction</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>group</MethodName>
            <MethodComment>/** 
 * Get the loggable's group value
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>