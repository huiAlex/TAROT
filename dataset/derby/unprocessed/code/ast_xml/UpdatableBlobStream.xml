<Class>
    <Id>1953</Id>
    <Package>org.apache.derby.impl.jdbc</Package>
    <ClassName>UpdatableBlobStream</ClassName>
    <SuperClass>InputStream</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>UpdatableBlobStream  /** 
 * Updatable blob stream is a wrapper stream over dvd stream and LOBInputStream. It detects if blob data has moved from dvd to clob control. If this happens, it will update itself to point to LOBInputStream and reflect changes made to the Blob after the current position of the stream.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>materialized</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>stream</FieldName>
            <FieldType>InputStream</FieldType>
        </Field>
        <Field>
            <FieldName>pos</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>blob</FieldName>
            <FieldType>EmbedBlob</FieldType>
        </Field>
        <Field>
            <FieldName>maxPos</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>UpdatableBlobStream</MethodName>
            <MethodComment>/** 
 * Constructs UpdatableBlobStream using the the InputStream receives as the parameter. The initial position is set to the &lt;code&gt;0&lt;/code&gt;.
 * @param blob EmbedBlob this stream is associated with.
 * @param is InputStream this class is going to use internally.
 * @throws IOException if an I/O error occurs
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>blob</ParamName>
                    <ParamType>EmbedBlob</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>is</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>UpdatableBlobStream</MethodName>
            <MethodComment>/** 
 * Construct an &lt;code&gt;UpdatableBlobStream&lt;/code&gt; using the  &lt;code&gt;InputStream&lt;/code&gt; received as parameter. The initial position in the stream is set to &lt;code&gt;pos&lt;/code&gt; and the stream is restricted to a length of &lt;code&gt;len&lt;/code&gt;.
 * @param blob EmbedBlob this stream is associated with.
 * @param is InputStream this class is going to use internally.
 * @param pos initial position
 * @param len The length to which the underlying &lt;code&gt;InputStream&lt;/code&gt;has to be restricted.
 * @throws IOException
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>blob</ParamName>
                    <ParamType>EmbedBlob</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>is</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateIfRequired</MethodName>
            <MethodComment>/** 
 * Checks if this object is using materialized blob if not it checks if the blob was materialized since this stream was last access. If the blob was materialized (due to one of the set methods) it gets the stream again and sets the position to current read position.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Reads the next byte of data from the input stream. The value byte is returned as an &lt;code&gt;int&lt;/code&gt; in the range &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt;. If no byte is available because the end of the stream has been reached, the value &lt;code&gt;-1&lt;/code&gt; is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown. &lt;p&gt; A subclass must provide an implementation of this method. &lt;p&gt; Note that this stream will reflect changes made to the underlying Blob at positions equal to or larger then the current position.
 * @return the next byte of data, or &lt;code&gt;-1&lt;/code&gt; if the end of thestream is reached.
 * @exception IOException  if an I/O error occurs.
 * @see InputStream#read
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [ret=stream.read()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;updateIfRequired;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Reads up to &lt;code&gt;len&lt;/code&gt; bytes of data from the input stream into an array of bytes.  An attempt is made to read as many as &lt;code&gt;len&lt;/code&gt; bytes, but a smaller number may be read. The number of bytes actually read is returned as an integer. &lt;p&gt; Note that this stream will reflect changes made to the underlying Blob at positions equal to or larger then the current position .
 * @param b     the buffer into which the data is read.
 * @param off   the start offset in array &lt;code&gt;b&lt;/code&gt;at which the data is written.
 * @param len   the maximum number of bytes to read.
 * @return the total number of bytes read into the buffer, or&lt;code&gt;-1&lt;/code&gt; if there is no more data because the end of the stream has been reached.
 * @exception IOException If the first byte cannot be read for any reasonother than end of file, or if the input stream has been closed, or if some other I/O error occurs.
 * @exception NullPointerException If &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
 * @exception IndexOutOfBoundsException If &lt;code&gt;off&lt;/code&gt; is negative,&lt;code&gt;len&lt;/code&gt; is negative, or &lt;code&gt;len&lt;/code&gt; is greater than &lt;code&gt;b.length - off&lt;/code&gt;
 * @see java.io.InputStream#read(byte[],int,int)
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>off</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [remaining=maxPos - pos]</InnerVar>
                <InnerVar>int [actualLength=(int)Math.min(len,remaining)]</InnerVar>
                <InnerVar>int [retValue=stream.read(b,off,actualLength)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;updateIfRequired;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>read</MethodName>
            <MethodComment>/** 
 * Reads some number of bytes from the input stream and stores them into the buffer array &lt;code&gt;b&lt;/code&gt;. The number of bytes actually read is returned as an integer.  This method blocks until input data is available, end of file is detected, or an exception is thrown. &lt;p&gt; Note that this stream will reflect changes made to the underlying Blob at positions equal to or larger then the current position .
 * @param b   the buffer into which the data is read.
 * @return the total number of bytes read into the buffer, or&lt;code&gt;-1&lt;/code&gt; is there is no more data because the end of the stream has been reached.
 * @exception IOException  If the first byte cannot be read for any reasonother than the end of the file, if the input stream has been closed, or if some other I/O error occurs.
 * @exception NullPointerException  if &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
 * @see java.io.InputStream#read(byte[])
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>skip</MethodName>
            <MethodComment>/** 
 * Skips over and discards &lt;code&gt;n&lt;/code&gt; bytes of data from this input stream. The &lt;code&gt;skip&lt;/code&gt; method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly &lt;code&gt;0&lt;/code&gt;. This may result from any of a number of conditions; reaching end of file before &lt;code&gt;n&lt;/code&gt; bytes have been skipped is only one possibility. The actual number of bytes skipped is returned.  If &lt;code&gt;n&lt;/code&gt; is negative, no bytes are skipped. &lt;p&gt; Note that this stream will reflect changes made to the underlying Blob at positions equal to or larger then the current position .
 * @param n   the number of bytes to be skipped.
 * @return the actual number of bytes skipped.
 * @exception IOException  if the stream does not support seek,or if some other I/O error occurs.
 * @see java.io.InputStream#skip(long)
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>n</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [retValue=stream.skip(n)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;updateIfRequired;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>