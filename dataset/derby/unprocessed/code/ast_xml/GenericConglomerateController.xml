<Class>
    <Id>2088</Id>
    <Package>org.apache.derby.impl.store.access.conglomerate</Package>
    <ClassName>GenericConglomerateController</ClassName>
    <SuperClass>GenericController</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ConglomerateController</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GenericConglomerateController  /** 
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment>/** 
 * @see ConglomerateController#close
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>closeForEndTransaction</MethodName>
            <MethodComment>/** 
 * Close conglomerate controller as part of terminating a transaction. &lt;p&gt; Use this call to close the conglomerate controller resources as part of committing or aborting a transaction.  The normal close() routine may  do some cleanup that is either unnecessary, or not correct due to the  unknown condition of the controller following a transaction ending error. Use this call when closing all controllers as part of an abort of a  transaction. &lt;p&gt; This call is meant to only be used internally by the Storage system, clients of the storage system should use the simple close() interface. &lt;p&gt; RESOLVE (mikem) - move this call to ConglomerateManager so it is obvious that non-access clients should not call this.
 * @param closeHeldScan           If true, means to close controller even ifit has been opened to be kept opened  across commit.  This is used to close these controllers on abort.
 * @return boolean indicating that the close has resulted in a real closeof the controller.  A held scan will return false if  called by closeForEndTransaction(false), otherwise it  will return true.  A non-held scan will always return  true.
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>closeHeldScan</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>delete</MethodName>
            <MethodComment>/** 
 * @see ConglomerateController#delete
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>loc</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RowPosition [pos=open_conglom.getRuntimeMem().get_scratch_row_position()]</InnerVar>
                <InnerVar>boolean [ret_val=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;getRowPositionFromRowLocation;[loc, pos]</InnerMethodInvoke>
                <InnerMethodInvoke>open_conglom;lockPositionForWrite;[pos, true]</InnerMethodInvoke>
                <InnerMethodInvoke>pos.current_page;unlatch;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fetch</MethodName>
            <MethodComment>/** 
 * @see ConglomerateController#fetch
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>loc</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>validColumns</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RowPosition [pos=open_conglom.getRuntimeMem().get_scratch_row_position()]</InnerVar>
                <InnerVar>boolean [ret_val=(pos.current_page.fetchFromSlot(pos.current_rh,pos.current_slot,row,new FetchDescriptor(row.length,validColumns,(Qualifier[][])null),false) != null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;getRowPositionFromRowLocation;[loc, pos]</InnerMethodInvoke>
                <InnerMethodInvoke>pos.current_page;unlatch;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fetch</MethodName>
            <MethodComment>/** 
 * @see ConglomerateController#fetch
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>loc</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>validColumns</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>waitForLock</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RowPosition [pos=open_conglom.getRuntimeMem().get_scratch_row_position()]</InnerVar>
                <InnerVar>boolean [ret_val=(pos.current_page.fetchFromSlot(pos.current_rh,pos.current_slot,row,new FetchDescriptor(row.length,validColumns,(Qualifier[][])null),false) != null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;getRowPositionFromRowLocation;[loc, pos]</InnerMethodInvoke>
                <InnerMethodInvoke>pos.current_page;unlatch;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replace</MethodName>
            <MethodComment>/** 
 * @see ConglomerateController#replace
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>loc</ParamName>
                    <ParamType>RowLocation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>DataValueDescriptor[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>validColumns</ParamName>
                    <ParamType>FormatableBitSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RowPosition [pos=open_conglom.getRuntimeMem().get_scratch_row_position()]</InnerVar>
                <InnerVar>boolean [ret_val=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;getRowPositionFromRowLocation;[loc, pos]</InnerMethodInvoke>
                <InnerMethodInvoke>open_conglom;lockPositionForWrite;[pos, true]</InnerMethodInvoke>
                <InnerMethodInvoke>pos.current_page;unlatch;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>