<Class>
    <Id>2064</Id>
    <Package>org.apache.derbyTesting.functionTests.tests.memory</Package>
    <ClassName>ConnectionHandlingJunit</ClassName>
    <SuperClass>BaseJDBCTestCase</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ConnectionHandlingJunit  /** 
 * This class tests Derby's ability to handle multiple connection attempts against one or more databases, which may or may not exist. Such repeated connection attempts have been known to cause OutOfMemoryErrors in the past, see for example DERBY-2480.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getLogDiscarder</MethodName>
            <MethodComment>/** 
 * Returns a log writer that discards all the data written to it.
 * @return Writer discarding the log.
 */
</MethodComment>
            <ReturnType>Writer</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>write</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cbuf</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>off</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flush</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>close</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ConnectionHandlingJunit</MethodName>
            <MethodComment>/** 
 * Creates a new instance of this test class 
 * @param name The name of this test instance; may determine which testfixture to run.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>suite</MethodName>
            <MethodComment>/** 
 * Creates a Test Suite to be run by a JUnit TestRunner. The elements of the test suite may depend on the environment in which the TestRunner is running (classpath, JVM, etc.).
 * @return JUnit test suite containing appropriate tests from this class.
 */
</MethodComment>
            <ReturnType>Test</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>BaseTestSuite [suite=new BaseTestSuite("ConnectionHandlingJUnit")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>driverMgrTestConnectionsToNonexistentDb</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;This fixture tries a number of times to connect to a non-existent database, in order to test Derby's ability to handle this situation without running out of resources (for example Java heap space (memory)). See  &lt;a href="https://issues.apache.org/jira/browse/DERBY-2480"&gt;DERBY-2480&lt;/a&gt; for details.&lt;/p&gt; &lt;p&gt;This test fixture is currently not part of any large JUnit suite because &lt;b&gt;1)&lt;/b&gt; the default number of connection attempts is rather large, and takes some time to complete (depending on hardware), and  &lt;b&gt;2)&lt;/b&gt; if the tested Derby version is still vulnerable to DERBY-2480 or similar issues the JVM will most likely run out of memory (depending on heap settings), causing subsequent tests to fail, hang or not run at all.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Note:&lt;/b&gt; The JVM may slow down significantly (even appear to hang) before an OOME is thrown. Depending on the avaliable resources, the error may or may not be reported in the logs (derby.log, server console).&lt;/p&gt; &lt;p&gt; This fixture requires java.sql.DriverManager. This is because simple and easy control of the connection handling and database creation is  desired (see implementation comments). However, the test logic itself  should also work with other connection mechanisms.&lt;/p&gt;
 * @throws SQLException if an unexpected exception occurs that is notexamined using assertions.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [url=getTestConfiguration().getJDBCUrl("nonexistentDatabase")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;driverMgrConnectionInitiator;[url, false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>driverMgrTestConnectionsToNonexistentDbInMemory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;driverMgrConnectionInitiator;["jdbc:derby:memory:noDbHere", true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>driverMgrConnectionInitiator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>url</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>appendId</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Connection [myInvalidConn=null]</InnerVar>
                <InnerVar>Runtime [runtime=Runtime.getRuntime()]</InnerVar>
                <InnerVar>double [memTotalNow]</InnerVar>
                <InnerVar>int [maxCount=130000]</InnerVar>
                <InnerVar>int [count=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;loadDriver;[url]</InnerMethodInvoke>
                <InnerMethodInvoke>null;println;["Trying " + maxCount + " connection attempts..."]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadDriver</MethodName>
            <MethodComment>/** 
 * Will check if the JDBC driver has been loaded and load it if that is not  the case. Any other exception messages than "No suitable driver" on the first attempt to get the JDBC driver will result in an assertion failure.
 * @param url a valid connection URL for the desired JDBC driver
 * @throws SQLException if an unexpected exception is thrown
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>url</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setSystemProperty;["derby.stream.error.method", "org.apache.derbyTesting.functionTests.tests.memory." + "ConnectionHandlingJunit.getLogDiscarder"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>