<Class>
    <Id>306</Id>
    <Package>org.apache.derby.iapi.sql.compile</Package>
    <ClassName>Parser</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Parser  /** 
 * The Parser interface is intended to work with Jack-generated parsers (now JavaCC). We will specify "STATIC=false" when building Jack parsers - this specifies that the generated classes will not be static, which will allow there to be more than one parser (this is necessary in a multi-threaded server). Non-static parsers do not have to be re-initialized every time they are used (unlike static parsers, for which one must call ReInit() between calls to the parser).
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>parseStatement</MethodName>
            <MethodComment>/** 
 * Parses the given statement and returns a query tree. The query tree at this point is a simple syntactic translation of the statement. No binding will have taken place, and no decisions will have been made regarding processing strategy.
 * @param statementSQLText	The Statement to parse.
 * @param paramDefaults	Parameter defaults
 * @return	A new QueryTree representing the syntax of the Statement
 * @exception StandardException		Thrown on failure
 */
</MethodComment>
            <ReturnType>Visitable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statementSQLText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>paramDefaults</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Visitable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statementSQLText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseSearchCondition</MethodName>
            <MethodComment>/** 
 * Parse an SQL fragment that represents a  {@code &lt;search condition&gt;}.
 * @param sqlFragment the SQL fragment to parse
 * @return a parse tree representing the search condition
 * @throws StandardException if the SQL fragment could not be parsed
 */
</MethodComment>
            <ReturnType>Visitable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sqlFragment</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSQLtext</MethodName>
            <MethodComment>/** 
 * Returns the current SQL text string that is being parsed.
 * @return	Current SQL text string.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>