<Class>
    <Id>296</Id>
    <Package>org.apache.derbyTesting.perf.clients</Package>
    <ClassName>BankTransactionClient</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Client</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BankTransactionClient  /** 
 * This class implements a client thread which performs bank transactions. The transactions are intended to perform the same operations as the transactions specified by the TPC-B benchmark.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>random</FieldName>
            <FieldType>Random</FieldType>
        </Field>
        <Field>
            <FieldName>branches</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>tellersPerBranch</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>accountsPerBranch</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>conn</FieldName>
            <FieldType>Connection</FieldType>
        </Field>
        <Field>
            <FieldName>updateAccount</FieldName>
            <FieldType>PreparedStatement</FieldType>
        </Field>
        <Field>
            <FieldName>updateHistory</FieldName>
            <FieldType>PreparedStatement</FieldType>
        </Field>
        <Field>
            <FieldName>updateTeller</FieldName>
            <FieldType>PreparedStatement</FieldType>
        </Field>
        <Field>
            <FieldName>updateBranch</FieldName>
            <FieldType>PreparedStatement</FieldType>
        </Field>
        <Field>
            <FieldName>retrieveAccountBalance</FieldName>
            <FieldType>PreparedStatement</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>BankTransactionClient</MethodName>
            <MethodComment>/** 
 * Create a client that works on a database with the given number of branches, tellers and accounts.
 * @param branches the number of branches in the database
 * @param tellersPerBranch the number of tellers per branch
 * @param accountsPerBranch the number of accounts per branch
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>branches</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tellersPerBranch</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>accountsPerBranch</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BankTransactionClient</MethodName>
            <MethodComment>/** 
 * Create a client that works on a database with the default number of tellers and accounts per branch.
 * @param scale the scale factor for the database (equal to the number ofbranches)
 * @see BankAccountFiller#BankAccountFiller(int)
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scale</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment>/** 
 * Initialize the connection and the statements used by the test.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>Connection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>c;setAutoCommit;[false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doWork</MethodName>
            <MethodComment>/** 
 * Perform a single transaction with a profile like the one specified in Clause 1.2 of the TPC-B specification.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [tellerId=fetchTellerId()]</InnerVar>
                <InnerVar>int [branchId=fetchBranchId(tellerId)]</InnerVar>
                <InnerVar>int [accountId=fetchAccountId(branchId)]</InnerVar>
                <InnerVar>int [delta=fetchDelta()]</InnerVar>
                <InnerVar>ResultSet [rs=retrieveAccountBalance.executeQuery()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>updateAccount;setInt;[1, delta]</InnerMethodInvoke>
                <InnerMethodInvoke>updateAccount;setInt;[2, accountId]</InnerMethodInvoke>
                <InnerMethodInvoke>updateAccount;executeUpdate;[]</InnerMethodInvoke>
                <InnerMethodInvoke>updateHistory;setInt;[1, accountId]</InnerMethodInvoke>
                <InnerMethodInvoke>updateHistory;setInt;[2, tellerId]</InnerMethodInvoke>
                <InnerMethodInvoke>updateHistory;setInt;[3, branchId]</InnerMethodInvoke>
                <InnerMethodInvoke>updateHistory;setInt;[4, delta]</InnerMethodInvoke>
                <InnerMethodInvoke>updateHistory;executeUpdate;[]</InnerMethodInvoke>
                <InnerMethodInvoke>updateTeller;setInt;[1, delta]</InnerMethodInvoke>
                <InnerMethodInvoke>updateTeller;setInt;[2, tellerId]</InnerMethodInvoke>
                <InnerMethodInvoke>updateTeller;executeUpdate;[]</InnerMethodInvoke>
                <InnerMethodInvoke>updateBranch;setInt;[1, delta]</InnerMethodInvoke>
                <InnerMethodInvoke>updateBranch;setInt;[2, branchId]</InnerMethodInvoke>
                <InnerMethodInvoke>updateBranch;executeUpdate;[]</InnerMethodInvoke>
                <InnerMethodInvoke>retrieveAccountBalance;setInt;[1, accountId]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;next;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;getString;[1]</InnerMethodInvoke>
                <InnerMethodInvoke>rs;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>conn;commit;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printReport</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>PrintStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fetchTellerId</MethodName>
            <MethodComment>/** 
 * Generate a random teller id.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fetchBranchId</MethodName>
            <MethodComment>/** 
 * Find the branch the specified teller belongs to.
 * @param tellerId the id of the teller
 * @return the id of the branch for this teller
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tellerId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fetchAccountId</MethodName>
            <MethodComment>/** 
 * Generate a random account id based on the specified branch. Per Clause 5.3.5 of the TPC-B specification, the accounts should be fetched from the selected branch 85% of the time (or always if that's the only branch), and from another branch the rest of the time.
 * @param branchId the id of the selected branch
 * @return the id of a random account
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>branchId</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [branch]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fetchDelta</MethodName>
            <MethodComment>/** 
 * Generate a random delta value between -99999 and +99999, both inclusive (TPC-B specification, Clause 5.3.6). The delta value specifies how much the balance should increase or decrease.
 * @return a random value in the range [-99999,+99999]
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>