<Class>
    <Id>770</Id>
    <Package>org.apache.derbyTesting.unitTests.store</Package>
    <ClassName>commit_method</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>testService</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>global_id</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>branch_id</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>store</FieldName>
            <FieldType>AccessFactory</FieldType>
        </Field>
        <Field>
            <FieldName>online_xact</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>store</FieldName>
            <FieldType>AccessFactory</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>T_XA</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getModuleToTestProtocolName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runTests</MethodName>
            <MethodComment>/** 
 * @exception T_Fail Unexpected behaviour from the API
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>startParams;put;[Property.NO_AUTO_BOOT, Boolean.TRUE.toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>startParams;put;[Property.DELETE_ON_CREATE, Boolean.TRUE.toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["(unitTestMain) Testing " + testService]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>XATest_1</MethodName>
            <MethodComment>/** 
 * one phase commit xa transaction. &lt;p&gt;
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>commit_method</ParamName>
                    <ParamType>commit_method</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ContextManager [cm=getContextService().getCurrentContextManager()]</InnerVar>
                <InnerVar>XATransactionController [xa_tc=(XATransactionController)store.startXATransaction(cm,42,global_id,branch_id)]</InnerVar>
                <InnerVar>T_AccessRow [template_row=new T_AccessRow(1)]</InnerVar>
                <InnerVar>long [conglomid=xa_tc.createConglomerate("heap",template_row.getRowArray(),null,null,null,TransactionController.IS_DEFAULT)]</InnerVar>
                <InnerVar>ScanController [scan1=xa_tc.openScan(conglomid,false,0,TransactionController.MODE_RECORD,TransactionController.ISOLATION_SERIALIZABLE,(FormatableBitSet)null,null,0,null,null,0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;REPORT;["(XATest_1) starting"]</InnerMethodInvoke>
                <InnerMethodInvoke>commit_method;commit;[true, 42, global_id, branch_id, xa_tc]</InnerMethodInvoke>
                <InnerMethodInvoke>xa_tc;destroy;[]</InnerMethodInvoke>
                <InnerMethodInvoke>commit_method;commit;[true, 42, global_id, branch_id, xa_tc]</InnerMethodInvoke>
                <InnerMethodInvoke>xa_tc;destroy;[]</InnerMethodInvoke>
                <InnerMethodInvoke>scan1;next;[]</InnerMethodInvoke>
                <InnerMethodInvoke>scan1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>commit_method;commit;[true, 42, global_id, branch_id, xa_tc]</InnerMethodInvoke>
                <InnerMethodInvoke>xa_tc;destroy;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["(XATest_1) finishing"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>XATest_2</MethodName>
            <MethodComment>/** 
 * simple two phase commit xa transaction. &lt;p&gt;
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>commit_method</ParamName>
                    <ParamType>commit_method</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ContextManager [cm=getContextService().getCurrentContextManager()]</InnerVar>
                <InnerVar>XATransactionController [xa_tc=(XATransactionController)store.startXATransaction(cm,42,global_id,branch_id)]</InnerVar>
                <InnerVar>T_AccessRow [template_row=new T_AccessRow(1)]</InnerVar>
                <InnerVar>long [conglomid=xa_tc.createConglomerate("heap",template_row.getRowArray(),null,null,null,TransactionController.IS_DEFAULT)]</InnerVar>
                <InnerVar>ScanController [scan1=xa_tc.openScan(conglomid,false,0,TransactionController.MODE_RECORD,TransactionController.ISOLATION_SERIALIZABLE,(FormatableBitSet)null,null,0,null,null,0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;REPORT;["(XATest_2) starting"]</InnerMethodInvoke>
                <InnerMethodInvoke>xa_tc;destroy;[]</InnerMethodInvoke>
                <InnerMethodInvoke>commit_method;commit;[false, 42, global_id, branch_id, xa_tc]</InnerMethodInvoke>
                <InnerMethodInvoke>xa_tc;destroy;[]</InnerMethodInvoke>
                <InnerMethodInvoke>scan1;next;[]</InnerMethodInvoke>
                <InnerMethodInvoke>scan1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>xa_tc;destroy;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["(XATest_2) finishing"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>XATest_3</MethodName>
            <MethodComment>/** 
 * Test aborts of unprepared xa transaction. &lt;p&gt;
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>commit_method</ParamName>
                    <ParamType>commit_method</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ContextManager [cm=getContextService().getCurrentContextManager()]</InnerVar>
                <InnerVar>XATransactionController [xa_tc=(XATransactionController)store.startXATransaction(cm,42,global_id,branch_id)]</InnerVar>
                <InnerVar>T_AccessRow [template_row=new T_AccessRow(1)]</InnerVar>
                <InnerVar>long [conglomid=xa_tc.createConglomerate("heap",template_row.getRowArray(),null,null,null,TransactionController.IS_DEFAULT)]</InnerVar>
                <InnerVar>ScanController [scan1=xa_tc.openScan(conglomid,false,0,TransactionController.MODE_RECORD,TransactionController.ISOLATION_SERIALIZABLE,(FormatableBitSet)null,null,0,null,null,0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;REPORT;["(XATest_3) starting"]</InnerMethodInvoke>
                <InnerMethodInvoke>commit_method;rollback;[42, global_id, branch_id, xa_tc]</InnerMethodInvoke>
                <InnerMethodInvoke>xa_tc;destroy;[]</InnerMethodInvoke>
                <InnerMethodInvoke>commit_method;rollback;[42, global_id, branch_id, xa_tc]</InnerMethodInvoke>
                <InnerMethodInvoke>xa_tc;destroy;[]</InnerMethodInvoke>
                <InnerMethodInvoke>commit_method;commit;[true, 42, global_id, branch_id, xa_tc]</InnerMethodInvoke>
                <InnerMethodInvoke>xa_tc;destroy;[]</InnerMethodInvoke>
                <InnerMethodInvoke>scan1;next;[]</InnerMethodInvoke>
                <InnerMethodInvoke>scan1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>commit_method;rollback;[42, global_id, branch_id, xa_tc]</InnerMethodInvoke>
                <InnerMethodInvoke>xa_tc;destroy;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["(XATest_3) finishing"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>XATest_4</MethodName>
            <MethodComment>/** 
 * Test aborts of prepared two phase commit xa transaction. &lt;p&gt;
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>commit_method</ParamName>
                    <ParamType>commit_method</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ContextManager [cm=getContextService().getCurrentContextManager()]</InnerVar>
                <InnerVar>XATransactionController [xa_tc=(XATransactionController)store.startXATransaction(cm,42,global_id,branch_id)]</InnerVar>
                <InnerVar>T_AccessRow [template_row=new T_AccessRow(1)]</InnerVar>
                <InnerVar>long [conglomid=xa_tc.createConglomerate("heap",template_row.getRowArray(),null,null,null,TransactionController.IS_DEFAULT)]</InnerVar>
                <InnerVar>ScanController [scan1=xa_tc.openScan(conglomid,false,0,TransactionController.MODE_RECORD,TransactionController.ISOLATION_SERIALIZABLE,(FormatableBitSet)null,null,0,null,null,0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;REPORT;["(XATest_4) starting"]</InnerMethodInvoke>
                <InnerMethodInvoke>commit_method;commit;[true, 42, null, null, xa_tc]</InnerMethodInvoke>
                <InnerMethodInvoke>xa_tc;destroy;[]</InnerMethodInvoke>
                <InnerMethodInvoke>scan1;next;[]</InnerMethodInvoke>
                <InnerMethodInvoke>scan1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>commit_method;rollback;[42, global_id, branch_id, xa_tc]</InnerMethodInvoke>
                <InnerMethodInvoke>commit_method;commit;[true, 42, null, null, xa_tc]</InnerMethodInvoke>
                <InnerMethodInvoke>xa_tc;destroy;[]</InnerMethodInvoke>
                <InnerMethodInvoke>xa_tc;destroy;[]</InnerMethodInvoke>
                <InnerMethodInvoke>commit_method;commit;[true, 42, global_id, branch_id, xa_tc]</InnerMethodInvoke>
                <InnerMethodInvoke>xa_tc;destroy;[]</InnerMethodInvoke>
                <InnerMethodInvoke>scan1;next;[]</InnerMethodInvoke>
                <InnerMethodInvoke>scan1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>commit_method;commit;[true, 42, null, null, xa_tc]</InnerMethodInvoke>
                <InnerMethodInvoke>xa_tc;destroy;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["(XATest_5) finishing"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>XATest_5</MethodName>
            <MethodComment>/** 
 * Very simple testing of the recover() call. &lt;p&gt;
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>commit_method</ParamName>
                    <ParamType>commit_method</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ContextManager [cm=getContextService().getCurrentContextManager()]</InnerVar>
                <InnerVar>XATransactionController [xa_tc=(XATransactionController)store.startXATransaction(cm,42,global_id,branch_id)]</InnerVar>
                <InnerVar>T_AccessRow [template_row=new T_AccessRow(1)]</InnerVar>
                <InnerVar>long [conglomid=xa_tc.createConglomerate("heap",template_row.getRowArray(),null,null,null,TransactionController.IS_DEFAULT)]</InnerVar>
                <InnerVar>ScanController [scan1=xa_tc.openScan(conglomid,false,0,TransactionController.MODE_RECORD,TransactionController.ISOLATION_SERIALIZABLE,(FormatableBitSet)null,null,0,null,null,0)]</InnerVar>
                <InnerVar>Xid[] [prepared_xacts=((XAResourceManager)store.getXAResourceManager()).recover(XAResource.TMSTARTRSCAN)]</InnerVar>
                <InnerVar>byte[] [gid=prepared_xacts[0].getGlobalTransactionId()]</InnerVar>
                <InnerVar>byte[] [bid=prepared_xacts[0].getBranchQualifier()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;REPORT;["(XATest_5) starting"]</InnerMethodInvoke>
                <InnerMethodInvoke>commit_method;commit;[true, 42, global_id, branch_id, xa_tc]</InnerMethodInvoke>
                <InnerMethodInvoke>xa_tc;destroy;[]</InnerMethodInvoke>
                <InnerMethodInvoke>commit_method;commit;[true, 42, global_id, branch_id, xa_tc]</InnerMethodInvoke>
                <InnerMethodInvoke>xa_tc;destroy;[]</InnerMethodInvoke>
                <InnerMethodInvoke>scan1;next;[]</InnerMethodInvoke>
                <InnerMethodInvoke>scan1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>commit_method;commit;[true, 42, global_id, branch_id, xa_tc]</InnerMethodInvoke>
                <InnerMethodInvoke>xa_tc;destroy;[]</InnerMethodInvoke>
                <InnerMethodInvoke>commit_method;commit;[false, 42, global_id, branch_id, xa_tc]</InnerMethodInvoke>
                <InnerMethodInvoke>xa_tc;destroy;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["(XATest_5) finishing"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>XATest_6</MethodName>
            <MethodComment>/** 
 * Very simple testing of changing a local transaction to a global. &lt;p&gt;
 * @exception StandardException  Standard exception policy.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>commit_method</ParamName>
                    <ParamType>commit_method</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ContextManager [cm=getContextService().getCurrentContextManager()]</InnerVar>
                <InnerVar>TransactionController [tc=store.getTransaction(cm)]</InnerVar>
                <InnerVar>T_AccessRow [template_row=new T_AccessRow(1)]</InnerVar>
                <InnerVar>long [conglomid=tc.createConglomerate("heap",template_row.getRowArray(),null,null,null,TransactionController.IS_DEFAULT)]</InnerVar>
                <InnerVar>XATransactionController [xa_tc=(XATransactionController)tc.createXATransactionFromLocalTransaction(42,global_id,branch_id)]</InnerVar>
                <InnerVar>ScanController [scan1=xa_tc.openScan(conglomid,false,0,TransactionController.MODE_RECORD,TransactionController.ISOLATION_SERIALIZABLE,(FormatableBitSet)null,null,0,null,null,0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;REPORT;["(XATest_5) starting"]</InnerMethodInvoke>
                <InnerMethodInvoke>tc;commit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>scan1;next;[]</InnerMethodInvoke>
                <InnerMethodInvoke>scan1;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>commit_method;commit;[false, 42, global_id, branch_id, xa_tc]</InnerMethodInvoke>
                <InnerMethodInvoke>xa_tc;destroy;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;REPORT;["(XATest_6) finishing"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
                <ExceptionType>T_Fail</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContextService</MethodName>
            <MethodComment>/** 
 * Privileged lookup of the ContextService. Package protected so that user code can't call this entry point.
 */
</MethodComment>
            <ReturnType>ContextService</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ContextService</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createPersistentService</MethodName>
            <MethodComment>/** 
 * Privileged startup. Must be private so that user code can't call this entry point.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>factoryInterface</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>serviceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>commit_method</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>store</ParamName>
                    <ParamType>AccessFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>online_xact</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>commit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>one_phase</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>format_id</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>global_id</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>branch_id</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>xa_tc</ParamName>
                    <ParamType>XATransactionController</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [local_online_xact=online_xact]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rollback</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>format_id</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>global_id</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>branch_id</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>xa_tc</ParamName>
                    <ParamType>XATransactionController</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [local_online_xact=online_xact]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>