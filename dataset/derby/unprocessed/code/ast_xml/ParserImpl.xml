<Class>
    <Id>218</Id>
    <Package>org.apache.derby.impl.sql.compile</Package>
    <ClassName>ParserImpl</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Parser</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>LARGE_TOKEN_SIZE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>cachedParser</FieldName>
            <FieldType>SQLParser</FieldType>
        </Field>
        <Field>
            <FieldName>cachedTokenManager</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>charStream</FieldName>
            <FieldType>CharStream</FieldType>
        </Field>
        <Field>
            <FieldName>SQLtext</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>cc</FieldName>
            <FieldType>CompilerContext</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ParserImpl</MethodName>
            <MethodComment>/** 
 * Constructor for Parser
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cc</ParamName>
                    <ParamType>CompilerContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Visitable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statementSQLText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTokenManager</MethodName>
            <MethodComment>/** 
 * Returns a initialized (clean) TokenManager, paired w. the Parser in getParser, Appropriate for this ParserImpl object.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>SQLParserTokenManager [tm=(SQLParserTokenManager)cachedTokenManager]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParser</MethodName>
            <MethodComment>/** 
 * new parser, appropriate for the ParserImpl object.
 */
</MethodComment>
            <ReturnType>SQLParser</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>SQLParserTokenManager [tm=(SQLParserTokenManager)getTokenManager()]</InnerVar>
                <InnerVar>SQLParser [p=cachedParser]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseStatement</MethodName>
            <MethodComment>/** 
 * Parse a statement and return a query tree.  Implements the Parser interface
 * @param statementSQLText	Statement to parse
 * @param paramDefaults	parameter defaults. Passed around as an arrayof objects, but is really an array of StorableDataValues
 * @return	A QueryTree representing the parsed statement
 * @exception StandardException	Thrown on error
 */
</MethodComment>
            <ReturnType>Visitable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statementSQLText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>paramDefaults</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseStatementOrSearchCondition</MethodName>
            <MethodComment>/** 
 * Parse a full SQL statement or a fragment that represents a {@code &lt;search condition&gt;}.
 * @param sql the SQL statement or fragment to parse
 * @param paramDefaults parameter defaults to pass on to the parserin the case where  {@code sql} is a full SQL statement
 * @param isStatement {@code true} if {@code sql} is a full SQL statement,{@code false} if it is a fragment
 * @return parse tree for the SQL
 * @throws StandardException if an error happens during parsing
 */
</MethodComment>
            <ReturnType>Visitable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sql</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>paramDefaults</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isStatement</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringReader [sqlText=new StringReader(sql)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseSearchCondition</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Visitable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sqlFragment</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>StandardException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSQLtext</MethodName>
            <MethodComment>/** 
 * Returns the current SQL text string that is being parsed.
 * @return	Current SQL text string.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>