/**

The BTreePostCommit class implements the Serviceable protocol.  

In it's role as a Serviceable object, it stores the state necessary to 
find a page in a btree that may have committed delete's to reclaim.

In it's role as a PostCommitProcessor it looks up the page described, and
reclaims space in the btree.  It first trys to clean up any deleted commits
on the page.  It then will shrink the tree if it is going to delete all
rows from the page (RESOLVE - not done yet).

**/

/**
     * The urgency of this post commit work.
     * 
     * This determines where this Serviceable is put in the post commit 
     * queue.  Post commit work in the btree can be safely delayed until there
     * is not user work to do.
     *
	 * @return false, this work should not be serviced ASAP
     **/

/**
     * Open index for either table level or row level update.
     * 
     * @param lock_level For table level use TransactionManager.MODE_TABLE,
     *                   for row   level use TransactionManager.MODE_RECORD
     * @param lock_mode  For table level use LockingPolicy.MODE_CONTAINER,
     *                   for row   level use LockingPolicy.MODE_RECORD
     *
     * @exception  StandardException  Standard exception policy.
     **/

/**
     * perform the work described in the postcommit work.
     * 
     * In this implementation the only work that can be executed by this
     * post commit processor is this class itself.
     * 
     *
	 * @return Returns Serviceable.DONE when work has completed, or
     *         returns Serviceable.REQUEUE if work needs to be requeued.
     *
     * @param contextMgr the context manager started by the
	 *         post commit daemon
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Reclaim space taken up by committed deleted rows.
     * 
     * This routine assumes it has been called by an internal transaction which
     * has performed no work so far, and that it has an exclusive table lock.  
     * These assumptions mean that any deleted rows encountered must be from
     * committed transactions (otherwise we could not have gotten the exclusive
     * table lock).
     * 
     * This routine handles purging committed deletes while holding a table
     * level exclusive lock.  See purgeRowLevelCommittedDeletes() for row level
     * purging.
     *
     * @param open_btree The btree already opened.
     * @param pageno The page number of the page to look for committed deletes.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

