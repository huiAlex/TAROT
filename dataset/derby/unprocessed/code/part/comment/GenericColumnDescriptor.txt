/**
 * This is a stripped down implementation of a column
 * descriptor that is intended for generic use.  It
 * can be seralized and attached to plans.
 *
 */

/********************************************************
	**
	**	This class implements Formatable. That means that it
	**	can write itself to and from a formatted stream. If
	**	you add more fields to this class, make sure that you
	**	also write/read them with the writeExternal()/readExternal()
	**	methods.
	**
	**	If, inbetween releases, you add more fields to this class,
	**	then you should bump the version number emitted by the getTypeFormatId()
	**	method.
	**
	********************************************************/

/**
	 * Niladic constructor for Formatable
	 */

/** 
	 * This constructor is used to build a generic (and
	 * formatable) ColumnDescriptor.  The idea is that
	 * it can be passed a ColumnDescriptor from a query
	 * tree and convert it to something that can be used
	 * anywhere.
	 *
	 * @param rcd the ResultColumnDescriptor
	 */

/**
	 * Returns a DataTypeDescriptor for the column. This DataTypeDescriptor
	 * will not represent an actual value, it will only represent the type
	 * that all values in the column will have.
	 *
	 * @return	A DataTypeDescriptor describing the type of the column.
	 */

/**
	 * Returns the name of the Column.
	 *
	 * @return	A String containing the name of the column.
	 */

/**
	 * Get the name of the schema for the Column's base table, if any.
	 * Following example queries will all return APP (assuming user is in schema APP)
	 * select t.a from t
	 * select b.a from t as b
	 * select app.t.a from t
	 *
	 * @return	A String containing the name of the schema of the Column's table.
	 *		If the column is not in a schema (i.e. is a derived column), it returns NULL.
	 */

/**
	 * Get the name of the underlying(base) table this column comes from, if any.
	 * Following example queries will all return T
	 * select a from t
	 * select b.a from t as b
	 * select t.a from t
	 *
	 * @return	A String containing the name of the Column's base table.
	 *		If the column is not in a table (i.e. is a derived column), it returns NULL.
	 */

/**
	 * Get the position of the Column.
	 * NOTE - position is 1-based.
	 *
	 * @return	An int containing the position of the Column
	 *		within the table.
	 */

/**
	 * Write this object out
	 *
	 * @param out write bytes here
	 *
 	 * @exception IOException thrown on error
	 */

/**
	 * Read this object from a stream of stored objects.
	 *
	 * @param in read this.
	 *
	 * @exception IOException					thrown on error
	 * @exception ClassNotFoundException		thrown on error
	 */

/**
	 * Get the formatID which corresponds to this class.
	 *
	 *	@return	the formatID of this class
	 */

/**
     * When retrieving a DataTypeDescriptor, it might just be a regular
     * DataTypeDescriptor or may be an OldRoutineType, as used for Routine
     * parameters and return values prior to DERBY-2775. If it is not a regular
     * DataTypeDescriptor, it must be an OldRoutineType, so convert it to a
     * DataTypeDescriptor DERBY-4913
     * 
     * @param o
     *            object as obtained by fh.get("type") in readExternal
     * @return DataTypeDescriptor
     */

