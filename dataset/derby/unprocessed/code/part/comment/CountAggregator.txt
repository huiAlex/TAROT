/**
 * Aggregator for COUNT()/COUNT(*).  
 */

/**
	 */

/**
	 * 	 *
	 * @exception	StandardException	on error
	 */

/**
	 * Return the result of the aggregation.  Just
	 * spit out the running count.
	 *
	 * @return the value as a Long 
	 */

/**
	 * Accumulate for count().  Toss out all nulls in this kind of count.
	 * Increment the count for count(*). Count even the null values.
	 *
	 * @param addend	value to be added in
	 * @param ga		the generic aggregator that is calling me
	 *
	 * 	 */

/**
	 * @return ExecAggregator the new aggregator
	 */

/** 
	 * Although we are not expected to be persistent per se,
	 * we may be written out by the sorter temporarily.  So
	 * we need to be able to write ourselves out and read
	 * ourselves back in.  
	 * 
	 * @exception IOException thrown on error
	 */

/** 
	* 	*
	* @exception IOException io exception
	* @exception ClassNotFoundException on error
	*/

/**
	 * Get the formatID which corresponds to this class.
	 *
	 *	@return	the formatID of this class
	 */

