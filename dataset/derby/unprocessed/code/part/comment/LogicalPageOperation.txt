/**
	An abstract class that is used for logical log operation.  A logical log
	operation is one where the undo of the operation may be applied to a
	different page than the original operation.

	
	@derby.formatId	no format id, an abstract class.
	@derby.purpose	provide methods for logical undo
	@derby.upgrade
	@derby.diskLayout
		PageBasicOperation	the super class
		recordId(CompressedInt)	the recordId this operation affects
		undo(LogicalUndo)		the piece of code that can figure out which page 
								the row has moved into
		OptionalData	none
	@derby.endFormat
	

*/

/**
		Read this in
		@exception IOException error reading from log stream
		@exception ClassNotFoundException log stream corrupted
	*/

/**
		Undoable method
	*/

/** 
		Generate a Compensation (PageUndoOperation) that will rollback the
		changes of this page operation. If this Page operation cannot or need not
		be rolled back (redo only), overwrite this function to return null.

				@exception StandardException Standard Derby policy.
		@exception IOException Method may read from ObjectInput
	*/

/**
		Return the container handle where the log operated on
	*/

/**
		After the logical undo logic figures out where the real record that
		needs roll back is, reset this log operation to refer to that record
	*/

/**
		Return the record handle that correspond to the record that was changed
		during roll forward.  This is used as a hint by logical undo as a good
		place to look for the record to apply the roll back.
	*/

/**************************************************************************
     * Public Methods of RePreparable Interface:
     **************************************************************************
     */

/**
     * reclaim locks associated with the changes in this log record.
     * 
	 * @param locking_policy  The locking policy to use to claim the locks.
     * 
     *
	 * @exception  StandardException  Standard exception policy.
     **/

