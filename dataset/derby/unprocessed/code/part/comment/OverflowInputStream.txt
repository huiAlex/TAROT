/**
A OverflowInputStream is used by store to turn a long column into an 
InputStream.

Any time store fetches a long column, the value is returned as a stream.
A long column is any column that at some point was longer than a page, so
a long column in one table may not be long in another depending on page size.

When the column is fetched a new OverflowInputStream is created and then
the datatype's stream is set using:
 ((StreamStorable)sColumn).setStream(OverflowInputStream);

**/

/**************************************************************************
     * Fields of the class
     **************************************************************************
     */

/**************************************************************************
     * Constructors for This class:
     **************************************************************************
     */

/**************************************************************************
     * Public Methods of This class:
     **************************************************************************
     */

/**
     * If bytes remain in stream, insure the current buffer is not empty.
     * 
     * If there are bytes in current buffer than no more work necessary,
     * else if there are no bytes available in current buffer and there are 
     * still more overflow segments then get the next buffer's worth of
     * data.
     *
     * @exception  IOException
     **/

/**
     * Set the next overflow page of the long column.
     * 
     * Used by StorePage.restorePortionLongColumn() as part of the call back
     * process to save the state of the scan of the pieces of the long column.
     * StorePage.restorePortionLongColumn() is called by fillByteHolder() to
     * get the next page worth into a buffer, and in turn after those bytes
     * are read the state of this stream is updated with then next overflow
     * page.
     *
     * @param overflowPage  Page number containing the next segment of the
     *                      long column.  -1 if there are no more segments.
     *
     **/

/**
     * Set the next overflow page of the long column.
     * 
     * Used by StorePage.restorePortionLongColumn() as part of the call back
     * process to save the state of the scan of the pieces of the long column.
     * StorePage.restorePortionLongColumn() is called by fillByteHolder() to
     * get the next page worth into a buffer, and in turn after those bytes
     * are read the state of this stream is updated with then next overflow
     * page.
     *
     * @param overflowId    Page number containing the next segment of the
     *                      long column.  -1 if there are no more segments.
     *
     **/

/**************************************************************************
     * Public Methods of Resetable Interface
     **************************************************************************
     */

/**
     * Initialize a Resetable stream.
     * 
     * InitStream() must be called first before using any other of the 
     * Resetable interfaces.
     * 
     * Reopens the container.  This gets a separate intent shared locked on
     * the table and a read lock on the appropriate row.  These locks remain
     * until the enclosing blob/clob object is closed, or until the end of
     * the transaction in which initStream() was first called.  This locking
     * behavior protects the row while the stream is being accessed.  Otherwise
     * for instance in the case of read committed the original row lock on 
     * the row would be released when the scan went to the next row, and there
     * would be nothing to stop another transaction from deleting the row while
     * the client read through the stream.
     *
     * @exception  StandardException  Standard exception policy.
     **/

/**
     * Reset the stream back to beginning of the long column.
     * 
     * Also fills in the first buffer from the stream.
     * 
     * Throws exception if the underlying open container has been closed,
     * for example automatically by a commit().
     *
     * @exception  StandardException  Standard exception policy.
     **/

/**
     * Close the Resetable stream.
     * 
     * Close the container associated with this stream.  (This will also free 
     * the associated IS table lock and the associated S row lock.)
     **/

/**************************************************************************
     * Public Methods of CloneableStream Interface
     **************************************************************************/

/**
     * Clone this object.
     * 
     * Creates a deep copy of this object. The returned stream has its own
     * working buffers and can be initialized, reset and read independently
     * from this stream.
     * 
     * The cloned stream is set back to the beginning of stream, no matter
     * where the current stream happens to be positioned.
     *
     * @return Copy of this stream which can be used independently.
     */

