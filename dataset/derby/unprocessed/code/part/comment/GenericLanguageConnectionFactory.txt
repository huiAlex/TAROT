/**
 * LanguageConnectionFactory generates all of the items
 * a language system needs that is specific to a particular
 * connection. Alot of these are other factories.
 *
 */

/**
		Get a Statement for the connection
		@param compilationSchema schema
		@param statementText the text for the statement
		@param forReadOnly if concurrency is CONCUR_READ_ONLY
		@return	The Statement
	 */

/**
		Get a LanguageConnectionContext. this holds things
		we want to remember about activity in the language system,
		where this factory holds things that are pretty stable,
		like other factories.
		
		The returned LanguageConnectionContext is intended for use
		only by the connection that requested it.

		@return a language connection context for the context stack.
		@exception StandardException the usual -- for the subclass
	 */

/**
		Get the UUIDFactory to use with this language connection
		REMIND: this is only used by the compiler; should there be
		a compiler module control class to boot compiler-only stuff?
	 */

/**
		Get the ClassFactory to use with this language connection
	 */

/**
		Get the JavaFactory to use with this language connection
		REMIND: this is only used by the compiler; should there be
		a compiler module control class to boot compiler-only stuff?
	 */

/**
		Get the ExecutionFactory to use with this language connection
	 */

/**
		Get the PropertyFactory to use with this language connection
	 */

/**
		Get the OptimizerFactory to use with this language connection
	 */

/**
		Get the TypeCompilerFactory to use with this language connection
	 */

/**
		Get the DataValueFactory to use with this language connection
	 */

/**
		this implementation will not support caching of statements.
	 */

/**
	 * Start-up method for this instance of the language connection factory.
	 * Note these are expected to be booted relative to a Database.
	 *
	 * @param startParams	The start-up parameters (ignored in this case)
	 *
	 * @exception StandardException	Thrown on failure to boot
	 */

/**
	 * returns the statement cache that this connection should use; currently
     * there is a statement cache per database.
	 */

/**
     * Stop this module.
	 */

/**
	  	  @exception StandardException Thrown on error.
	*/

/** @see PropertySetCallback#apply */

/** @see PropertySetCallback#map */

/**
	 * Get the instance # for the next LCC.
	 * (Useful for logStatementText=true output.
	 *
	 * @return instance # of next LCC.
	 */

/**
     * Privileged Monitor lookup. Must be package private so that user code
     * can't call this entry point.
     */

/**
     * Privileged startup. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged lookup. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged startup. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged startup. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged module lookup. Must be private so that user code
     * can't call this entry point.
     */

