/**
 * This class represents an Alias Descriptor. 
 * The public methods for this class are:
 * 
 * 
 * getUUID
 * getJavaClassName
 * getAliasType
 * getNameSpace
 * getSystemAlias
 * getAliasId
 * 
 *
 */

/**
	 * Constructor for a AliasDescriptor
	 *
	 * @param dataDictionary		The data dictionary that this descriptor lives in
	 * @param aliasID				The UUID for this alias
	 * @param aliasName				The name of the method alias
	 * @param schemaID				The UUID for this alias's schema
	 * @param javaClassName			The java class name of the alias
	 * @param aliasType				The alias type
	 * @param nameSpace				The alias name space
	 * @param aliasInfo				The AliasInfo for the alias
	 *
	 */

/**
	 * Gets the UUID  of the method alias.
	 *
	 * @return	The UUID String of the method alias.
	 */

/**
	 * 	 */

/**
	 * Gets the UUID  of the schema for this method alias.
	 *
	 * @return	The UUID String of the schema id.
	 */

/**
	 * Gets the SchemaDescriptor for this alias.
	 *
	 * @return SchemaDescriptor	The SchemaDescriptor.
	 */

/**
	 * Gets the name of the alias.
	 *
	 * @return	A String containing the name of the statement.
	 */

/**
	 * Gets the name of the schema that the alias lives in.
	 *
	 * @return	A String containing the name of the schema that the alias
	 *		lives in.
	 */

/**
	 * Gets the full, qualified name of the alias.
	 *
	 * @return	A String containing the name of the table.
	 */

/**
	 * Gets the java class name of the alias.
	 *
	 * @return	The java class name of the alias.
	 */

/**
	 * Gets the type of the alias.
	 *
	 * @return The type of the alias.
	 */

/**
	 * Gets the name space of the alias.
	 *
	 * @return The name space of the alias.
	 */

/**
	 * Gets whether or not the alias is a system alias.
	 *
	 * @return Whether or not the alias is a system alias.
	 */

/**
	 * Gests the AliasInfo for the alias.
	 *
	 * @return	The AliasInfo for the alias.
	 */

/**
	 * Convert the AliasDescriptor to a String.
	 *
	 * @return	A String representation of this AliasDescriptor
	 */

/**
	  *	Determine if two AliasDescriptors are the same.
	  *
	  *	@param	otherObject	other descriptor
	  *
	  *	@return	true if they are the same, false otherwise
	  */

/**
	  *	Get a hashcode for this AliasDescriptor
	  *
	  *	@return	hashcode
	  */

/**		
		@return the stored form of this provider
			representation

				 */

/**
	 * Return the name of this Provider.  (Useful for errors.)
	 *
	 * @return String	The name of this provider.
	 */

/**
	 * Get the provider's UUID
	 *
	 * @return String	The provider's UUID
	 */

/**
	 * Get the provider's type.
	 *
	 * @return String		The provider's type.
	 */

/** @see TupleDescriptor#getDescriptorType */

/** @see TupleDescriptor#getDescriptorName */

/**
		Return the specific name for this object.
	*/

/**
     * Functions are persistent unless they are in the SYSFUN schema.
     *
     */

/**
     * Report whether this descriptor describes a Table Function.
     *
     */

/**
     * Drop the routine or synonym.
     * For a routine its permission descriptors will be dropped as well.
     * For a synonym its TableDescriptor will be dropped as well.
     * @param lcc
     *      */

/**
	 * Check that all of the dependent's dependencies are valid.
	 *
	 * @return true if the dependent is currently valid
	 */

/**
	 * Prepare to mark the dependent as invalid (due to at least one of
	 * its dependencies being invalid).
	 *
	 * @param action	The action causing the invalidation
	 * @param p		the provider
	 *
	 * @exception StandardException thrown if unable to make it invalid
	 */

/**
	 * Mark the dependent as invalid (due to at least one of
	 * its dependencies being invalid).  Always an error
	 * for an alias -- should never have gotten here.
	 *
	 * @param	action	The action causing the invalidation
	 *
	 * @exception StandardException thrown if called in sanity mode
	 */

