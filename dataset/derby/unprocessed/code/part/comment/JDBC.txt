/**
 * JDBC utility methods for the JUnit tests.
 * Note that JSR 169 is a subset of JDBC 3 and
 * JDBC 3 is a subset of JDBC 4.
 * The base level for the Derby tests is JSR 169.
 */

/**
     * Helper class whose equals() method returns
     * true for all strings on this format: SQL061021105830900
     */

/**
     * Constant to pass to DatabaseMetaData.getTables() to fetch
     * just tables.
     */

/**
     * Constant to pass to DatabaseMetaData.getTables() to fetch
     * just views.
     */

/**
     * Constant to pass to DatabaseMetaData.getTables() to fetch
     * just synonyms.
     */

/**
     * Types.SQLXML value without having to compile with JDBC4.
     */

/**
     * Tell if we are allowed to use DriverManager to create database
     * connections.
     */

/**
     * Does the Savepoint class exist, indicates
     * JDBC 3 (or JSR 169). 
     */

/**
     * Does the java.sql.SQLXML class exist, indicates JDBC 4. 
     */

/** Is the Lucene core jar file on the classpath */

/** Is the Lucene analyzer jar file on the classpath */

/** Is the Lucene queryparser jar file on the classpath */

/** Is the json-simple core jar file on the classpath */

/**
     * Does java.sql.ResultSet implement java.lang.AutoCloseable?
     * Indicates JDBC 4.1.
     */

/**
     * Is javax.management.MBeanServer available? Indicates whether the
     * JVM supports the Java Management Extensions (JMX).
     */

/**
     * Can we load a specific class, use this to determine JDBC level.
     * @param className Class to attempt load on.
     * @return true if class can be loaded, false otherwise.
     */

/**
     * Return true if the virtual machine environment supports JDBC 4.2 or
     * later.
     */

/**
     * Return true if the virtual machine environment supports JDBC 4.1 or
     * later. JDBC 4.1 is a superset of JDBC 4.0 and of JSR-169.
     */

/**
	 * Return true if the virtual machine environment
	 * supports JDBC4 or later. JDBC 4 is a superset
     * of JDBC 3 and of JSR169.
     * 
     * This method returns true in a JDBC 4 environment
     * and false in a JDBC 3 or JSR 169 environment.
	 */

/**
	 * Return true if the virtual machine environment
	 * supports JDBC3 or later. JDBC 3 is a super-set of JSR169
     * and a subset of JDBC 4.
     * 
     * This method will return true in a JDBC 3 or JDBC 4
     * environment, but false in a JSR169 environment.
	 */

/**
	 * Return true if the virtual machine environment
	 * supports JSR169. JSR169 is a subset of JDBC 3
     * and hence a subset of JDBC 4 as well.
     * 
     * This method returns true only in a JSR 169
     * environment.
	 */

/**
     * @return {@code true} if JNDI is available.
     */

/**
     * Return true if the JVM supports the Java Management Extensions (JMX).
     */

/**
	 * Rollback and close a connection for cleanup.
	 * Test code that is expecting Connection.close to succeed
	 * normally should just call conn.close().
	 * 
	 * 
	 * If conn is not-null and isClosed() returns false
	 * then both rollback and close will be called.
	 * If both methods throw exceptions
	 * then they will be chained together and thrown.
	 * 	 */

/**
	 * Drop a database schema by dropping all objects in it
	 * and then executing DROP SCHEMA. If the schema is
	 * APP it is cleaned but DROP SCHEMA is not executed.
	 * 
	 * TODO: Handle dependencies by looping in some intelligent
	 * way until everything can be dropped.
	 * 

	 * 
	 * @param dmd DatabaseMetaData object for database
	 * @param schema Name of the schema
	 * 	 */

/**
     * Return true if the SYSSEQUENCES table exists.
     */

/**
	 * DROP a set of objects based upon a ResultSet from a
	 * DatabaseMetaData call.
	 * 
	 * TODO: Handle errors to ensure all objects are dropped,
	 * probably requires interaction with its caller.
	 * 
	 * @param s Statement object used to execute the DROP commands.
	 * @param rs DatabaseMetaData ResultSet
	 * @param schema Schema the objects are contained in
	 * @param mdColumn The column name used to extract the object's
	 * name from rs
	 * @param dropType The keyword to use after DROP in the SQL statement
	 * 	 */

/**
	 * Assert all columns in the ResultSetMetaData match the
	 * table's defintion through DatabaseMetadDta. Only works
	 * if the complete select list correspond to columns from
	 * base tables.
	 * 
	 * Does not require that the complete set of any table's columns are
	 * returned.
	 * 	 * 
	 */

/**
     * Assert a result set is empty.
     * If the result set is not empty it will
     * be drained before the check to see if
     * it is empty.
     * The ResultSet is closed by this method.

     */

/**
     * 
     * @param rs
     */

/**
     * Assert that no warnings were returned from a JDBC getWarnings()
     * method such as Connection.getWarnings. Reports the contents
     * of the warning if it is not null.
     * @param warning Warning that should be null.
     */

/**
     * Assert that the statement has no more results(getMoreResults) and it 
     * indeed does not return any resultsets(by checking getResultSet). 
     * Also, ensure that update count is -1.
     * @param s Statement holding no results.
     *      */

/**
     * Assert that a ResultSet representing generated keys is non-null
     * and of the correct type. This method leaves the ResultSet
     * open and does not fetch any date from it.
     * 
     * @param description For assert messages
     * @param keys ResultSet returned from getGeneratedKeys().
     *      */

/**
     * Drain a ResultSet and assert it has at least one row.
     *
     * The ResultSet is closed by this method.
     */

/**
	 * Drain a single ResultSet by reading all of its
	 * rows and columns. Each column is accessed using
	 * getString() and asserted that the returned value
	 * matches the state of ResultSet.wasNull().
	 *
	 * Provides simple testing of the ResultSet when the
	 * contents are not important.
     * 
     * The ResultSet is closed by this method.
	 *
	 * @param rs Result set to drain.
     * @return the number of rows seen.

	 * 	 */

/**
	 * Does the work of assertDrainResults() as described
	 * above.  If the received row count is non-negative,
	 * this method also asserts that the number of rows
	 * in the result set matches the received row count.
     * 
     * The ResultSet is closed by this method.
	 *
	 * @param rs Result set to drain.
	 * @param expectedRows If non-negative, indicates how
	 *  many rows we expected to see in the result set.
     *  @return the number of rows seen.
	 * 	 */

/**
     * Assert that a column is nullable in its ResultSetMetaData.
     * Used when a utility method checking the contents of a
     * ResultSet sees a NULL value. If the value is NULL then
     * the column's definition in ResultSetMetaData must allow NULLs
     * (or not disallow NULLS).
     * @param rs the resultSet
     * @param seen The set of entirely read rows so far
     * @param seenRow The set of read columns in the current row so far
     * @param col Position of column just fetched that was NULL.
     *      */

/**
     * Takes a result set and an array of expected colum names (as
     * Strings)  and asserts that the column names in the result
     * set metadata match the number, order, and names of those
     * in the array.
     *
     * @param rs ResultSet for which we're checking column names.
     * @param expectedColNames Array of expected column names.
     */

/**
     * Takes a result set and an array of expected colum names (as
     * Strings)  and asserts that the column names in the result
     * set metadata match the number, order, and names of those
     * in the array.
     * Does the same for column types
     *      *
     * @param rs ResultSet for which we're checking column names.
     * @param expectedTypes Array of expected types for the columns.
     * @param expectedColNames Array of expected column names.
     */

/**
     * Takes a result set and an array of expected colum names (as
     * Strings)  and asserts that the column names in the result
     * set metadata match the number, order, and names of those
     * in the array.
     * Does the same for column types and nullability.
     * 
     * This is a variation of JDBC.assertColumnNames, here we only compare
     * the expected columns and ignore additional ones, because columns 
     * returned from DatabaseMetaData can be added to with newer JDBC versions.
     * If the ResultSet can not change over time, JDBC.assertColumnNames 
     * should be used. See DERBY-6180.
     *
     * @param rs ResultSet for which we're checking column names.
     * @param expectedTypes Array of expected types for the columns.
     * @param nullability Array of expected nullability values for the columns.
     * @param expectedColNames Array of expected column names.
     */

/**
     * Takes a result set and an array of expected column types
     * from java.sql.Types 
     * and asserts that the column types in the result
     * set metadata match the number, order, and names of those
     * in the array.
     * 
     * No length information for variable length types
     * can be passed. For ResultSets from JDBC DatabaseMetaData
     * the specification only indicates the types of the
     * columns, not the length.
     *
     * @param rs ResultSet for which we're checking column names.
     * @param expectedTypes Array of expected column types.
     */

/**
     * Takes a Prepared Statement and an array of expected parameter types
     * from java.sql.Types 
     * and asserts that the parameter types in the ParamterMetaData
     * match the number and order of those
     * in the array.
     * @param ps PreparedStatement for which we're checking parameter names.
     * @param expectedTypes Array of expected parameter types.
     */

/**
     * Check the nullability of the column definitions for
     * the ResultSet matches the expected values.
     * @param rs
     * @param nullability
     *      */

/**
     * Asserts a ResultSet returns a single row with a single
     * column equal to the passed in String value. The value can
     * be null to indicate SQL NULL. The comparision is made
     * using assertFullResultSet in trimmed string mode.
     *  As a side effect, this method closes the ResultSet.
     */

/**
     * assertFullResultSet() using trimmed string comparisions.
     * Equal to
     * 
     * assertFullResultSet(rs, expectedRows, true)
     * 
     *  As a side effect, this method closes the ResultSet.
     */

/**
     * assertFullResultSet() using trimmed string comparisons.
     * Equal to
     * 
     * assertFullResultSet(rs, expectedRows, true)
     * 
     *
     * As a side effect, this method closes the result set.
     * 
     * Additionally, also assert that the given warnings are seen.  The array
     * {@code warnings} should contain null or a warning (SQLState string). The
     * array entry is asserted against the result set after having read the
     * corresponding row in the result set. NOTE: only asserted for embedded
     * result sets, cf DERBY-159
     * 
     * For now, we only look at the first warning if there is a chain
     * of warnings.
     */

/**
     * See assertRowInResultSet(...) above.
     *
     * @param colsToCheck If non-null then for every bit b
     *   that is set in colsToCheck, we'll compare the (b+1)-th column
     *   of the received result set's current row to the i-th column
     *   of expectedRow, where 0 &lt;= i &lt; # bits set in colsToCheck.
     *   So if colsToCheck is { 0, 3 } then expectedRow should have
     *   two objects and we'll check that:
     *
     *     expectedRow[0].equals(rs.getXXX(1));
     *     expectedRow[1].equals(rs.getXXX(4));
     *
     *   If colsToCheck is null then the (i+1)-th column in the
     *   result set is compared to the i-th column in expectedRow,
     *   where 0 &lt;= i &lt; expectedRow.length.
     */

/**
     * Assert two result sets have the same contents.
     * MetaData is determined from rs1, thus if rs2 has extra
     * columns they will be ignored. The metadata for the
     * two ResultSets are not compared.
     * 
     * The compete ResultSet is walked for both ResultSets,
     * and they are both closed.
     * 
     * Columns are compared as primitive ints or longs, Blob,
     * Clobs or as Strings.
     *      */

/**
     * Assert that the ResultSet contains the same rows as the specified
     * two-dimensional array. The order of the results is ignored. Convert the
     * results to trimmed strings before comparing. The ResultSet object will
     * be closed.
     *
     * @param rs the ResultSet to check
     * @param expectedRows the expected rows
     */

/**
     * Assert that the ResultSet contains the same rows as the specified
     * two-dimensional array. The order of the results is ignored. Objects are
     * read out of the ResultSet with the getObject() method and
     * compared with equals(). If the
     * asTrimmedStrings is true, the objects are read
     * with getString() and trimmed before they are compared. The
     * ResultSet object will be closed when this method returns.
     *
     * @param rs the ResultSet to check
     * @param expectedRows the expected rows
     * @param asTrimmedStrings whether the object should be compared as trimmed
     * strings
     */

/**
     * Asserts that the {@code ResultSet} contains the rows specified by the
     * two-dimensional array.
     * 
     * The order of the rows are ignored, and there may be more rows in the
     * result set than in the array. All values are compared as trimmed strings.
     *
     * @param rs the result set to check
     * @param expectedRows the rows that must exist in the result set
     *      */

/**
     * Asserts that the {@code ResultSet} contains the rows specified by the
     * two-dimensional array.
     *
     * @param rs the result set to check
     * @param expectedRows the rows that must exist in the result set
     * @param asTrimmedStrings whether the objects should be compared as
     *      trimmed strings
     * @param rowCountsMustMatch whether the number of rows must be the same in
     *      the result set and the array of expected rows
     *      */

/**
     * Asserts that the current schema is the same as the one specified.
     *
     * @param con connection to check schema in
     * @param schema expected schema name
     *      */

/**
     * Asserts that the current user is the same as the one specified.
     *
     * @param con connection to check schema in
     * @param user expected user name
     *      */

/**
     * Convert byte array to String.
     * Each byte is converted to a hexadecimal string representation.
     *
     * @param ba Byte array to be converted.
     * @return Hexadecimal string representation. Returns null on null input.
     */

/**
	 * Escape a non-qualified name so that it is suitable
	 * for use in a SQL query executed by JDBC.
	 */

/**
     * Compress 2 adjacent (single or double) quotes into a single (s or d)
     * quote when found in the middle of a String.
     *
     * NOTE:  """" or '''' will be compressed into "" or ''.
     * This function assumes that the leading and trailing quote from a
     * string or delimited identifier have already been removed.
     * @param source string to be compressed
     * @param quotes string containing two single or double quotes.
     * @return String where quotes have been compressed
     */

/**
     * Convert a SQL identifier to case normal form.
     *
     * Normalize a SQL identifer, up-casing if ,
     * and handling of  (SQL 2003, section 5.2).
     * The normal form is used internally in Derby.
     */

/**
	 * Escape a schama-qualified name so that it is suitable
	 * for use in a SQL query executed by JDBC.
	 */

/**
         * Return Type name from jdbc type
         * 
         * @param jdbcType  jdbc type to translate
         */

/**
     * Get run-time statistics and check that a sequence of string exist in the
     * statistics, using the given statement.
     * 
     * For the format of the strings, see RuntimeStatisticsParser#assertSequence
     *
     *      *
     * @param s the statement presumed to just have been executed, and for
     *        which we want to check the run-time statistics
     * @param sequence the sequnce of strings we expect to see in the run-time
     *        statistics
     *      */

