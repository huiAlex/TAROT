/** 
    
    NetworkServerControlImpl does all the work for NetworkServerControl
    
*/

/**
     * Maximum reply size. The reply buffer must be large enough to hold the
     * largest reply that {@link #readBytesReply(String)} and
     * {@link #readStringReply(String)} can receive. That is, a reply header
     * (4 bytes), a status byte (1 byte), a length field (2 bytes) and the
     * longest value (in bytes) that could be written by
     * {@link DDMWriter#writeLDBytes(byte[])} or
     * {@link DDMWriter#writeLDString(String)}.
     */

/** List of local addresses for checking admin commands. */

/**
     * Can EUSRIDPWD security mechanism be used with 
     * the current JVM
     */

/** Get the log writer we're using */

/**
     * Get the host where we listen for connections.
     */

/**
     * Get the port where we listen for connections.
     * @return the port number
     */

/**
     * Return true if the customer forcibly overrode our decision to install a
     * default SecurityManager.
     */

/**
     * Internal constructor for NetworkServerControl API. 
     * @param address InetAddress to listen on, throws NPE if null
     * @param portNumber portNumber to listen on, -1 use property or default
     *      *      */

/**
     * Internal constructor for NetworkServerControl API. 
     * @param userName the user name for actions requiring authorization
     * @param password the password for actions requiring authorization
     *      *      */

/**
     * Internal constructor for NetworkServerControl API. 
     * @param address InetAddress to listen on, throws NPE if null
     * @param portNumber portNumber to listen on, -1 use property or default
     * @param userName the user name for actions requiring authorization
     * @param password the password for actions requiring authorization
     *      *      */

/********************************************************************************
     * Implementation of NetworkServerControl API
     * The server commands throw exceptions for errors, so that users can handle
     * them themselves in addition to having the errors written to the console
     * and possibly derby.log.  To turn off logging the errors to the console,
     * set the output writer to null.
     ********************************************************************************/

/**
     * Set the output stream for console messages
     * If this is set to null, no messages will be written to the console
     *
     * @param outWriter output stream for console messages
     */

/**
     * Write an error message to console output stream
     * and throw an exception for this error
     *
     * @param msg   error message
     * @exception Exception
     */

/** Return the debug state */

/** Return the att_extnam server attribute */

/** Return the att_srvclsnm server attribute */

/** Return the att_srvrlslv server attribute */

/** Return the product id */

/** Return the bytes of the product id */

/**
     * Write an exception to console output stream,
     * but only if debugOutput is true.
     *
     * @param e exception
     */

/**
     * Write an exception (with trace) to console
     * output stream.
     *
     * @param e exception
     */

/**
     * Write a message to console output stream
     *
     * @param msg   message
     * @param printTimeStamp Whether to prepend a timestamp to the message or not
     */

/**
     * Start a network server.  Launches a separate thread with 
     * DRDAServerStarter.  Want to use Monitor.startModule,
     * so it can all get shutdown when Derby shuts down, but 
     * can't get it working right now.
     *
     * @param consoleWriter   PrintWriter to which server console will be 
     *                        output. Null will disable console output.
     *
     *
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Create the right kind of server socket
     */

/**
     * Start a network server
     *
     * @param consoleWriter   PrintWriter to which server console will be 
     *                        output. Null will disable console output.
     *
     *
     * @exception Exception throws an exception if an error occurs
     */

/** 
     * Load Derby and save driver for future use.
     * We can't call Driver Manager when the client connects, 
     * because they might be holding the DriverManager lock.
     *
     * 
     */

/**
     * Shutdown a network server
     *
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Authenticates the user and checks for shutdown System Privileges.
     * No Network communication needed.
     *
     * To perform this check the following policy grant is required
     * 
     *  to run the encapsulated test:
     *      permission javax.security.auth.AuthPermission "doAsPrivileged";
     * 
     * or a SQLException will be raised detailing the cause.
     * 
     * In addition, for the test to succeed
     * 
     *  the given user needs to be covered by a grant:
     *      principal org.apache.derby.authentication.SystemPrincipal "..." {}
     *  that lists a shutdown permission:
     *      permission org.apache.derby.security.SystemPermission "shutdown";
     * 
     * or it will fail with a SQLException detailing the cause.
     *
     * @param user The user to be checked for shutdown privileges
     *      */

/**
     *      */

/**
     */

/**
     * Ping opening an new socket and close it.
     *      */

/**
     * Ping the server using the client socket that is already open.
     */

/**
     * Turn tracing on or off for all sessions
     *
     * @param on            true to turn tracing on, false to turn tracing off
     *
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Turn tracing on or off for one session or all sessions
     *
     * @param connNum   the connNum of the session, 0 if all sessions
     * @param on            true to turn tracing on, false to turn tracing off
     *
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Print trace change message to console
     *
     * @param on            true to print tracing on, false to print tracing off
     *
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Turn logging connections on or off. When logging is turned on a message is
     * written to derby.log each time a connection is made.
     *
     * @param on            true to turn on, false to turn  off
     *
     * @exception Exception throws an exception if an error occurs
     */

/**
     *     */

/**
     *     */

/**
     *     */

/**
     * Display usage information
     *
     */

/**
     * Connect to  network server and set connection maxthread parameter
     *
     * @param max       maximum number of connections, if 0, connections
     *                      created when no free connection available
     *                      if -1, use default
     *
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Set network server connection timeslice parameter
     *
     * @param timeslice amount of time given to each session before yielding to
     *                      another session, if 0, never yield. if -1, use default.
     *
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Get current properties
     *
     * @return Properties object containing properties
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Holds the sequence number to be assigned to the next thread that
     * calls {@link #getUniqueThreadName(String)}.
     */

/**
     * Get a thread name that is both meaningful and unique (primarily for
     * debugging purposes).
     *
     * @param base the first part of the thread name (the meaningful part)
     * @return a unique thread name that starts with {@code base} and is
     * followed by an underscore and a unique sequence number
     */

/*******************************************************************************/

/*******************************************************************************/

/**
     * Remove session from session table
     *
     * @param sessionid     id of session to be removed
     */

/** Record a change to the connection logging mode */

/**
     * Get the next session for the thread to work on
     * Called from DRDAConnThread after session completes or timeslice
     * exceeded.   
     *
     * If there is a waiting session, pick it up and put currentSession 
     * at the back of the queue if there is one.
     * @param currentSession    session thread is currently working on
     *
     * @return  next session to work on, could be same as current session
     */

/**
     * Get the stored application requester or store if we haven't seen it yet
     *
     * @param appRequester Application Requester to look for
     *
     * @return  stored application requester
     */

/**
     * Get the server manager level for a given manager
     *
     * @param manager codepoint for manager
     * @return manager level
     */

/**
     * Check whether a CCSID code page is supported
     *
     * @param ccsid CCSID to check
     * @return true if supported; false otherwise
     */

/**
     * Put property message on console
     *
     * @param msgProp       message property key
     * @param printTimeStamp whether to prepend a timestamp to the message
     *
     *      */

/**
     * Put property message on console
     *
     * @param msgProp       message property key
     * @param arg           argument for message
     *
     *      */

/**
     * Put property message on console
     *
     * @param msgProp       message property key
     * @param args          argument array for message
     *
     *      */

/**
     * Is this the command protocol
     * 
     * @param  val
     */

/*******************************************************************************/

/*******************************************************************************/

/**
     * Write Command reply
     *
     * @param writer    writer to use 
     *
     *      */

/**
     * Send OK from server to client after processing a command
     *
     * @param writer    writer to use for sending OK
     *
     *      */

/**
     * Send OK and int value
     *
     * @param writer writer to use for sending
     * @param val   int val to send
     * 
     *      */

/**
     * Send Error or Warning from server to client after processing a command
     *
     * @param writer    writer to use for sending message
     * @param messageType   1 for Warning, 2 for Error 3 for SQLError
     * @param message   message
     *
     *      */

/**
     * Send SQL Exception from server to client after processing a command
     *
     * @param writer    writer to use for sending message
     * @param se        Derby exception
     * @param type      type of exception, SQLERROR or SQLWARNING
     *
     *      */

/**
     * Send SysInfo information from server to client
     *
     * @param writer    writer to use for sending sysinfo
     *
     *      */

/**
     * Send RuntimeInfo information from server to client
     *
     * @param writer    writer to use for sending sysinfo
     *
     *      */

/**
     * Send property information from server to client
     *
     * @param writer    writer to use for sending sysinfo
     *
     *      */

/**
     * Get Net Server information
     *
     * @return system information for the Network Server
     */

/**
     *      */

/**
     * Get Derby information
     *
     * @return system information for Derby
     *
     *      */

/**
     * Parse the command-line arguments. As a side-effect, fills in various instance
     * fields. This method was carved out of executeWork() so that
     * NetworkServerControl can figure out whether to install a security manager
     * before the server actually comes up. This is part of the work for DERBY-2196.
     *
     * @param args  array of arguments indicating command to be executed
     *
     * @return the command to be executed
     */

/**
     * Execute the command given on the command line
     *
     * @param command   The command to execute. The command itself was determined by an earlier call to parseArgs().
     *
     * @exception Exception throws an exception if an error occurs
     * see class comments for more information
     */

/**
     * Add session to the run queue
     *
     * @param clientSession session needing work
     */

/**
     * Go through the arguments and find the command and save the dash arguments
     *  and arguments to the command.  Only one command is allowed in the argument
     *  list.
     *
     * @param args  arguments to search
     *
     * @return  command
     */

/**
     * Get the dash argument. Optional arguments are formated as -x value.
     *
     * @param pos   starting point
     * @param args  arguments to search
     *
     * @return  command
     *
     * @exception Exception thrown if an error occurs
     */

/**
     * Is string "on" or "off"
     *
     * @param arg   string to check
     *
     * @return  true if string is "on", false if string is "off"
     *
     * @exception Exception thrown if string is not one of "on" or "off"
     */

/**
     * Close the resources associated with the opened socket.
     *      */

/**
     * Set up client socket to send a command to the network server
     *
     * @exception Exception thrown if exception encountered
     */

/**
     * Build local address list to allow admin commands.
     *
     * @param bindAddr Address on which server was started
     * 
     * Note: Some systems may not support localhost.
     * In that case a console message will print for the localhost entries,
     * but the server will continue to start.
     **/

/**
     * Routines for writing commands for NetworkServerControlImpl being used as a client
     * to a server
     */

/**
     * Write command header consisting of command header string and default
     * protocol version and command. At this point, all the commands except
     * shutdown with username/passwrod use default protocol version.
     *
     * @param command   command to be written
     *
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Write command header consisting of command header string and passed
     * protocol version and command. At this point, all the commands except
     * shutdown with username/passwrod use default protocol version.
     *
     * @param command   command to be written
     * @param protocol_version_for_command protocol version to be used
     *   for the given command
     *
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Write length delimited string string
     *
     * @param msg   string to be written
     *
     * @exception Exception throws an exception if an error occurs
     */

/** Write string
     *
     * @param msg String to write
     */

/**
     * Write short
     *
     * @param value value to be written
     *
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Write byte
     *
     * @param value value to be written
     *
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Send client message to server
     *
     *
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Stream error writing to client socket
     */

/**
     * Read result from sending client message to server
     *
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Ensure the reply buffer is large enough to hold all the data;
     * don't just rely on OS level defaults
     *
     *
     * @param minimumBytesNeeded    size of buffer required
     * @param failOnEOS tells whether or not an error should be raised if
     * end-of-stream is reached before the requested amount of bytes could
     * be read
     * @exception Exception throws an exception if a problem reading the reply
     */

/**
     * Fill the reply buffer with the reply allocates a reply buffer if one doesn't
     * exist
     *
     *
     * @exception Exception throws an exception if a problem reading the reply
     */

/**
     * Read the command reply header from the server
     *
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Read short from buffer
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Read int from buffer
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Read String reply
     *
     * @param msgKey    error message key
     * @return string value or null 
     * @exception Exception throws an error if problems reading reply
     */

/**
     * Read length delimited string from a buffer
     *
     * @return string value from buffer
     * @exception Exception throws an error if problems reading reply
     */

/**
     * Read Bytes reply
     *
     * @param msgKey    error message key
     * @return string value or null 
     * @exception Exception throws an error if problems reading reply
     */

/**
     * Read length delimited bytes from a buffer
     *
     * @return byte array from buffer
     * @exception Exception throws an error if problems reading reply
     */

/**
     * Initialize fields from system properties
     *
     */

/**
     * Retrieve the SECMEC integer value from the
     * user friendly security mechanism name
     * @param s  security mechanism name
     * @return integer value , return the SECMEC value for 
     * the security mechanism as defined by DRDA spec
     * or INVALID_OR_NOTSET_SECURITYMECHANISM if 's'
     * passed is invalid  or not supported security 
     * mechanism
     */

/**
     * Retrieve the string name for the integer
     * secmec value
     * @param secmecVal   secmec value
     * @return String - return the string name corresponding 
     * to the secmec value if recognized else returns null
     */

/**
     * This method returns whether EUSRIDPWD security mechanism
     * is supported or not. See class static block for more
     * info.
     * @return true if EUSRIDPWD is supported, false otherwise
     */

/**
     * Get the SSL-mode from a string.
     * @param s the SSL-mode string ("off"/"false", "on"/"true" or
     * "authenticate"/"auth"
     * @return SSL_OFF, SSL_BASIC or SSL_PEER_AUTHENTICATION. Will default to
     * SSL_OFF if the input does not match one of the four listed
     * above.
     **/

/**
     * Get the string value of the SSL-mode. This is the inverse of
     * getSSLModeValue.
     * @param i The SSL-mode value (SSL_OFF, SSL_BASIC or
     * SSL_PEER_AUTHENTICATION)
     * @return The string representation ("off","on" or
     * "autneticate"). Will default to SSL_OFF for other values than
     * those listed above.
     */

/**
     * Get integer property values
     *
     * @param propName  property name
     * @param propVal   string property value
     * @return integer value
     *
     * @exception Exception if not a valid integer
     */

/**
     * Handle console error message
     *  - display on console and if it is a user error, display usage
     *  - if user error or severe error, throw exception with message key and message
     *
     * @param messageKey    message key
     * @param args          arguments to message
     * @param printTimeStamp whether to prepend a timestamp to the message
     *
     *      */

/**
     * Throw a SQL Exception which was sent over by a server
     * Format of the msg is SQLSTATE:localized message\nSQLSTATE:next localized message
     *
     * @param msg       msg containing SQL Exception
     *
     *      */

/**
     * Throw a SQL Warning which was sent over by a server
     * Format of the msg is SQLSTATE:localized message\nSQLSTATE:next localized message
     *
     * @param msg       msg containing SQL Warning
     *
     *      */

/**
     * Print a trace for the (unexpected) exception received, then
     * throw a generic exception indicating that 1) an unexpected
     * exception was thrown, and 2) we've already printed the trace
     * (so don't do it again).
     * 
     * @param e An unexpected exception.
     *      */

/**
     * Convenience routine so that NetworkServerControl can localize messages.
     *
     * @param msgProp   message key
     * @param args      arguments to message
     *
     */

/**
     * Localize a message given a particular AppUI 
     *
     * @param msgProp   message key
     * @param localLangUtil LocalizedResource to use to localize message
     * @param args      arguments to message
     *
     */

/**
     * Determine type of message
     *
     * @param msg       message
     *
     * @return message type
     */

/**
     * Determine whether string is a property key or not
     *  property keys start with DRDA_MSG_PREFIX
     *
     * @param msg       message
     *
     * @return true if it is a property key; false otherwise
     */

/**
     * Get the current value of logging connections
     *
     * @return true if logging connections is on; false otherwise
     */

/**
     * Set the current value of logging connections
     *
     * @param value true to turn logging connections on; false to turn it off
     */

/**
     * Set the security mechanism for derby.drda.securityMechanism
     * If this property is set, server will only allow connections
     * from client with this security mechanism.
     * This method will map the user friendly string representing 
     * the security mechanism to the corresponding drda secmec value
     * @param s security mechanism string value
     *      *      */

/**
     * get the security mechanism (secmec value) that the server
     * will accept connections from.
     * @return the securitymechanism value. It is value that 
     * the derby.drda.securityMechanism was set to, if it is not set, then
     * it is equal to INVALID_OR_NOTSET_SECURITYMECHANISM
     *      */

/**
     * Set the trace on/off for all sessions, or one session, depending on
     * whether we got -s argument.
     *
     * @param on    true to turn trace on; false to turn it off
     * @return true if set false if an error occurred
     */

/**
     * Get the current value of the time slice
     *
     * @return time slice value
     */

/**
     * Set the current value of  time slice
     *
     * @param value time slice value
     * @exception Exception if value is &lt; 0
     */

/** 
     * Get the current value of keepAlive to configure how long the server
     * should keep the socket alive for a disconnected client
     */

/**
     * Get the current value of minimum number of threads to create at start
     *
     * @return value of minimum number of threads
     */

/**
     * Set the current value of minimum number of threads to create at start
     *
     * @param value  value of minimum number of threads
     */

/**
     * Get the current value of maximum number of threads to create 
     *
     * @return value of maximum number of threads
     */

/**
     * Set the current value of maximum number of threads to create 
     *
     * @param value value of maximum number of threads
     * @exception Exception if value is less than 0
     */

/**
     * Get the current value of whether to trace all the sessions
     *
     * @return true if tracing is on for all sessions; false otherwise
     */

/**
     * Set the current value of whether to trace all the sessions
     *
     * @param value true if tracing is on for all sessions; false otherwise
     */

/**
     * Get the current value of trace directory
     *
     * @return trace directory
     */

/**
     * Set the current value of trace directory
     *
     * @param value trace directory
     */

/**
     * Wrap SQL Error - display to console and raise exception
     *
     * @param messageKey    Derby SQL Exception message id
     *
     * @exception Exception raises exception for message
     */

/**
     * Wrap SQL Warning - display to console and raise exception
     *
     * @param messageKey    Derby SQL Exception message id
     *
     * @exception Exception raises exception for message
     */

/**
     * 
     * Constructs an object containing network server related properties
     * and their values. Some properties are only included if set. Some 
     * other properties are included with a default value if not set.
     * 
     * This method is accessing the local JVM in which the network server
     * instance is actually running (i.e. no networking).
     * 
     * This method is package private to allow access from relevant MBean 
     * implementations in the same package.
     * 
     * @return a collection of network server properties and their current 
     *         values
     */

/**
     * Add a session - for use by ClientThread. Put the session
     * into the session table and the run queue. Start a new
     * DRDAConnThread if there are more sessions waiting than
     * there are free threads, and the maximum number of threads is not
     * exceeded.
     *
     * addSession() should only be called from one thread at a
     * time.
     *
     * @param clientSocket the socket to read from and write to
     */

/**
     * Remove a thread from the thread list. Should be called when a
     * DRDAConnThread has been closed.
     *
     * @param thread the closed thread
     */

/**
     * Retrieve product version information
     * We need to make sure that this method gets the stream and passes it to 
     * ProductVersionHolder, because it lives in the Network Server jar
     * and won't be readily available to ProductVersionHolder when running
     * under security manager.
     */

/**
     * Privileged module lookup. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged service lookup. Must be private so that user code
     * can't call this entry point.
     */

