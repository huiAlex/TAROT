/**
 * This class represents a schema descriptor
 *
 *  */

/**
     * STD_SYSTEM_SCHEMA_NAME is the name of the system schema in databases that
     * use ANSI standard identifier casing. 
     *
     * See org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext#getSystemSchemaName
     */

/**
     * This schema is used for jar handling procedures.
     **/

/**
     * This schema is for Derby specific system diagnostic procedures and 
     * functions which are not available in DB2.  
     **/

/**
     * This schema is for Derby specific system diagnostic procedures and 
     * functions which are not available in DB2.  
     **/

/**
     * STD_DEFAULT_SCHEMA_NAME is the name of the default schema in databases 
     * that use ANSI standard identifier casing. 
     *
     * See org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext#getDefaultSchemaName
     */

/**
     * UUID's used as key's in the SYSSCHEMA catalog for the system schema's
     **/

/** the public interface for this system:
		
		public String getSchemaName();
		public String getAuthorizationId();
		public void	setUUID(UUID uuid);
		public boolean isSystemSchema();
		
	*/

/**
     * For system schemas, the only possible value for collation type is
     * UCS_BASIC. For user schemas, the collation type can be UCS_BASIC or 
     * TERRITORY_BASED.
     */

/**
	 * Constructor for a SchemaDescriptor.
	 *
     * @param dataDictionary
	 * @param name	        The schema descriptor for this table.
     * @param aid           The authorization id
	 * @param oid	        The object id
     * @param isSystem	    boolean, true iff this is a system schema, like SYS,
     *                      SYSIBM, SYSCAT, SYSFUN, ....
	 */

/**
	 * Gets the name of the schema 
	 *
	 * @return	The schema name
	 */

/**
	 * Gets the authorization id of the schema 
	 *
	 * @return	Authorization id
	 *		lives in.
	 */

/**
	 * Sets the authorization id of the schema. This is only used by the DataDictionary
     * during boot in order to patch up the authorization ids on system schemas.
	 *
	 * @param newAuthorizationID What is is
	 */

/**
	 * Gets the oid of the schema 
	 *
	 * @return	An oid
	 */

/**
	 * Sets the oid of the schema 
	 *
	 * @param oid	The object id
	 *
	 */

/**
	 * Returns the collation type associated with this schema 
	 *
	 * @return collation type
	 *
	 */

/**		
		@return the stored form of this provider

				 */

/**
	 * Return the name of this Provider.  (Useful for errors.)
	 *
	 * @return String	The name of this provider.
	 */

/**
	 * Get the provider's UUID 
	 *
	 * @return String	The provider's UUID
	 */

/**
	 * Get the provider's type.
	 *
	 * @return String		The provider's type.
	 */

/**
	 * Prints the contents of the SchemaDescriptor
	 *
	 * @return The contents as a String
	 */

/**
	  *	Determine if two SchemaDescriptors are the same.
	  *
	  *	@param	otherObject	other schemadescriptor
	  *
	  *	@return	true if they are the same, false otherwise
	  */

/**
	 * Indicate whether this is a system schema or not
     *
     * Examples of system schema's include: 
     *      SYS, SYSIBM, SYSCAT, SYSFUN, SYSPROC, SYSSTAT, and SYSCS_DIAG 
	 *
	 * @return true/false
	 */

/**
	 * Indicate whether this is a system schema with grantable routines
	 *
	 * @return true/false
	 */

/**
	  *	Get a hashcode for this SchemaDescriptor
	  *
	  *	@return	hashcode
	  */

/** @see TupleDescriptor#getDescriptorName */

/** @see TupleDescriptor#getDescriptorType */

/**
     * Drop this schema.
     * Drops the schema if it is empty. If the schema was
     * the current default then the current default will be
     * reset through the language connection context.
     *      */

