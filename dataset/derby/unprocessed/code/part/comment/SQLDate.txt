/**
 * This contains an instance of a SQL Date.
 * 
 * The date is stored as int (year &lt;&lt; 16 + month &lt;&lt; 8 + day)
 * Null is represented by an encodedDate value of 0.
 * Some of the static methods in this class are also used by SQLTime and SQLTimestamp
 * so check those classes if you change the date encoding
 *
 * PERFORMANCE OPTIMIZATION:
 * The java.sql.Date object is only instantiated when needed
 * do to the overhead of Date.valueOf(), etc. methods.
 */

/**
		getTimestamp returns a timestamp with the date value 
		time is set to 00:00:00.0
	*/

/**
     * Convert the date into a milli-seconds since the epoch
     * with the time set to 00:00 based upon the passed in Calendar.
     */

/**
     * Set the date portion of a date-time value into
     * the passed in Calendar object from its encodedDate
     * value. Only the YEAR, MONTH and DAY_OF_MONTH
     * fields are modified. The remaining
     * state of the Calendar is not modified.
     */

/**
		getObject returns the date value

	 */

/**
		Return my format identifier.

			*/

/** 
		@exception IOException error writing data

	*/

/**
	 * 	 *
	 * @exception IOException	Thrown on error reading the object
	 */

/** @see DataValueDescriptor#cloneValue */

/**
	 * 	 */

/**
	 * 	 *
	 */

/** 
	 * 	 *
	 * @exception SQLException		Thrown on error
	 */

/**
	 * Orderable interface
	 *
	 *
	 * 	 *
	 * @exception StandardException thrown on failure
	 */

/**
		@exception StandardException thrown on error
	 */

/** no-arg constructor required by Formattable */

/**
     * Construct a date from a string. The allowed date formats are:
     *
     *ISO: yyyy-mm-dd
     *IBM USA standard: mm/dd/yyyy
     *IBM European standard: dd.mm.yyyy
     *
     * Trailing blanks may be included; leading zeros may be omitted from the month and day portions.
     *
     * @param dateStr
     * @param isJdbcEscape if true then only the JDBC date escape syntax is allowed
     * @param localeFinder
     *
     * @exception StandardException if the syntax is invalid or the value is
     * out of range
     */

/**
     * Construct a date from a string. The allowed date formats are:
     *
     *ISO: yyyy-mm-dd
     *IBM USA standard: mm/dd/yyyy
     *IBM European standard: dd.mm.yyyy
     *
     * Trailing blanks may be included; leading zeros may be omitted from the month and day portions.
     *
     * @param dateStr
     * @param isJdbcEscape if true then only the JDBC date escape syntax is allowed
     * @param localeFinder
     *
     * @exception StandardException if the syntax is invalid or the value is
     * out of range
     */

/**
	 * Set the value from a correctly typed Date object.
	 * 	 */

/**
		
	 */

/**
		
	 */

/**
	 * 	 * 
	 * @exception StandardException		Thrown on error
	 */

/**
	 * 	 * 
	 * @exception StandardException		Thrown on error
	 */

/**
	 * 	 * 
	 * @exception StandardException		Thrown on error
	 */

/**
	 * 	 * 
	 * @exception StandardException		Thrown on error
	 */

/**
	 * 	 * 
	 * @exception StandardException		Thrown on error
	 */

/**
	 * 	 * 
	 * @exception StandardException		Thrown on error
	 */

/** @see DataValueDescriptor#typePrecedence */

/**
	 * Check if the value is null.  
	 * encodedDate is 0 if the value is null
	 *
	 * @return Whether or not value is logically null.
	 */

/**
	 * Get the value field.  We instantiate the field
	 * on demand.
	 *
	 * @return	The value field.
	 */

/**
	 * Get the year from the encodedDate.
	 *
	 * @param encodedDate	the encoded date
	 * @return	 			year value.
	 */

/**
	 * Get the month from the encodedDate,
     * January is one.
	 *
	 * @param encodedDate	the encoded date
	 * @return	 			month value.
	 */

/**
	 * Get the day from the encodedDate.
	 *
	 * @param encodedDate	the encoded date
	 * @return	 			day value.
	 */

/**
	 *	computeEncodedDate extracts the year, month and date from
	 *	a Calendar value and encodes them as
	 *		year &lt;&lt; 16 + month &lt;&lt; 8 + date
	 *	Use this function will help to remember to add 1 to month
	 *  which is 0 based in the Calendar class
	 *	@param cal	the Calendar 
	 *	@return 		the encodedDate
     *
     *  @exception StandardException if the value is out of the DB2 date range
	 */

/**
     * Convert a date to the JDBC representation and append it to a string buffer.
     *
     * @param year
     * @param month 1 based (January == 1)
     * @param day
     * @param sb The string representation is appended to this StringBuffer
     */

/**
	 * Get the String version from the encodedDate.
	 *
	 * @return	 string value.
	 */

/**
		This helper routine tests the nullability of various parameters
		and sets up the result appropriately.

		If source is null, a new NumberDataValue is built. 

		@exception StandardException	Thrown on error
	 */

/**
     * Compute the encoded date given a date
	 *
	 */

/**
         * Implement the date SQL function: construct a SQL date from a string, number, or timestamp.
         *
         * @param operand Must be a date or a string convertible to a date.
         * @param dvf the DataValueFactory
         *
         * @exception StandardException standard error policy
         */

/** Adding this method to ensure that super class' setInto method doesn't get called
      * that leads to the violation of JDBC spec( untyped nulls ) when batching is turned on.
      */

/**
     * Add a number of intervals to a datetime value. Implements the JDBC escape TIMESTAMPADD function.
     *
     * @param intervalType One of FRAC_SECOND_INTERVAL, SECOND_INTERVAL, MINUTE_INTERVAL, HOUR_INTERVAL,
     *                     DAY_INTERVAL, WEEK_INTERVAL, MONTH_INTERVAL, QUARTER_INTERVAL, or YEAR_INTERVAL
     * @param intervalCount The number of intervals to add
     * @param currentDate Used to convert time to timestamp
     * @param resultHolder If non-null a DateTimeDataValue that can be used to hold the result. If null then
     *                     generate a new holder
     *
     * @return startTime + intervalCount intervals, as a timestamp
     *
     * @exception StandardException
     */

/**
     * Finds the difference between two datetime values as a number of intervals. Implements the JDBC
     * TIMESTAMPDIFF escape function.
     *
     * @param intervalType One of FRAC_SECOND_INTERVAL, SECOND_INTERVAL, MINUTE_INTERVAL, HOUR_INTERVAL,
     *                     DAY_INTERVAL, WEEK_INTERVAL, MONTH_INTERVAL, QUARTER_INTERVAL, or YEAR_INTERVAL
     * @param time1
     * @param currentDate Used to convert time to timestamp
     * @param resultHolder If non-null a NumberDataValue that can be used to hold the result. If null then
     *                     generate a new holder
     *
     * @return the number of intervals by which this datetime is greater than time1
     *
     * @exception StandardException
     */

