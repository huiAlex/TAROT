/**
     * Code length at which to split into sub-methods.
     * Normally set to the maximim code length the
     * JVM can support, but for testing the split code
     * it can be reduced so that the standard tests
     * cause some splitting. Tested with value set to 2000.
     */

/**
	 * The original name of the method, this
	 * represents how any user would call this method.
	 */

/**
     * Fast access for the parametes, will be null
     * if the method has no parameters.
     */

/**
     * List of parameter types with java language class names.
     * Can be null or zero length for no parameters.
     */

/**
	 * True if we are currently switching control
	 * over to a sub method to avoid hitting the code generation
	 * limit of 65535 bytes per method.
	 */

/**
	 * How many sub-methods we have overflowed to.
	 */

/**
	 * Return the logical name of the method. The current
	 * myEntry refers to the sub method we are currently
	 * overflowing to. Those sub-methods are hidden from any caller.
	 */

/**
	 * a throwable can be added to the end of
	 * the list of thrownExceptions.
	 */

/**
	 * when the method has had all of its parameters
	 * and thrown exceptions defined, and its statement
 	 * block has been completed, it can be completed and
	 * its class file information generated.
	 * 
	 * further alterations of the method will not be
	 * reflected in the code generated for it.
	 */

/**
     * Attempt to split a large method by pushing code out to several
     * sub-methods. Performs a number of steps.
     * 
     *  Split at zero stack depth.
     *  Split at non-zero stack depth (FUTURE)
     * 
     * 
     * If the class has already exceeded some limit in building the
     * class file format structures then don't attempt to split.
     * Most likely the number of constant pool entries has been exceeded
     * and thus the built class file no longer has integrity.
     * The split code relies on being able to read the in-memory
     * version of the class file in order to determine descriptors
     * for methods and fields.
     */

/**
     * In their giveCode methods, the parts of the method body will want to get
     * to the constant pool to add their constants. We really only want them
     * treating it like a constant pool inclusion mechanism, we could write a
     * wrapper to limit it to that.
     */

/**
	 * sets exceptionBytes to the attribute_info needed
	 * for a method's Exceptions attribute.
	 * The ClassUtilities take care of the header 6 bytes for us,
	 * so they are not included here.
	 * See The Java Virtual Machine Specification Section 4.7.5,
	 * Exceptions attribute.
	 */

/**
	 * Array of the current types of the values on the stack.
	 * A type that types up two words on the stack, e.g. double
	 * will only occupy one element in this array.
	 * This array is dynamically re-sized as needed.
	 */

/**
	 * Points to the next array offset in stackTypes
	 * to be used. Really it's the number of valid entries
	 * in stackTypes.
	 */

/**
	 * Maximum stack depth seen in this method, measured in words.
	 * Corresponds to max_stack in the Code attribute of section 4.7.3
	 * of the vm spec.
	 */

/**
	 * Current stack depth in this method, measured in words.
	 */

/**
     * Push an integer value. Uses the special integer opcodes
     * for the constants -1 to 5, BIPUSH for values that fit in
     * a byte and SIPUSH for values that fit in a short. Otherwise
     * uses LDC with a constant pool entry.
     * 
     * @param value Value to be pushed
     * @param type Final type of the value.
     */

/**
     * Push a long value onto the stack.
     * For the values zero and one the LCONST_0 and
     * LCONST_1 instructions are used.
     * For values betwee Short.MIN_VALUE and Short.MAX_VALUE
     * inclusive an byte/short/int value is pushed
     * using push(int, Type) followed by an I2L instruction.
     * This saves using a constant pool entry for such values.
     * All other values use a constant pool entry. For values
     * in the range of an Integer an integer constant pool
     * entry is created to allow sharing with integer constants
     * and to reduce constant pool slot entries.
     */

/**
		Push the contents of the described static field onto the stack.		
	*/

/**
	 * Set the field but don't duplicate its value so
	 * nothing is left on the stack after this call.
	 */

/**
		Upon entry the top word(s) on the stack is
		the value to be put into the field. Ie.
		we have
		
		word
		

		Before the call we need 
		
		word
		this
		word
		
		word2,word1 -&gt; word2, word1, word2

		So that we are left with word after the put.

	*/

/**
		Pop the top stack value and store it in the instance field of this class.
	*/

/**
		Pop the top stack value and store it in the field.
		This call requires the instance to be pushed by the caller.
	*/

/**
	*/

/**
		this array maps the BCExpr vm_* constants 0..6 to
		the expected VM type constants for the newarray instruction.
		
		Because boolean was mapped to integer for general instructions,
		it will have to be specially matched and mapped to its value
		directly (4).
	 */

/**
		Create an array instance

		Stack ... =&gt;
		      ...,arrayref
	*/

/**
     * Write a instruction that uses a constant pool entry
     * as an operand, add a limit exceeded message if
     * the number of constant pool entries has exceeded
     * the limit.
     */

/**
		Tell if statement number in this method builder hits limit.  This
		method builder keeps a counter of how many statements are added to it.
		Caller should call this function every time it tries to add a statement
		to this method builder (counter is increased by 1), then the function
		returns whether the accumulated statement number hits a limit.
		The reason of doing this is that Java compiler has a limit of 64K code
		size for each method.  We might hit this limit if an extremely long
		insert statement is issued, for example (see beetle 4293).  Counting
		statement number is an approximation without too much overhead.
	*/

/**
	 * Check to see if the current method byte code is nearing the
	 * limit of 65535. If it is start overflowing to a new method.
	 * 
	 * Overflow is handled for a method named e23 as:
	 * 
	 public Object e23()
	 {
	   ... existing code
	   // split point
	   return e23_0();
	 }
	 private Object e23_0()
	 {
	    ... first set overflowed code
	    // split point
	    return e23_1(); 
	 }
	 private Object e23_1()
	 {
	    ... second set overflowed code
	    // method complete
	    return result; 
	 }
	 	 
	 
	 
	 These overflow methods are hidden from the code using this MethodBuilder,
	 it continues to think that it is building a single method with the
	 original name.


	 *  Restrictions:
	 * 
	 *  Only handles methods with no arguments
	 *  Stack depth must be zero
	 * 
	 * 
	 *
	 */

/**
     * Create a sub-method from this method to allow the code builder to split a
     * single logical method into multiple methods to avoid the 64k per-method
     * code size limit. The sub method with inherit the thrown exceptions of
     * this method.
     * 
     * @param returnType
     *            Return type of the new method
     * @param withParameters
     *            True to define the method with matching parameters false to
     *            define it with no parameters.
     * @return A valid empty sub method.
     */

/**
     * Call a sub-method created by getNewSubMethod handling parameters
     * correctly.
     */

