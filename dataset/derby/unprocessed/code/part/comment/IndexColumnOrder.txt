/**
	Basic implementation of ColumnOrdering.
	Not sure what to tell callers about 0-based versus 1-based numbering.
	Assume 0-based for now.

 */

/********************************************************
	**
	**	This class implements Formatable. That means that it
	**	can write itself to and from a formatted stream. If
	**	you add more fields to this class, make sure that you
	**	also write/read them with the writeExternal()/readExternal()
	**	methods.
	**
	**	If, inbetween releases, you add more fields to this class,
	**	then you should bump the version number emitted by the getTypeFormatId()
	**	method.
	**
	********************************************************/

/**
         * indicate whether NULL values should sort low.
         *
         * nullsOrderedLow is usually false, because generally Derby defaults
         * to have NULL values compare higher than non-null values, but if
         * the user specifies an ORDER BY clause with a 
         * specification that indicates that NULL values should be ordered
         * lower than non-NULL values, thien nullsOrderedLow is set to true.
         */

/**
	 * Niladic constructor for formatable
	 */

/**
         * constructor used by the ORDER BY clause.
         *
         * This version of the constructor is used by the compiler when
         * it processes an ORDER BY clause in a SQL statement. For such
         * statements, the user gets to control whether NULL values are
         * ordered as lower than all non-NULL values, or higher than all
         * non-NULL values.
         *
         * @param colNum number of this column
         * @param ascending whether the ORDER BY is ascendeing or descending
         * @param nullsLow whether nulls should be ordered low
         */

/**
         * Indicate whether NULL values should be ordered below non-NULL.
         *
         * This function returns TRUE if the user has specified, via the
         *  clause in the ORDER BY clause, that NULL values
         * of this column should sort lower than non-NULL values.
         *
         * @return whether nulls should sort low
         */

/**
	 * Write this object out
	 *
	 * @param out write bytes here
	 *
 	 * @exception IOException thrown on error
	 */

/**
	 * Read this object from a stream of stored objects.
	 *
	 * @param in read this.
	 *
	 * @exception IOException					thrown on error
	 * @exception ClassNotFoundException		thrown on error
	 */

/**
	 * Get the formatID which corresponds to this class.
	 *
	 *	@return	the formatID of this class
	 */

