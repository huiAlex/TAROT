/**
 * NumberDataType is the superclass for all exact and approximate 
 * numeric data types. It exists for the purpose of allowing classification
 * of types for supported implicit conversions among them.
 *
 *  */

/**
     * Numbers check for isNegative first and negate it if negative.
     * 
     * @return this object's absolute value.  Null if object is null.
     * @exception StandardException thrown on error.
     */

/**
     * This is the sqrt method.
     * 
     * @return this object's sqrt value.  Null if object is null.
     * Note: -0.0f and  -0.0d returns 0.0f and 0.0d.
     *
     * @exception StandardException thrown on a negative number.
     */

/**
	 * This method implements the + operator for TINYINT,SMALLINT,INT.
	 *
	 * @param addend1	One of the addends
	 * @param addend2	The other addend
	 * @param result	The result of a previous call to this method, null
	 *					if not called yet
	 *
	 * @return	A NumberDataValue containing the result of the addition
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * This method implements the - operator for TINYINT, SMALLINT and INTEGER.
	 *
	 * @param left	The value to be subtracted from
	 * @param right	The value to be subtracted
	 * @param result	The result of a previous call to this method, null
	 *					if not called yet
	 *
	 * @return	A SQLInteger containing the result of the subtraction
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * This method implements the / operator for TINYINT, SMALLINT and INTEGER.
	 * Specialized methods are not required for TINYINT and SMALLINT as the Java
	 * virtual machine always executes byte and int division as integer.
	 *
	 * @param dividend	The numerator
	 * @param divisor	The denominator
	 * @param result	The result of a previous call to this method, null
	 *					if not called yet
	 *
	 * @return	A SQLInteger containing the result of the division
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 	Suitable for integral types that ignore scale.
	 */

/** @exception StandardException		Thrown on error */

/**
		Compare this (not null) to a non-null value.
	
	@exception StandardException		Thrown on error
	*/

/**
		@exception StandardException thrown on error
	 */

/**
     * The isNegative abstract method.  Checks to see if this.value is negative.
     * To be implemented by each NumberDataType.
     *
     * @return  A boolean.  If this.value is negative, return true.
     *          For positive values or null, return false.
     */

/**
     * Common code to handle converting a short to this value
     * by using the int to this value conversion.
     * Simply calls setValue(int).
     * 
     */

/**
     * Common code to handle converting a byte to this value
     * by using the int to this value conversion.
     * Simply calls setValue(int).
     * 
     */

/**
	   Common code to handle java.lang.Integer as a Number,
	   used for TINYINT, SMALLINT, INTEGER
	 * 	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Set the value from a correctly typed Integer object.
	 * Used for TINYINT, SMALLINT, INTEGER.
	 * 	 */

/**
		setValue for integral exact numerics. Converts the BigDecimal
		to a long to preserve precision
	*/

/**
	 * Implementation for integral types. Convert to a BigDecimal using long
	 */

/**
      * normalizeREAL normalizes the value, so that negative zero (-0.0) becomes
      * positive.
      *       * infinite.
      */

/**
     * normalizeREAL normalizes the value, so that negative zero (-0.0)
     * becomes positive.
     * 
     * The reason for having normalizeREAL with two signatures is to
     * avoid that normalizeREAL is accidentally called with a casted
     * {@code (float)} since this can introduce an undetected
     * underflow values to 0.0f.
     *      * infinite or on underflow
     * (the value has magnitude too small to be represented as a float).
     */

/**
     * normalizeDOUBLE normalizes the value, so that negative zero (-0.0)
     * becomes positive.
     *      */

/**
     * Controls use of old DB2 limits (DERBY-3398).
     * @return false if dictionary is new enough, see DD_Version.
     */

/**
     * Privileged lookup of a Context. Must be private so that user code
     * can't call this entry point.
     */

