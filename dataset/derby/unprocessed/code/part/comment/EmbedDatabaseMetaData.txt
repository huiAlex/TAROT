/**
	    @exception SQLException on error
	 */

/** Cached query descriptions from metadata.properties. */

/** Cached query descriptions from metadata_net.properties. */

/**
     * Return all queries found in either metadata.properties or
     * metadata_net.properties.
     *
     * @param net if true, read metadata_net.properties;
     * otherwise, read metadata.properties.
     * @return a Properties value with the queries
     */

/**
     * Read the query descriptions from metadata.properties and
     * metadata_net.properties. This method must be invoked from
     * within a privileged block.
     */

/**
     * Can all the procedures returned by getProcedures be called by the
     * current user?
     *
     * @return true if so
     */

/**
     * Can all the tables returned by getTable be SELECTed by the
     * current user?
     *
     * @return true if so
     */

/**
     * What's the url for this database?
     *
     * @return the url or null if it can't be generated
     */

/**
     * What's our user name as known to the database?
     *
     * @return our database user name
     */

/**
     * Is the database in read-only mode?
     *
     * @return true if so
     */

/**
     * Are NULL values sorted high?
     *
     * @return true if so
     */

/**
     * Are NULL values sorted low?
     *
     * @return true if so
     */

/**
     * Are NULL values sorted at the start regardless of sort order?
     *
     * @return true if so
     */

/**
     * Are NULL values sorted at the end regardless of sort order?
     *
     * @return true if so
     */

/**
     * What's the name of this database product?
     *
     * @return database product name
     */

/**
     * What's the version of this database product?
     *
     * @return database version
     */

/**
     * What's the name of this JDBC driver?
     *
     * @return JDBC driver name
     */

/**
     * What's the version of this JDBC driver?
     *
     * @return JDBC driver version
     */

/**
     * What's this JDBC driver's major version number?
     *
     * @return JDBC driver major version
     */

/**
     * What's this JDBC driver's minor version number?
     *
     * @return JDBC driver minor version number
     */

/**
     * Does the database store tables in a local file?
     *
     * @return true if so
     */

/**
     * Does the database use a file for each table?
     *
     * @return true if the database uses a local file for each table
     */

/**
     * Does the database treat mixed case unquoted SQL identifiers as
     * case sensitive and as a result store them in mixed case?
     *
     * A JDBC-Compliant driver will always return false.
     *
     * @return true if so
     */

/**
     * Does the database treat mixed case unquoted SQL identifiers as
     * case insensitive and store them in upper case?
     *
     * @return true if so
     */

/**
     * Does the database treat mixed case unquoted SQL identifiers as
     * case insensitive and store them in lower case?
     *
     * @return true if so
     */

/**
     * Does the database treat mixed case unquoted SQL identifiers as
     * case insensitive and store them in mixed case?
     *
     * @return true if so
     */

/**
     * Does the database treat mixed case quoted SQL identifiers as
     * case sensitive and as a result store them in mixed case?
     *
     * A JDBC-Compliant driver will always return true.
     *
     * @return true if so
     */

/**
     * Does the database treat mixed case quoted SQL identifiers as
     * case insensitive and store them in upper case?
     *
     * @return true if so
     */

/**
     * Does the database treat mixed case quoted SQL identifiers as
     * case insensitive and store them in lower case?
     *
     * @return true if so
     */

/**
     * Does the database treat mixed case quoted SQL identifiers as
     * case insensitive and store them in mixed case?
     *
     * @return true if so
     */

/**
     * What's the string used to quote SQL identifiers?
     * This returns a space " " if identifier quoting isn't supported.
     *
     * A JDBC-Compliant driver always uses a double quote character.
     *
     * @return the quoting string
     */

/**
     * Get a comma separated list of all a database's SQL keywords
     * that are NOT also SQL92 keywords.
	includes reserved and non-reserved keywords.

     * @return the list
     */

/**
     * Get a comma separated list of JDBC escaped numeric functions.
     * Must be a complete or sub set of functions in appendix C.1 
     * of JDBC 3.0 specification (pp. 183).
     * @return the list
     */

/**
     * Get a comma separated list of JDBC escaped string functions.
     * Must be a complete or sub set of functions in appendix C.2
     * of JDBC 3.0 specification (pp. 184).
     * @return the list
     */

/**
     * Get a comma separated list of JDBC escaped system functions.
     * Must be a complete or sub set of functions in appendix C.4
     * of JDBC 3.0 specification (pp. 185).
     * @return the list
     */

/**
     * Get a comma separated list of JDBC escaped time date functions.
     * Must be a complete or sub set of functions in appendix C.3
     * of JDBC 3.0 specification.
      * @return the list
     */

/**
     * This is the string that can be used to escape '_' or '%' in
     * the string pattern style catalog search parameters.
        we have no default escape value, so = is the end of the next line
     * The '_' character represents any single character.
     * The '%' character represents any sequence of zero or
     * more characters.
     * @return the string used to escape wildcard characters
     */

/**
     * Get all the "extra" characters that can be used in unquoted
     * identifier names (those beyond a-z, A-Z, 0-9 and _).
     *
     * @return the string containing the extra characters
     */

/**
     * Is "ALTER TABLE" with add column supported?
     *
     * @return true if so
     */

/**
     * Is "ALTER TABLE" with drop column supported?
     *
     * @return true if so
     */

/**
     * Is column aliasing supported?
     *
     * If so, the SQL AS clause can be used to provide names for
     * computed columns or to provide alias names for columns as
     * required.
     *
     * A JDBC-Compliant driver always returns true.
     *
     * @return true if so
     */

/**
     * Are concatenations between NULL and non-NULL values NULL?
     *
     * A JDBC-Compliant driver always returns true.
     *
     * @return true if so
     */

/**
     * Is the CONVERT function between SQL types supported?
     *
     * @return true if so
     */

/**
     * Is CONVERT between the given SQL types supported?
     *
     * @param fromType the type to convert from
     * @param toType the type to convert to
     * @return true if so
     *      */

/**
     * Are table correlation names supported?
     *
     * A JDBC-Compliant driver always returns true.
     *
     * @return true if so
     */

/**
     * If table correlation names are supported, are they restricted
     * to be different from the names of the tables?
     *
     * @return true if so
     */

/**
     * Are expressions in "ORDER BY" lists supported?
     *
     * @return true if so
     */

/**
     * Can an "ORDER BY" clause use columns not in the SELECT?
     *
     * @return true if so
     */

/**
     * Is some form of "GROUP BY" clause supported?
     *
     * @return true if so
     */

/**
     * Can a "GROUP BY" clause use columns not in the SELECT?
     *
     * @return true if so
     */

/**
     * Can a "GROUP BY" clause add columns not in the SELECT
     * provided it specifies all the columns in the SELECT?
     *
     * @return true if so
     */

/**
     * Is the escape character in "LIKE" clauses supported?
     *
     * A JDBC-Compliant driver always returns true.
     *
     * @return true if so
     */

/**
     * Are multiple ResultSets from a single execute supported?
     *
     * @return true if so
     */

/**
     * Can we have multiple transactions open at once (on different
     * connections)?
     *
     * @return true if so
     */

/**
     * Can columns be defined as non-nullable?
     *
     * A JDBC-Compliant driver always returns true.
     *
     * @return true if so
     */

/**
     * Is the ODBC Minimum SQL grammar supported?
     *
     * All JDBC-Compliant drivers must return true.
     *
     * @return true if so
     */

/**
     * Is the ODBC Core SQL grammar supported?
     *
     * @return true if so
     */

/**
     * Is the ODBC Extended SQL grammar supported?
     *
     * @return true if so
     */

/**
     * Is the ANSI92 entry level SQL grammar supported?
     *
     * All JDBC-Compliant drivers must return true.
     *
     * @return true if so
     */

/**
     * Is the ANSI92 intermediate SQL grammar supported?
     *
     * @return true if so
	 * 
     */

/**
     * Is the ANSI92 full SQL grammar supported?
     *
     * @return true if so
	 * 
     */

/**
     * Is the SQL Integrity Enhancement Facility supported?
     *
     * @return true if so
	 * 
     */

/**
     * Is some form of outer join supported?
     *
     * @return true if so
	 * 
     */

/**
     * Are full nested outer joins supported?
     *
     * @return true if so
	 * 
     */

/**
     * Is there limited support for outer joins?  (This will be true
     * if supportFullOuterJoins is true.)
     *
     * @return true if so
	 * 
     */

/**
     * What's the database vendor's preferred term for "schema"?
     *
     * @return the vendor term
	 * 
     */

/**
     * What's the database vendor's preferred term for "procedure"?
     *
     * @return the vendor term
	 * 
     */

/**
     * What's the database vendor's preferred term for "catalog"?
     *
     * @return the vendor term
	 * 
     */

/**
     * Does a catalog appear at the start of a qualified table name?
     * (Otherwise it appears at the end)
     *
     * @return true if it appears at the start
	 * 
     */

/**
     * What's the separator between catalog and table name?
     *
     * @return the separator string
	 * 
     */

/**
     * Can a schema name be used in a data manipulation statement?
     *
     * @return true if so
	 * 
     */

/**
     * Can a schema name be used in a procedure call statement?
     *
     * @return true if so
	 * 
     */

/**
     * Can a schema name be used in a table definition statement?
     *
     * @return true if so
	 * 
     */

/**
     * Can a schema name be used in an index definition statement?
     *
     * @return true if so
     */

/**
     * Can a schema name be used in a privilege definition statement?
     *
     * @return true if so
	 * 
     */

/**
     * Can a catalog name be used in a data manipulation statement?
     *
     * @return true if so
	 * 
     */

/**
     * Can a catalog name be used in a procedure call statement?
     *
     * @return true if so
	 * 
     */

/**
     * Can a catalog name be used in a table definition statement?
     *
     * @return true if so
	 * 
     */

/**
     * Can a catalog name be used in an index definition statement?
     *
     * @return true if so
     */

/**
     * Can a catalog name be used in a privilege definition statement?
     *
     * @return true if so
     */

/**
     * Is positioned DELETE supported?
     *
     * @return true if so
     */

/**
     * Is positioned UPDATE supported?
     *
     * @return true if so
     */

/**
     * Added in JDBC 4.2.
     *
     * Derby does not support the Types.REF_CURSOR type.
     *
     * @return true if so
     */

/**
     * Is SELECT for UPDATE supported?
     *
     * @return true if so
     */

/**
     * Are stored procedure calls using the stored procedure escape
     * syntax supported?
     *
     * @return true if so
     */

/**
     * Are subqueries in comparison expressions supported?
     *
     * A JDBC-Compliant driver always returns true.
     *
     * @return true if so
     */

/**
     * Are subqueries in 'exists' expressions supported?
     *
     * A JDBC-Compliant driver always returns true.
     *
     * @return true if so
     */

/**
     * Are subqueries in 'in' statements supported?
     *
     * A JDBC-Compliant driver always returns true.
     *
     * @return true if so
     */

/**
     * Are subqueries in quantified expressions supported?
     *
     * A JDBC-Compliant driver always returns true.
     *
     * @return true if so
     */

/**
     * Are correlated subqueries supported?
     *
     * A JDBC-Compliant driver always returns true.
     *
     * @return true if so
     */

/**
     * Is SQL UNION supported?
     *
     * @return true if so
     */

/**
     * Is SQL UNION ALL supported?
     *
     * @return true if so
     */

/**
     * Can cursors remain open across commits?
     *
     * @return true if cursors always remain open; false if they might not remain open
     */

/**
     * Can cursors remain open across rollbacks?
     *
     * @return true if cursors always remain open; false if they might not remain open
     */

/**
     * Can statements remain open across commits?
     *
     * @return true if statements always remain open; false if they might not remain open
     */

/**
     * Can statements remain open across rollbacks?
     *
     * @return true if statements always remain open; false if they might not remain open
     */

/**
     * How many hex characters can you have in an inline binary literal?
     *
     * @return max literal length
     */

/**
     * What's the max length for a character literal?
     *
     * @return max literal length
     */

/**
     * What's the limit on column name length?
     *
     * @return max literal length
     */

/**
     * What's the maximum number of columns in a "GROUP BY" clause?
     *
     * @return max number of columns
     */

/**
     * What's the maximum number of columns allowed in an index?
     *
     * @return max columns
     */

/**
     * What's the maximum number of columns in an "ORDER BY" clause?
     *
     * @return max columns
     */

/**
     * What's the maximum number of columns in a "SELECT" list?
     *
     * we don't have a limit...
     *
     * @return max columns
     */

/**
     * What's the maximum number of columns in a table?
     *
     * @return max columns
     */

/**
     * How many active connections can we have at a time to this database?
     *
     * @return max connections
     */

/**
     * What's the maximum cursor name length?
     *
     * @return max cursor name length in bytes
     */

/**
     * What's the maximum length of an index (in bytes)?
     *
     * @return max index length in bytes
     */

/**
     * Added in JDBC 4.2.
     *
     * What's the maximum length of Derby LOB? This
     * is the maximum number of bytes in a LOB. We return the
     * default value of 0, which means "unknown". The maximum size
     * of a CLOB is a complicated because it depends on how many
     * bytes are needed to encode its string value on disk.
     *
     * @return max index length in bytes
     */

/**
     * What's the maximum length allowed for a schema name?
     *
     * @return max name length in bytes
     */

/**
     * What's the maximum length of a procedure name?
     *
     * @return max name length in bytes
     */

/**
     * What's the maximum length of a catalog name?
     *
     * @return max name length in bytes
     */

/**
     * What's the maximum length of a single row?
     *
     * @return max row size in bytes
     */

/**
     * Did getMaxRowSize() include LONGVARCHAR and LONGVARBINARY
     * blobs?
     *
     * @return true if so
     */

/**
     * What's the maximum length of a SQL statement?
     *
     * @return max length in bytes
     */

/**
     * How many active statements can we have open at one time to this
     * database?
     *
     * @return the maximum
     */

/**
     * What's the maximum length of a table name?
     *
     * @return max name length in bytes
     */

/**
     * What's the maximum number of tables in a SELECT?
     *
     * @return the maximum
     */

/**
     * What's the maximum length of a user name?
     *
     * @return max name length  in bytes
     */

/**
     * What's the database's default transaction isolation level?  The
     * values are defined in java.sql.Connection.
     *
     * @return the default isolation level
     *      */

/**
     * Are transactions supported? If not, commit is a noop and the
     * isolation level is TRANSACTION_NONE.
     *
     * @return true if transactions are supported
     */

/**
     * Does the database support the given transaction isolation level?
	 *
	 * DatabaseMetaData.supportsTransactionIsolation() should return false for
	 * isolation levels that are not supported even if a higher level can be
	 * substituted.
     *
     * @param level the values are defined in java.sql.Connection
     * @return true if so
     * 		*/

/**
     * Are both data definition and data manipulation statements
     * within a transaction supported?
     *
     * @return true if so
     */

/**
     * Are only data manipulation statements within a transaction
     * supported?
     *
     * @return true if so
     */

/**
     * Does a data definition statement within a transaction force the
     * transaction to commit?
     *
     * @return true if so
	 * 
     */

/**
     * Is a data definition statement within a transaction ignored?
     *
     * @return true if so
	 * 
     */

/**
	 * Get a description of stored procedures available in a
	 * catalog.  Same as getProcedures() above, except that
	 * the result set will conform to ODBC specifications.
	 */

/**
	 * Does the actual work for the getProcedures and getFunctions
	 * metadata calls.  See getProcedures() method above for parameter
	 * descriptions.
	 * @param queryName Name of the query to execute; is used
	 *	to determine whether the result set should conform to
	 *	JDBC or ODBC specifications.
	 */

/**
	 * Get a description of a catalog's stored procedure parameters
	 * and result columns.  Same as getProcedureColumns() above,
	 * except that the result set will conform to ODBC specifications.
	 */

/**
	 * Does the actual work for the getProcedureColumns metadata
	 * calls. See getProcedureColumns() method above for parameter
	 * descriptions.
	 * @param queryName Name of the query to execute; is used
	 *	to determine whether the result set should conform to
	 *	JDBC or ODBC specifications.
	 */

/**
     * Get the schema names available in this database.  The results
     * are ordered by schema name.
     *
     * The schema columns are:
     *  
     *  TABLE_SCHEM String =&gt; schema name
     *  TABLE_CATALOG String =&gt; catalog name
     *  (may be null)
     *  
     *
     * @return ResultSet - each row is a schema description
	 * @exception SQLException thrown on failure.
     */

/**
     * Get the catalog names available in this database.  The results
     * are ordered by catalog name.
     *
     * The catalog column is:
     *  
     *	TABLE_CAT String =&gt; catalog name
     *  
     *
     * @return ResultSet - each row has a single String column that is a
     * catalog name
	 * @exception SQLException thrown on failure.
     */

/**
     * Get the table types available in this database.  The results
     * are ordered by table type.
     *
     * The table type is:
     *  
     *	TABLE_TYPE String =&gt; table type.  Typical types are "TABLE",
     *			"VIEW",	"SYSTEM TABLE", "GLOBAL TEMPORARY",
     *			"LOCAL TEMPORARY", "ALIAS", "SYNONYM".
     *  
     *
     * @return ResultSet - each row has a single String column that is a
     * table type
	 * @exception SQLException thrown on failure.
     */

/**
	 * Get a description of table columns available in a catalog.
	 * Same as getColumns() above, except that the result set
	 * will conform to ODBC specifications.
	 */

/**
	 * Does the actual work for the getColumns metadata calls.
	 * See getColumns() method above for parameter descriptions.
	 * @param queryName Name of the query to execute; is used
	 *	to determine whether the result set should conform to
	 *	JDBC or ODBC specifications.
	 */

/**
	 * Get a description of a table's optimal set of columns that
	 * uniquely identifies a row. They are ordered by SCOPE.
	 * Same as getBestRowIdentifier() above, except that the result
	 * set will conform to ODBC specifications.
	 */

/**
	 * Does the actual work for the getBestRowIdentifier metadata
	 * calls.  See getBestRowIdentifier() method above for parameter
	 * descriptions.
	 * @param queryPrefix Prefix to be appended to the names of
	 *	the queries used in this method.  This is used
	 *	to determine whether the result set should conform to
	 *	JDBC or ODBC specifications.
	 */

/**
	 * Get a description of a table's columns that are automatically
	 * updated when any value in a row is updated.  They are
	 * unordered.  Same as getVersionColumns() above, except that
	 * the result set will conform to ODBC specifications.
	 */

/**
	 * Does the actual work for the getVersionColumns metadata
	 * calls.  See getVersionColumns() method above for parameter
	 * descriptions.
	 * @param queryName Name of the query to execute; is used
	 *	to determine whether the result set should conform to
	 *	JDBC or ODBC specifications.
	 */

/**
     * check if the dictionary is at the same version as the engine. If not, 
     * then that means stored versions of the JDBC database metadata queries
     * may not be compatible with this version of the software.
     * This can happen if we are in soft upgrade mode. Since in soft upgrade 
     * mode, we can't change these stored metadata queries in a backward 
     * incompatible way, engine needs to read the metadata sql from 
     * metadata.properties or metadata_net.properties file rather than
     * rely on system tables.
     * 
     * @return true if we are not in soft upgrade mode
     *      */

/**
     * Get a description of a table's primary key columns.  They
     * are ordered by COLUMN_NAME.
     *
     * Each primary key column description has the following columns:
     *  
     *	TABLE_CAT String =&gt; table catalog (may be null)
     *	TABLE_SCHEM String =&gt; table schema (may be null)
     *	TABLE_NAME String =&gt; table name
     *	COLUMN_NAME String =&gt; column name
     *	KEY_SEQ short =&gt; sequence number within primary key
     *	PK_NAME String =&gt; primary key name (may be null)
     *  
     *
     * @param catalog a catalog name; "" retrieves those without a
     * catalog; null means drop catalog name from the selection criteria
     * @param schema a schema name pattern; "" retrieves those
     * without a schema
     * @param table a table name
     * @return ResultSet - each row is a primary key column description
	 * @exception SQLException thrown on failure.
     */

/**
     * In contrast to the JDBC version of getCrossReference, this
     * method allows null values for table names.
     */

/**
	 * Get a description of all the standard SQL types supported by
	 * this database. They are ordered by DATA_TYPE and then by how
	 * closely the data type maps to the corresponding JDBC SQL type.
	 * Same as getTypeInfo above, except that the result set will
	 * conform to ODBC specifications.
	 */

/**
     * Get a description of the standard SQL types supported by this database.
     *
     * @param queryName the name of the query that fetches the information
     * @return a result set with SQL type description
     */

/**
	 * Get a description of a table's indices and statistics. They are
	 * ordered by NON_UNIQUE, TYPE, INDEX_NAME, and ORDINAL_POSITION.
	 * Same as getIndexInfo above, except that the result set will
	 * conform to ODBC specifications.
	 */

/**
	 * Does the actual work for the getIndexInfo metadata
	 * calls.  See getIndexInfo() method above for parameter
	 * descriptions.
	 * @param queryName Name of the query to execute; is used
	 *	to determine whether the result set should conform to
	 *	JDBC or ODBC specifications.
	 */

/**
     * JDBC 2.0
     *
     * Does the database support the given result set type?
     *
     * @param type defined in java.sql.ResultSet
     * @return true if so 
     *      */

/**
     * JDBC 2.0
     *
     * Does the database support the concurrency type in combination
     * with the given result set type?
     *
     * @param type defined in java.sql.ResultSet
     * @param concurrency type defined in java.sql.ResultSet
     * @return true if so 
     *      */

/**
     * JDBC 2.0
     *
     * Determine whether a result set's updates are visible.
     *
     * @param type result set type, i.e. ResultSet.TYPE_XXX
     * @return true if updates are visible for the result set type
     */

/**
     * JDBC 2.0
     *
     * Determine whether a result set's deletes are visible.
     *
     * @param type result set type, i.e. ResultSet.TYPE_XXX
     * @return true if deletes are visible for the result set type
     */

/**
      * JDBC 2.0
      *
      * Determine whether a result set's inserts are visible.
      *
      * @param type result set type, i.e. ResultSet.TYPE_XXX
      * @return true if inserts are visible for the result set type
      */

/**
       * JDBC 2.0
       *
       * Determine whether updates made by others are visible.
       *
       * @param type result set type, i.e. ResultSet.TYPE_XXX
       * @return true if updates are visible for the result set type
       */

/**
     * JDBC 2.0
     *
     * Determine whether deletes made by others are visible.
     *
     * @param type result set type, i.e. ResultSet.TYPE_XXX
     * @return true if deletes are visible for the result set type
     */

/**
     * JDBC 2.0
     *
     * Determine whether inserts made by others are visible.
     *
     * @param type result set type, i.e. ResultSet.TYPE_XXX
     * @return true if inserts are visible for the result set type
     */

/**
     * JDBC 2.0
     *
     * Determine whether or not a visible row update can be detected by 
     * calling ResultSet.rowUpdated().
     *
     * @param type result set type, i.e. ResultSet.TYPE_XXX
     * @return true if updates are detected by the resultset type
     */

/**
     * JDBC 2.0
     *
     * Determine whether or not a visible row delete can be detected by
     * calling ResultSet.rowDeleted().  If deletesAreDetected()
     * returns false, then deleted rows are removed from the result set.
     *
     * @param type result set type, i.e. ResultSet.TYPE_XXX
     * @return true if deletes are detected by the resultset type
     */

/**
     * JDBC 2.0
     *
     * Determine whether or not a visible row insert can be detected
     * by calling ResultSet.rowInserted().
     *
     * @param type result set type, i.e. ResultSet.TYPE_XXX
     * @return true if inserts are detected by the resultset type
     */

/**
     * JDBC 2.0
     *
     * Return true if the driver supports batch updates, else return false.
     *
     */

/**
     * JDBC 2.0
     *
     * Return the connection that produced this metadata object.
     *
     */

/**
    Following methods are for the new JDBC 3.0 methods in java.sql.DatabaseMetaData
    (see the JDBC 3.0 spec). We have the JDBC 3.0 methods in Local20
    package, so we don't have to have a new class in Local30.
    The new JDBC 3.0 methods don't make use of any new JDBC3.0 classes and
    so this will work fine in jdbc2.0 configuration.
	*/

/**
    * JDBC 3.0
    *
    * Retrieves whether this database supports statement pooling.
    *
    * @return true if statement pooling is supported; false otherwise
	*/

/**
    * JDBC 3.0
    *
    * Retrieves whether this database supports savepoints.
    *
    * @return true if savepoints are supported; false otherwise
	*/

/**
    * JDBC 3.0
    *
    * Retrieves whether this database supports named parameters to callable statements.
    *
    * @return true if named parameters are supported; false otherwise
	*/

/**
    * JDBC 3.0
    *
    * Retrieves whether it is possible to have multiple ResultSet objects returned from a
    * CallableStatement object simultaneously.
    *
    * @return true if a CallableStatement object can return multiple ResultSet objects
    * simultaneously; false otherwise
	*/

/**
    * JDBC 3.0
    *
    * Retrieves whether auto-generated keys can be retrieved after a statement
    * has been executed.
    *
    * @return true if auto-generated keys can be retrieved after a statement has
    * executed; false otherwise
	*/

/**
    * JDBC 3.0
    *
    * Retrieves whether this database supports the given result set holdability.
    *
    * @param holdability - one of the following constants:
    * ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT
    * @return true if so; false otherwise
    * executed; false otherwise
	*/

/**
    * JDBC 3.0
    *
    * Retrieves the default holdability of this ResultSet object.
    *
    * @return the default holdability which is ResultSet.HOLD_CURSORS_OVER_COMMIT
	*/

/**
    * JDBC 3.0
    *
    * Retrieves the major version number of the underlying database.
    *
    * @return the underlying database's major version
	*/

/**
    * JDBC 3.0
    *
    * Retrieves the minor version number of the underlying database.
    *
    * @return the underlying database's minor version
	*/

/**
    * JDBC 3.0
    *
    * Retrieves the major JDBC version number for this driver.
    *
    * @return JDBC version major number
	*/

/**
    * JDBC 3.0
    *
    * Retrieves the minor JDBC version number for this driver.
    *
    * @return JDBC version minor number
	*/

/**
    * JDBC 3.0
    *
    * Indicates whether the SQLSTATEs returned by SQLException.getSQLState
    * is X/Open (now known as Open Group) SQL CLI or SQL99.
    *
    * @return the type of SQLSTATEs, one of: sqlStateXOpen or sqlStateSQL99
	*/

/**
    * JDBC 3.0
    *
    * Indicates whether updates made to a LOB are made on a copy or
    * directly to the LOB.
    * 
    * For the embedded driver, all updates will be made to a copy.
    * Hence, this call will always return true
    *
    * @return true if updates are made to a copy of the LOB; false if
    * updates are made directly to the LOB
    * @exception SQLException Feature not implemented for now.
	*/

/**
    * JDBC 3.0
    *
    * Retrieves a description of the user-defined type (UDT) hierarchies defined
    * in a particular schema in this database. Only the immediate super type/ sub type
    * relationship is modeled.
    *
    * @param catalog - a catalog name; "" retrieves those without a catalog;
    * null means drop catalog name from the selection criteria
    * @param schemaPattern - a schema name pattern; "" retrieves those without a schema
    * @param typeNamePattern - a UDT name pattern; may be a fully-qualified name
    * @return a ResultSet object in which a row gives information about the designated UDT
    * @exception SQLException Feature not implemented for now.
	*/

/**
    * JDBC 3.0
    *
    * Retrieves a description of the table hierarchies defined in a particular
    * schema in this database.
    *
    * @param catalog - a catalog name; "" retrieves those without a catalog;
    * null means drop catalog name from the selection criteria
    * @param schemaPattern - a schema name pattern; "" retrieves those without a schema
    * @param typeNamePattern - a UDT name pattern; may be a fully-qualified name
    * @return a ResultSet object in which each row is a type description
    * @exception SQLException if a database access error occurs
	*/

/**
    * JDBC 3.0
    *
    * Retrieves a description of the given attribute of the given type for a
    * user-defined type (UDT) that is available in the given schema and catalog.
    *
    * @param catalog - a catalog name; must match the catalog name as it is
    * stored in the database; "" retrieves those without a catalog; null means that
    * the catalog name should not be used to narrow the search
    * @param schemaPattern - a schema name pattern; "" retrieves those without a schema;
    * null means that the schema name should not be used to narrow the search
    * @param typeNamePattern - a type name pattern; must match the type name as it is
    * stored in the database
    * @param attributeNamePattern - an attribute name pattern; must match the attribute
    * name as it is declared in the database
    * @return a ResultSet object in which each row is a type description
    * @exception SQLException if a database access error occurs.
	*/

/**
     * JDBC 4.0
     *
     * Returns a list of the client info properties supported by
     * the driver. The result set contains the following columns:
     *
     * 
     * 
     *  NAME String=&gt; The name of the client info property.
     *  MAX_LEN int=&gt; The maximum length of the value for the
     *      property.
     *  DEFAULT_VALUE String=&gt; The default value of the property.
     *  DESCRIPTION String=&gt; A description of the property.
     * 
     *
     * The ResultSet is sorted by the NAME column.
     *
     * @return A ResultSet object; each row is a
     * supported client info property
     * @exception SQLException if an error occurs
     */

/**
     * JDBC 4.0
     *
     * Get the schema names available in this database. The results
     * are ordered by schema name.
     *
     * The schema columns are:
     *  
     *  TABLE_SCHEM String =&gt; schema name
     *  TABLE_CATALOG String =&gt; catalog name
     *  (may be null)
     *  
     *
     * @param catalog catalog name used to narrow down the search; ""
     * means no catalog, null means any catalog
     * @param schemaPattern schema name used to narrow down the
     * search, null means schema name should not be used
     * to narrow down search
     * @return a ResultSet object in which each row is a
     * schema description
     * @exception SQLException if a database error occurs
     */

/**
     * Returns whether or not all open {@code ResultSet}s on a {@code
     * Connection} are closed if an error occurs when auto-commit in enabled.
     *
     * @return {@code true}, since the embedded driver will close the open
     * {@code ResultSet}s
     */

/**
     * Returns whether or not this instance implements the specified interface.
     *
     * @param iface the interface to check for
     * @return true if this implements the interface
     */

/**
     * Returns {@code this} if this class implements the interface.
     *
     * @param iface the interface
     * @return an object that implements the interface
     *      * interface
     */

/** See DatabaseMetaData javadoc */

/**
    * See DatabaseMetaData javadoc. Empty ResultSet because Derby does
    * not support pseudo columns.
	*/

/**
     * Get metadata that the client driver will cache. The metadata is
     * fetched using SYSIBM.METADATA (found in metadata_net.properties).
     *
     * @return the result set returned by SYSIBM.METADATA
     * @exception SQLException if a database error occurs
     */

/**
     * Execute a query in metadata.properties (or SPS in the SYS
     * schema) or metadata_net.properties (or SPS in the SYSIBM
     * schema).
     *
     * @param nameKey the name of the query
     * @param net if true, execute a query in
     * metadata_net.properties; otherwise, execute a query in
     * metadata.properties
     * @return a ResultSet value
     * @exception SQLException if a database error occurs
     */

/**
     * Execute a query in metadata.properties, or an SPS in the SYS
     * schema.
     *
     * @param nameKey the name of the query
     * @return a ResultSet value
     * @exception SQLException if a database error occurs
     */

/**
     * Get a stored prepared statement from the system tables.
     *
     * @param nameKey the name of the query
     * @param net if true, find query in SYSIBM schema;
     * otherwise, find query in SYS schema
     * @return a PreparedStatement value
     * @exception SQLException if a database error occurs
     */

/**
     * Get a prepared query from system tables or metadata.properties.
     *
     * @param queryName name of the query
     * @return a PreparedStatement value
     * @exception SQLException if a database error occurs
     */

/**
	  *	Gets the LanguageConnectionContext for this connection.
	  *
	  *	@return	the lcc for this connection
	  *
	  */

/**
     * Loads the query descriptions from metadata.properties and
     * metadata_net.properties into queryDescriptions and
     * queryDescriptions_net.
     */

/**
	 * Performs a privileged action. Reads the query descriptions.
	 *
	 * @return null
	 */

