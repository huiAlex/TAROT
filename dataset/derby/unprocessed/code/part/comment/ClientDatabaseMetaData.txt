/** The JDBC major version supported by the server. */

/** The JDBC minor version supported by the server. */

/** True if the server supports QRYCLSIMP. */

/**
     * True if the server supports session data caching
     */

/** True if the server supports UDTs */

/**
     * True if the server supports aborting a statement whilst transferring
     * EXTDTA objects. Note that there are two types of aborts, depending on
     * whether an object is being transferred to the server using DDM layer B
     * streaming or not.
     */

/** True if the server supports nanoseconds in timestamps */

/** True if the server supports boolean values */

/**
     * DERBY-4805(Increase the length of the RDBNAM field in the DRDA 
     *   implementation)  
     * True if the server supports RDBNAM longer than 255 character
     */

/**
     * True if the server supports transport of boolean parameter values as
     * booleans. If false, boolean values used as parameters in prepared
     * statements will be transported as smallints to preserve backwards
     * compatibility. See DERBY-4965.
     */

/** 
     * Untraced version of getFunctions(String, String, String).
     * @param catalog limit search to this catalog
     * @param schemaPattern limit search to schemas matching this pattern
     * @param functionNamePattern limit search to functions matching this 
     * pattern
     * @return a ResultSet listing the fucntions
     * @exception SqlException if a database error occurs
     *      */

/** 
     * Untraced version of getFunctionColumns(String, String,
     * String, String).
     * @param catalog limit search to this catalog
     * @param schemaPattern limit search to schemas matching this pattern
     * @param functionNamePattern limit search to functions matching this 
     * pattern
     * @param parameterNamePattern limit search to parameters mathing
     * this pattern
     * @return a ResultSet listing the fucntions
     * @exception SqlException if a database error occurs
     *      */

/**
     * Check whether the server has full support for the QRYCLSIMP
     * parameter in OPNQRY.
     *
     * @return true if QRYCLSIMP is fully supported
     */

/**
     * Check if server supports session data caching
     * @return true if the server supports this
     */

/**
     * Check if server supports UDTs
     * @return true if the server supports this
     */

/**
     * Check if server supports nanoseconds in timestamps
     * @return true if the server supports this
     */

/**
     * Check if server supports product specific EXTDTA abort protocol.
     * @return {@code true} if the server supports this.
     */

/**
     * Check if server supports boolean values
     * @return true if the server supports this
     */

/**
     * Check if the server accepts receiving booleans as parameter values.
     * @return true if the server supports this
     */

/**
     * Retrieves whether this database supports invoking user-defined
     * or vendor functions using the stored procedure escape syntax.
     *
     * @return true, since Derby supports the escape syntax
     * @exception SQLException if a database access error occurs
     */

/**
     * Retrieves whether an SQLException will cause all
     * open ResultSets to be closed when auto-commit is
     * true.
     *
     * @return false, since Derby does not close all open
     * result sets when an error occurs
     * @exception SQLException if a database access error occurs
     */

/**
     * Get the schema names available in this database. The results
     * are ordered by schema name.
     *
     * The schema columns are:
     *  
     *  TABLE_SCHEM String =&gt; schema name
     *  TABLE_CATALOG String =&gt; catalog name
     *  (may be null)
     *  
     *
     * @param catalog catalog name used to narrow down the search; ""
     * means no catalog, null means any catalog
     * @param schemaPattern schema name used to narrow down the
     * search, null means schema name should not be used
     * to narrow down search
     * @return a ResultSet object in which each row is a
     * schema description
     * @exception SQLException if a database error occurs
     */

/**
     * Untraced version of getSchemas(String, String).
     *
     * @param catalog catalog name
     * @param schemaPattern pattern for schema name
     * @return a ResultSet value
     * @exception SqlException if a database error occurs
     *      */

/**
     * Returns a list of the client info properties supported by the
     * driver. The result set contains the following columns:
     *
     * 
     * 
     *  NAME String=&gt; The name of the client info property.
     *  MAX_LEN int=&gt; The maximum length of the value for the
     *      property.
     *  DEFAULT_VALUE String=&gt; The default value of the property.
     *  DESCRIPTION String=&gt; A description of the property.
     * 
     *
     * The ResultSet is sorted by the NAME column.
     *
     * @return A ResultSet object; each row is a
     * supported client info property
     * @exception SQLException if an error occurs
     */

/**
     * Untraced version of getClientInfoProperties().
     * Returns an empty ResultSet with the correct column
     * names.
     *
     * @return a ResultSet value
     * @exception SqlException if a database error occurs
     *      */

/**
     * Indicates whether or not this data source supports the SQL
     * ROWID type. Since Derby does not support the
     * ROWID type, return ROWID_UNSUPPORTED.
     *
     * @return ROWID_UNSUPPORTED
     * @exception SQLException if a database access error occurs
     */

/**
     * Returns false unless interfaces is implemented
     *
     * @param  interfaces             a Class defining an interface.
     * @return true                   if this implements the interface or
     *                                directly or indirectly wraps an object
     *                                that does.
     *      *                                whether this is a wrapper for an object
     *                                with the given interface.
     */

/**
     * Returns this if this class implements the interface
     *
     * @param  interfaces a Class defining an interface
     * @return an object that implements the interface
     *      * interface
     */

/** See DatabaseMetaData javadoc */

/** See DatabaseMetaData javadoc */

/** Derby does not support the Types.REF_CURSOR type. */

/** 
     * A "public" version of checkForClosedConnection() that throws
     * SQLException instead of SqlException.  In particular this is used
     * by all the DatabaseMetadata methods
     */

/**
     * Checks whether the server supports a JDBC version. If the
     * server does not support the JDBC version, an exception is
     * thrown.
     *
     * @param method name of the method for which support is needed on
     * the server (used in exception message)
     * @param major minimum JDBC major version
     * @param minor minimum JDBC minor version if major version matches
     * @exception SqlException if the server does not support the
     * specified JDBC version
     */

