/**
	A locking policy that implements row level locking with isolation degree 3.

	*/

/**
     * Get type of lock to get while reading data.
     * 
     * This routine is provided so that class's like RowLockingRR can
     * override just this routine to get RS2 locks vs RS3 locks, and still
     * reuse all the other code in this class.
     * 
     *
	 * @return The lock type of a shared lock for this locking policy.
     **/

/**
     * Get type of lock to get while requesting "update" lock.
     * 
     * This routine is provided so that class's like RowLockingRR can
     * override just this routine to get RU2 locks vs RU3 locks, and still
     * reuse all the other code in this class.
     * 
     *
	 * @return The lock type of a shared lock for this locking policy.
     **/

/**
     * Get type of lock to get while writing data.
     * 
     * This routine is provided so that class's like RowLockingRR can
     * override just this routine to get RX2 locks vs RX3 locks, and still
     * reuse all the other code in this class.
     * 
     *
	 * @return The lock type of a shared lock for this locking policy.
     **/

/**
     * Obtain container level intent lock.
     * 
     * This implementation of row locking is 2 level, ie. table and row locking.
     * It will interact correctly with tables opened with ContainerLocking3
     * locking mode.
     * 
     * Updater's will get table level IX locks, and X row locks.
     * 
     * Reader's will get table level IS locks, and S row locks.
     *
     * @param t            Transaction to associate lock with.
     * @param container    Container to lock.
     * @param waitForLock  Should lock request wait until granted?
     * @param forUpdate    Should container be locked for update, or read?
     *
     * @return true if the lock was obtained, false if it wasn't. 
     *   False should only be returned if the waitForLock policy was set to
     *  "false," and the lock was unavailable.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Obtain lock on record being read.
     * 
     * Assumes that a table level IS has been acquired.  Will acquire a Shared
     * or Update lock on the row, depending on the "forUpdate" parameter.
     * 
     *
     * @param t             The transaction to associate the lock with.
     * @param record        The record to be locked.
     * @param waitForLock   Should lock request wait until granted?
     * @param forUpdate     Whether to open for read or write access.
     *
     * @return true if the lock was granted, false if waitForLock was false 
     *              and the lock could not be granted.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Obtain lock on record being written.
     * 
     * Assumes that a table level IX has been acquired.  Will acquire an
     * Exclusive (X) lock on the row.
     * 
     *
     * @param t                        transaction to associate the lock with.
     * @param record                   The record to be locked.
     * @param lockForInsertPreviousKey Lock is for a previous key of a insert.
     * @param waitForLock              Should lock request wait until granted?
     *
     * @return true if the lock was granted, false if waitForLock was false 
     *              and the lock could not be granted.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Obtain lock on record being written.
     * 
     * Assumes that a table level IX has been acquired.  Will acquire an
     * Exclusive (X) lock on the row.
     * 
     *
     * @param t             The transaction to associate the lock with.
     * @param record        The record to be locked.
     * @param lockForInsert Lock is for an insert.
     * @param waitForLock   Should lock request wait until granted?
     *
     * @return true if the lock was granted, false if waitForLock was false 
     *              and the lock could not be granted.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

