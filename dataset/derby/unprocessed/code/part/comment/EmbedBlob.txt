/**
     * Tells whether the Blob has been materialized or not.
     * 
     * Materialization happens when the Blob is updated by the user. A
     * materialized Blob is represented either in memory or in a temporary file
     * on disk, depending on size.
     * 
     * A Blob that has not been materialized is represented by a stream into the
     * Derby store, and is read-only.
     */

/**
     * The underlying positionable store stream, if any.
     * 
     * If {@link #materialized} is {@code true}, the stream is {@code null}.
     */

/**
     * Locator value for this Blob, used as a handle by the client driver to
     * map operations to the correct Blob on the server side.
     *
     *      */

/**
     * Length of the stream representing the Blob.
     * 
     * Set to -1 when the stream has been {@link #materialized} or
     * the length of the stream is not currently known.
     */

/**
     * Position offset for the stream representing the Blob, if any.
     * 
     * This offset accounts for the bytes encoding the stream length at the
     * head of the stream. Data byte {@code pos} is at
     * {@code pos + streamPositionOffset} in the underlying stream.
     * Set to {@code Integer.MIN_VALUE} if the Blob isn't represented by a
     * store stream.
     */

/**
     * This constructor is used to create a empty Blob object. It is used by the
     * Connection interface method createBlob().
     * 
     * @param blobBytes A byte array containing the data to be stores in the 
     *        Blob.
     *
     * @param con The EmbedConnection object associated with this Blob object.
     *
     */

/**
     * Constructs a Blob object on top of a stream.
     *
     * @param dvdStream the source stream
     * @param con the connection owning the Blob
     * @return The offset into the stream where the user data begins (used if
     *      resetting the stream).
     *      *      data to temporary storage fails
     */

/**
     * Reads one byte from the Blob at the specified position.
     * 
     * Depending on the representation, this might result in a read from a byte
     * array, a temporary file on disk or from a Derby store stream.
     *
     * @return the byte at the current position, or -1 if end of file has been
     * reached
     *      *      fails
     */

/**
   * Returns the number of bytes in the BLOB value
   * designated by this Blob object.
   * @return length of the BLOB in bytes
   * @exception SQLException if there is an error accessing the
   * length of the BLOB
   */

/**
   * Retrieves the BLOB designated by this
   * Blob instance as a stream.
   * @return a stream containing the BLOB data
   * @exception SQLException if there is an error accessing the
   * BLOB
   */

/**
   * Determines the byte position at which the specified byte
   * pattern begins within the BLOB
   * value that this Blob object represents.  The
   * search for pattern. begins at position
   * start
   * @param pattern the byte array for which to search
   * @param start the position at which to begin searching; the
   *        first position is 1
   * @return the position at which the pattern appears, else -1.
   * @exception SQLException if there is an error accessing the
   * BLOB
   */

/**
     * Checks if the pattern (starting from the second byte) appears inside
     * the Blob content.
     * 
     * At this point, the first byte of the pattern must already have been
     * matched, and {@code pos} must be pointing at the second byte to compare.
     *
     * @param pattern the byte array to search for, passed in by the user
     * @param pos the position in the Blob content to start searching from
     * @return {@code true} if a match is found, {@code false} if not.
     */

/**
   * Determines the byte position in the BLOB value
   * designated by this Blob object at which
   * pattern begins.  The search begins at position
   * start.
   * @param pattern the Blob object designating
   * the BLOB value for which to search
   * @param start the position in the BLOB value
   *        at which to begin searching; the first position is 1
   * @return the position at which the pattern begins, else -1
   * @exception SQLException if there is an error accessing the
   * BLOB
   */

/**
     * Checks if the pattern (starting from the second byte) appears inside
     * the Blob content.
     *
     * @param pattern the Blob to search for, passed in by the user
     * @param pos the position in the Blob (this) content to start searching
     * @return {@code true} if a match is found, {@code false} if not.
     */

/**
    Following methods are for the new JDBC 3.0 methods in java.sql.Blob
    (see the JDBC 3.0 spec). We have the JDBC 3.0 methods in Local20
    package, so we don't have to have a new class in Local30.
    The new JDBC 3.0 methods don't make use of any new JDBC3.0 classes and
    so this will work fine in jdbc2.0 configuration.
	*/

/**
     * Writes the given array of bytes to the BLOB value that this Blob object
     * represents, starting at position pos, and returns the number of bytes
     * written.
     *
     * @param pos the position in the BLOB object at which to start writing
     * @param bytes the array of bytes to be written to the BLOB value that this
     *       Blob object represents
     * @return The number of bytes written to the BLOB.
     *      * 	 */

/**
     * Writes all or part of the given array of byte array to the BLOB value
     * that this Blob object represents and returns the number of bytes written.
     * Writing starts at position pos in the BLOB value; len bytes from the
     * given byte array are written.
     *
     * @param pos the position in the BLOB object at which to start writing
     * @param bytes the array of bytes to be written to the BLOB value that this
     *       Blob object represents
     * @param offset the offset into the byte array at which to start reading
     *       the bytes to be written
     * @param len the number of bytes to be written to the BLOB value from the
     *       array of bytes bytes
     * @return The number of bytes written to the BLOB.
     *      *      *       {@code bytes.length - offset}
     * 	 */

/**
    * JDBC 3.0
    *
    * Retrieves a stream that can be used to write to the BLOB value that this
    * Blob object represents. The stream begins at position pos. 
    *
    * @param pos - the position in the BLOB object at which to start writing
    * @return a java.io.OutputStream object to which data can be written 
    * @exception SQLException Feature not implemented for now.
	*/

/**
    * JDBC 3.0
    *
    * Truncates the BLOB value that this Blob object represents to be len bytes
    * in length.
    *
    * @param len - the length, in bytes, to which the BLOB value that this Blob
    * object represents should be truncated
    * @exception SQLException Feature not implemented for now.
	*/

/**
     * This method frees the Blob object and releases the resources that 
     * it holds. The object is invalid once the free
     * method is called. If free is called multiple times, the subsequent
     * calls to free are treated as a no-op.
     * 
     *      * the Blob's resources
     */

/**
     * Returns an InputStream object that contains a partial 
     * Blob value, starting with the byte specified by pos, 
     * which is length bytes in length.
     *
     * @param pos the offset to the first byte of the partial value to be 
     *      retrieved. The first byte in the Blob is at 
     *      position 1
     * @param length the length in bytes of the partial value to be retrieved
     * @return through which the partial Blob value can be read. 
     *      *      the number of bytes in the {@code Blob} or if {@code pos + length}
     *      is greater than {@code Blob.length() +1}
     */

/**
     * Returns if blob data is stored locally (using LOBStreamControl).
     * @return true if materialized else false
     */

/**
     * Return locator for this lob.
     * 
     * @return The locator identifying this lob.
     */

