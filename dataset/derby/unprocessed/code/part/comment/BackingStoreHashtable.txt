/**************************************************************************
     * Fields of the class
     **************************************************************************
     */

/**
     * The estimated number of bytes used by ArrayList(0)
     */

/**************************************************************************
     * Constructors for This class:
     **************************************************************************
     */

/**
     * Return true if we should include RowLocations with the rows
     * stored in this hash table.
     */

/**************************************************************************
     * Private/Protected methods of This class:
     **************************************************************************
     */

/**
	 * Call method to either get next row or next row with non-null
	 * key columns. Currently, RowLocation information is not included in
     * rows siphoned out of a RowSource. That functionality is only supported
     * if the rows come from the scan of a base table.
	 *
     *
	 * @exception  StandardException  Standard exception policy.
	 */

/**
     * Return a cloned copy of the row.
     *
	 * @return The cloned row row to use.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Return a shallow cloned row
     *
     * @return The cloned row row to use.
     *
     * @exception  StandardException  Standard exception policy.
     **/

/**
     * Do the work to add one row to the hash table.
     * 
     *
     * @param columnValues               Row to add to the hash table.
     * @param rowLocation   Location of row in conglomerate; could be null.
     * @param needsToClone      If the row needs to be cloned
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Determine whether a new row should be spilled to disk and, if so, do it.
     *
     * @param columnValues  Actual columns from source row.
     * @param rowLocation       Optional row location.
     *
     * @return true if the row was spilled to disk, false if not
     *
     * @exception  StandardException  Standard exception policy.
     */

/**
     * 
     * Make a full set of columns from an object which is either already
     * an array of column or otherwise a LocatedRow. The full set of columns
     * is what's stored on disk when we spill to disk. This is the inverse of
     * makeInMemoryRow().
     * 
     */

/**
     * 
     * Turn a list of disk rows into a list of in-memory rows. The on disk
     * rows are always of type DataValueDescriptor[]. But the in-memory rows
     * could be of type LocatedRow.
     * 
     */

/**
     * 
     * Make an in-memory row from an on-disk row. This is the inverse
     * of makeDiskRow().
     * 
     */

/**
     * 
     * Construct a full set of columns, which may need to end
     * with the row location.The full set of columns is what's
     * stored on disk when we spill to disk.
     * 
     */

/**
     * Take a value which will go into the hash table and return an estimate
     * of how much memory that value will consume. The hash value could
     * be either an array of columns or a LocatedRow.
     * 
     * @param hashValue The object for which we want to know the memory usage.
     * @return A guess as to how much memory the current hash value will
     *  use.
     */

/**************************************************************************
     * Public Methods of This class:
     **************************************************************************
     */

/**
     * Close the BackingStoreHashtable.
     * 
     * Perform any necessary cleanup after finishing with the hashtable.  Will
     * deallocate/dereference objects as necessary.  If the table has gone
     * to disk this will drop any on disk files used to support the hash table.
     * 
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Return runtime stats to caller by adding them to prop.
     * 
     *
     * @param prop   The set of properties to append to.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * remove a row from the hash table.
     * 
     * a remove of a duplicate removes the entire duplicate list.
     *
     * @param key          The key of the row to remove.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Set the auxillary runtime stats.
     * 
     * getRuntimeStats() will return both the auxillary stats and any
     * BackingStoreHashtable() specific stats.  Note that each call to
     * setAuxillaryRuntimeStats() overwrites the Property set that was
     * set previously.
     *
     * @param prop   The set of properties to append from.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Return number of unique rows in the hash table.
     * 
     *
	 * @return The number of unique rows in the hash table.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * List of {@code DataValueDescriptor[]} instances that represent rows.
     * This class is used when the hash table contains multiple rows for the
     * same hash key.
     */

