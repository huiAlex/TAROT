/**
     * This boolean variable indicates whether the Lob object has been
     * invalidated by calling free() on it
     */

/**
     * This integer identifies which transaction the Lob is associated with
     */

/**
     * Return the length of the Lob value represented by this Lob
     * object.  If length is not already known, and Lob is locator
     * based, length will be retrieved from the server.  If not,
     * locator based, Lob will first be materialized.  NOTE: The
     * caller needs to deal with synchronization.
     *
     *      *         or if Layer B streaming is used and length not yet obtained.
     * @return length of Lob value
     */

/**
     * Update the registered length of the Lob value.  To be called by
     * methods that make changes to the length of the Lob.
     * NOTE: The caller needs to deal with synchronization.
     *
     * @param length the new length of the Lob value
     */

/**
     * Get the length of locator based Lob from the server.  This is a
     * dummy implementation that is supposed to be overridden by
     * subclasses.  A stored procedure call will be made to get the
     * length from the server.
     * 
     * @return length of Lob
     */

/**
     * Method to be implemented by subclasses, so that
     * #materializedStream(InputStream, String) can be called with subclass
     * specific parameters and the result assigned to the right stream.
     *
     *      */

/**
     * Materialize the given stream into memory and update the internal
     * length variable.
     *
     * @param is stream to use for input
     * @param typeDesc description of the data type we are inserting,
     *      for instance java.sql.Clob
     * @return a stream whose source is the materialized data
     *      *      while reading from the stream
     */

/**
     * Check whether this Lob is based on a locator
     * @return true if Lob is based on locator, false otherwise
     */

/**
     * Get locator for this Lob
     * @return locator for this Lob, INVALID_LOCATOR if Lob is not
     *         based on locator
     */

/**
     * Checks the pos and length.
     *
     * @param pos a long that contains the position that needs to be checked
     * @param length a long that contains the length that needs to be checked
     *      *         a) pos &lt;= 0
     *         b) pos &gt; (length of LOB)
     *         c) length &lt; 0
     *         d) (pos -1) + length &gt; (length of LOB)
     */

/**
     * Increments and returns the new updateCount 
     * of this Lob. The method needs to be 
     * synchronized since multiple updates can 
     * happen on this Lob simultaneously. 
     * It will be called from the
     * 1) Locator Writers
     * 2) Locator OutputStreams
     * 3) From the update methods
     *    within the Lobs like setString, truncate.
     * since all of the above acesses are inside
     * the am package, this method will have
     * default access. We do not need to worry
     * about the non-locator streams since
     * non-locator InputStreams would not
     * depend on updateCount for invalidation
     */

/**
     * Returns the current updateCount of the Clob.
     */

/**
     * Calls SqlLength() to check if the Locator associated
     * with the underlying Lob is valid. If it is not
     * it throws an exception.
     *
     *      * 
     */

/**
     * Checks if isValid is true and whether the transaction that
     * created the Lob is still active. If any of which is not true throws
     * a SQLException stating that a method has been called on
     * an invalid LOB object.
     *
     *      * created the Lob is not active
     */

