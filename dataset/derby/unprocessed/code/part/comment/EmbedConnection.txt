/**
     * Static exception to be thrown when a Connection request can not
     * be fulfilled due to lack of memory. A static exception as the lack
     * of memory would most likely cause another OutOfMemoryException and
     * if there is not enough memory to create the OOME exception then something
     * like the VM dying could occur. Simpler just to throw a static.
     */

/**
     * Low memory state object for connection requests.
     */

/**
     * Map to keep track of all the lobs associated with this
     * connection. These lobs will be cleared after the transaction
     * is no longer valid or when connection is closed
     */

/**	
		Factory for JDBC objects to be created.
	*/

/**
		The Connection object the application is using when accessing the
		database through this connection. In most cases this will be equal
		to this. When Connection pooling is being used, then it will
		be set to the Connection object handed to the application.
		It is used for the getConnection() methods of various JDBC objects.
	*/

/**
		An increasing counter to assign to a ResultSet on its creation.
		Used for ordering ResultSets returned from a procedure, always
		returned in order of their creation. Is maintained at the root connection.
	*/

/** Cached string representation of the connection id */

/**
     * Check that a database has already been booted. Throws an exception 
     * otherwise
     *
     * @param database The database that should have been booted
     * @param operation The operation that requires that the database has 
     * already been booted, used in the exception message if not booted
     * @param dbname The name of the database that should have been booted, 
     * used in the exception message if not booted
     *      */

/**
	  Examine the attributes set provided for illegal boot
	  combinations and determine if this is a create boot.

	  @return true iff the attribute create=true is provided. This
	  means create a standard database.  In other cases, returns
	  false.

	  @param p the attribute set.

	  @exception SQLException Throw if more than one of
	  create, createFrom, restoreFrom and
	  rollForwardRecoveryFrom is used simultaneously. 

	  Also, throw if (re)encryption is attempted with one of
	  createFrom, restoreFrom and
	  rollForwardRecoveryFrom.

	*/

/**
     * Examines the boot properties and determines if the given attributes
     * would entail dropping the database.
     *
     * @param p the attribute set
     * @return {@code true} if the drop database operation is requested,
     *      {@code false} if not.
     */

/**
     * Examines boot properties and determines if a boot with the given
     * attributes would entail a cryptographic operation on the database.
     *
     * @param p the attribute set
     * @return {@code true} if a boot will perform a cryptographic operation on
     *      the database.
     */

/**
	 * Examine boot properties and determine if a boot with the given
	 * attributes would entail a hard upgrade.
	 *
	 * @param p the attribute set
	 * @return true if a boot will hard upgrade the database
	 */

/**
     * used to verify if the failover attribute has been set.
     * 
     * @param p The attribute set.
     * @return true if the failover attribute has been set.
     *         false otherwise.
     */

/**
     * Examine the boot properties and determine if a boot with the
     * given attributes should stop slave replication mode.
     * 
     * @param p The attribute set.
     * @return true if the stopSlave attribute has been set, false
     * otherwise.
     */

/**
     * Examine the boot properties and determine if a boot with the
     * given attributes should stop slave replication mode. A
     * connection with this property should only be made from
     * SlaveDatabase. Make sure to call
     * SlaveDatabase.verifyShutdownSlave() to verify that this
     * connection is not made from a client.
     * 
     * @param p The attribute set.
     * @return true if the shutdownslave attribute has been set, false
     * otherwise.
     */

/** Tells if the attribute/property has been set. */

/** Tells if the attribute/property has the value {@code true}. */

/**
     * Returns true if the attribute exists and is set to true.
     * Raises an exception if the attribute exists and is set to something else.
     */

/**
     * Stop replication slave when called from SlaveDatabase. Called
     * when slave replication mode has been stopped, and all that
     * remains is to shutdown the database. This happens if
     * handleStopReplicationSlave has successfully requested the slave
     * to stop, if the replication master has requested the slave to
     * stop using the replication network, or if a fatal exception has
     * occurred in the database.
     *    
     * @param database The database the internal stop slave operation
     * will be performed on
     * @param p The Attribute set.
     * @exception StandardException Thrown on error or if not in replication 
     * slave mode
     * @exception SQLException Thrown if the database has not been
     * booted or if this connection was not made internally from
     * SlaveDatabase
     */

/**
     * Used to authorize and verify the privileges of the user and
     * initiate failover.
     * 
     * @param tr an instance of TransactionResourceImpl Links the connection 
     *           to the database.
     *      *                              thrown to indicate that the master database
     *                              was shutdown after a successful failover
     *                           2) If a failure occurs during network
     *                              communication with slave.
     *      */

/**
	 * Remove any encryption or upgarde properties from the given properties
	 *
	 * @param p the attribute set
	 * @return clone sans encryption properties
	 */

/**
	 * Create a new connection based off of the 
	 * connection passed in.  Initializes state
	 * based on input connection, and copies 
	 * appropriate object pointers. This is only used
	   for nested connections.
	 *
	 * @param inputConnection the input connection
	 */

/**
     * 
     * Forbid empty or null usernames and passwords.
     * 
     */

/**
     * Compare two user-specified database names to see if they identify
     * the same database.
     */

/**
	 * If applicable, check that we don't connect with a user name
	 * that equals a role.
	 *
	 * @exception SQLException Will throw if the current authorization
	 *            id in {@code lcc} (which is already normalized to
	 *            case normal form - CNF) equals an existing role name
	 *            (which is also stored in CNF).
	 */

/**
	 * Check if actual authenticationId is equal to the database owner's.
	 *
	 * @param operation attempted operation which needs database owner powers
	 * 	 * from authenticationId of database owner.
	 */

/**
     * Gets the EngineType of the connected database.
     *
     * @return 0 if there is no database, the engine type otherwise.      */

/**
	 * SQL statements without parameters are normally
     * executed using Statement objects. If the same SQL statement 
     * is executed many times, it is more efficient to use a 
     * PreparedStatement
     *
     * JDBC 2.0
     *
     * Result sets created using the returned Statement will have
     * forward-only type, and read-only concurrency, by default.
     *
     * @return a new Statement object 
     * @exception SQLException if a database-access error occurs.
     */

/**
     * JDBC 2.0
     *
     * Same as createStatement() above, but allows the default result set
     * type and result set concurrency type to be overridden.
     *
     * @param resultSetType a result set type, see ResultSet.TYPE_XXX
     * @param resultSetConcurrency a concurrency type, see ResultSet.CONCUR_XXX
     * @return a new Statement object 
      * @exception SQLException if a database-access error occurs.
    */

/**
     * JDBC 3.0
     *
     * Same as createStatement() above, but allows the default result set
     * type, result set concurrency type and result set holdability type to
     * be overridden.
     *
     * @param resultSetType a result set type, see ResultSet.TYPE_XXX
     * @param resultSetConcurrency a concurrency type, see ResultSet.CONCUR_XXX
     * @param resultSetHoldability a holdability type,
     *  ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT
     * @return a new Statement object
     * @exception SQLException if a database-access error occurs.
     */

/**
     * JDBC 2.0
     *
     * Same as prepareStatement() above, but allows the default result set
     * type and result set concurrency type to be overridden.
     *
     * @param resultSetType a result set type, see ResultSet.TYPE_XXX
     * @param resultSetConcurrency a concurrency type, see ResultSet.CONCUR_XXX
     * @return a new PreparedStatement object containing the
     * pre-compiled SQL statement
     * @exception SQLException if a database-access error occurs.
     */

/**
     * JDBC 3.0
     *
     * Same as prepareStatement() above, but allows the default result set
     * type, result set concurrency type and result set holdability
     * to be overridden.
     *
     * @param resultSetType a result set type, see ResultSet.TYPE_XXX
     * @param resultSetConcurrency a concurrency type, see ResultSet.CONCUR_XXX
     * @param resultSetHoldability - one of the following ResultSet constants:
     *  ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT
     * @return a new PreparedStatement object containing the
     *  pre-compiled SQL statement
     * @exception SQLException if a database-access error occurs.
     */

/**
	 * Creates a default PreparedStatement object capable of returning
	 * the auto-generated keys designated by the given array. This array contains
	 * the indexes of the columns in the target table that contain the auto-generated
	 * keys that should be made available. This array is ignored if the SQL statement
	 * is not an INSERT statement

		JDBC 3.0
	 *
	 *
	 * @param sql  An SQL statement that may contain one or more ? IN parameter placeholders
	 * @param columnIndexes  An array of column indexes indicating the columns
	 *  that should be returned from the inserted row or rows
	 *
	 * @return  A new PreparedStatement object, containing the pre-compiled
	 *  SQL statement, that will have the capability of returning auto-generated keys
	 *  designated by the given array of column indexes
	 *
	 * @exception SQLException  Thrown on error.
	 */

/**
	 * Creates a default PreparedStatement object capable of returning
	 * the auto-generated keys designated by the given array. This array contains
	 * the names of the columns in the target table that contain the auto-generated
	 * keys that should be returned. This array is ignored if the SQL statement
	 * is not an INSERT statement
	 *
		JDBC 3.0
	 *
	 * @param sql  An SQL statement that may contain one or more ? IN parameter placeholders
	 * @param columnNames  An array of column names indicating the columns
	 *  that should be returned from the inserted row or rows
	 *
	 * @return  A new PreparedStatement object, containing the pre-compiled
	 *  SQL statement, that will have the capability of returning auto-generated keys
	 *  designated by the given array of column names
	 *
	 * @exception SQLException Thrown on error.
	 */

/**
	 * Creates a default PreparedStatement object that has the capability to
	 * retieve auto-generated keys. The given constant tells the driver
	 * whether it should make auto-generated keys available for retrieval.
	 * This parameter is ignored if the SQL statement is not an INSERT statement.
	 * JDBC 3.0
	 *
	 * @param sql  A SQL statement that may contain one or more ? IN parameter placeholders
	 * @param autoGeneratedKeys  A flag indicating whether auto-generated keys
	 *  should be returned
	 *
	 * @return  A new PreparedStatement object, containing the pre-compiled
	 *  SQL statement, that will have the capability of returning auto-generated keys
	 *
	 * @exception SQLException  Feature not implemented for now.
	 */

/**
     * JDBC 2.0
     *
     * Same as prepareCall() above, but allows the default result set
     * type and result set concurrency type to be overridden.
     *
     * @param resultSetType a result set type, see ResultSet.TYPE_XXX
     * @param resultSetConcurrency a concurrency type, see ResultSet.CONCUR_XXX
     * @return a new CallableStatement object containing the
     * pre-compiled SQL statement 
     * @exception SQLException if a database-access error occurs.
     */

/**
     * JDBC 3.0
     *
     * Same as prepareCall() above, but allows the default result set
     * type, result set concurrency type and result set holdability
     * to be overridden.
     *
     * @param resultSetType a result set type, see ResultSet.TYPE_XXX
     * @param resultSetConcurrency a concurrency type, see ResultSet.CONCUR_XXX
     * @param resultSetHoldability - one of the following ResultSet constants:
     *  ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT
     * @return a new CallableStatement object containing the
     * pre-compiled SQL statement 
     * @exception SQLException if a database-access error occurs.
     */

/**
     * A driver may convert the JDBC sql grammar into its system's
     * native SQL grammar prior to sending it; nativeSQL returns the
     * native form of the statement that the driver would have sent.
     *
     * @param sql a SQL statement that may contain one or more '?'
     * parameter placeholders
     * @return the native form of this statement
     */

/**
     * Get the current auto-commit state.
     *
     * @return Current state of auto-commit mode.
     *      */

/**
     * Commit makes all changes made since the previous
     * commit/rollback permanent and releases any database locks
     * currently held by the Connection. This method should only be
     * used when auto commit has been disabled.
     *
     * @exception SQLException if a database-access error occurs.
     *      */

/**
     * Rollback drops all changes made since the previous
     * commit/rollback and releases any database locks currently held
     * by the Connection. This method should only be used when auto
     * commit has been disabled.
     *
     * @exception SQLException if a database-access error occurs.
     *      */

/**
     * In some cases, it is desirable to immediately release a
     * Connection's database and JDBC resources instead of waiting for
     * them to be automatically released; the close method provides this
     * immediate release. 
     *
     * Note: A Connection is automatically closed when it is
     * garbage collected. Certain fatal errors also result in a closed
     * Connection.
     *
     * @exception SQLException if a database-access error occurs.
     */

/**
     * Check if the transaction is active so that we cannot close down the
     * connection. If auto-commit is on, the transaction is committed when the
     * connection is closed, so it is always OK to close the connection in that
     * case. Otherwise, throw an exception if a transaction is in progress.
     *
     *      * cannot be closed
     */

/**
     * Tests to see if a Connection is closed.
     *
     * @return true if the connection is closed; false if it's still open
     */

/**
     * A Connection's database is able to provide information
     * describing its tables, its supported SQL grammar, its stored
     * procedures, the capabilities of this connection, etc. This
     * information is made available through a DatabaseMetaData
     * object.
     *
     * @return a DatabaseMetaData object for this Connection 
     * @exception SQLException if a database-access error occurs.
     */

/**
		JDBC 3.0
	 * Retrieves the current holdability of ResultSet objects created using this
	 * Connection object.
	 *
	 *
	 * @return  The holdability, one of ResultSet.HOLD_CURSORS_OVER_COMMIT
	 * or ResultSet.CLOSE_CURSORS_AT_COMMIT
	 *
	 */

/**
		JDBC 3.0
	 * Changes the holdability of ResultSet objects created using this
	 * Connection object to the given holdability.
	 *
	 *
	 * @param holdability  A ResultSet holdability constant, one of ResultSet.HOLD_CURSORS_OVER_COMMIT
	 * or ResultSet.CLOSE_CURSORS_AT_COMMIT
	 *
	 */

/**
     * You can put a connection in read-only mode as a hint to enable 
     * database optimizations.
     *
     * Note: setReadOnly cannot be called while in the
     * middle of a transaction.
     *
     * @param readOnly true enables read-only mode; false disables
     * read-only mode.  
     * @exception SQLException if a database-access error occurs.
     */

/**
     * Tests to see if the connection is in read-only mode.
     *
     * @return true if connection is read-only
     * @exception SQLException if a database-access error occurs.
     */

/**
     * A sub-space of this Connection's database may be selected by setting a
     * catalog name. If the driver does not support catalogs it will
     * silently ignore this request.
     *
     * @exception SQLException if a database-access error occurs.
     */

/**
     * Return the Connection's current catalog name.
     *
     * @return the current catalog name or null
     * @exception SQLException if a database-access error occurs.
     */

/**
     * You can call this method to try to change the transaction
     * isolation level using one of the TRANSACTION_* values.
     *
     * Note: setTransactionIsolation causes the current
     * transaction to commit if the isolation level is changed. Otherwise, if
     * the requested isolation level is the same as the current isolation
     * level, this method is a no-op.
     *
     * @param level one of the TRANSACTION_* isolation values with the
     * exception of TRANSACTION_NONE; some databases may not support
     * other values
     * @exception SQLException if a database-access error occurs.
     *      */

/**
     * Get this Connection's current transaction isolation mode.
     *
     * @return the current TRANSACTION_* mode value
     * @exception SQLException if a database-access error occurs.
     */

/**
     * The first warning reported by calls on this Connection is
     * returned.  
     *
     * Note: Subsequent warnings will be chained to this
     * SQLWarning.
     *
     * @return the first SQLWarning or null 
     *
	 * Synchronization note: Warnings are synchronized 
	 * on nesting level
     */

/**
     * After this call, getWarnings returns null until a new warning is
     * reported for this Connection.  
     *
	 * Synchronization node: Warnings are synchonized 
	 * on nesting level
     */

/** 
	 * Install a type-map object as the default type-map for
	 * this connection.
	 * JDBC 2.0 - java.util.Map requires JDK 1
     *
     * @exception SQLException Feature not implemented for now.
	 */

/**
		Add a warning to the current list of warnings, to follow
		this note from Connection.getWarnings.
		Note: Subsequent warnings will be chained to this SQLWarning. 

			*/

/**
	 * Return the dbname for this connection.
	 *
	 * @return String	The dbname for this connection.
	 */

/**
     * Raises an exception if the connection is closed.
     *
     * @exception SQLException if the connection is closed
     */

/**
		Handle any type of Exception.
		
		 Inform the contexts of the error
		 Throw an Util based upon the thrown exception.
		

		REMIND: now that we know all the exceptions from our driver
		are Utils, would it make sense to shut down the system
		for unknown SQLExceptions? At present, we do not.

		Because this is the last stop for exceptions,
		it will catch anything that occurs in it and try
		to cleanup before re-throwing them.
	
		@param thrownException the exception
		@param rollbackOnAutoCommit rollback the xact on if autocommit is
				on, otherwise rollback stmt but leave xact open (and
				continue to hold on to locks).  Most of the time, this
				will be true, excepting operations on result sets, like
				getInt().
	*/

/**
		Close the connection when processing errors, or when
	 	closing a nested connection.
		
		This only marks it as closed and frees up its resources;
		any closing of the underlying connection or commit work
		is assumed to be done elsewhere.

		Called from EmbedConnectionContext's cleanup routine,	
		and by proxy.close().
	 */

/**
		@exception Throwable	standard error policy
	 */

/**
	 * if auto commit is on, remember that we need to commit
	 * the current statement.
	 */

/**
	 * if a commit is needed, perform it.
     *
     * Must have connection synchonization and context set up already.
     *
	 * @exception SQLException if commit returns error
	 */

/**
	 * If in autocommit, then commit.
     * 
     * Used to force a commit after a result set closes in autocommit mode.
     * The needCommit mechanism does not work correctly as there are times
     * with cursors (like a commit, followed by a next, followed by a close)
     * where the system does not think it needs a commit but we need to 
     * force the commit on close.  It seemed safer to just force a commit
     * on close rather than count on keeping the needCommit flag correct for
     * all cursor cases.
     *
     * Must have connection synchonization and context set up already.
     *
	 * @exception SQLException if commit returns error
	 */

/**
		Install the context manager for this thread.  Check connection status here.
	 	@exception SQLException if fails
	 */

/**
		Create a new database.
		@param dbname the database name
		@param info the properties

		@return	Database The newly created database or null.

	 	@exception SQLException if fails to create database
	*/

/**
     * Puts the current thread to sleep.
     * 
     * NOTE: This method guarantees that the thread sleeps at
     * least {@code millis} milliseconds.
     *
     * @param millis milliseconds to sleep
     */

/**
     * Strips any sub-sub-protocol prefix from a database name.
     *
     * @param dbname a database name
     * @return the database name without any sub-sub-protocol prefixes
     *      */

/**
	 * Boot database.
	 *
	 * @param info boot properties
	 *
	 * @param softAuthenticationBoot If true, don't fail soft upgrade due
	 * to missing features (phase one of two phased hard upgrade boot).
	 *
	 * @return false iff the monitor cannot handle a service
	 * of the type indicated by the protocol within the name.
	 * If that's the case then we are the wrong driver.
	 *
	 * 	 */

/**
		Return the context manager for this connection.
	*/

/**
	 * Filter out properties from the passed in set of JDBC attributes
	 * to remove any derby.* properties. This is to ensure that setting
	 * derby.* properties does not work this way, it's not a defined way
	 * to set such properties and could be a secuirty hole in allowing
	 * remote connections to override system, application or database settings.
	 * 
	 * @return a new Properties set copied from the parameter but with no
	 * derby.* properties.
	 */

/** @see EngineConnection#isInGlobalTransaction() */

/**
		Reset the connection before it is returned from a PooledConnection
		to a new application request (wrapped by a BrokeredConnection).
		Examples of reset covered here is dropping session temporary tables
		and reseting IDENTITY_VAL_LOCAL.
		Most JDBC level reset is handled by calling standard java.sql.Connection
		methods from EmbedPooledConnection.
	 */

/**
     * Do not use this method directly use XATransactionState.xa_prepare
     * instead because it also maintains/cancels the timeout task which is
     * scheduled to cancel/rollback the global transaction.
     *
     * @return One of {@link org.apache.derby.iapi.store.access.XATransactionController#XA_OK} or
     *         {@link org.apache.derby.iapi.store.access.XATransactionController#XA_RDONLY}
     *      */

/**
     * Do not use this method directly use XATransactionState.xa_commit
     * instead because it also maintains/cancels the timout task which is
     * scheduled to cancel/rollback the global transaction.
     */

/**
     * Do not use this method directly use XATransactionState.xa_rollback
     * instead because it also maintains/cancels the timout task which is
     * scheduled to cancel/rollback the global transaction.
     */

/**
	 * returns false if there is an underlying transaction and that transaction
	 * has done work.  True if there is no underlying transaction or that
	 * underlying transaction is idle
	 */

/** 
	 * Set the transaction isolation level that will be used for the 
	 * next prepare.  Used by network server to implement DB2 style 
	 * isolation levels.
	 * @param level Isolation level to change to.  level is the DB2 level
	 *               specified in the package names which happen to correspond
	 *               to our internal levels. If 
	 *               level == TransactionControl.UNSPECIFIED_ISOLATION,
	 *               the statement won't be prepared with an isolation level.
	 * 
	 * 
	 */

/**
	 * Return prepare isolation 
	 */

/**
		Return a unique order number for a result set.
		A unique value is only needed if the result set is
		being created within procedure and thus must be using
		a nested connection.
	*/

/**
     * Get a String representation that uniquely identifies
     * this connection.  Include the same information that is
     * printed in the log for various trace and error messages.
     *
     * In Derby the "physical" connection is a LanguageConnectionContext, 
     * or LCC.
     * The JDBC Connection is an JDBC-specific layer on top of this.  Rather
     * than create a new id here, we simply use the id of the underlying LCC.
     * Note that this is a big aid in debugging, because much of the
     * engine trace and log code prints the LCC id. 
     *
     * @return a string representation for this connection
     */

/**
	*
	* Constructs an object that implements the Clob interface. The object
	* returned initially contains no data.  The setAsciiStream,
	* setCharacterStream and setString methods of
	* the Clob interface may be used to add data to the Clob.
	*
	* @return An object that implements the Clob interface
	* 	* Clob interface can not be constructed, this method is
	* called on a closed connection or a database access error occurs.
	*
	*/

/**
	*
	* Constructs an object that implements the Blob interface. The object
	* returned initially contains no data.  The setBinaryStream and
	* setBytes methods of the Blob interface may be used to add data to
	* the Blob.
	*
	* @return  An object that implements the Blob interface
	* 	* Blob interface can not be constructed, this method is
	* called on a closed connection or a database access error occurs.
	*
	*/

/**
	* Add the locator and the corresponding LOB object into the
	* HashMap
	*
	* @param LOBReference The object which contains the LOB object that
	*                     that is added to the HashMap.
	* @return an integer that represents the locator that has been
	*         allocated to this LOB.
	*/

/**
	* Remove the key(LOCATOR) from the hash table.
	* @param key an integer that represents the locator that needs to be
	*            removed from the table.
	*/

/**
	* Get the LOB reference corresponding to the locator.
	* @param key the integer that represents the LOB locator value.
	* @return the LOB Object corresponding to this locator.
	*/

/**
	* Clear the HashMap of all entries.
	* Called when a commit or rollback of the transaction
	* happens.
	*/

/**
	* Return the current locator value/
        * 0x800x values are not  valid values as they are used to indicate the BLOB 
        * is being sent by value, so we skip those values (DERBY-3243)
        * 
	* @return an integer that represents the most recent locator value.
	*/

/**
     * Adds an entry of the lob in WeakHashMap. These entries are used
     * for cleanup during commit/rollback or close.
     * @param lobReference LOB Object
     */

/**
	* Return the Hash Map in the root connection
	* @return the HashMap that contains the locator to LOB object mapping
	*/

/** Cancels the current running statement. */

/**
     * Obtain the name of the current schema. Not part of the
     * java.sql.Connection interface, but is accessible through the
     * EngineConnection interface, so that the NetworkServer can get at the
     * current schema for piggy-backing
     * @return the current schema name
     */

/**
	 * Add a temporary lob file to the lobFiles set.
	 * This will get closed at transaction end or removed as the lob is freed.
	 * @param lobFile  LOBFile to add
	 */

/**
	 * Remove LOBFile from the lobFiles set. This will occur when the lob 
	 * is freed or at transaction end if the lobFile was removed from the 
	 * WeakHashMap but not finalized.
	 * @param lobFile  LOBFile to remove.
	 */

/** Return true if the connection is aborting */

/** Begin aborting the connection */

/**
     * Creates an unnamed savepoint in the current transaction and
     * returns the new Savepoint object that represents it.
     *
     * @return  The new Savepoint object
     *
     * @exception SQLException if a database access error occurs or
     * this Connection object is currently in auto-commit mode
     */

/**
     * Creates a savepoint with the given name in the current transaction and
     * returns the new Savepoint object that represents it.
     *
     * @param name  A String containing the name of the savepoint
     *
     * @return  The new Savepoint object
     *
     * @exception SQLException if a database access error occurs or
     * this Connection object is currently in auto-commit mode
     */

/**
     * Creates a savepoint with the given name (if it is a named
     * savepoint else we will generate a name because Derby only
     * supports named savepoints internally) in the current
     * transaction and returns the new Savepoint object that
     * represents it.
     *
     * @param name A String containing the name of the savepoint. Will
     * be null if this is an unnamed savepoint
     * @param userSuppliedSavepointName If true means it's a named
     * user defined savepoint.
     *
     * @return  The new Savepoint object
     */

/**
     * Undoes all changes made after the given Savepoint object was set.
     * This method should be used only when auto-commit has been disabled.
     *
     * @param savepoint  The Savepoint object to rollback to
     *
     * @exception SQLException  if a database access error occurs,
     * the Savepoint object is no longer valid, or this Connection
     * object is currently in auto-commit mode
     */

/**
     * Removes the given Savepoint object from the current transaction.
     * Any reference to the savepoint after it has been removed will cause
     * an SQLException to be thrown
     *
     * @param savepoint  The Savepoint object to be removed
     *
     * @exception SQLException if a database access error occurs or
     * the given Savepoint object is not a valid savepoint in the
     * current transaction
     */

/**
     * Get the name of the current schema.
     */

/**
     * Set the default schema for the Connection.
     */

/**
     * Examines the boot properties looking for conflicting cryptographic
     * options and commands.
     *
     * @param p boot properties (for instance URL connection attributes)
     *      */

/**
     * Checks if the connection has not been closed and is still valid. 
     * The validity is checked by checking that the connection is not closed.
     *
     * @param timeout This should be the time in seconds to wait for the 
     * database operation used to validate the connection to complete 
     * (according to the JDBC4 JavaDoc). This is currently not supported/used.
     *
     * @return true if the connection is valid, false otherwise
     * @exception SQLException if the parameter value is illegal or if a
     * database error has occurred
     */

/**
     * setClientInfo will always throw a
     * SQLClientInfoException since Derby does not support
     * any properties.
     *
     * @param name a property key String
     * @param value a property value String
     * @exception SQLClientInfoException unless both name and value are null
     */

/**
     * setClientInfo will throw a
     * SQLClientInfoException unless the properties
     * parameter is empty, since Derby does not support any
     * properties. All the property keys in the
     * properties parameter are added to failedProperties
     * of the exception thrown, with REASON_UNKNOWN_PROPERTY as the
     * value. 
     *
     * @param properties a Properties object with the
     * properties to set
     * @exception SQLClientInfoException unless properties parameter
     * is null or empty
     */

/**
     * getClientInfo always returns a
     * null String since Derby doesn't support
     * ClientInfoProperties.
     *
     * @param name a String value
     * @return a null String value
     * @exception SQLException if the connection is closed.
     */

/**
     * getClientInfo always returns an empty
     * Properties object since Derby doesn't support
     * ClientInfoProperties.
     *
     * @return an empty Properties object
     * @exception SQLException if the connection is closed.
     */

/**
     * Returns the type map for this connection.
     *
     * @return type map for this connection
     * @exception SQLException if a database access error occurs
     */

/**
     * Returns false unless interfaces is implemented 
     * 
     * @param  interfaces             a Class defining an interface.
     * @return true                   if this implements the interface or 
     *                                directly or indirectly wraps an object 
     *                                that does.
     *      *                                whether this is a wrapper for an object 
     *                                with the given interface.
     */

/**
     * Returns this if this class implements the interface
     *
     * @param  interfaces a Class defining an interface
     * @return an object that implements the interface
     *      * interface
     */

/**
     * Privileged Monitor lookup. Must be package private so that user code
     * can't call this entry point.
     */

/**
     * Privileged service lookup. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged startup. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged startup. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged shutdown. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Private, privileged lookup of the lcc..
     */

