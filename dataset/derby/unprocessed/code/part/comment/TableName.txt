/**
 * A TableName represents a qualified name, externally represented as a schema name
 * and an object name separated by a dot. This class is misnamed: it is used to
 * represent the names of other object types in addition to tables.
 *
 */

/**
     * Constructor for when we have both the table and schema names.
	 *
	 * @param schemaName	The name of the schema being referenced
     * @param tableName     The name of the table or other object being
     *                      referenced
     * @param cm            The context manager
	 */

/**
     * Constructor for when we have both the table and schema names.
	 *
	 * @param schemaName	The name of the schema being referenced
     * @param tableName     The name of the table or other object being
     *                      referenced
	 * @param tokBeginOffset begin position of token for the table name 
	 *					identifier from parser.  pass in -1 if unknown
	 * @param tokEndOffset	end position of token for the table name 
	 *					identifier from parser.  pass in -1 if unknown
     * @param cm            The context manager
	 */

/**
	 * Get the table name (without the schema name).
	 *
	 * @return Table name as a String
	 */

/**
	 * Return true if this instance was initialized with not null schemaName.
	 *
	 * @return true if this instance was initialized with not null schemaName
	 */

/**
	 * Get the schema name.
	 *
	 * @return Schema name as a String
	 */

/**
	 * Set the schema name.
	 *
	 * @param schemaName	 Schema name as a String
	 */

/**
	 * Get the full table name (with the schema name, if explicitly
	 * specified).
	 *
	 * @return Full table name as a String
	 */

/**
     * Get the full SQL name of this object, properly quoted and escaped.
     */

/**
	 * Convert this object to a String.  See comments in QueryTreeNode.java
	 * for how this should be done for tree printing.
	 *
	 * @return	This object as a String
	 */

/**
	 * 2 TableNames are equal if their both their schemaNames and tableNames are
	 * equal, or if this node's full table name is null (which happens when a
	 * SELECT * is expanded).  Also, only check table names if the schema
	 * name(s) are null.
	 *
	 * @param otherTableName	The other TableName.
	 *
	 * @return boolean		Whether or not the 2 TableNames are equal.
	 */

/**
	 * 2 TableNames are equal if their both their schemaNames and tableNames are
	 * equal, or if this node's full table name is null (which happens when a
	 * SELECT * is expanded).  Also, only check table names if the schema
	 * name(s) are null.
	 *
	 * @param otherSchemaName	The other TableName.
	 * @param otherTableName	The other TableName.
	 *
	 * @return boolean		Whether or not the 2 TableNames are equal.
	 */

/** Clone this TableName */

/**
	  *	Bind this TableName. This means filling in the schema name if it
	  *	wasn't specified.
	  *
	  *	@exception StandardException		Thrown on error
	  */

/**
      * Returns a hash code for this tableName. This allows us to use TableNames
	  *	as keys in hash lists.
	  *
      * @return hash code for this table name
	  */

/**
	  *	Compares two TableNames. Needed for hashing logic to work.
	  *
	  *	@param	other	other tableName
	  */

