/** A string representation of sqlErrmcBytes_. */

/** Array of errmc strings for each message in the chain. */

/** SQL states for all the messages in the exception chain. */

/** Cached error messages (to prevent multiple invocations of the stored
     * procedure to get the same message). */

/**
     * Returns the number of messages this SQLCA contains.
     *
     * @return number of messages
     */

/**
     * 
     * Get the error code based on the SQL code received from the server.
     * 
     *
     * 
     * The conversion from SQL code to error code happens like this:
     * 
     *
     * 
     * If the SQL code is 0, there is no error code because the Sqlca
     * doesn't represent an error. Return 0.
     * If the SQL code is positive, the Sqlca represents a warning, and
     * the SQL code represents the actual error code. Return the SQL code.
     * If the SQL code is negative, the Sqlca represents an error, and
     * the error code is {@code -(sqlCode+1)}.
     * 
     *
     *      */

/**
     * Initialize and build the arrays sqlErrmcMessages_ and
     * sqlStates_.
     */

/**
     * Get the SQL state for a given error.
     *
     * @param messageNumber the error to retrieve SQL state for
     * @return SQL state for the error
     */

/**
     * Get the unformatted message text (in case we cannot ask the server).
     *
     * @param messageNumber which message number to get the text for
     * @return string with details about the error
     */

/**
     * Get a {@code java.sql.DataTruncation} warning based on the information
     * in this SQLCA.
     *
     * @return a {@code java.sql.DataTruncation} instance
     */

