/**
     * Resets the prepared statement for reuse in a statement pool.
     *
     *      *      */

/**
     * sets the parameter to the  Binary Stream object
     *
     * @param parameterIndex the first parameter is 1, the second is 2, ...
     * @param x the java input stream which contains the binary parameter value
     * @param length the number of bytes in the stream
     * @exception SQLException thrown on failure.
     */

/**
     * sets the parameter to the  Binary Stream object
     *
     * @param parameterIndex the first parameter is 1, the second is 2, ...
     * @param x the java input stream which contains the binary parameter value
     * @param length the number of bytes in the stream
     * @exception SQLException thrown on failure.
     */

/**
     * We do this inefficiently and read it all in here. The target type
     * is assumed to be a String.
     *
     * @param parameterIndex the first parameter is 1, the second is 2, ...
     * @param x the java input stream which contains the ASCII parameter value
     * @param length the number of bytes in the stream
     * @exception SQLException thrown on failure.
     */

/**
     * We do this inefficiently and read it all in here. The target type
     * is assumed to be a String.
     *
     * @param parameterIndex the first parameter is 1, the second is 2, ...
     * @param x the java input stream which contains the ASCII parameter value
     * @param length the number of bytes in the stream
     * @exception SQLException thrown on failure.
     */

/**
     * Check the length passed in for the stream that is to be set. If length is
     * larger than Integer.MAX_VALUE or smaller that 0, we fail by throwing an 
     * SQLException.
     * @param length The length of the stream being set
     *      */

/**
     * Sets the specified parameter to the given input stream. Deprecated
     * in JDBC 3.0 and this method will always just throw a feature not
     * implemented exception.
     *
     * @param parameterIndex the first parameter is 1, the second is 2, ...
     * @param x the java input stream which contains the UNICODE parameter
     * value
     * @param length the number of bytes in the stream
     * @exception SQLException throws feature not implemented.
     * @deprecated
     */

/**
     * Sets the designated parameter to the given Reader object.
     * When a very large UNICODE value is input to a LONGVARCHAR parameter, it
     * may be more practical to send it via a java.io.Reader
     * object. The data will be read from the stream as needed until
     * end-of-file is reached. The JDBC driver will do any necessary conversion
     * from UNICODE to the database char format.
     *
     * @param parameterIndex the first parameter is 1, the second is 2, ...
     * @param x the java.io.Reader object that contains the
     *      Unicode data
     *      *      called on a closed PreparedStatement
     */

/**
     * Sets the designated parameter to the given Reader, which will have
     * the specified number of bytes.
     *
     * @param parameterIndex the index of the parameter to which this set
     *                       method is applied
     * @param x the java Reader which contains the UNICODE value
     * @param length the number of bytes in the stream
     * @exception SQLException thrown on failure.
     *
     */

/**
     * Sets the designated parameter to the given Reader, which will have
     * the specified number of bytes.
     *
     * @param parameterIndex the index of the parameter to which this
     *                       set method is applied
     * @param x the java Reader which contains the UNICODE value
     * @param length the number of bytes in the stream
     * @exception SQLException thrown on failure.
     *
     */

/**
     * Set a UDT parameter to an object value.
     */

/**
     * Returns the name of the java.sql interface implemented by this class.
     * @return name of java.sql interface
     */

/**
     * Sets the designated parameter to the given input stream.
     * When a very large ASCII value is input to a LONGVARCHAR
     * parameter, it may be more practical to send it via a
     * java.io.InputStream. Data will be read from the stream as
     * needed until end-of-file is reached. The JDBC driver will do any
     * necessary conversion from ASCII to the database char format.
     *
     * @param parameterIndex the first parameter is 1, the second is 2, ...
     * @param x the Java input stream that contains the ASCII parameter value
     *      *      called on a closed PreparedStatement
     */

/**
     * Sets the designated parameter to the given input stream.
     * When a very large binary value is input to a LONGVARBINARY
     * parameter, it may be more practical to send it via a
     * java.io.InputStream object. The data will be read from the
     * stream as needed until end-of-file is reached.
     *
     * @param parameterIndex the first parameter is 1, the second is 2, ...
     * @param x the java input stream which contains the binary parameter value
     *      *      called on a closed PreparedStatement
     */

/**
     * Sets the designated parameter to a Reader object.
     *
     * @param parameterIndex index of the first parameter is 1, the second is 
     *      2, ...
     * @param reader an object that contains the data to set the parameter
     *      value to. 
     *      *      parameter marker in the SQL statement; if a database access error
     *      occurs; this method is called on a closed PreparedStatementor if
     *      parameterIndex does not correspond to a parameter marker in the SQL
     *      statement
     */

/**
     * Sets the designated parameter to a Reader object.
     *
     * @param parameterIndex index of the first parameter is 1, the second is 2, ...
     * @param reader An object that contains the data to set the parameter value to.
     * @param length the number of characters in the parameter data.
     *      * marker in the SQL statement, or if the length specified is less than zero.
     *
     */

/**
     * Sets the designated parameter to a InputStream object.
     *
     * @param parameterIndex index of the first parameter is 1,
     * the second is 2, ...
     * @param inputStream An object that contains the data to set the parameter
     * value to.
     * @param length the number of bytes in the parameter data.
     *      * to a parameter marker in the SQL statement,  if the length specified
     * is less than zero or if the number of bytes in the inputstream does not match
     * the specfied length.
     *
     */

/**
     * PossibleTypes is information which is set of types.
     * A given type is evaluated as *possible* at checkType method if same type was found in the set.
     */

/**
     * 
     * Check for closed statement and extract the SQLException if it is raised.
     * 
     */

/**
         * This is possibleTypes of variable which can be set by set method for generic scalar.
         */

/**
         * This is possibleTypes of variable which can be set by setDate method.
         */

/**
         * This is possibleTypes of variable which can be set by setTime method.
         */

/**
         * This is possibleTypes of variable which can be set by setTimestamp method.
         */

/**
         * This is possibleTypes of variable which can be set by setString method.
         */

/**
         * This is possibleTypes of variable which can be set by setBytes method.
         */

/**
         * This is possibleTypes of variable which can be set by setBinaryStream method.
         */

/**
         * This is possibleTypes of variable which can be set by setAsciiStream method.
         */

/**
         * This is possibleTypes of variable which can be set by setCharacterStream method.
         */

/**
         * This is possibleTypes of variable which can be set by setBlob method.
         */

/**
         * This is possibleTypes of variable which can be set by setClob method.
         */

/**
         * This is possibleTypes of null value which can be assigned to generic scalar typed variable.
         */

/**
         * This is possibleTypes of null value which can be assigned to generic character typed variable.
         */

/**
         * This is possibleTypes of null value which can be assigned to VARBINARY typed variable.
         */

/**
         * This is possibleTypes of null value which can be assigned to BINARY typed variable.
         */

/**
         * This is possibleTypes of null value which can be assigned to LONGVARBINARY typed variable.
         */

/**
         * This is possibleTypes of null value which can be assigned to DATE typed variable.
         */

/**
         * This is possibleTypes of null value which can be assigned to TIME typed variable.
         */

/**
         * This is possibleTypes of null value which can be assigned to TIMESTAMP typed variable.
         */

/**
         * This is possibleTypes of null value which can be assigned to CLOB typed variable.
         */

/**
         * This is possibleTypes of null value which can be assigned to BLOB typed variable.
         */

/**
         * This is possibleTypes of null value which can be assigned to other typed variable.
         */

/**
         * This method return true if the type is possible.
         */

/**
         * This method return possibleTypes of null value in variable typed as typeOfVariable.
         */

