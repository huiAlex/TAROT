/**
 * A FromList represents the list of tables in a FROM clause in a DML
 * statement.  It extends QueryTreeNodeVector.
 *
 */

/**
	 * Window definitions used for resolving window functions not containing
	 * in-line window specifications, but referring window definitions
	 */

/**
     *  Does not change the default for join order optimization, i.e.
     * {@code false}.
     * @param cm context manager
     */

/**
     * Constructor for a FromList
     *
     * @param optimizeJoinOrder {@code true} if join order optimization is to
     *                          be performed
     * @param cm                context manager
     */

/**
     * Constructor for a FromList
	 *
     * @param optimizeJoinOrder {@code true} if join order optimization is to
     *                          be performed
     * @param fromTable         initialize list with this table
     * @param cm                context manager
	 * @exception StandardException		Thrown on error
	 */

/**
	 * 	 */

/**
	 * 	 */

/** 
	 * 	 * @exception StandardException		Thrown on error
	 */

/**
	 * Add a table to the FROM list.
	 *
	 * @param fromTable	A FromTable to add to the list
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Search to see if a query references the specifed table name.
	 *
	 * @param name		Table name (String) to search for.
	 * @param baseTable	Whether or not name is for a base table
	 *
	 * @return	true if found, else false
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Return true if the node references SESSION schema tables (temporary or permanent)
	 *
	 * @return	true if references SESSION schema tables, else false
	 *
	 * @exception StandardException		Thrown on error
	 */

/** 
	 * Determine whether or not the specified name is an exposed name in
	 * the current query block.
	 *
	 * @param name	The specified name to search for as an exposed name.
	 * @param schemaName	Schema name, if non-null.
	 * @param exactMatch	Whether or not we need an exact match on specified schema and table
	 *						names or match on table id.
	 *
	 * @return The FromTable, if any, with the exposed name.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Go through the list of the tables and see if the passed ResultColumn
	 *  is a join column for a right outer join with USING/NATURAL clause.
	 * 	 */

/**
	 * Bind the expressions in this FromList.  This means 
	 * binding the sub-expressions, as well as figuring out what the return 
	 * type is for each expression.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Bind the result columns of the ResultSetNodes in this FromList when there is no
	 * base table to bind them to.  This is useful for SELECT statements,
	 * where the result columns get their types from the expressions that
	 * live under them.
	 *
	 * @param fromListParam		FromList to use/append to.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Check for (and reject) all ? parameters directly under the ResultColumns.
	 * This is done for SELECT statements.
	 *
	 * @exception StandardException		Thrown if a ? parameter found
	 *									directly under a ResultColumn
	 */

/**
	 * Preprocess the query tree - this currently means:
	 *	o  Generating a referenced table map for each ResultSetNode.
	 *  o  Putting the WHERE and HAVING clauses in conjunctive normal form (CNF).
	 *  o  Converting the WHERE and HAVING clauses into PredicateLists and
	 *	   classifying them.
	 *  o  Flatten those FromSubqueries which can be flattened.
	 *  o  Ensuring that a ProjectRestrictNode is generated on top of every 
	 *     FromBaseTable and generated in place of every FromSubquery which
	 *	   could not be flattened.  
	 *  o  Pushing single table predicates down to the new ProjectRestrictNodes.
	 *
	 * @param numTables			The number of tables in the DML Statement
	 * @param gbl				The group by list, if any
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Flatten all the FromTables that are flattenable.
	 * RESOLVE - right now we just flatten FromSubqueries.  We
	 * should also flatten flattenable JoinNodes here.
	 *
	 * @param rcl				The RCL from the outer query
	 * @param predicateList		The PredicateList from the outer query
	 * @param sql				The SubqueryList from the outer query
	 * @param gbl				The group by list, if any
     * @param havingClause      The HAVING clause, if any
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Categorize and push the predicates that are pushable.
	 *
	 * @param predicateList		The query's PredicateList
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Set the (query block) level (0-based) for the FromTables in this
	 * FromList.
	 *
	 * @param level		The query block level for this table.
	 */

/**
	 * Get the FromTable from this list which has the specified ResultColumn in
	 * its RCL.
	 *
	 * @param rc	The ResultColumn match on.
	 *
	 * @return FromTable	The matching FromTable.
	 */

/**
	 * Set the Properties list for this FromList.
	 *
	 * @exception StandardException		Thrown on error
	 */

/** @see OptimizableList#reOrder */

/** @see OptimizableList#useStatistics */

/** @see OptimizableList#optimizeJoinOrder */

/** @see OptimizableList#legalJoinOrder */

/** @see OptimizableList#initAccessPaths */

/**
	 * Bind any untyped null nodes to the types in the given ResultColumnList.
	 *
	 * @param bindingRCL	The ResultColumnList with the types to bind to.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Decrement (query block) level (0-based) for
	 * all of the tables in this from list.
	 * This is useful when flattening a subquery.
	 *
	 * @param decrement	The amount to decrement by.
	 */

/**
	 * Mark all of the FromBaseTables in the list as EXISTS FBTs.
	 * Each EBT has the same dependency list - those tables that are referenced
	 * minus the tables in the from list.
	 *
	 * @param referencedTableMap	The referenced table map.
	 * @param outerFromList			FromList from outer query block
	 * @param isNotExists			Whether or not for NOT EXISTS
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * determine whether this table is NOT EXISTS.
	 *
	 * This routine searches for the indicated table number in the fromlist
	 * and returns TRUE if the table is present in the from list and is 
	 * marked NOT EXISTS, false otherwise.
	 *
	 * A table may be present in the from list for NOT EXISTS if it is used
	 * as a correlated NOT EXISTS subquery. In such a situation, when the
	 * subquery is flattened, it is important that we remember that this is
	 * a NOT EXISTS subquery, because the join semantics are different 
	 * (we're looking for rows that do NOT match, rather than rows
	 * that do). And since the join semantics are different, we cannot
	 * include this table into a transitive closure of equijoins
	 * (See DERBY-3033 for a situation where this occurs).
	 *
	 * @param tableNumber	which table to check
	 * @return true if this table is in the from list as NOT EXISTS
	 */

/**
	 * Get the lock mode for the target of an update statement
	 * (a delete or update).  The update mode will always be row for
	 * CurrentOfNodes.  It will be table if there is no where clause.
	 *
	 * @return	The lock mode
	 */

/**
	 * Return whether or not the user specified a hash join for any of the 
	 * tables in this list.
	 *
	 * @return	Whether or not the user specified a hash join for any of the 
	 *			tables in this list.
	 */

/**
	 * Indicate that this FromList is "transparent", which means that
	 * its FromTables should be bound to tables from an outer query.
	 * Generally this is not allowed, but there are exceptions.  See
	 * SetOperatorNode.setResultToBooleanTrueNode() for more.
	 */

/**
	 * Set windows field to the supplied value.
	 * @param windows list of window definitions associated with a SELECT.
	 */

/**
	 * @return list of window definitions associated with a SELECT.
	 */

