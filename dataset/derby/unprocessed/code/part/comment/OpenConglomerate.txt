/**

A Generic class which implements the basic functionality needed to operate
on an "open" conglomerate.  This class assumes the following general things
about the access method.

The access method is page based and contained in a single container maintained
by raw store.  

**/

/**************************************************************************
     * Fields of the class
     **************************************************************************
     */

/**
     * The following group of fields are all basic input parameters which are
     * provided by the calling code when doing any sort of operation requiring
     * an open conglomerate (openScan(), open(), openCostController(), ...).
     * These are just saved values from what was initially input.
     **/

/**
     * convenience boolean's for various mode's
     **/

/**
     * scratch space used for stuff like templates, export rows, ...
     **/

/**************************************************************************
     * Constructors for This class:
     **************************************************************************
     */

/**************************************************************************
     * Private methods for This class:
     **************************************************************************
     */

/**************************************************************************
     * abstract methods of This class:
     **************************************************************************
     */

/**
     * Return an "empty" row location object of the correct type.
     * 
     *
	 * @return The empty Rowlocation.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**************************************************************************
     * Public Methods implementing standard store row locking interfaces:
     *     latchPage(RowPosition)
     *     latchPageAndRepositionScan(RowPosition)
     *     lockPositionForRead(RowPosition, aux_pos, moveForwardIfRowDisappears)
     *     lockPositionForWrite(RowPosition, forInsert, wait)
     *     unlockPositionAfterRead(RowPosition)
     **************************************************************************
     */

/**
     * 
     * Latch the page containing the current RowPosition.
     * 
     *
     * 
     * This implementation also automatically updates the RowPosition to
     * point at the slot containing the current RowPosition.  This slot 
     * value is only valid while the latch is held.
     * 
     *
     * 
     * If the row pointed to by {@code pos} does not exist (including the
     * case where the page itself does not exist), the page will not be
     * latched, and {@code pos.current_page} will be set to {@code null}.
     * 
     *
     * @param pos the position to a row on the page that should be latched
     * @return {@code true} if the page was successfully latched, or
     * {@code false} otherwise
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * 
     * Lock the row at the given position for write.
     * 
     *
     * 
     * The page pointed to by the {@code RowPosition} is assumed to be latched
     * when this method is called. If the lock cannot be obtained without
     * waiting, the latch will be released and re-obtained when the lock has
     * been acquired.
     * 
     *
     * 
     * If the latch was released while waiting for the lock, and the row does
     * not exist after the lock is obtained, the latch will be released again
     * before the method returns, and {@code pos.current_page} will be set to
     * {@code null}.
     * 
     */

/**
     * Unlock the record after a previous request to lock it.
     * 
     * Unlock the record after a previous call to lockRecordForRead().  It is
     * expected that RowPosition contains information used to lock the record,
     * Thus it is important if using a single RowPosition to track a scan to
     * call unlock before you move the position forward to the next record.
     * 
     * Note that this routine assumes that the row was locked forUpdate if
     * the OpenConglomerate is forUpdate, else it assumes the record was
     * locked for read.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**************************************************************************
     * Public Methods implementing ConglomPropertyQueryable Interface: 
     **************************************************************************
     */

/**************************************************************************
     * Public Accessors of This class:
     **************************************************************************
     */

/**************************************************************************
     * Public Methods implementing some ConglomerateController Interfaces: 
     **************************************************************************
     */

/**
     * Check consistency of a conglomerate.
     * 
     * Checks the consistency of the data within a given conglomerate, does not
     * check consistency external to the conglomerate (ie. does not check that 
     * base table row pointed at by a secondary index actually exists).
     * 
     * There is no checking in the default implementation, you must override
     * to get conglomerate specific consistency checking.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
    Get information about space used by the conglomerate.
    **/

/**
     * is the open btree table locked?
     **/

/**************************************************************************
     * Public Methods of this class:
     **************************************************************************
     */

/**
     * Open the container.
     * 
     * Open the container, obtaining necessary locks.  Most work is actually
     * done by RawStore.openContainer().  
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Open the container.
     * 
     * Open the container, obtaining necessary locks.  Most work is actually
     * done by RawStore.openContainer().  Will only reopen() if the container
     * is not already open.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Close the container.
     * 
     * Handles being closed more than once.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

