/** Tells which of the messages in the SQLCA this exception refers to
     * (counting from 0). For engine generated errors only. */

/**
     * SQLException factory is initialized with default factory.
     * It will be over written by the SQLException factory of the
     * supported JDBC version.
     */

/** 
     *  The message utility instance we use to find messages
     *  It's primed with the name of the client message bundle so that
     *  it knows to look there if the message isn't found in the
     *  shared message bundle.
     */

/**
     * This routine provides singleton access to an instance of MessageUtil
     * that is constructed for client messages.  It is recommended to use
     * this singleton rather than create your own instance.
     *
     * The only time you need this instance is if you need to directly
     * format an internationalized message string.  In most instances this
     * is done for you when you invoke a SqlException constructor
     *
     * @return a singleton instance of MessageUtil configured for client
     *   messages
     */

/** 
     * The wrapped SQLException, if one exists
     */

/**
     * Create an exception for an engine generated error.
     *
     * @param logWriter object used for tracing
     * @param sqlca the SQLCA sent from the server
     */

/**
     * Create one of the exceptions in an exception chain generated by the
     * engine. This constructor calls itself recursively to create the rest of
     * the exception chain if {@code chain} is
     * {@code true}.
     *
     * @param sqlca the SQLCA sent from the server
     * @param number the message number for this exception (counting from 0)
     * @param chain if {@code true}, generate the rest of the exception
     * chain recursively and link it to this exception
     */

/**
     * Set the cause of this exception based on its type.
     * {@code SQLException}s and
     * {@code SqlException}s are
     * linked with {@code setNextException()} and
     * {@code initCause()}.
     * All other exception types are linked with {@code initCause()}.
     */

/**
     * Wrap a SQLException in a SqlException.  This is used by internal routines
     * so the don't have to throw SQLException, which, through the chain of 
     * dependencies would force more and more internal routines to throw
     * SQLException
     */

/**
     * Convert this SqlException into a java.sql.SQLException
     */

/**
     * Helper method to construct an exception which basically says that
     * we encountered an underlying Java exception
     */

