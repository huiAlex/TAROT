/**
 * This interface is used to get information from a DefaultDescriptor.
 *
 */

/**
	 * Constructor for a DefaultDescriptor
	 *
	 * @param dataDictionary    the DD
	 * @param defaultUUID		The UUID of the default
	 * @param tableUUID			The UUID of the table
	 * @param columnNumber		The column number of the column that the default is for
	 */

/**
	 * Get the UUID of the default.
	 *
	 * @return	The UUID of the default.
	 */

/**
	 * Get the UUID of the table.
	 *
	 * @return	The UUID of the table.
	 */

/**
	 * Get the column number of the column.
	 *
	 * @return	The column number of the column.
	 */

/**
	 * Convert the DefaultDescriptor to a String.
	 *
	 * @return	A String representation of this DefaultDescriptor
	 */

/**		
		@return the stored form of this provider

				 */

/**
	 * Return the name of this Provider.  (Useful for errors.)
	 *
	 * @return String	The name of this provider.
	 */

/**
	 * Get the provider's UUID
	 *
	 * @return 	The provider's UUID
	 */

/**
	 * Get the provider's type.
	 *
	 * @return char		The provider's type.
	 */

/**
	 * Check that all of the dependent's dependencies are valid.
	 *
	 * @return true if the dependent is currently valid
	 */

/**
	 * Prepare to mark the dependent as invalid (due to at least one of
	 * its dependencies being invalid).
	 *
	 * @param action	The action causing the invalidation
	 * @param p		the provider
	 *
	 * @exception StandardException thrown if unable to make it invalid
	 */

/**
	 * Mark the dependent as invalid (due to at least one of
	 * its dependencies being invalid).  Always an error
	 * for a constraint -- should never have gotten here.
	 *
	 * @param	action	The action causing the invalidation
	 *
	 * @exception StandardException thrown if called in sanity mode
	 */

