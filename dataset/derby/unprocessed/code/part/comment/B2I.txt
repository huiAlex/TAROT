/**
 * Implements an instance of a B-Tree secondary index conglomerate.
 * A B2I object has two roles.
 * 
 * 
 * The B2I object is stored on disk, and holds the store specific
 * information needed to access/describe the conglomerate. This
 * includes information such as the format ids of the columns, 
 * the conglomerate id of the base table, the location of 
 * row location column.
 * 
 * 
 * Access to all the interfaces start by making a call off the
 * Conglomerate interface. So for instance to get a scan on the
 * conglomerate method {@link #openScan openScan} should be called.
 * 
 * 
 */

/**
	The id of the conglomerate which contains the base table.
	Row locations inserted into this secondary index are assumed
	to refer to that conglomerate.  Used to obtain table/row locks on the
    base table rows which the index rows point at.
	**/

/**
	The column id (zero-based integer index) of the column which holds the row 
    location to the base conglomerate.
	The default value of RowLocationColumn is the last key column.
    Used to obtain table/row locks on the base table rows with the index rows
    point at.
	Currently, RowLocationColumn must be the last key column.
	**/

/**************************************************************************
     * Constructors for This class:
     **************************************************************************
     */

/**************************************************************************
     * Protected locking implmentations of abtract BTree routines:
     *     getBtreeLockingPolicy
     *     lockTable
     **************************************************************************
     */

/**
     * Create a new btree locking policy from scratch.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Lock the base table.
     * 
     * Assumes that segment of the base container is the same as the segment
     * of the btree segment.
     * 
     * RESOLVE - we really want to get the lock without opening the container.
     * raw store will be providing this.
     *
     * @param xact_manager Transaction to associate the lock with.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**************************************************************************
	 *  Private methods of B2I, arranged alphabetically.
     **************************************************************************
     */

/**
	Bulk Load a B-tree secondary index.

		@exception StandardException Standard Derby Error policy.
	raise SQLState.STORE_CONGLOMERATE_DUPLICATE_KEY_EXCEPTION if a duplicate 
    key is detected in the load.
	**/

/**
	Open a b-tree controller.
	
	@exception StandardException Standard exception policy.
	**/

/**
	Open a b-tree secondary index scan controller.
		
	@exception StandardException Standard exception policy.
	**/

/**
     * Open a b-tree compress scan.
     * 
     * B2I does not support a compress scan.
     * 
	 *      *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Return an open StoreCostController for the conglomerate.
     * 
     * Return an open StoreCostController which can be used to ask about 
     * the estimated row counts and costs of ScanController and 
     * ConglomerateController operations, on the given conglomerate.
     * 
	 * @param xact_manager The TransactionController under which this 
     *                     operation takes place.
	 * @param rawtran  raw transaction context in which scan is managed.
     *
	 * @return The open StoreCostController.
     *
	 * @exception  StandardException  Standard exception policy.
     *
     *      **/

/**
	Drop this b-tree secondary index.
		
	@exception StandardException Standard exception policy.
	**/

/**
     * Return static information about the conglomerate to be included in a
     * a compiled plan.
     * 
     * The static info would be valid until any ddl was executed on the 
     * conglomid, and would be up to the caller to throw away when that 
     * happened.  This ties in with what language already does for other 
     * invalidation of static info.  The type of info in this would be 
     * containerid and array of format id's from which templates can be created.
     * The info in this object is read only and can be shared among as many 
     * threads as necessary.
     * 
     *
	 * @return The static compiled information.
     *
     * @param conglomId The identifier of the conglomerate to open.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
		Return my format identifier.

			*/

/**
     * Store the stored representation of the column value in the
     * stream.
     * 
     * For more detailed description of the ACCESS_B2I_V3_ID format see 
     * documentation at top of file.
     *
     *      **/

/**
     * Store the stored representation of the column value in the
     * stream.
     * 
     * For more detailed description of the ACCESS_B2I_V3_ID and 
     * ACCESS_B2I_V4_ID formats see documentation at top of file.
     *
     *      **/

/**
     * Store the stored representation of the column value in the
     * stream.
     * 
     * For more detailed description of the ACCESS_B2I_V3_ID and 
     * ACCESS_B2I_V5_ID formats see documentation at top of file.
     *
     *      **/

/**
     * Restore the in-memory representation from the stream.
     * 
     *
     * @exception ClassNotFoundException Thrown if the stored representation 
     *                                   is serialized and a class named in 
     *                                   the stream could not be found.
     *
     *      **/

