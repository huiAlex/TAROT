/**

  The heap conglomerate factory manages heap conglomerates implemented
  on the raw store.

**/

/**
	Return the default properties for this kind of conglomerate.
		**/

/**
	Return whether this access method implements the implementation
	type given in the argument string.
	The heap only has one implementation type, "heap".

		**/

/**
	Return the primary implementation type for this access method.
	The heap only has one implementation type, "heap".

		**/

/**
	Return whether this access method supports the format supplied in
	the argument.
	The heap currently only supports one format, HEAPFORMAT1.

		**/

/**
	Return the primary format that this access method supports.
	The heap currently only supports one format, HEAPFORMAT1.

		**/

/**
     * Return the conglomerate factory id.
     * 
     * Return a number in the range of 0-15 which identifies this factory.
     * Code which names conglomerates depends on this range currently, but
     * could be easily changed to handle larger ranges.   One hex digit seemed
     * reasonable for the number of conglomerate types being currently 
     * considered (heap, btree, gist, gist btree, gist rtree, hash, others? ).
     * 
	 *      *
	 * @return an unique identifier used to the factory into the conglomid.
     *
     **/

/**
	Create the conglomerate and return a conglomerate object for it.

	@exception StandardException Standard exception policy.

		**/

/**
     * Interface to be called when an undo of an insert is processed.
     * 
     * Implementer of this class provides interface to be called by the raw
     * store when an undo of an insert is processed.  Initial implementation
     * will be by Access layer to queue space reclaiming events if necessary
     * when a rows is logically "deleted" as part of undo of the original
     * insert.  This undo can happen a lot for many applications if they
     * generate expected and handled duplicate key errors.
     * 
     * Caller may decide to call or not based on deleted row count of the
     * page, or if overflow rows/columns are present.
     *
     *
     * @param access_factory    current access_factory of the aborted insert.
     * @param xact              transaction that is being backed out.
     * @param page_key          page key of the aborted insert.
     *
     * @exception  StandardException  Standard exception policy.
     **/

/**
     * Privileged Monitor lookup. Must be private so that user code
     * can't call this entry point.
     */

