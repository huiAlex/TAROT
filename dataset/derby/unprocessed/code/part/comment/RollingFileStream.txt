/**
     * The underlying stream being written to that keeps track of how much
     * has been written
     */

/**
     * The append flag which indicates at creation time to append to an existing
     * file or to always create a new one
     */

/**
     * The rolling file count.  This many files will be created before the
     * oldest is removed and the files rolled.
     */

/**
     * The filename pattern.
     */

/**
     * The lockfile name
     */

/**
     * The output stream that is used as a lock
     */

/**
     * The array of File instance representing the rolling files
     */

/**
     * Construct a default RollingFileStream. This will be configured entirely with default values: 
     * 
     * pattern - %d/derby-%g.log (DERBY_HOME/derby-0.log)
     * limit - 0 (unlimited)
     * count - 1 (one file)
     * append - false (overwrite and not append)
     * 
     *
     * @exception IOException if there are IO problems opening the files.
     * @exception SecurityException if a security manager exists and if the caller does not have
     * LoggingPermission("control")).
     * @exception NullPointerException if pattern property is an empty String.
     */

/**
     * Initialize a RollingFileStream to write to a set of files with optional append. When (approximately) the
     * given limit has been written to one file, another file will be opened. The output will cycle through a set of
     * count files.
     *
     * @param pattern the pattern for naming the output file
     * @param limit the maximum number of bytes to write to any one file
     * @param count the number of files to use
     * @param append specifies append mode
     * @exception IOException if there are IO problems opening the files.
     * @exception SecurityException if a security manager exists and if the caller does not have
     * LoggingPermission("control").
     * @exception IllegalArgumentException if limit &lt; 0, or count &lt; 1.
     * @exception IllegalArgumentException if pattern is an empty string
     *
     */

/**
     * Implements the write method of the OutputStream.  This writes the value
     * to the metered stream.
     * @param b The value to write
     *      */

/**
     * Opens the output files files based on the configured pattern, limit, count,
     * and append mode.
     *      */

/**
     * Generates and returns File from a pattern
     * @param pattern The filename pattern
     * @param generation The generation number used if there is a conflict
     * @param unique The unique number to append to the filename
     * @return The File
     *      */

/**
     * Rotates the log files.  The metered OutputStream is closed,the log files
     * are rotated and then a new metered OutputStream is created.
     *      */

/**
     * Close all the files.
     *
     * @exception SecurityException if a security manager exists and if the caller does not have
     * LoggingPermission("control").
     */

/**
     * Gets a system property in a privileged block
     * @param property The propety to get
     * @return The property value
     */

/**
     * Opens a file in the privileged block
     * @param filename The name of the file to open
     * @param append if true open the file in append mode
     * @return The FileOutputStream for the file
     *      */

/**
     * Check to see if a file exists in a privilege block
     * @param file The file to check
     * @return true if the file exists or false otherwise
     */

/**
     * Delete a file in a privilege block
     * @param file The file to delete
     */

/**
     * Rename a file in a privilege block
     * @param file1 The file to rename
     * @param file2 The file to rename it to
     * @return true if the file was renamed or false otherwise
     */

/**
     * Get the length of a file in a privilege block
     * @param file The file to get the length of
     * @return The length of the file
     */

/**
     * Opens a new file that and delegates it to a MeteredStream
     * @param fname The name of the file
     * @param append If true append to the existing file
     *      */

/**
     * Invoked by the metered OutputStream 
     *      */

/**
         *  The real OutputStream to delegate to
         */

/**
         * The number of bytes written so far to the OutputStream
         */

/**
         * Creates a new instance of MeteredStream
         * @param out The OutputStream to delegate to
         * @param written The number of bytes currently written to the OuptutStream
         */

