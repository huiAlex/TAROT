/**
	  Global debug flag to turn on tracing of reads calls newInstanceFromIdentifier()
	  */

/**
		Start a Monitor based software system.

		This method will execute the following steps.

  
   Create an instance of a module (monitor) of the required implementation.
   Start the monitor which will in turn start any requested services
   Execute the run() method of startCode (if startCode was not null).
   Return.
  
   If MonitorBoot.start() is called more then once then subsequent calls
  have no effect.

		@param bootProperties The application properties
		@param logging Where to place initial error output. This location will be used
			until an InfoStreams module is successfully started.
	*/

/**
        Initialize this class, must only be called by an implementation
		of the monitor (ModuleFactory).
	*/

/**
		Get the monitor.
	*/

/**
		Return the name of the service that the passed in module lives in.
	*/

/**
		Start or find a module in the system service. This call allows modules
		to explictly start services they require.
		If no module matching the criteria is found (see this class's prologue for details)
		then an instance will be created (see prologue) and booted as follows.
		
		((ModuleControl) instance).boot(false, (String) null, (Properties) null);
		

		@return a reference to a module.

		@exception StandardException An attempt to start the module failed.

			*/

/**
		Find a module in the system service.

		@return a reference to a module or null if one cannot be found.
	*/

/**
     * Return a system module. If it cannot be found or the monitor is
     * not running then null is returned.
     */

/**
		Boot or find a unidentified module within a service. This call allows modules
		to start or create any modules they explicitly require to exist within
		their service. If no module matching the criteria is found (see this class's prologue for details)
		then an instance will be created (see prologue) and booted as follows.
		
		((ModuleControl) instance).boot(create, (String) null, properties);
		
		
		The service is defined by the service that the module serviceModule lives in,
		typically this call is made from the boot method of a module and thus
		'this' is passed in for serviceModule.

		@return a reference to a module.

		@exception StandardException An attempt to start the module failed.

	*/

/**
		Boot or find a identified module within a service. This call allows modules
		to start or create any modules they explicitly require to exist within
		their service. If no module matching the criteria is found (see this class's prologue for details)
		then an instance will be created (see prologue) and booted as follows.
		
		((ModuleControl) instance).boot(create, identifer, properties);
		
		
		The service is defined by the service that the module serviceModule lives in,
		typically this call is made from the boot method of a module and thus
		'this' is passed in for serviceModule.

		@return a reference to a module.

		@exception StandardException An attempt to start the module failed.

	*/

/**
		Find an unidentified module within a service.
		
		The service is defined by the service that the module serviceModule lives in.

		@return a reference to a module or null if one cannot be found.

	*/

/**
		Find an identified module within a service.
		
		The service is defined by the service that the module serviceModule lives in.

		@return a reference to a module or null if one cannot be found.

	*/

/**
		Find a service.

		@return a refrence to a module represeting the service or null if the service does not exist.

	*/

/**
		Start a non-persistent service. 
		Context
		A context manager will be created and installed at the start of this method and destroyed
		just before this method returns.

		@return The module from the service if it was started successfully. 

		@exception StandardException An exception was thrown trying to start the service.
	*/

/**
		Create a named service that implements the java interface (or class) fully qualified by factoryInterface.
		The Properties object specifies create time parameters to be used by the modules within the
		service. Any module created by this service may add or remove parameters within the
		properties object in their ModuleControl.boot() method. The properties set will be saved
		by the Monitor for later use when the monitor is started.
		Context
		A context manager will be created and installed at the start of this method and destroyed
		just before this method returns.

		@return The module from the service if it was created successfully, null if a service already existed. 

		@exception StandardException An exception was thrown trying to create the service.
	*/

/**
		Obtain the class object for a class that supports the given identifier.

		If no class has been registered for the identifier then a StandardException
		is thrown with no attached java.lang exception (nextException).
		If a problem loading or accessing the class is obtained then a StandardException
		is thrown with the real java.lang exception attached.

		@return a valid class object

		@exception StandardException See text above.
	*/

/**
		Obtain an new instance of a class that supports the given identifier.

		If no class has been registered for the identifier then a StandardException
		is thrown with no attached java.lang exception (getNestedException).
		If a problem loading or accessing the class or creating the object is obtained
		then a StandardException is thrown with the real java.lang exception attached.

		@return a reference to a newly created object

		@exception StandardException See text above.
	*/

/**
		return a StandardException to indicate that a module failed to
		start because it could not obtain the version of a required product.

		@param productGenusName The genus name of the product.
		@return The exception.
	*/

/**
		return a StandardException to indicate a missing
		implementation.

		@param implementation the module name of the missing implementation.

		@return The exception.
	*/

/**
		return a StandardException to indicate that an exception caused
		starting the module to fail.

		@param t the exception which caused starting the module to fail.

		@return The exception.
	*/

/**
	 *  Translate a localeDescription of the form ll[_CC[_variant]] to
	 *  a Locale object.
	 */

/**
		Single point for checking if an upgrade is allowed.
		@return true a full upgrade has been requested, false soft upgrade mode is active.
	 */

/**
	  *
	  *	@param	startParams			startup parameters
	  *	@param	desiredProperty		property we're interested in
	  *
	  *	@return	true		type is as desired.
	  *			false		otherwise
	  *
	  */

/**
     * Is engineType a match for desiredType. A match exists
     * if the bit intersect of the two values is no zero.
     */

/**
	  *	@param	startParams		startup parameters
	  *
	  *	@return	type of engine
	  *
	  */

/**
	  Return true if the properties set provided contains
	  database creation attributes for a database
	  of the correct type
	  */

/**
     * Logs the stack trace of the specified throwable object.
     */

