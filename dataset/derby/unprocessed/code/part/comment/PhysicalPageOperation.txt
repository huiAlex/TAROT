/**
	An abstract class that is used for physical log operation.  A physical log
	operation is one where the undo of the operation must be applied to the
	same page as the original operation, and the undo operation must store the
	byte image of the row(s) changed to its before image.  (If a logical page
	operation happened to the page or if another transaction altered other rows
	on the page, the undo of this operation will only restore the before image
	of the row(s) affected).

	
	@derby.formatId	no format id, an abstract class.
	@derby.purpose	provide methods for physical undo
	@derby.upgrade
	@derby.diskLayout
		PageBasicOperation	the super class
	@derby.endFormat
	
*/

/**
		Undoable method
	*/

/**
		Undo the change indicated by this log operation and optional data.
		The page the undo should apply to is the latched undoPage, the
		recordId is the same as the roll forward operation.  
		
		In this RawStore implementation, should only only be called via
		CompOp.doMe.

		 The available() method of in indicates how much data can be read, i.e.
		how much was originally written.

		@param xact			the Transaction doing the rollback
		@param undoPage		the page to rollback changes on
		@param CLRinstant	the log instant of this (PageUndo) operation
		@param in			optional data for the rollback operation

		@exception IOException Can be thrown by any of the methods of ObjectInput.
		@exception StandardException Standard Derby policy.		
	*/

