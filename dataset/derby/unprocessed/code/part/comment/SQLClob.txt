/**
 * SQLClob represents a CLOB value with UCS_BASIC collation.
 * CLOB supports LIKE operator only for collation.
 */

/** The header generator used for 10.4 (or older) databases. */

/** The header generator used for 10.5 databases. */

/**
     * The maximum number of bytes used by the stream header.
     * 
     * Use the length specified by the ten five header generator.
     */

/**
     * The descriptor for the stream. If there is no stream this should be
     * {@code null}, which is also true if the descriptor hasen't been
     * constructed yet.
     * Note: Always check if {@code stream} is non-null before using
     * the information stored in the descriptor internally.
     */

/** Tells if the database is being accessed in soft upgrade mode. */

/**
     * Returns a clone of this CLOB value.
     * 
     * Unlike the other binary types, CLOBs can be very large. We try to clone
     * the underlying stream when possible to avoid having to materialize the
     * value into memory.
     *
     * @param forceMaterialization any streams representing the data value will
     *      be materialized if {@code true}, the data value will be kept as a
     *      stream if possible if {@code false}
     * @return A clone of this CLOB value.
     *      */

/**
	 * 	 *
	 */

/** @see StringDataValue#getValue(RuleBasedCollator) */

/**
		Return my format identifier.

			*/

/**
     * Returns the character length of this Clob.
     * 
     * If the value is stored as a stream, the stream header will be read. If
     * the stream header doesn't contain the stream length, the whole stream
     * will be decoded to determine the length.
     *
     * @return The character length of this Clob.
     *      */

/**
     * @exception StandardException     Thrown on error
     */

/**
     * Returns a descriptor for the input stream for this CLOB value.
     * 
     * The descriptor contains information about header data, current positions,
     * length, whether the stream should be buffered or not, and if the stream
     * is capable of repositioning itself.
     * 
     * When this method returns, the stream is positioned on the first
     * character position, such that the next read will return the first
     * character in the stream.
     *
     * @return A descriptor for the stream, which includes a reference to the
     *      stream itself. If the value cannot be represented as a stream,
     *      {@code null} is returned instead of a descriptor.
     *      */

/**
     * Tells if this CLOB value is, or will be, represented by a stream.
     *
     * @return {@code true} if the value is represented by a stream,
     *      {@code false} otherwise.
     */

/**
     * Gets a trace representation of the CLOB for debugging.
     *
     * @return a trace representation of the CLOB.
     */

/**
     * Normalization method - this method may be called when putting
     * a value into a SQLClob, for example, when inserting into a SQLClob
     * column.  See NormalizeResultSet in execution.
     * Per the SQL standard ,if the clob column is not big enough to 
     * hold the value being inserted,truncation error will result
     * if there are trailing non-blanks. Truncation of trailing blanks
     * is allowed.
     * @param desiredType   The type to normalize the source column to
     * @param sourceValue   The value to normalize
     *
     *
     * @exception StandardException             Thrown for null into
     *                                          non-nullable column, and for
     *                                          truncation error
     */

/**
     * Sets a new stream for this CLOB.
     *
     * @param stream the new stream
     */

/**
     * Set the value from an non-null Java.sql.Clob object.
     */

/**
     * Writes the CLOB data value to the given destination stream using the
     * modified UTF-8 format.
     *
     * @param out destination stream
     *      */

/**
     * Returns a stream header generator for a Clob.
     * 
     * NOTE: To guarantee a successful generation, one of the following
     * two conditions must be met at header or EOF generation time:
     *  {@code setStreamHeaderFormat} has been invoked before the header
     *          generator was obtained.
     *      There is context at generation time, such that the mode can be
     *          determined by obtaining the database context and by consulting
     *          the data dictionary.
     * 
     *
     * @return A stream header generator.
     */

/**
     * Tells whether the database is being accessed in soft upgrade mode or not.
     *
     * @param inSoftUpgradeMode {@code TRUE} if the database is accessed in
     *      soft upgrade mode, {@code FALSE} is not, or {@code null} if unknown
     */

/**
     * Investigates the header and returns length information.
     *
     * @param hdr the raw header bytes
     * @param bytesRead number of bytes written into the raw header bytes array
     * @return The information obtained from the header.
     *      *      seems to have been corrupted
     */

/**
     * Reads and materializes the CLOB value from the stream.
     *
     * @param in source stream
     *      *      *      the stream header is invalid
     */

/**
     * Reads and materializes the CLOB value from the stream.
     *
     * @param in source stream
     *      *      *      the stream header is invalid
     */

/**
     * Rewinds the stream to the beginning and then skips the specified number
     * of bytes.
     *
     * @param in input stream to rewind
     * @param offset number of bytes to skip
     *      */

/**
     * Holder class for header information gathered from the raw byte header in 
     * the stream.
     */

/** The value length, either in bytes or characters. */

/** The header length in bytes. */

/**
         * Creates a new header info object.
         *
         * @param headerLength the header length in bytes
         * @param valueLength the value length (chars or bytes)
         */

/**
         * Returns the header length in bytes.
         *
         * @return Number of bytes occupied by the header.
         */

/**
        * Returns the character length encoded in the header, if any.
        *
        * @return A positive integer if a character count was encoded in the
        *       header, or {@code 0} (zero) if the header contained byte length
        *       information.
        */

/**
        * Returns the byte length encoded in the header, if any.
        *
        * @return A positive integer if a byte count was encoded in the
        *       header, or {@code 0} (zero) if the header contained character
        *       length information.
        */

/**
        * Tells whether the encoded length was in characters or bytes.
        *
        * @return {@code true} if the header contained a character count,
        *       {@code false} if it contained a byte count.
        */

/**
        * Returns a textual representation.
        */

