/**
 * A description of a byte stream representing characters. The description is
 * used by decoders to properly configure themselves. Note that encoding is not
 * included in the description, because all internal byte streams are expected
 * to be using the modified UTF-8 encoding (see DataInput).
 * 
 * The information in the description is only guaranteed to be valid at the
 * moment it is passed to the decoder object. As the decoder works on the
 * stream, the information in the descriptor will be outdated.
 * 
 * To create a stream descriptor, obtain a {@code Builder} instance and set the
 * required parameters.
 *
 *  */

/**
     * Constant for the character position, when it is positioned before the
     * first character in the stream (i.e. at the very beginning of the stream
     * or in the header).
     */

/** First data byte in the byte stream. */

/** The current byte position. */

/** The current character position. */

/** The byte length of the stream, {@code 0} if unknown. */

/** The character length of the stream, {@code 0} if unknown. */

/** The maximum allowed character length. */

/** Tells if the stream can be buffered or not. */

/** Tells if the stream is aware of its own position. */

/** Reference to the stream we are describing. */

/**
     * Creates a character stream descriptor, using the supplied builder.
     * 
     * Use the builder to create instances of this class.
     *
     * @param b object builder
     *      */

/**
     * Tells if the described stream should be buffered or not.
     * 
     * Some of the reasons a stream should not be buffered at this level, are
     * the stream is already buffered, or it serves bytes directly from a byte
     * array in memory.
     *
     * @return {@code true} if the stream should be buffered for improved
     *      performance, {@code false} if it should not be buffered.
     */

/**
     * Tells if the described stream is aware of its own position, and that it
     * can reposition itself on request.
     *
     * @return {@code true} if the stream is position aware, @{code false}
     *      otherwise.
     */

/**
     * Returns the current character position.
     *
     * @return The current character position, where the first character is at
     *      position {@code 1}, or {@code BEFORE_FIRST} if the stream is
     *      positioned before the first character.
     */

/**
     * Returns the first index of the described stream that contains real data.
     * 
     * The information is typically used to filter out meta data at the head of
     * the stream, and to correctly reset the stream.
     *
     * @return The first position in the stream containing real data.
     */

/**
     * Returns the imposed maximum character length on the described stream.
     * 
     * The default value is {@code Long.MAX_VALUE}.
     *
     * @return The max allowed character length of the stream, or {@code 0} if
     *      no limit has been set.
     */

/**
     * Returns the associated stream.
     *
     * @return An {@code InputStream} reference.
     */

/**
     * Returns the associated positioned stream, if the stream is position
     * aware.
     *
     * @return A {@code PositionedStream} reference.
     *      *      {@code PositionedStream}
     *      *      assoicated stream isn't described as position aware.
     *      */

/**
     * The builder for the {@code CharacterStreamDescriptor} class. The builder
     * is used to avoid having a large set of constructors. See the
     * {@linkplain #build} method for pre-build field validation. Note that the
     * validation is only performed in sane builds.
     */

/** Default max character length is unlimited. */

/**
         * Creates a builder object.
         */

/**
         * Sets if the stream should be buffered, defaults to {@code false}.
         *
         * @param bufferable {@code true} if buffering is advised, {@code false}
         *      if not
         * @return The builder.
         */

/**
         * Sets if the stream can reposition itself or not, defaults to
         * {@code false}.
         *
         * @param positionAware {@code true} if the stream can reposition
         *      itself, {@code false} if not
         * @return The builder.
         */

/**
         * Sets the current byte position, defaults to {@code 0}.
         *
         * @param pos the current byte position
         * @return The builder.
         */

/**
         * Sets the current character position, defaults to {@code 1}.
         * 
         * There is a special value for when the stream is position in the
         * header area - {@code BEFORE_FIRST}.
         *
         * @param pos the current character position,starting at {@code 1}
         * @return The builder.
         *          */

/**
         * Sets the byte length of the stream, defaults to {@code 0}.
         * 
         * A length of {@code 0} means the length is unknown.
         *
         * @param length the byte length of the stream (including header)
         * @return The builder.
         */

/**
         * Copies the state of the specified descriptor.
         *
         * @param csd the descriptor to copy
         * @return The builder.
         */

/**
         * Sets the character length of the stream, defaults to {@code 0}.
         * 
         * Headers are not included in this length, only the user data.
         * A length of {@code 0} means the length is unknown.
         *
         * @param length the character length of the stream
         * @return The builder.
         */

/**
         * Sets the offset of the user data, defaults to {@code 0}.
         *
         * @param offset first index with user data, zero based
         * @return The builder.
         */

/**
         * Imposes a length limit on the stream, expressed in number of
         * characters, defaults to {@code Long.MAX_VALUE}.
         *
         * @param length maximum number of characters
         * @return The builder.
         */

/**
         * Sets the stream described by the descriptor.
         * 
         * The stream is not allowed to be {@code null}.
         *
         * @param stream the stream
         * @return The builder.
         */

/**
         * Creates a descriptor object based on the parameters kept in the
         * builder instance.
         * 
         * Default values will be used for parameters for which a value hasn't
         * been set.
         * 
         * NOTE: Parameter validation is only performed in sane builds.
         *
         * @return A character stream descriptor instance.
         */

/**
         * Returns a textual representation of the builder.
         *
         * @return The textual representation of the builder.
         */

