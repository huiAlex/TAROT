/**
 * Class representing a Derby version.
 * 
 * The format is major.minor.fixpack.point, for instance 10.6.2.1.
 */

/**
     * Shard static calendar used to format release date (this is not a
     * erformance critical class).
     */

/** Constant telling that a version hasn't been released. */

/** Derby version string, for instance "10.6.2.1". */

/**
     * Creates a new Derby version object.
     *
     * @param rv remote version object fetched from JIRA
     */

/**
     * Returns the Derby version string.
     *
     * @return Version string, for instance "10.6.2.1".
     */

/**
     * Returns the Derby version string quoted for use in JQL.
     *
     * @return Quoted version string, for instance '"10.6.2.1"'.
     */

/**
     * Returns the release date in milliseconds since the Epoch.
     *
     * @return Release date as milliseconds since the Epoch.
     *      */

/**
     * Returns the release date formatted as a string (YYYY-MM-DD).
     *
     * @return The release date, or "n/a" if not released.
     */

/**
     * Tells if this version has been released.
     *
     * @return {@code true} if released, {@code false} if not.
     */

/**
     * Tells if this version has the same fixpack as the other version.
     * 
     * This generally means that the two versions are release candidates for an
     * upcoming release.
     *
     * @param other other version
     * @return {@code true} if the fixpack component of the two versions are
     *      equal (in addition to the major and minor version), for instance
     *      the case for 10.6.2.1 and 10.6.2.2, {@code false} otherwise.
     *
     */

/**
     * Compares this version to another version based on the Derby version
     * strings.
     * 
     * Note that this comparision doesn't take the release date into
     * consideration, but only the release string. This means that even though
     * 10.3.3.0 was released after 10.4.1.3, 10.4.1.3 will be considered
     * greater than 10.3.3.0.
     *
     * @param o other version
     * @return {@code 1} if this version is greater than the other version,
     *      {@code -1} if this version is smaller than the other version, and
     *      {@code 0} if the two versions are identical.
     */

/** Adds a leading zero if the value is less than ten. */

