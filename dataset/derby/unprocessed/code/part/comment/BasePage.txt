/**

  This class implements all the the generic locking behaviour for a Page.
  It leaves method used to log and store the records up to sub-classes.
  It is intended that the object can represent multiple pages from different
  containers during its lifetime.
  
  A page contains a set of records, which can be accessed by "slot",
  which defines the order of the records on the page, or by "id" which
  defines the identity of the records on the page.  Clients access
  records by both slot and id, depending on their needs.
  
  BasePage implements Observer to watch the ContainerHandle which notifies
  its Observers when it is closing.

  
  MT - mutable

 **/

/**
		auxiliary object

		MT - mutable - content dynamic : single thread required. This reference is
		set while the page is latched and returned to callers of page while the page is latched.
		For correct MT behaviour it is assumed that the caller discards any reference to an
		auxiliary object once the page is unlatched. The reference mya be cleared while
		the page is latched, or while the page is being cleaned from the cache. In the latter
		case the cache manager ensures that only a single thread can access this object.		
	*/

/**
		this page's identity
		
		MT - immutable - content dynamic : single thread required
	*/

/**
		In-memory slot table, array of StoredRecordHeaders.
		
		MT - Immutable - Content Dynamic : Single thread required.
	*/

/**
		Page owner during exclusive access.

		MT - mutable : single thread required, provided by Lockable single thread required. 
	*/

/**
		Count of times a latch is held nested during an abort
	*/

/**
     * Used to determine latch state of a page.
     *
     * MT - mutable
     *
     * There are 3 latch states for a page:
     *
     * UNLATCHED - (owner == null) 
     * PRELATCH  - (owner != null) &amp;&amp; preLatch
     * LATCHED   - (owner != null) &amp;&amp; !preLatch
     *
     * A page may be "cleaned" while it is either UNLATCHED, or PRELATCH, but
     * it must wait for it to be not LATCHED.
     *
     * A page may move from UNLATCHED to PRELATCH, while being cleaned.
     * A page must wait for !inClean before it can move from PRELATCH to 
     * LATCHED.
     **/

/**
		Instant of last log record that updated this page.

		 MT - mutable : latched
	*/

/**
     * The oldest version where we know that any record id that was on the
     * page at that version, must still be on the page. This is used by the
     * B-tree code to decide whether or not it needs to reposition when
     * resuming a scan.
     */

/**
		Version of the page.

		 MT - mutable : single thread required - The page must be latched to access
		this variable or the page muts be in the noidentiy state.
	*/

/**
		Status of the page
	 */

/**
		Values for pageStatus flag 

		page goes thru the following transition:
		VALID_PAGE &lt;-&gt; deallocated page -&gt; free page &lt;-&gt; VALID_PAGE

		deallocated and free page are both INVALID_PAGE as far as BasePage is concerned.
		When a page is deallocated, it transitioned from VALID to INVALID.
		When a page is allocated, it trnasitioned from INVALID to VALID.

	*/

/**
		Init page flag.

		INIT_PAGE_REUSE - set if page is being initialized for reuse
		INIT_PAGE_OVERFLOW - set if page will be an overflow page
		INIT_PAGE_REUSE_RECORDID - set if page is being reused and its record
						id can be reset to RecordHandle.FIRST_RECORD_ID, rather
						to 1+ next recordId on the page
	*/

/**
		Log Record flag.  Why the before image of this record is being logged

		LOG_RECORD_FOR_UPDATE - set if the record is being logged for update.
		LOG_RECORD_DEFAULT - for non update.
		LOG_RECORD_FOR_PURGE - set if the record is being logged for purges 
		                       and no data required to ve logged.
		The other cases (copy, purge, delete), we don't need to distinguish,
		leave no bit set. 
	 */

/**
	 ** Create a new, empty page.
	 **/

/**
        Initialized the BasePage.
        
		Initialize the object, ie. perform work normally perfomed in 
        constructor.  Called by setIdentity() and createIdentity().
	*/

/**
		Must be called by a sub-class before calling setHeaderAtSlot.

	*/

/**
		Initialized this page for reuse or first use
	*/

/**	
		OK to hand object outside to cache.. 
	*/

/** @see Page#getPageNumber */

/**
	  	  @exception StandardException recordHandle is not a valid record handle
	*/

/**
		@exception StandardException	Standard Derby error policy
			 */

/** 
		@exception StandardException Record does not exist on this page.

        	 */

/** 
		@exception StandardException Record does not exist on this page.

        	 */

/** 		@exception StandardException	Standard Derby error policy
	 */

/** 		@exception StandardException	Standard Derby error policy
	 */

/**
		Insert a row allowing overflow.

		If handle is supplied then the record at that hanlde will be updated
		to indicate it is a partial row and it has an overflow portion.

		@exception StandardException	Standard Derby error policy
	*/

/**
		The page or its header is about to be modified.
		Loggable actions use this to make sure the page gets cleaned if a
		checkpoint is taken after any log record is sent to the log stream but
		before the page is actually dirtied.
	*/

/**
		Update the overflow pointer for a long row

		 MT - latched - page latch must be held

		@param handle			handle of the record for long row
		@param overflowHandle	the overflow (continuation) pointer for the long row

		@exception StandardException	Standard Derby error policy
	*/

/**
		Update the overflow pointer for a long column

		 MT - latched - page latch must be held

		@param handle			handle of the record for long row
		@param overflowHandle	the overflow (continuation) pointer for the long row

		@exception StandardException	Standard Derby error policy
	*/

/**
		Append an overflow pointer to a partly logged row,
		to point to a long column that just been logged.

		 MT - latched - page latch must be held

		@param logBuffer		The buffer that contains the partially logged row.
		@param overflowHandle	the overflow (continuation) pointer
								to the beginning of the long column

		@exception StandardException	Standard Derby error policy
	*/

/** 		@exception StandardException	Standard Derby error policy
		@exception StandardException	StandardException.newException(SQLState.UPDATE_DELETED_RECORD
		if the record is already deleted
		@exception StandardException	StandardException.newException(SQLState.CONTAINER_READ_ONLY
		if the container is read only
	 */

/** 		@exception StandardException	Standard Derby error policy
		@exception StandardException	StandardException.newException(SQLState.UPDATE_DELETED_RECORD
		if the record is already deleted
		@exception StandardException	StandardException.newException(SQLState.CONTAINER_READ_ONLY
		if the container is read only
	*/

/** 		@exception StandardException Standard exception policy. 
	*/

/** 		@exception StandardException Standard exception policy. 
	*/

/** 
		
		@param slot		the slot number
		@param delete	true if this record is to be deleted, false if this
						deleted record is to be marked undeleted
		@param undo		logical undo logic if necessary

		@exception StandardException Standard exception policy. 
		@exception StandardException	StandardException.newException(SQLState.UPDATE_DELETED_RECORD
		if an attempt to delete a record that is already deleted
		@exception StandardException	StandardException.newException(SQLState.UNDELETE_RECORD
		if an attempt to undelete a record that is not deleted
	 */

/** 
		Purge one or more rows on a non-overflow page.

				@exception StandardException Standard exception policy. 
	 */

/**
		Purge all the overflow columns and overflow rows of the record at slot.
		@exception StandardException Standard exception policy. 
	 */

/** 		@exception StandardException Standard exception policy. 
	*/

/**
		Unlatch the page.
			*/

/**
	 * Check whether the page is latched.
	 *
	 * @return true if the page is latched, false
	 * otherwise
	 * 	 */

/** @see Page#recordCount */

/**
		get record count without checking for latch
	*/

/**
		get record count without checking for latch
	*/

/** @see Page#nonDeletedRecordCount */

/** 		@exception StandardException Standard exception policy. 
	 */

/**
		Set the aux object.

		 MT - single thread required. Calls via the Page interface will have the
			page latched, thus providing single threadedness. Otherwise calls via this class
			are only made when the class has no-identity, thus only a single thread can see the object. 

			*/

/**
		Get the aux object.
		 MT - latched - It is required the caller throws away the returned reference
		when the page is unlatched.

			*/

/**
     * Set a hint in this page to make B-tree scans positioned on it
     * reposition before they continue. This method is typically called
     * when rows are removed from a B-tree leaf page (for instance in a
     * page split).
     */

/**
     * Check if a B-tree scan positioned on this page needs to reposition.
     *
     * @param version the last version on which the B-tree scan had a valid
     * position on this page
     * @return {@code true} if a repositioning is needed because the row
     * on the current position may have been removed from this page after
     * the specified version; {@code false} otherwise
     */

/**
		This object is set to observe the BaseContainerHandle it was obtained by,
		that handle will notify its observers when it is being closed. In that case
		we will release the latch on the page held by that container.

		
		MT - latched

			*/

/**
		Get the Page identifer

		 MT - RESOLVE
	*/

/**
		Get an exclusive latch on the page.
		
		MT - thread safe
		@exception StandardException Standard Derby policy.
	*/

/**
		Get an exclusive latch on the page, but only if I don't have to wait.
		
		MT - thread safe
	*/

/**
		Release the exclusive latch on the page.
		
		MT - latched
	*/

/**
	 * Move page state from UNLATCHED to PRELATCH. setExclusive*() routines do
	 * the work of completing the latch - using the preLatch status.
	 *
	 * @param requester handle to the container requesting ownership
	 */

/**
		Must be called by any non-abstract sub-class to initialise the slot
		table.
	*/

/**
		Returns true if the entire record of that slot fits inside of this
		page.  Returns false if part of the record on this slot overflows to
		other pages, either due to long row or long column. 

		
		MT - latched

		@exception StandardException Standard Derby error policy
	 */

/**
		Is the given slot number on the page?

		
		MT - latched
	*/

/**
		Mark the record at the passed in slot as deleted.

		return code comes from StoredRecordHeader class:
			return	1, if delete status from not deleted to deleted
			return -1, if delete status from deleted to not deleted
			return  0, if status unchanged.
		
		Any sub-class must call this method when deleting a record.

		
		MT - latched

		@exception StandardException Standard Derby error policy
		@exception IOException IO error accessing page
	*/

/**
		Mark this page as being deallocated

		@exception StandardException Derby Standard error policy
	*/

/**
		Mark this page as being allocated and initialize it to a pristine page
		@exception StandardException Derby Standard error policy
	*/

/**
		Find the slot for the record with the passed in identifier.

		
		This method returns the record regardless of its deleted status.
        
        The "slotHint" argument is a hint about what slot the record id might
        be in.  Callers may save the last slot where the record was across
        latch/unlatches to the page, and then pass that slot back as a hint - 
        if the page has not shuffled slots since the last reference then the
        hint will succeed and a linear search is saved.  If the caller has
        no idea where it may be, then FIRST_SLOT_NUMBER is passed in and a
        linear search is performed.
		
		MT - latched

        @param recordId  record id of the record to search for.
        @param slotHint "hint" about which slot the record might be in.
		
	*/

/**
		Copy num_rows from srcPage, src_slot into this page starting at dest_slot.
		This is destination page of the the copy half of copy and Purge.

			 */

/**
        Remove record at slot.
        
		Remove the slot at the in-memory slot table, i.e.,
		slots from 0 to deleteSlot-1 is untouched, deleteSlot is removed from
		in memory slot table, deleteSlot+1 .. recordCount()-1 move to
		down one slot.

		
		MT - latched
	*/

/**
		Shift all records in the in-memory slot table up one slot,
		starting at and including the record in slot 'low'
		A new slot is added to accomdate the move.

		
		MT - latched
	*/

/**
		Try to compact this record.  Deleted record are treated the same way as
		nondeleted record.  This page must not be an overflow page.  The record
		may already have been purged from the page.

	  	
		Locking Policy
		
		No locks are obtained.

		
		MT - latched

		
		NOTE : CAVEAT 
		This operation will physically get rid of any reserved space this
		record may have, or it may compact the record by merging strung out row
		pieces together.  Since the freed reserved space is immediately usable
		by other transactions which latched the page, it is only safe to use
		this operation if the caller knows that it has exclusive access to the
		page for the duration of the transaction, i.e., effectively holding a
		page lock on the page, AND that the record has no uncommitted
		updates.

	  @param handle Handle to deleted or non-deleted record
	  
	  @exception StandardException	Standard Derby error policy
	*/

/**
		Return the current page version.
	*/

/**
		increment the version by one and return the new version.
	*/

/**
		set it when the page is read from disk.

		 MT - single thread required - Only called while the page has no identity which
		requires that only a single caller can be accessing it.
	*/

/**
		Set page status based on passed in status flag.
	*/

/**
		Get the page status, one of the values in the above page status flag
	*/

/**
		Read portion of a log record at the given slot into the given byteHolder.

		 MT - latched, page is latched when this methods is called.


		@exception StandardException	Standard Derby error policy
	*/

/**
		Create a new record identifier.

		 MT - latched, page is latched when this methods is called.

		@exception StandardException	Standard Derby error policy
	*/

/**
		Create a new record identifier, and bump to next recordid.

		 MT - latched, page is latched when this methods is called.

		@exception StandardException	Standard Derby error policy
	*/

/**
		Create a new record identifier, the passed in one is the last one created.
		Use this method to collect and reserve multiple recordIds in one
		stroke.  Given the same input recordId, the subclass MUST return the
		same recordId every time.

		 MT - latched, page is latched when this methods is called.

		@exception StandardException	Standard Derby error policy
	*/

/**
		Is there space for copying this many rows which takes this many bytes
		on the page

		 MT - latched, page is latched when this methods is called.

		@exception StandardException Standard Derby policy.
	*/

/**
		Return the total number of bytes used, reserved, or wasted by the
		record at this slot.

		 MT - latched, page is latched when this methods is called.

		@exception StandardException Standard Derby policy.
	*/

/**
		Return the total number of bytes reserved by the
		record at this slot.

		 MT - latched, page is latched when this methods is called.

		@exception IOException Thrown by InputStream methods potential I/O errors
	*/

/**
		Get the stored length of a record. This must match the amount of data
		written by logColumn and logField.

		 MT - latched - page latch must be held
	*/

/**
		Restore a storable row from a InputStream that was used to
		store the row after a logRecord call.

		 MT - latched - page latch must be held

		@exception StandardException	Standard Derby error policy
		@exception IOException object exceeds the available data in the stream.

	*/

/**
		Log a currently stored record to the output stream.
		The logged version of the record must be readable by storeRecord.

		 MT - latched - page latch must be held


		@param slot		Slot number the record is stored in.
		@param flag		LOG_RECORD_*, the reason for logging the record.
		@param recordId Record identifier of the record.
		@param validColumns which columns needs to be logged
		@param out		Where to write the logged form.
		@param headRowHandle	the recordHandle of the head row piece, used
						for post commit cleanup for update. 

		@exception StandardException	Standard Derby error policy
	*/

/**
		Log a currently stored field.
		The logged version of the field must be readable by storeField.

		 MT - latched - page latch must be held

		@param slot		Slot number the record is stored in.
		@param fieldNumber Number of the field (starts at 0).
		@param out		Where to write the logged form.

		@exception StandardException	Standard Derby error policy
	*/

/**
		Log a to be stored column.

		 MT - latched - page latch must be held

		@param slot		slot of the current record
		@param fieldId	field number of the column being updated
		@param column column version of the field.
		@param out		Where to write the logged form.

		@exception StandardException	Standard Derby error policy
	*/

/**
		Log a to be stored long column.  return -1 when done.

		 MT - latched - page latch must be held

		@param slot			slot of the current record
		@param recordId		the id of the long column record
		@param column		column version of the field.
		@param out			Where to write the logged form.

		@exception StandardException	Standard Derby error policy
	*/

/**
		Read a previously stored record written by logRecord or logRow and store
		it on the data page at the given slot with the given record identifier.
		Any previously stored record must be replaced.

		 MT - latched - page latch must be held

		@exception StandardException Standard Derby error policy
		@exception IOException Thrown by InputStream methods potential I/O errors
		while writing the page
		
	*/

/**
		Read a previously stored field written by logField or logColumn and store
		it on the data page at thge given slot with the given record identifier
		and field number. Any previously stored field is replaced.

		 MT - latched - page latch must be held

		@exception StandardException Standard Derby error policy
		@exception IOException Thrown by InputStream methods and potential I/O errors
		while writing the page.
	*/

/**
		Reserve the required number of bytes for the record in the specified slot.

		 MT - latched - page latch must be held

		@exception StandardException Standard Derby error policy
		@exception IOException Thrown by InputStream methods and potential I/O errors
		while writing the page.
	*/

/**
		Skip a previously stored field written by logField or logColumn.

		 MT - latched - page latch must be held
		
		@exception StandardException Standard Derby error policy
		@exception IOException Thrown by InputStream methods

	*/

/**
		Set the delete status of a record from the page.

		 MT - latched - page latch must be held

		@param slot the slot to delete or undelete
		@param delete set delete status to this value 

		@exception StandardException Standard Derby error policy
		@exception IOException IO error accessing page
	*/

/**
		Purge a record from the page.

		 MT - latched - page latch must be held

		@param slot the slot to purge
		@param recordId the id of the record that is to be purged

		@exception StandardException Standard Derby error policy
		@exception IOException Thrown by potential I/O errors
		while writing the page.
	*/

/**
		Subclass implementation of compactRecord.
				@exception StandardException Standard Derby error policy
	 */

/**
		Set the page status underneath a log record

		 MT - latched - page latch must be held

		@param instant the log instant of the log record
		@param status the page status

		@exception StandardException Standard Derby error policy
	*/

/**
		initialize a page for the first time or for reuse

		All subtypes are expected to overwrite this method if it has something to clean up

		@exception StandardException Standard Derby error policy
	*/

/**
		Set the reserved space for this row to value.
		@exception StandardException Standard Derby error policy
	*/

/**
		Return true if the page is an overflow page, false if not.
		For implementation that don't have overflow pages, return false.
	*/

/**
		Returns false if an insert is not to be allowed in the page.
	*/

/**
		Returns true if an insert is allowed in the page and the page is
		relatively unfilled - let specific implementation decide what
		relatively unfilled means
	*/

/**
		Set the number of rows in the container - the page uses this to decide
		whether it needs to aggressive set the container's row count when it
		changes. 
	 */

/** Debugging, print slot table information */

