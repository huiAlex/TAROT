/**
 * This class acts as a layer of blob/clob repository (in memory or file).
 * The max bytes of data stored in memory depends on the way this
 * class is created. If the class is created with initial data, the buffer
 * size is set to the size of the byte array supplied, but no larger than
 * MAX_BUF_SIZE. If no initial data is supplied, or if the initial data size
 * is less than DEFAULT_BUF_SIZE, the buffer size is set to DEFAULT_BUF_SIZE.
 * When write increases the data beyond this value a temporary file is created
 * and data is moved into that. If truncate reduces the size of the file below
 * initial buffer size, the data is moved into memory.
 *
 * This class also creates InputStream and OutputStream which can be used to access
 * blob data irrespective of if its in memory or in file.
 */

/**
     * Creates an empty LOBStreamControl.
     * @param conn Connection for this lob
     */

/**
     * Creates a LOBStreamControl and initializes with a bytes array.
     * @param conn Connection for this lob
     * @param data initial value
     */

/**
     * Writes one byte.
     * @param b byte
     * @param pos
     * @return new position
     *      *      */

/**
     * Writes {@code len} bytes from the specified byte array to the LOB.
     *
     * @param b byte array
     * @param off offset from where to read from the byte array
     * @param len number of bytes to be written
     * @param pos starting position
     * @return The position after the bytes have been written to the LOB.
     *      *      *      *       {@code b.length - off}
     */

/**
     * Reads one byte.
     * @param pos position from where to read
     * @return byte
     *      *      */

/**
     * Reads bytes starting from 'position' into bytes array.
     * starting from 'offset'
     * @param buff array into the bytes will be copied
     * @param off offset from where the array has to be populated
     * @param len number of bytes to read
     * @param pos initial position before reading
     * @return number new position
     *      *      */

/**
     * returns input stream linked with this object.
     * @param pos initial postion
     * @return InputStream
     */

/**
     * returns output stream linked with this object
     * @param pos initial postion
     * @return OutputStream
     */

/**
     * Returns length of data.
     * @return length
     *      */

/**
     * Resets the size.
     * @param size new size should be smaller than existing size
     *      */

/**
     * Copies bytes from stream to local storage.
     * 
     * Note that specifying the length as {@code Long.MAX_VALUE} results in
     * reading data from the stream until EOF is reached, but no length checking
     * will be performed.
     *
     * @param inStream the stream to copy from
     * @param length number of bytes to be copied, or {@code Long.MAX_VALUE} to
     *      copy everything until EOF is reached
     *      *      */

/**
     * Copies UTF-8 encoded chars from a stream to local storage.
     * 
     * Note that specifying the length as {@code Long.MAX_VALUE} results in
     * reading data from the stream until EOF is reached, but no length checking
     * will be performed.
     *
     * @param utf8Stream the stream to copy from
     * @param charLength number of chars to be copied, or {@code Long.MAX_VALUE}
     *      to copy everything until EOF is reached
     * @return The number of characters copied.
     *      *      *      *      {@code LOBStreamControl}-object fails
     *      */

/**
     * Invalidates all the variables and closes file handle if open.
     *      */

/**
     * Close and release all resources held by a temporary file. The file will
     * also be deleted from the file system and removed from the list of
     * {@code LOBFile}s in {@code EmbedConnection}.
     *
     * @param file the temporary file
     *      */

/**
     * Replaces a block of bytes in the middle of the LOB with a another block
     * of bytes, which may be of a different size.
     * 
     * The new byte array may not be be of same length as the original,
     * thus it may result in resizing the total lob.
     *
     * @param buf byte array which will be written inplace of old block
     * @param stPos inclusive starting position of current block
     * @param endPos exclusive end position of current block
     * @return Current position after write.
     *      *      */

/**
     * Returns the running sequence number to check if the lob is updated since
     * last access.
     *
     * @return The current update sequence number.
     */

/**
     * Privileged startup. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged service lookup. Must be private so that user code
     * can't call this entry point.
     */

