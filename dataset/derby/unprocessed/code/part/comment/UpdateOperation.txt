/**
	Represents the update of a particular row on a page.

	
	@derby.formatId	LOGOP_UPDATE
		the formatId is written by FormatIdOutputStream when this object is
		written out by writeObject
	@derby.purpose	update a record on the page
	@derby.upgrade
	@derby.diskLayout
		PhysicalPageOperation	the super class
		doMeSlot(CompressedInt)	the slot the updated record is in
		recordId(CompressedInt) the recordId of the updated record

		OptionalData	The new image of the record (length included), 
						follow by the old image of the record (length included)
	@derby.endFormat
	
*/

/**
		Read this in
		@exception IOException error reading from log stream
		@exception ClassNotFoundException log stream corrupted
	*/

/**
		Return my format identifier.
	*/

/**
		Return the last column of the row this operation logged
	*/

/**
		Store the new record directly over the old record, the implementation
		of storeRecord is responsible for removing any old data.

		@exception StandardException Thrown by methods I call
		@exception IOException Thrown by methods I call

					*/

/**
		Store the old record directly over the new record, the implementation
		of storeRecord is responsible for removing any new data.

		@exception StandardException Thrown by methods I call
		@exception IOException Thrown by methods I call

					*/

/**
		Write out the changed colums of new record (from the row) followed by 
        changed columns of the old record (from the page).

		@exception StandardException Thrown by methods I call
		@exception IOException Thrown by methods I call
	*/

/**
	 * restore the before image of the page
	 *
	 * @exception StandardException Standard Derby Error Policy
	 * @exception IOException problem reading the complete log record from the
	 * input stream
	 */

/**
     * return RecordHandle of the update row.
     * 
     * Return the RecordHandle that should be locked when updating the
     * row in this UpdateOperation.
     * 
     **/

/**************************************************************************
     * Public Methods of RePreparable Interface:
     **************************************************************************
     */

/**
     * reclaim locks associated with the changes in this log record.
     * 
	 * @param locking_policy  The locking policy to use to claim the locks.
     * 
     *
	 * @exception  StandardException  Standard exception policy.
     **/

