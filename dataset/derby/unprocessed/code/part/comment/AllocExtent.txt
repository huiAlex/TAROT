/**
		public Per Page status
	*/

/**
		Statically calculates how many pages this extent can manage given the
		availspace number of bytes to store this extent in

		if read/writeExternal changes, this must change too
	*/

/**
		Allocate this page - this is called underneath the log record

		@exception StandardException Standard Derby error policy
	*/

/**
	    Deallocate logical page pagenum - this is called underneath the log record.
		pagenum must be a page managed by this extent and it must be valid

		@exception StandardException Standard Derby error policy
	*/

/**
     * Compress free pages at end of this extent.
     * 
     * Search backward from end of extent and prepare data structures
     * to return pages at end of extent to the OS. Returns the lowest
     * page that can be returned to the OS.
     * 
     *
	 * @return Return bit of page where all pages that follow can
     *         be returned to the OS.
     **/

/**
     * Undo the compress space operation.
     * 
     * Undo of this operation doesn't really "undo" the operation, it just
     * makes sure the data structures are ok after the undo.  We are 
     * guaranteed at the point of the transaction doing the 
     * Undo of the compress space operation fixes up the bit maps to
     * only point at pages within the new_highest_page range.
     * 
     * Prior to logging the compress space operation all pages greater 
     * than 
     * There are only 2 possibilities at this point:
     * 1) the truncate of pages greater than new_highest_page happened before
     *    the abort took place.  W
     * 2) 
     **/

/**
		Get a page number that is free
	*/

/**
		Get the physical offset of pagenum.
		If deallocOK is true, then even if pagenum is deallocated, it is OK.
		If deallocOK is false, then an exception is thrown if pagenum is
		deallocated.

		An exception is always thrown if pagenum is a free page

		@exception StandardException Standard Derby error policy
	 */

/**
		Return the status of this extent
	*/

/**
		Return the status of a particular page
	*/

/**
		Get the first logical page number managed by this extent.
	*/

/**
		Get the last logical page number managed by this extent.
	*/

/**
     * translate bit position in map to page number.
     * 
     *
	 * @return The page number of this "bit" in the extent map.
     **/

/**
	 * get the last preallocated pagenumber managed by this alloc page
	 */

/**
		preallocated N pages, passed in the last preallocated page number.
	*/

/**
		Get a page number that is unfilled, pagenum is the last page that was
		rejected.
	 */

/**
		Get the number of used page in this extent
	 */

/**
		Get the number of unfilled pages in this extent
	 */

/**
		Get the total number of pages in this extent
	 */

