/**
 * This class represents the 6 binary operators: LessThan, LessThanEquals,
 * Equals, NotEquals, GreaterThan and GreaterThanEquals.
 *
 */

/**
     * This class is used to hold logically different objects for
     * space efficiency. {@code kind} represents the logical object
     * type. See also {@link ValueNode#isSameNodeKind}.
     */

/**
     *  Constructor.
     *  DERBY-6185 Query against view  with {@code "where name LIKE
     *  'Col1' ESCAPE '\' "} failed.
     *  Argument {@code forQueryRewrite} can be true only if this node has been
     *  added by an internal rewrite of the query. This allows binding to
     *  be more liberal when checking it against allowed syntax.
     *  This parameter will be passed FALSE when a new instance of the node
     *  is being created(which is the majority of the cases). But when an
     *  existing node is getting cloned, the value of this parameter should
     *  be passed as the originalNode.getForQueryRewrite(). Examples of this
     *  can be found in Predicate.Java and PredicateList.java
     *
     * @param kind            The kind of operator
     * @param leftOperand     The left operand
     * @param rightOperand    The right operand
     * @param forQueryRewrite See method description
     * @param cm              The context manager
     */

/**
     * Same as constructor above except takes a third argument that is
     * an InListOperatorNode.  This version is used during IN-list
     * preprocessing to create a "probe predicate" for the IN-list.
     * See InListOperatorNode.preprocess() for more.
     * DERBY-6185 (Query against view  with "where name LIKE
     *  'Col1' ESCAPE '\' " failed)
     * 4th argument forQueryRewrite can be true only if this node has been
     *  added by an internal rewrite of the query. This allows binding to
     *  be more liberal when checking it against allowed syntax.
     *  This parameter will be passed FALSE when a new instance of the node
     *  is being created(which is the majority of the cases). But when an
     *  existing node is getting cloned, the value of this parameter should
     *  be passed as the originalNode.getForQueryRewrite(). Examples of this
     *  can be found in Predicate.Java and PredicateList.java
     */

/**
	 * If this rel op was created for an IN-list probe predicate then return
	 * the underlying InListOperatorNode.  Will return null if this rel
	 * op is a "legitimate" relational operator (as opposed to a disguised
	 * IN-list).  With the exception of nullability checking via the
	 * isInListProbeNode() method, all access to this.inListProbeSource
	 * MUST come through this method, as this method ensures that the
	 * left operand of the inListProbeSource is set correctly before
	 * returning it.
	 */

/** @see RelationalOperator#getColumnOperand */

/** @see RelationalOperator#getColumnOperand */

/**
	 * 	 */

/**
	 * 	 */

/**
	 * 	 *
	 * @exception StandardException		Thrown on error
	 */

/** 	 *
	 * @exception StandardException		Thrown on error
	 */

/** @see RelationalOperator#usefulStartKey */

/**
	 * Return true if a key column for the given table is found on the
	 * left side of this operator, false if it is found on the right
	 * side of this operator.
	 *
	 * NOTE: This method assumes that a key column will be found on one
	 * side or the other.  If you don't know whether a key column exists,
	 * use the columnOnOneSide() method (below).
	 *
	 * @param optTable	The Optimizable table that we're looking for a key
	 *					column on.
	 *
	 * @return true if a key column for the given table is on the left
	 *			side of this operator, false if one is found on the right
	 *			side of this operator.
	 */

/**
	 * Determine whether there is a column from the given table on one side
	 * of this operator, and if so, which side is it on?
	 *
	 * @param optTable	The Optimizable table that we're looking for a key
	 *					column on.
	 *
	 * @return	LEFT if there is a column on the left, RIGHT if there is
	 *			a column on the right, NEITHER if no column found on either
	 *			side.
	 */

/** @see RelationalOperator#usefulStopKey */

/**
	 * Determine whether this comparison operator is a useful stop key
	 * with knowledge of whether the key column is on the left or right.
	 *
	 * @param left	true means the key column is on the left, false means
	 *				it is on the right.
	 *
	 * @return	true if this is a useful stop key
	 */

/** @see RelationalOperator#generateAbsoluteColumnId */

/** @see RelationalOperator#generateRelativeColumnId */

/**
	 * Get the absolute 0-based column position of the ColumnReference from 
	 * the conglomerate for this Optimizable.
	 *
	 * @param optTable	The Optimizable
	 *
	 * @return The absolute 0-based column position of the ColumnReference
	 */

/**
	 * @exception StandardException		Thrown on error
	 */

/** @see RelationalOperator#generateOrderedNulls */

/** @see RelationalOperator#orderedNulls */

/** 	 *
	 * @exception StandardException		Thrown on error
	 */

/** 
	 * 	 *
	 * @exception StandardException	thrown on error
	 */

/** @see RelationalOperator#compareWithKnownConstant */

/**
	 * 	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Return 50% if this is a comparison with a boolean column, a negative
	 * selectivity otherwise.
	 */

/**
	 * The methods generated for this node all are on Orderable.  
	 * Overrides this method
	 * in BooleanOperatorNode for code generation purposes.
	 */

/**
     * See if the node always evaluates to true or false, and return a Boolean
     * constant node if it does.
     *
     * @return a node representing a Boolean constant if the result of the
     * operator is known; otherwise, this operator node
     */

/**
     * Create a Boolean constant node with a specified value.
     *
     * @param b the value of the constant
     * @return a node representing a Boolean constant
     */

/**
	 * Returns the negation of this operator; negation of Equals is NotEquals.
	 */

/**
     * Return an equivalent node with the operands swapped, and possibly with
     * the operator type changed in order to preserve the meaning of the
     * expression.
     */

/**
     * Return the node type that must be used in order to construct an
     * equivalent expression if the operands are swapped. For symmetric
     * operators ({@code =} and {@code }), the same node type is returned.
     * Otherwise, the direction of the operator is switched in order to
     * preserve the meaning (for instance, a node representing less-than will
     * return the node type for greater-than).
     *
     * @return a node type that preserves the meaning of the expression if
     * the operands are swapped
     */

/**
	 * is this is useful start key? for example a predicate of the from
	 * column Lessthan 5 is not a useful start key but is a useful stop
	 * key. However 5 Lessthan column  is a useful start key.
	 *
	 * @param columnOnLeft 	is true if the column is the left hand side of the
	 * binary operator.
	 */

/** @see RelationalOperator#usefulStopKey */

/** @see RelationalOperator#getStartOperator */

/** @see RelationalOperator#getStopOperator */

/** @see RelationalOperator#generateOperator */

/** @see RelationalOperator#generateNegate */

/** @see RelationalOperator#getOperator */

/** return the selectivity of this predicate.
	 */

/** @see RelationalOperator#getTransitiveSearchClause */

/** @see ValueNode#isRelationalOperator */

/** @see ValueNode#isBinaryEqualsOperatorNode */

/**
	 * 	 *
	 * It's okay for this method to reference inListProbeSource directly
	 * because it does not rely on the contents of inListProbeSource's
	 * leftOperand, and a caller of this method cannot gain access to
	 * inListProbeSource's leftOperand through this method.
	 */

/** @see ValueNode#optimizableEqualityNode */

/**
	 * Return whether or not this binary relational predicate requires an implicit
	 * (var)char conversion.  This is important when considering
	 * hash join since this type of equality predicate is not currently
	 * supported for a hash join.
	 *
	 * @return	Whether or not an implicit (var)char conversion is required for
	 *			this binary relational operator.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Determine whether or not the received ValueNode (which will
	 * usually be a ColumnReference) references either the received
	 * optTable or else a base table in the subtree beneath that
	 * optTable.
	 *
	 * @param valNode The ValueNode that has the reference(s).
	 * @param optTable The table/subtree node to which we're trying
	 *  to find a reference.
	 * @param forPush Whether or not we are searching with the intent
	 *  to push this operator to the target table.
	 * @param walkOptTableSubtree Should we walk the subtree beneath
	 *  optTable to find base tables, or not?  Will be false if we've
	 *  already done it for the left operand and now we're here
	 *  for the right operand.
	 * @return True if valNode contains a reference to optTable or
	 *  to a base table in the subtree beneath optTable; false
	 *  otherwise.
	 */

/**
	 * Initialize the fields used for retrieving base tables in
	 * subtrees, which allows us to do a more extensive search
	 * for table references.  If the fields have already been
	 * created, then just reset their values.
	 *
	 * @param numTablesInQuery Used for creating JBitSets that
	 *  can hold table numbers for the query.
	 * @param initOptBaseTables Whether or not we should clear out
	 *  or initialize the optBaseTables bit set.
	 */

/**
	 * Create a set of table numbers to search when trying to find
	 * which (if either) of this operator's operands reference the
	 * received target table.  At the minimum this set should contain
	 * the target table's own table number.  After that, if we're
	 * _not_ attempting to push this operator (or more specifically,
	 * the predicate to which this operator belongs) to the target
	 * table, we go on to search the subtree beneath the target
	 * table and add any base table numbers to the searchable list.
	 *
	 * @param ft Target table for which we're building the search
	 *  list.
	 * @param forPush Whether or not we are searching with the intent
	 *  to push this operator to the target table.
	 */

