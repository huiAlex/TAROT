/**
     * Prepared statement that is used each time isValid() is called on this
     * connection. The statement is created the first time isValid is called
     * and closed when the connection is closed (by the close call).
     */

/** Handle socket timeouts during connection attempts */

/**
     * The User ID and Strong Password Substitute mechanism (USRSSBPWD)
     * authenticates the user like the user ID and password mechanism, but
     * the password does not flow. A password substitute is generated instead
     * using the SHA-1 algorithm, and is sent to the application server.
     *
     * The application server generates a password substitute using the same
     * algorithm and compares it with the application requester's password
     * substitute. If equal, the user is authenticated.
     *
     * The SECTKN parameter is used to flow the client and server encryption
     * seeds on the ACCSEC and ACCSECRD commands.
     *
     * More information in DRDA, V3, Volume 3 standard - PWDSSB (page 650)
     */

/**
     * Check if the connection can be closed when there are uncommitted
     * operations.
     *
     * @return if this connection can be closed when it has uncommitted
     * operations, {@code true}; otherwise, {@code false}
     */

/**
     * @return Returns the connectionNull.
     */

/**
     * @param connectionNull The connectionNull to set.
     */

/**
     * Check whether the server has full support for the QRYCLSIMP
     * parameter in OPNQRY.
     *
     * @return true if QRYCLSIMP is fully supported
     */

/**
     * Check whether the server supports session data caching
     * @return true session data caching is supported
     */

/**
     * Check whether the server supports the UTF-8 Ccsid Manager
     * @return true if the server supports the UTF-8 Ccsid Manager
     */

/**
     * Check whether the server supports UDTs
     * @return true if UDTs are supported
     */

/**
     * Checks whether the server supports locators for large objects.
     *
     * @return {@code true} if LOB locators are supported.
     */

/** Return true if the server supports nanoseconds in timestamps */

/**
     * Returns if a transaction is in process
     * @return open
     */

/**
     * Invokes write commit on NetXAConnection
     */

/**
     * Invokes readCommit on NetXAConnection
     */

/**
     * Invokes writeRollback on NetXAConnection
     */

/**
     * Invokes writeRollback on NetXAConnection
     */

/**
     * Close the connection and release its resources.
     * @exception SQLException if a database-access error occurs.
     */

/**
     * setClientInfo will always throw a
     * SQLClientInfoException since Derby does not support
     * any properties.
     *
     * @param name a property key String
     * @param value a property value String
     * @exception SQLClientInfoException always.
     */

/**
     * setClientInfo will throw a
     * SQLClientInfoException unless the properties
     * parameter is empty, since Derby does not support any
     * properties. All the property keys in the
     * properties parameter are added to failedProperties
     * of the exception thrown, with REASON_UNKNOWN_PROPERTY as the
     * value.
     *
     * @param properties a Properties object with the
     * properties to set.
     * @exception SQLClientInfoException unless the properties
     * parameter is null or empty.
     */

/**
     * getClientInfo always returns a
     * null String since Derby doesn't support
     * ClientInfoProperties.
     *
     * @param name a String value
     * @return a null String value
     * @exception SQLException if the connection is closed.
     */

/**
     * getClientInfo always returns an empty
     * Properties object since Derby doesn't support
     * ClientInfoProperties.
     *
     * @return an empty Properties object.
     * @exception SQLException if the connection is closed.
     */

/**
     * Returns false unless interfaces is implemented
     *
     * @param  interfaces             a Class defining an interface.
     * @return true                   if this implements the interface or
     *                                directly or indirectly wraps an object
     *                                that does.
     *      *                                whether this is a wrapper for an object
     *                                with the given interface.
     */

/**
     * Returns this if this class implements the interface
     *
     * @param  interfaces a Class defining an interface
     * @return an object that implements the interface
     *      * interface
     */

