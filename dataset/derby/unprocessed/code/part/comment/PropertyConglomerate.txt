/**
	Only used for exclusive lock purposes.
*/

/**
     * Create a new PropertyConglomerate row, with values in it.
     **/

/**
     * Create a new empty PropertyConglomerate row, to fetch values into.
     **/

/**
     * Open a scan on the properties conglomerate looking for "key".
     * 
	 * Open a scan on the properties conglomerate qualified to
	 * find the row with value key in column 0.  Both column 0
     * and column 1 are included in the scan list.
     *
	 * @return an open ScanController on the PropertyConglomerate. 
     *
	 * @param tc        The transaction to do the Conglomerate work under.
     * @param key       The "key" of the property that is being requested.
     * @param open_mode Whether we are setting or getting the property.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
		Set a property in the conglomerate.

	 @param	key		The key used to lookup this property.
	 @param	value	The value to be associated with this key. If null, delete the
	 					property from the properties list.
	*/

/**
	 * Set the default for a property.
	 * @exception  StandardException  Standard exception policy.
	 */

/**
	  Call the property set callbacks to map a proposed property value
	  to a value to save.
	  
	  The caller must run this in a block synchronized on this
	  to serialize validations with changes to the set of
	  property callbacks
	  */

/**
	  Call the property set callbacks to validate a property change
	  against the property set provided.
	  
	  The caller must run this in a block synchronized on this
	  to serialize validations with changes to the set of
	  property callbacks
	  */

/**
     * Sets the Serializable object associated with a property key.
     * 
     * This implementation turns the setProperty into an insert into the
     * PropertyConglomerate conglomerate.
     * 
     * See the discussion of getProperty().
     * 
     * The value stored may be a Formatable object or a Serializable object
	 * whose class name starts with java.*. This stops arbitary objects being
	 * stored in the database by class name, which will cause problems in
	 * obfuscated/non-obfuscated systems.
     *
	 * @param	tc		The transaction to do the Conglomerate work under.
	 * @param	key		The key used to lookup this property.
	 * @param	value	The value to be associated with this key. If null,
     *                  delete the property from the properties list.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Gets the de-serialized object associated with a property key.
     * 
     * The Store provides a transaction protected list of database properties.
     * Higher levels of the system can store and retrieve these properties
     * once Recovery has finished. Each property is a serializable object
     * and is stored/retrieved using a String key.
     * 
     * In this implementation a lookup is done on the PropertyConglomerate
     * conglomerate, using a scan with "key" as the qualifier.
     * 
	 * @param tc      The transaction to do the Conglomerate work under.
     * @param key     The "key" of the property that is being requested.
     *
	 * @return object The object associated with property key. n
     *                ull means no such key-value pair.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
	 * Get the default for a property.
	 * @exception  StandardException  Standard exception policy.
	 */

/**
		Fetch the set of properties as a Properties object. This means
		that only keys that have String values will be included.
	*/

/** Read the database properties and add in the service set. */

/** Lock the database properties for an update. */

/**
	  Return true if the caller holds the exclusive update lock on the
	  property conglomerate.
	  */

/**
     * Privileged startup. Must be private so that user code
     * can't call this entry point.
     */

