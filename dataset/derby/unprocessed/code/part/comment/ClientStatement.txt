/** For use in debugging setLargeMaxRows() method added by JDBC 4.2 */

/**
     * Debug method used to test the setLargeMaxRows() method added by JDBC 4.2.
     * This method is a NOP on a production (insane) build of Derby.
     */

/**
     * @return the materialStatement
     */

/**
     * @param materialStatement the materialStatement to set
     */

/** The owner of this statement, if any. */

/**
     * Resets attributes that can be modified by the user through the
     * {@link java.sql.Statement} interface to default values.
     */

/**
     * Resets the statement for reuse in a statement pool.
     * 
     * Intended to be used only by prepared or callable statements, as
     * {@link java.sql.Statement} objects aren't pooled.
     * 
     * The following actions are taken:
     *  Batches are cleared.
     *      Warnings are cleared.
     *      Open result set are closed on the client and the server.
     *      Cached cursor names are cleared.
     *      Statement for fetching auto-generated keys is closed.
     *      Special registers are reset.
     *      User controllable attributes are reset to defaults, for instance
     *          query timeout and max rows to fetch.
     * 
     *
     *      */

/**
     * Returns false unless iface is implemented 
     * 
     * @param  iface                  a Class defining an interface.
     * @return true                   if this implements the interface or 
     *                                directly or indirectly wraps an object 
     *                                that does.
     *      *                                whether this is a wrapper for an object 
     *                                with the given interface.
     */

/**
     * Returns {@code this} if this class implements the specified interface.
     *
     * @param  iface a class defining an interface
     * @return an object that implements the interface
     *      * interface
     */

/**
     * Tell whether the statement has been closed or not.
     *
     * @return true if closed, false otherwise.
     * @exception SQLException if a database access error occurs (according to
     *                         spec). Never thrown by this implementation. 
     */

/**
     * An untraced version of close. This method cleans up 
     * client-side resources and also sends commands to network server to 
     * perform clean up. This should not be called in the finalizer. 
     * Difference between finalize and close is
     * that close method does these things additionally (Changes done as 
     * part of DERBY-210):
     * 1) Sends commands to the server to close the result sets.
     * 2) Sends commands to the server to close the result sets of the 
     * generated keys query.
     * 3) Sends a commit if autocommit is on and it is appropriate.
     * 4) Explicitly removes the statement from connection_.openStatements_ 
     * and CommitAndRollbackListeners_ by passing true to markClosed.  
     * 
     * We may need to do 1) in finalizer too. This is being tracked in 
     * DERBY-1021
     * 
     *      */

/**
     * Returns the value of the poolable hint, indicating whether
     * pooling is requested.
     *
     * @return The value of the poolable hint.
     *      */

/**
     * Requests that a Statement be pooled or not.
     *
     * @param poolable requests that the Statement be pooled if true 
     * and not be pooled if false.
     *      */

/**
     * This variable keeps track of a Section dediacted to
     * writeSpecialRegister. It gets initialized the first time a
     * Section is needed, and freed when the Statement is closed.
     */

/**
     * Designates the owner of this statement, typically a logical statement.
     *
     * @param owner the owning statement, if any
     */

/**
     * Returns the owner of this statement, if any.
     *
     * @return The designated owner of this statement, or {@code null} if none.
     */

/**
     * This method cleans up client-side resources held by this Statement. 
     * The Statement will not be removed from the open statements list and 
     * PreparedStatement will also not be removed from the commit and rollback 
     * listeners list in org.apache.derby.client.am.Connection.
     * 
     * This method is called from:
     * 1. finalize() - For the finalizer to be called, the Statement 
     * should not have any references and so it should have been already 
     * removed from the lists.  
     * 
     * 2. org.apache.derby.client.am.Connection#markStatementsClosed 
     * This method explicitly removes the Statement from open statements list.
     *  
     * 3. To close positioned update statements - These statements are not
     * added to the list of open statements.
     */

/**
     * This method cleans up client-side resources held by this Statement. 
     * If removeListener is true, the Statement is removed from open statements
     * list and PreparedStatement is also removed from commit and rollback 
     * listeners list. This is called from the close methods.
     * 
     * @param removeListener if true the Statement will be removed
     * from the open statements list and PreparedStatement will also be removed
     * from commit and rollback listeners list in 
     * org.apache.derby.client.am.Connection.
     */

/**
     * Close all resources except for ResultSets. This code was factored out
     * of markClosed() so that closeMeOnCompletion() could close the
     * Statement without having to re-close the already closed ResultSets.
     */

/**
     * Mark all ResultSets associated with this statement as
     * closed.
     *
     * @param removeListener if true the ResultSets will be removed
     * from the commit and rollback listeners list in
     * org.apache.derby.client.am.Connection.
     */

/**
     * Returns the name of the java.sql interface implemented by this class.
     * @return name of java.sql interface
     */

/**
     * Minion of getStatementToken. If the input string starts with an
     * identifier consisting of letters only (like "select", "update"..),return
     * it, else return supplied string.
     *      * @param sql input string
     * @return identifier or unmodified string
     */

/**
     * State constants used by the FSM inside getStatementToken.
     *      */

/**
     * Step past any initial non-significant characters and comments to find
     * first significant SQL token so we can classify statement.
     *
     * @return first significant SQL token
     *      */

/**
     * Checks that the number of result sets returned by the statement
     * is consistent with the executed type. executeQuery()
     * should return exactly one result set and executeUpdate()
     * none. Raises an exception if the result set count does not match the
     * execute type.
     *
     * @param executeType one of executeQueryMethod__,
     * executeUpdateMethod__ and executeMethod__
     * @exception SqlException if the number of result sets does not
     *                         match the execute type
     */

/**
     * Checks that a stored procedure returns the correct number of
     * result sets given its execute type. If the number is incorrect,
     * make sure the transaction is rolled back when auto commit is
     * enabled.
     *
     * @param executeType one of executeQueryMethod__,
     * executeUpdateMethod__ and executeMethod__
     * @exception SqlException if the number of result sets does not
     *                         match the execute type
     *      */

/**
     * Convenience method for resultSetCommitting(ClientResultSet, boolean)
     * 
     *      * @param closingRS The ResultSet to be closed
     *      */

/**
     * Method that checks to see if any other ResultSets are open. If not
     * proceeds with the autocommit.
     * 
     * @param closingRS The ResultSet to be closed
     * @param writeChain A Boolean indicating whether this method
     * is part of a chain of write from client to Server
     *      */

/**
     * Mark all ResultSets associated with this statement as auto-committed.   
     */

/**
     * Provides public access for section_. This is necessary as the section concept
     * is shared between client.am and net. Seems like it really belongs in net
     * as it is tied to the particular protocol used.
     * @return section_
     */

/**
     * Assigns a new value (even null) to section_.
     * The existing section_ (if any) is freed.
     * @param s the section_ to set. 
     */

