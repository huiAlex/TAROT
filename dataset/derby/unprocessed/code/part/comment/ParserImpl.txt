/**
	 * Constructor for Parser
	 */

/**
	 * Returns a initialized (clean) TokenManager, paired w. the Parser in getParser,
	 * Appropriate for this ParserImpl object.
	 */

/**
	 * new parser, appropriate for the ParserImpl object.
	 */

/**
	 * Parse a statement and return a query tree.  Implements the Parser
	 * interface
	 *
	 * @param statementSQLText	Statement to parse
	 * @param paramDefaults	parameter defaults. Passed around as an array
	 *                      of objects, but is really an array of StorableDataValues
	 * @return	A QueryTree representing the parsed statement
	 *
	 * @exception StandardException	Thrown on error
	 */

/**
     * Parse a full SQL statement or a fragment that represents a
     * {@code }.
     *
     * @param sql the SQL statement or fragment to parse
     * @param paramDefaults parameter defaults to pass on to the parser
     *   in the case where {@code sql} is a full SQL statement
     * @param isStatement {@code true} if {@code sql} is a full SQL statement,
     *   {@code false} if it is a fragment
     * @return parse tree for the SQL
     *      */

/**
	 * Returns the current SQL text string that is being parsed.
	 *
	 * @return	Current SQL text string.
	 *
	 */

