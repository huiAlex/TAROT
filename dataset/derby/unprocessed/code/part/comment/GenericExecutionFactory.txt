/**
	This Factory is for creating the execution items needed
	by a connection for a given database.  Once created for
	the connection, they should be pushed onto the execution context
	so that they can be found again by subsequent actions during the session.

 */

/**
     * Statistics factory for this factory.
     */

/**
		This Factory is expected to be booted relative to a
		LanguageConnectionFactory.

			 * @exception StandardException Thrown on error
	 */

/**
	 * Factories are generic and can be used by all connections.
	 * We defer instantiation until needed to reduce boot time.
	 * We may instantiate too many instances in rare multi-user
	 * situation, but consistency will be maintained and at some
	 * point, usually always, we will have 1 and only 1 instance
	 * of each factory because assignment is atomic.
	 */

/**
	  *	Get the factory for constant actions.
	  *
	  *	@return	the factory for constant actions.
	  */

/**
     * Get the ResultSetStatisticsFactory from this ExecutionFactory.
     *
     * @return  The result set statistics factory associated with this
     *      ExecutionFactory
     *
     * @exception StandardException     Thrown on error
     */

/**
		We want a dependency context so that we can push it onto
		the stack.  We could instead require the implementation
		push it onto the stack for us, but this way we know
		which context object exactly was pushed onto the stack.
	 */

/**
		Make a result description
	 */

/**
	 * Create an execution time ResultColumnDescriptor from a 
	 * compile time RCD.
	 *
	 * @param compileRCD	The compile time RCD.
	 *
	 * @return The execution time ResultColumnDescriptor
	 */

/**
	 * 	 */

/**
	 * 	 */

/**
	  @exception StandardException		Thrown on error
	  	  */

/**
	  @exception StandardException		Thrown on error
	  	  */

/**
	 * Get a trigger execution context
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
    * Get the XPLAINFactory from this ExecutionContext.
    *
    * @return  The XPLAINFactory associated with this
    *      ExecutionContext
    *
    * @exception StandardException     Thrown on error
    */

/**
     * Privileged startup. Must be private so that user code
     * can't call this entry point.
     */

