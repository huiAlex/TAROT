/**
		Return my format identifier.
	*/

/*****************************************************************
	 * alloc page header
	 *****************************************************************/

/*****************************************************************
	 * constants
	 *****************************************************************/

/**
     * Create a new alloc page.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
		Initialize in memory structure using the buffer in pageData

		@exception StandardException If the page cannot be read correctly, or is inconsistent.
	*/

/**
		Write the page out

		@exception StandardException If the page cannot be written
	*/

/**
		Write the container information into the container information area.

		@param containerInfo the container information

		@param epage the allocation page data which may not be fully formed,
		but is guarenteed to be big enough to cover the area inhibited by the
		container info

		@param create if create, write out the length of the container info
		also. Else check to make sure epage's original container info is of the
		same length

		@exception StandardException standard Derby error policy
	*/

/**
		Extract the container information from epage.

		@param containerInfo where to put the extracted information

		@param epage the allocation page which has the container information.
		Epage may not be fully formed, but is guarenteed to be big enough to
		cover the area inhibited by the container info
	*/

/**
		Return the next free page number after given page number 
	 */

/**
		Add a page which is managed by this alloc page.
		Return the page number of the newly added page.

		 MT - thread aware (latched)

		@param mycontainer (future) allows the alloc page to call back to the
			container to grow the container by creating and syncing multiple
			pages at once
		@param ntt the nested top action that is the allocation transaction.
			NTT will comit before the user transaction
		@param userHandle the container handle that is opened by the user
			transaction.  Use the userHandle to latch the new page so that
			it may remain latched after NTT is committed so the user
			transaction can guarentee to have an empty page

		@exception StandardException If the page cannot be added
	*/

/**
		Do the actual page allocation/deallocation/ree underneath a log operation.
		Change the page status to new status

		@exception StandardException If the page cannot be allocated
	*/

/**
		Chain the next page number and offset underneath a log record

		@exception StandardException Standard Derby error policy
	*/

/**
     * Handle undo of compress space operation.
     **/

/**
		Return a copy of the allocExtent to be cached by the container.
		the container must take care to maintain its coherency by
		invalidating the cache before any update.
	*/

/**
		Preallocate user page if needed.

		@param myContainer the container object
		@param preAllocThreshold start preallocating after this threshold
		@param preAllocSize preallocate this number of pages 
	*/

/*********************************************************************
	 * Extent Testing
	 *
	 * Use these strings to simulate error conditions for
	 * testing purposes.
	 *
	 *********************************************************************/

