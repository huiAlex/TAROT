/**
     * The client server protocol can be traced. The constants below define the
     * tracing level, cf. the documentation section "Network Client Tracing" in
     * the "Derby Server and Administration Guide". Cf. the connection
     * attribute (or data source bean property) {@code traceLevel}.
     *
     * 
     */

/**
     * See documentation at {@link #TRACE_NONE}.
     */

/**
     * See documentation at {@link #TRACE_NONE}.
     */

/**
     * See documentation at {@link #TRACE_NONE}.
     */

/**
     * See documentation at {@link #TRACE_NONE}.
     */

/**
     * See documentation at {@link #TRACE_NONE}.
     */

/**
     * See documentation at {@link #TRACE_NONE}.
     */

/**
     * See documentation at {@link #TRACE_NONE}.
     */

/**
     * See documentation at {@link #TRACE_NONE}.
     */

/**
     * See documentation at {@link #TRACE_NONE}.
     */

/**
     * See documentation at {@link #TRACE_NONE}.
     */

/**
     * See documentation at {@link #TRACE_NONE}.
     */

/**
     * See documentation at {@link #TRACE_NONE}.
     */

/**
     * See documentation at {@link #TRACE_NONE}.
     */

/**
     * Creates a simple DERBY data source with default property values
     * for a non-pooling, non-distributed environment.  No particular
     * DatabaseName or other properties are associated with the data
     * source.
     * 
     * Every Java Bean should provide a constructor with no arguments
     * since many beanboxes attempt to instantiate a bean by invoking
     * its no-argument constructor.
     */

/**
     * The source security mechanism to use when connecting to a client data
     * source.
     * 
     * Security mechanism options are:
     * 
     *    USER_ONLY_SECURITY
     *    CLEAR_TEXT_PASSWORD_SECURITY
     *    ENCRYPTED_PASSWORD_SECURITY
     *    ENCRYPTED_USER_AND_PASSWORD_SECURITY - both password and
     *        user are encrypted
     *    STRONG_PASSWORD_SUBSTITUTE_SECURITY
     *  The default security mechanism is USER_ONLY SECURITY
     * 
     * If the application specifies a security mechanism then it will be the
     * only one attempted. If the specified security mechanism is not
     * supported by the conversation then an exception will be thrown and
     * there will be no additional retries.
     * 
     * Both user and password need to be set for all security mechanism except
     * USER_ONLY_SECURITY.
     */

/**
     * See documentation at {@link #USER_ONLY_SECURITY}
     */

/**
     * See documentation at {@link #USER_ONLY_SECURITY}
     */

/**
     * See documentation at {@link #USER_ONLY_SECURITY}
     */

/**
     * See documentation at {@link #USER_ONLY_SECURITY}
     */

/**
     * The time in seconds to wait for a connection request on this data
     * source. The default value of zero indicates that either the system time
     * out be used or no timeout limit.
     *
     * @serial
     */

/**
     * The log writer is declared transient, and is not serialized or stored
     * under JNDI.
     *
     *      */

/**
     * Stores the relational database name, RDBNAME.
     * The length of the database name may be limited to 18 bytes
     * and therefore may throw an SQLException.
     * @serial
     */

/**
     * A description of this data source.
     * @serial
     */

/**
     * A data source name;
     * used to name an underlying XADataSource,
     * or ConnectionPoolDataSource when pooling of connections is done.
     * @serial
     */

/**
     * @serial
     */

/**
     * @serial 
     */

/** The constant indicating that SSL encryption won't be used. */

/** The constant indicating that SSL encryption will be used. */

/**
     * The constant indicating that SSL encryption with peer authentication
     * will be used.
     */

/**
     * Parses the string and returns the corresponding constant for the SSL
     * mode denoted.
     * 
     * Valid values are off, basic and
     * peerAuthentication.
     *
     * @param s string denoting the SSL mode
     * @return A constant indicating the SSL mode denoted by the string. If the
     *      string is {@code null}, {@link #SSL_OFF} is returned.
     *      */

/**
     * Returns the SSL mode specified by the property object.
     *
     * @param properties data source properties
     * @return A constant indicating the SSL mode to use. Defaults to
     *      {@link #SSL_OFF} if the SSL attribute isn't specified.
     *      *      in the property object
     */

/**
     * This property can be overwritten by specifing the
     * username parameter on the DataSource.getConnection() method
     * call.  If user is specified, then password must also be
     * specified, either in the data source object or provided on
     * the DataSource.getConnection() call.
     *
     * Each data source implementation subclass will maintain it's own
     * password property.  This password property may or may not
     * be declared transient, and therefore may be serialized to a file in
     * clear-text, care must taken by the user to prevent security breaches.
     * Derby-406 fix
     * 
     * @serial
     */

/**
     * Security Mechanism can be specified explicitly either when obtaining a
     * connection via a DriverManager or via Datasource.
     * Via DriverManager, securityMechanism can be set on the connection
     * request using the 'securityMechanism' attribute.
     * Via DataSource, securityMechanism can be set by calling
     * setSecurityMechanism() on the ClientDataSource
     * If the security mechanism is not explicitly set as mentioned above, in
     * that case the Client will try to upgrade the security mechanism to a
     * more secure one, if possible.
     * See {@link #getUpgradedSecurityMechanism}.
     * Therefore, need to keep track if the securityMechanism has been
     * explicitly set.
     *
     * @serial
     */

/**
     * Return security mechanism if it is set, else upgrade the security
     * mechanism if possible and return the upgraded security mechanism
     * @param properties Look in the properties if securityMechanism is set
     *        or not
     * if set, return this security mechanism
     * @return security mechanism
     */

/**
     * This method has logic to upgrade security mechanism to a better (more
     * secure) one if it is possible. Currently derby server only has support
     * for USRIDPWD, USRIDONL, EUSRIDPWD and USRSSBPWD (10.2+) - this method
     * only considers these possibilities. USRIDPWD, EUSRIDPWD and USRSSBPWD
     * require a password, USRIDONL is the only security mechanism which does
     * not require password.
     * 1. if password is not available, then security mechanism possible is
     * USRIDONL
     * 2. if password is available,then USRIDPWD is returned.
     *
     * @param password password argument
     * @return upgraded security mechanism if possible
     */

/**
     * @serial
     */

/**
     * @serial
     */

/**
     * @serial
     */

/**
     * Check if derby.client.traceDirectory is provided as a JVM property.
     * If yes, then we use that value. If not, then we look for traceDirectory
     * in the the properties parameter.
     *
     * @param properties jdbc url properties
     * @return value of traceDirectory property
     */

/**
     * Read the value of the passed system property. If we are running under
     * the Java security manager and permission to read the property is 
     * missing,a null is returned, and no diagnostic is given (DERBY-6620).
     * 
     * @param key name of the system property
     * @return value of the system property, null if there is no
     *         permission to read the property
     */

/**
     * @serial
     */

/**
     * @serial
     */

/**
     * Sets the security mechanism.
     * @param securityMechanism to set
     */

/**
     * Return the security mechanism.
     * If security mechanism has not been set explicitly on datasource,
     * then upgrade the security mechanism to a more secure one if possible.
     *      * @return the security mechanism
     */

/**
     * Return the security mechanism for this datasource object.
     * If security mechanism has not been set explicitly on datasource,
     * then upgrade the security mechanism to a more secure one if possible.
     * @param password  password of user
     *      * @return the security mechanism
     */

/**
     * @serial
     */

/**
     * Specifies the SSL encryption mode to use.
     * 
     * Valid values are off, basic and
     * peerAuthentication.
     *
     * @param mode the SSL mode to use (off, basic or
     *      peerAuthentication)
     *      */

/**
     * Returns the SSL encryption mode specified for the data source.
     *
     * @return off, basic or peerAuthentication.
     */

/**
     * Set to true if the database should be created.
     * @serial
     */

/**
     * Set to true if the database should be shutdown.
     * @serial
     */

/**
     * Set this property to create a new database.  If this property is not
     * set, the database (identified by databaseName) is assumed to be already
     * existing.
     * @param create if set to the string "create", this data source will try
     *               to create a new database of databaseName, or boot the
     *               database if one by that name already exists.
     *
     */

/** @return "create" if create is set, or null if not
     */

/**
     * Set this property if one wishes to shutdown the database identified by
     * databaseName.
     * @param shutdown if set to the string "shutdown", this data source will
     *                 shutdown the database if it is running.
     *
     */

/** @return "shutdown" if shutdown is set, or null if not
     */

/**
     * @serial
     */

/**
     * Set this property to pass in more Derby specific connection URL
     * attributes.
     * 
     * Any attributes that can be set using a property of this DataSource
     * implementation (e.g user, password) should not be set in
     * connectionAttributes. Conflicting settings in connectionAttributes and
     * properties of the DataSource will lead to unexpected behaviour.
     *
     * @param prop set to the list of Derby connection attributes separated by
     *    semi-colons.  E.g., to specify an encryption bootPassword
     *    of "x8hhk2adf", and set upgrade to true, do the following:
     * 
     * {@code
     *  ds.setConnectionAttributes("bootPassword=x8hhk2adf;upgrade=true");}
     *
     * See Derby documentation for complete list.
     */

/**
     * @return Derby specific connection URL attributes
     */

/**
     * @serial
     */

/**
     * Check if derby.client.traceLevel is provided as a JVM property.
     * If yes, then we use that value. If not, then we look for traceLevel
     * in the the properties parameter.
     *
     * @param properties jdbc url properties
     * @return value of traceLevel property
     */

/**
     * Returns the maximum number of JDBC prepared statements a connection is
     * allowed to cache.
     * 
     * A basic data source will always return zero. If statement caching is
     * required, use a {@link javax.sql.ConnectionPoolDataSource}.
     * 
     * This method is used internally by Derby to determine if statement
     * pooling is to be enabled or not.
     * Not part of public API, so not present in
     * {@link org.apache.derby.jdbc.ClientDataSourceInterface}.
     *
     * @return Maximum number of statements to cache, or 0 if
     *      caching is disabled (default).
     */

/**
     * The dataSource keeps individual fields for the values that are relevant
     * to the client. These need to be updated when set connection attributes
     * is called.
     */

/**
     * Handles common error situations that can happen when trying to
     * obtain a physical connection to the server, and which require special
     * handling.
     * 
     * If this method returns normally, the exception wasn't handled and should
     * be handled elsewhere or be re-thrown.
     *
     * @param logWriter log writer, may be {@code null}
     * @param sqle exception to handle
     *      */

/**
     * Constructs the JDBC connection URL from the state of the data source.
     *
     * @return The JDBC connection URL.
     */

/**
     * Attempt to establish a database connection in a non-pooling,
     * non-distributed environment.
     *
     * @return a Connection to the database
     *
     *      */

/**
     * Attempt to establish a database connection in a non-pooling,
     * non-distributed environment.
     *
     * @param user the database user on whose behalf the Connection is being
     *        made
     * @param password the user's password
     *
     * @return a Connection to the database
     *
     *      */

/**
     * Check whether this instance wraps an object that implements the
     * interface specified by {@code iface}.
     *
     * @param iface a class defining an interface
     * @return {@code true} if this instance implements {@code iface}, or
     * {@code false} otherwise
     *      * instance implements {@code iface}
     */

/**
     * Returns {@code this} if this class implements the specified interface.
     *
     * @param  iface a class defining an interface
     * @return an object that implements the interface
     *      * interface
     */

/**
     * Method that establishes the initial physical connection
     * using DS properties instead of CPDS properties.
     */

