/**

  A heap object corresponds to an instance of a heap conglomerate.  It caches
  information which makes it fast to open heap controllers from it.

**/

/**
     * Format id of the conglomerate.
     **/

/**
     * The format id's of each of the columns in the heap table.
     **/

/**
    The array of collation id's for each column in the template.
    **/

/**
     * Tells if there is at least one column in the conglomerate whose collation
     * isn't StringDataValue.COLLATION_TYPE_UCS_BASIC.
     */

/**
     * Zero arg constructor for Monitor to create empty object.
     **/

/**
     * Create a heap conglomerate.
     * 
     * Create a heap conglomerate.  This method is called from the heap factory
     * to create a new instance of a heap.
     * 
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Create a heap conglomerate during the boot process.
     * 
     * Manufacture a Heap Conglomerate out of "thin" air, to boot strap
     * the system.  Create an in-memory Heap Conglomerate with the input
     * parameters, The caller will use this to open the conglomerate
     * conglomerate and read the "real" values from disk.  Conglom-conglom
     * is always on segment 0.
     *
     *
     * @param containerid The container id of the conglomerate.
     * @param template    Object array describing the columns of the heap.
     **/

/**
     * Add a column to the heap conglomerate.
     * 
     * This routine update's the in-memory object version of the Heap
     * Conglomerate to have one more column of the type described by the
     * input template column.  
     * 
     * @param column_id        The column number to add this column at.
     * @param template_column  An instance of the column to be added to table.
     * @param collation_id     Collation id of the column added.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
	Drop this heap.
	
	@exception StandardException Standard exception policy.
	**/

/**
     * Get the id of the container of the conglomerate.
     * 
     * Will have to change when a conglomerate could have more than one 
     * container.  The ContainerKey is a combination of the container id
     * and segment id.
     *
	 * @return The ContainerKey.
     **/

/**
     * Return dynamic information about the conglomerate to be dynamically 
     * reused in repeated execution of a statement.
     * 
     * The dynamic info is a set of variables to be used in a given 
     * ScanController or ConglomerateController.  It can only be used in one 
     * controller at a time.  It is up to the caller to insure the correct 
     * thread access to this info.  The type of info in this is a scratch 
     * template for btree traversal, other scratch variables for qualifier 
     * evaluation, ...
     * 
     *
	 * @return The dynamic information.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Return static information about the conglomerate to be included in a
     * a compiled plan.
     * 
     * The static info would be valid until any ddl was executed on the 
     * conglomid, and would be up to the caller to throw away when that 
     * happened.  This ties in with what language already does for other 
     * invalidation of static info.  The type of info in this would be 
     * containerid and array of format id's from which templates can be created.
     * The info in this object is read only and can be shared among as many 
     * threads as necessary.
     * 
     *
	 * @return The static compiled information.
     *
     * @param conglomId The identifier of the conglomerate to open.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Is this conglomerate temporary?
     * 
     *
	 * @return whether conglomerate is temporary or not.
     **/

/**
     * Bulk load into the conglomerate.
     * 
     *
     *      *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Open a heap controller.
     * 
     *
	 *      *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Open a heap controller given ContainerKey.
     * 
     * Static routine to open a container given input of the ContainerKey.
     * Routine will lock the container first, and then get the Heap from
     * the conglomerate cache.  This insures that interaction with the
     * conglomerate cache is safe with respect to concurrent alter table's 
     * which may or may not commit.  
     *
     * Currently only package accessible and only used by HeapPostCommit.
     * Longer term would be better to change all of the open interfaces
     * to get lock before accessing conglomerate cache rather than have a 
     * specific interface for HeapPostCommit.
     *
	 *      *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Open a heap scan controller.
     * 
     *
     *      *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Open a heap compress scan.
     * 
     *
     *      *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Return an open StoreCostController for the conglomerate.
     * 
     * Return an open StoreCostController which can be used to ask about 
     * the estimated row counts and costs of ScanController and 
     * ConglomerateController operations, on the given conglomerate.
     * 
	 * @param xact_manager The TransactionController under which this 
     *                     operation takes place.
	 * @param rawtran  raw transaction context in which scan is managed.
     *
	 * @return The open StoreCostController.
     *
	 * @exception  StandardException  Standard exception policy.
     *
     *      **/

/**
     * Print this heap.
     **/

/**************************************************************************
     * Public Methods of StaticCompiledOpenConglomInfo Interface:
     **************************************************************************
     */

/**
     * return the "Conglomerate".
     * 
     * For heap just return "this", which both implements Conglomerate and
     * StaticCompiledOpenConglomInfo.
     * 
     *
	 * @return this
     **/

/**************************************************************************
	 * Methods of Storable (via Conglomerate)
	 * Storable interface, implies Externalizable, TypedFormat
     **************************************************************************
     */

/**
     * Return my format identifier.
     *
     *      **/

/**
     * Return whether the value is null or not.
     *
	 *      **/

/**
     * Restore the in-memory representation to the null value.
     *
     *      *
     **/

/**
     * Store the stored representation of the column value in the stream.
     *
     **/

/**
     * Store the 10.2 format stored representation of column value in stream.
     * 
     * This routine stores the 10.2 version the Heap, ie. the ACCESS_HEAP_V2_ID
     * format.  It is used by any database which has been created in 
     * 10.2 or a previous release and has not been hard upgraded to a 
     * version subsequent to 10.2.
     * 
     **/

/**
     * Store the stored representation of column value in stream.
     * 
     * This routine uses the current database version to either store the
     * the 10.2 format (ACCESS_HEAP_V2_ID) or the current format 
     * (ACCESS_HEAP_V3_ID).  
     * 
     **/

/**
     * Restore the in-memory representation from the stream.
     * 
     *
     * @exception ClassNotFoundException Thrown if the stored representation 
     *                                   is serialized and a class named in 
     *                                   the stream could not be found.
     *
     *      **/

