/**
 * A CreateTriggerNode is the root of a QueryTree 
 * that represents a CREATE TRIGGER
 * statement.
 *
 */

/**
     * 
     * A list that describes how the original SQL text of the trigger action
     * statement was modified when transition tables and transition variables
     * were replaced by VTI calls. Each element in the list contains four
     * integers describing positions where modifications have happened. The
     * first two integers are begin and end positions of a transition table
     * or transition variable in {@link #originalActionText the original SQL
     * text}. The last two integers are begin and end positions of the
     * corresponding replacement in {@link #actionText the transformed SQL
     * text}.
     * 
     *
     * 
     * Begin positions are inclusive and end positions are exclusive.
     * 
     */

/**
     * Structure that has the same shape as {@code actionTransformations},
     * except that it describes the transformations in the WHEN clause.
     */

/**
     * Constructor for a CreateTriggerNode
	 *
	 * @param triggerName			name of the trigger	
	 * @param tableName				name of the table which the trigger is declared upon	
	 * @param triggerEventMask		TriggerDescriptor.TRIGGER_EVENT_XXX
	 * @param triggerCols			columns trigger is to fire upon.  Valid
	 *								for UPDATE case only.
	 * @param isBefore				is before trigger (false for after)
	 * @param isRow					true for row trigger, false for statement
	 * @param isEnabled				true if enabled
	 * @param refClause				the referencing clause
	 * @param whenClause			the WHEN clause tree
	 * @param whenText				the text of the WHEN clause
	 * @param actionNode			the trigger action tree
	 * @param actionText			the text of the trigger action
     * @param cm                    context manager
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
	 * how tree printing is supposed to work.
	 *
	 * @param depth		The depth of this node in the tree
	 */

/**
	 * Bind this CreateTriggerNode.  This means doing any static error
	 * checking that can be done before actually creating the table.
	 *
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Return true if the node references SESSION schema tables (temporary or permanent)
	 *
	 * @return	true if references SESSION schema tables, else false
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
     * Comparator that can be used for sorting lists of FromBaseTables
     * on the position they have in the SQL query string.
     */

/**
     * Make sure all references to SQL schema objects (such as tables and
     * functions) in the SQL fragments that will be stored in the SPS and
     * in the trigger descriptor, are fully qualified with a schema name.
     *
     * @param actionNames all the TableName nodes found in the triggered
     *                    SQL statement
     * @param whenNames   all the Table Name nodes found in the WHEN clause
     */

/**
     * Qualify all names SQL object names in original and transformed SQL
     * text for an action or a WHEN clause.
     *
     * @param node the query tree node for the transformed version of the
     *   SQL text, in a bound state
     * @param tableNames all the TableName nodes in the transformed text,
     *   in the order in which they appear in the SQL text
     * @param originalText the original SQL text
     * @param transformedText the transformed SQL text (with VTI calls for
     *   transition tables or transition variables)
     * @param replacements a data structure that describes how {@code
     *   originalText} was transformed into {@code transformedText}
     * @param newOriginal where to store the normalized version of the
     *   original text
     * @param newTransformed where to store the normalized version of the
     *   transformed text
     */

/**
     * Translate a position from the transformed trigger text
     * ({@link #actionText} or {@link #whenText}) to the corresponding
     * position in the original trigger text ({@link #originalActionText}
     * or {@link #originalWhenText}).
     *
     * @param replacements a data structure that describes the relationship
     *   between positions in the original and the transformed text
     * @param transformedPosition the position to translate
     * @return the position in the original text, or {@code null} if there
     *   is no corresponding position in the original text (for example if
     *   it points to a token that was added to the transformed text and
     *   does not exist in the original text)
     */

/**
     * Get all transition tables referenced by a given node, sorted in the
     * order in which they appear in the SQL text.
     *
     * @param node the node in which to search for transition tables
     * @return a sorted set of {@code FromBaseTable}s that represent
     *   transition tables
     *      */

/**
     * Check if a table represents one of the transition tables.
     *
     * @param fbt the table to check
     * @return {@code true} if {@code fbt} represents either the old or
     *   the new transition table, {@code false} otherwise
     */

/**
	 * Create the Constant information that will drive the guts of Execution.
	 *
	 * @exception StandardException		Thrown on failure
	 */

/**
	 * Convert this object to a String.  See comments in QueryTreeNode.java
	 * for how this should be done for tree printing.
	 *
	 * @return	This object as a String
	 */

