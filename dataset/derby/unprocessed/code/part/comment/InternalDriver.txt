/**
 * Factory class and API for JDBC objects.
 */

/**
     * Tells whether or not {@code AutoloadedDriver} should deregister itself
     * on shutdown. This flag is true unless the deregister attribute has been
     * set to false by the user (DERBY-2905).
     */

/**
     * 
     * An executor service used for executing connection attempts when a
     * login timeout has been specified.
     * 
     *
     * 
     * DERBY-6107: Core pool size and keep alive timeout should be zero so
     * that no threads are cached. By creating a fresh thread each time a
     * task is submitted, we make sure that the task will run in a thread
     * with the same context class loader as the thread that submitted the
     * task. This is important for example when connecting to a database
     * using the classpath subsubprotocol, and the database lives in the
     * context class loader. If threads are cached, a task may execute in
     * a thread that has a different context class loader.
     * 
     */

/**
     * Enforce the login timeout.
     */

/** Process exceptions raised while running a timed login. */

/**
     * Thread factory to produce daemon threads which don't block VM shutdown.
     */

/**
     * This code is called in a thread which puts time limits on it.
     */

/**
     * Checks for System Privileges.
     *
     * @param user The user to be checked for having the permission
     * @param perm The permission to be checked
     *      */

/**
     * Checks for shutdown System Privileges.
     *
     * To perform this check the following policy grant is required
     * 
     *  to run the encapsulated test:
     *      permission javax.security.auth.AuthPermission "doAsPrivileged";
     * 
     * or a SQLException will be raised detailing the cause.
     * 
     * In addition, for the test to succeed
     * 
     *  the given user needs to be covered by a grant:
     *      principal org.apache.derby.authentication.SystemPrincipal "..." {}
     *  that lists a shutdown permission:
     *      permission org.apache.derby.security.SystemPermission "shutdown";
     * 
     * or it will fail with a SQLException detailing the cause.
     *
     * @param user The user to be checked for shutdown privileges
     *      */

/**
		Convert all the attributes in the url into properties and
		combine them with the set provided. 
		
		If the caller passed in a set of attributes (info != null)
		then we set that up as the default of the returned property
		set as the user's set. This means we can easily break the link
		with the user's set, ensuring that we don't hang onto the users object.
		It also means that we don't add our attributes into the user's
		own property object.

		@exception SQLException thrown if URL form bad
	*/

/**
		Get the database name from the url.
		Copes with three forms

		jdbc:derby:dbname
		jdbc:derby:dbname;...
		jdbc:derby:;subname=dbname

		@param url The url being used for the connection
		@param info The properties set being used for the connection, must include
		the properties derived from the attributes in the url

		@return a String containing the database name or an empty string ("") if
		no database name is present in the URL.
	*/

/**
		Return true if this driver is active. Package private method.
	*/

/**
 	 * Get a new nested connection.
	 *
	 * @param conn	The EmbedConnection.
	 *
	 * @return A nested connection object.
	 *
	 */

/**
	 	@exception SQLException if fails to create statement
	 */

/**
	 	@exception SQLException if fails to create statement
	 */

/**
	 * Return a new java.sql.DatabaseMetaData instance for this implementation.
	 	@exception SQLException on failure to create.
	 */

/**
	 * Return a new java.sql.ResultSet instance for this implementation.
	 * @param conn Owning connection
	 * @param results Top level of language result set tree
	 * @param forMetaData Is this for meta-data
	 * @param statement The statement that is creating the SQL ResultSet
	 * @param isAtomic 
	 * @return a new java.sql.ResultSet
	 * 	 */

/**
     * Returns a new java.sql.ResultSetMetaData for this implementation
     *
     * @param columnInfo a ResultColumnDescriptor that stores information
     *        about the columns in a ResultSet
     */

/**
     * Return a new BrokeredConnection for this implementation.
     */

/**
     * Create and return an EmbedPooledConnection from the received instance of
     * EmbeddedDataSource.
     */

/**
     * Create and return an EmbedXAConnection from the received instance of
     * BasicEmbeddedDataSource40.
     */

/**
     * The getPropertyInfo method is intended to allow a generic GUI tool to
     * discover what properties it should prompt a human for in order to get
     * enough information to connect to a database.  Note that depending on
     * the values the human has supplied so far, additional values may become
     * necessary, so it may be necessary to iterate though several calls
     * to getPropertyInfo.
     *
     * @param url The URL of the database to connect to.
     * @param info A proposed list of tag/value pairs that will be sent on
     *          connect open.
     * @return An array of DriverPropertyInfo objects describing possible
     *          properties.  This array may be an empty array if no properties
     *          are required.
     * @exception SQLException if a database-access error occurs.
     */

/**
     * Indicate to {@code AutoloadedDriver} whether it should deregister
     * itself on shutdown.
     *
     * @param deregister whether or not {@code AutoloadedDriver} should
     * deregister itself
     */

/**
     * Check whether {@code AutoloadedDriver} should deregister itself on
     * shutdown.
     *
     * @return the deregister value
     */

/**
     * Privileged lookup of the ContextService. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged Monitor lookup. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged module lookup. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged service lookup. Must be private so that user code
     * can't call this entry point.
     */

