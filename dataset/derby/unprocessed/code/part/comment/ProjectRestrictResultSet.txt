/**
 * Takes a table and a table filter and returns
 * the table's rows satisfying the filter as a result set.
 *
 */

/**
     * Holds columns present more than once in the result set and which may be
     * represented by a stream, since such columns need to be cloned.
     */

/**
     * open a scan on the table. scan parameters are evaluated
     * at each open, so there is probably some way of altering
     * their values...
	 *
	 * @exception StandardException thrown if cursor finished.
     */

/**
     * reopen a scan on the table. scan parameters are evaluated
     * at each open, so there is probably some way of altering
     * their values...
	 *
	 * @exception StandardException thrown if cursor finished.
     */

/**
     * Return the requested values computed
     * from the next row (if any) for which
     * the restriction evaluates to true.
     * 
     * restriction and projection parameters
     * are evaluated for each row.
	 *
	 * @exception StandardException thrown on failure.
	 * @exception StandardException ResultSetNotOpen thrown if not yet open.
	 *
	 * @return the next row in the result
	 */

/**
	 * Return the total amount of time spent in this ResultSet
	 *
	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
	 *
	 * @return long		The total amount of time spent (in milliseconds).
	 */

/**
	 * If the result set has been opened,
	 * close the open scan.
	 *
	 * @exception StandardException thrown on error
	 */

/**
	 * Gets information from its source. We might want
	 * to have this take a CursorResultSet in its constructor some day,
	 * instead of doing a cast here?
	 *
	 * 	 *
	 * @return the row location of the current cursor row.
	 * @exception StandardException thrown on failure.
	 */

/**
	 * Gets last row returned.
	 *
	 * 	 *
	 * @return the last row returned.
	 * @exception StandardException thrown on failure.
	 */

/**
	 * Do the projection against the source row.  Use reflection
	 * where necessary, otherwise get the source column into our
	 * result row.
	 *
	 * @param sourceRow		The source row.
	 *
	 * @return		The result of the projection
	 *
	 * @exception StandardException thrown on failure.
	 */

/**
	 * Do the projection against the sourceRow. If the source of the result set
	 * is of type ProjectRestrictResultSet, the projection by that result set
	 * will also be performed.
	 *
	 * @param sourceRow row to be projected
	 *
	 * @return The result of the projection
	 *
	 * @exception StandardException thrown on failure.
	 */

/**
	 * Get projection mapping array. The array consist of indexes which
	 * maps the column in a row array to another position in the row array.
	 * If the value is projected out of the row, the value is negative.
	 * @return projection mapping array.
	 */

/**
	 * Is this ResultSet or it's source result set for update
	 * 
	 * @return Whether or not the result set is for update.
	 */

/**
	 * 	 */

/**
	 * 	 */

