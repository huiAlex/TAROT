/**
	A LockControl contains a reference to the item being locked
	and doubly linked lists for the granted locks and the waiting
	locks.

	
	MT - Mutable - Container object : single thread required

*/

/**
		This lock control uses an optimistic locking scheme.
		When the first lock on an object is granted it
		simply sets firstGrant to be that object, removing the
		need to allocate a list if no other locks are granted
		before the first lock is release. If a second lock
		is granted then a list is allocated and the
		firstGrant lock is moved into the list. Once a list
		has been created it is always used.
	*/

/**
	*/

/**
		Grant this lock.
	*/

/**
	*/

/**
        This routine can be called to see if a lock currently on the wait
        list could be granted. If this lock has waiters ahead of it
		then we do not jump over the waiter(s) even if we can be granted.
		 This avoids the first waiter being starved out.
	*/

/**
		Add a lock into this control, granted it if possible.

		This can be entered in several states.

		
		The Lockable is locked (granted queue not empty), and there are no waiters (waiting queue is empty)
		The Lockable is locked and there are waiters
		The Lockable is locked and there are waiters and the first is potentially granted
		The Lockable is unlocked and there are waiters and the first is potentially granted. Logically the item is
		    still locked, it's just that the lock has just been released and the first waker has not woken up yet.
		
		This call is never entered when the object is unlocked and there are no waiters.

	
		1) The Lockable has just been unlocked, 
	*/

/**
		Return the first lock in the wait line, null if the
		line is empty.
	*/

/**
		Get the next waiting lock (if any).
	*/

/**
		Return the lockable object controlled by me.
	*/

/**
		Give up waiting up on a lock
	*/

/**
		Add the waiters of this lock into this Map object.
		
		Each waiting thread gets two entries in the hashtable
		
		key=compatibility space - value=ActiveLock
		key=ActiveLock - value={LockControl for first waiter|ActiveLock of previosue waiter}
		
	*/

/**
		Return a Stack of the
		held locks (Lock objects) on this Lockable.
	*/

/**
		Find a granted lock matching this space and qualifier
	*/

/**
     * 
     * Returns true if the childLock is blocked because its parent owns
     * a conficting lock.
     * This code was written to support the fix to DERBY-6554. The only known
     * way that this condition arises is when a write attempt by a nested user
     * transaction is blocked by a read lock held by the main transaction.
     * This only happens while trying to write to SYS.SYSSEQUENCES while
     * managing sequence generators.
     * 
     */

/**
	 * make a shallow clone of myself
	 */

/**
	 * Add a lock request to a list of waiters.
	 *
	 * @param lockItem	The lock request
	 * @param ls		The lock table
	 */

/**
	 * Remove and return the first lock request from a list of waiters.
	 *
	 * @param ls		The lock table
	 *
	 * @return	The removed lock request
	 */

/**
	 * Remove and return the lock request at the given index
	 * from a list of waiters.
	 *
	 * @param index		The index at which to remove the lock request
	 * @param ls		The lock table
	 *
	 * @return	The removed lock request
	 */

/**
	 * Remove and return the given lock request from a list of waiters.
	 *
	 * @param item		The item to remove
	 * @param ls		The lock table
	 *
	 * @return	The number of items removed
	 */

