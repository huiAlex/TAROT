/**
 * This class implements the PersistentService interface using a StorageFactory class.
 * It handles all subSubProtocols except for cache.
 */

/**
		Properties cannot be saved
	*/

/**
       Verify that the service directory looks ok before objecting that the database
       already exists.
    */

/**
     * Checks if the specified file exists.
     *
     * @param file the file to check
     * @return {@code true} if the file exists, {@code false} if not.
     *      */

/**
     * Get the StorageFactory implementation for this PersistentService
     *
     * @return the StorageFactory class.
     */

/**
     * Returns the protocol lead in for this service.
     *
     * @return An empty string if the protocol is the default one
     *      (PersistentService.DIRECTORY), the subsub protocol name followed by
     *      colon otherwise.
     */

/**
     * Privileged Monitor lookup. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Helper method returning the "best-effort-most-accurate" path.
     *
     * @param file the file to get the path to
     * @return The file path, either ala {@code File.getCanonicalPath} or
     *      {@code File.getPath}.
     */

/**
     * Helper class for common file operations on the service properties files.
     * 
     * Introduced to take care of error reporting for common file operations
     * carried out in StorageFactoryService.
     */

/** Marker printed as the last line of the service properties file. */

/**
     * @return true if the PersistentService has a StorageFactory, false if not.
     */

/**	
		The type of the service is 'directory'

			*/

/**
	    Return a list of all the directoies in the system directory.

			*/

/**
		Open the service properties in the directory identified by the service name.

		@return A Properties object or null if serviceName does not represent a valid service.

		@exception StandardException Service appears valid but the properties cannot be created.
	*/

/**
		@exception StandardException Properties cannot be saved.
	*/

/** @see PersistentService#createDataWarningFile */

/**
     * Save service.properties during backup
     *
     * @param serviceName backup location of the service
     * @param properties the properties to save
     *
     * @exception StandardException Properties cannot be saved.
     */

/**
     * Resolves situations where a failure condition left the service properties
     * file, and/or the service properties file backup, in an inconsistent
     * state.
     * 
     * Note that this method doesn't resolve the situation where both the
     * current service properties file and the backup file are missing.
     *
     * @param sf the storage factory for the service
     * @param spf the service properties file
     *      *      file fails
     */

/** Name of the most recently performed operation. */

/**
         * Handles security exceptions caused by missing privileges on the
         * files being accessed.
         *
         * @param file the file that was accessed
         * @param mustSucceed if {@code true} a {@code StandardException} will
         *      be thrown, if {@code false} a warning is written to the log
         * @param se the security exception raised
         *          *          */

