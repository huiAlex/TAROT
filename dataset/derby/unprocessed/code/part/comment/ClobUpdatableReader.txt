/**
 * {@code ClobUpdatableReader} is used to create a {@code Reader} capable of
 * detecting changes to the underlying source.
 * 
 * This class is aware that the underlying stream can be modified and
 * reinitializes itself if it detects any change in the stream. This
 * invalidates the cache so the changes are reflected immediately.
 * 
 * The task of this class is to detect changes in the underlying Clob.
 * Repositioning is handled by other classes.
 */

/** Reader accessing the Clob data and doing the work. */

/** Character position of this reader (1-based). */

/** The last update count seen on the underlying Clob. */

/**
     * The Clob object we are reading from.
     * 
     * Note that even though the Clob itself is final, the internal
     * representation of the content may change. The reference to the Clob is
     * needed to get a hold of the new internal representation if it is changed.
     *
     *      */

/**
     * The current internal representation of the Clob content.
     * 
     * If the user starts out with a read-only Clob and then modifies it, the
     * internal representation will change.
     */

/**
     * Position in Clob where to stop reading unless EOF is reached first.
     */

/** Tells if this reader has been closed. */

/**
     * Creates an updatable reader configured with initial position set to the
     * first character in the Clob and with no imposed length limit.
     *
     * @param clob source data
     *      *      */

/**
     * Creates an updatable reader configured with the specified initial
     * position and with an imposed length limit.
     *
     * @param clob source data
     * @param initialPos the first character that will be read
     * @param length the maximum number of characters that will read
     *      *      */

/**
     * Closes this reader.
     * 
     * An {@code IOException} will be thrown if any of the read or skip methods
     * are called after the reader has been closed.
     *
     *      */

/**
     * Updates the reader if the underlying data has been modified.
     * 
     * There are two cases to deal with:
     *  The underlying data of the internal Clob representation has been
     *          modified.
     *      The internal Clob representation has changed.
     * 
     * The latter case happens when a read-only Clob, represented as a stream
     * into store, is modified by the user and a new temporary internal
     * representation is created.
     *
     *      */

