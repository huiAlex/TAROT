/**
 * Class that starts the network server in its own daemon thread.
 * Works in two situations.
 * 
 * As a module in the engine's Monitor, booted if the
 * property derby.drda.startNetworkServer is set to true.
 * In this case the boot and shutdown is through the
 * standard ModuleControl methods.
 * 
 * Direct calls from the NetworkServerControlImpl start methods.
 * This is to centralize the creation of the daemon thread in
 * this class in the engine code, since the Monitor provides
 * the thread. This means that NetworkServerControlImpl calls
 * this class to create a thread which in turn calls back
 * to NetworkServerControlImpl.runServer to start the server.
 *
 *  *  */

/**
     * The instance of the NetworkServerControlImpl
     * being used to run the server.
     */

/**
     * Reflect reference to the method to run the server.
     * NetworkServerControlImpl.blockingStart
     */

/**
     * Reflect reference to the method to directly
     * shutdown the server.
     * NetworkServerControlImpl.directShutdown
     */

/**
     * Try to start the DRDA server. Log an error in error log and continue if it cannot be started.
     */

/**
	 * Sets configuration information for the network server to be started.
	 * @param listenAddress InetAddress to listen on
	 * @param portNumber    portNumber to listen on
	 * @param userName      the user name for actions requiring authorization
	 * @param password      the password for actions requiring authorization
	 */

/**
     * Find the methods to start and shutdown the server.
     * Perfomed through reflection so that the engine
     * code is not dependent on the network server code.
     * @param serverClass
     *      *      */

/**
     * Privileged Monitor lookup. Must be private so that user code
     * can't call this entry point.
     */

