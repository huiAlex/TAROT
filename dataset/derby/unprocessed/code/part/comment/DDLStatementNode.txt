/**
 * A DDLStatementNode represents any type of DDL statement: CREATE TABLE,
 * CREATE INDEX, ALTER TABLE, etc.
 *
 */

/**
		sub-classes can set this to be true to allow implicit
		creation of the main object's schema at execution time.
	*/

/**
		Initialize the object name we will be performing the DDL
		on and check that we are not in the system schema
		and that DDL is allowed.
	*/

/**
	 * A DDL statement is always atomic
	 *
	 * @return true 
	 */

/**
	 * Return the name of the table being dropped.
	 * This is the unqualified table name.
	 *
	 * @return the relative name
	 */

/**
	 * Return the full dot expression name of the 
	 * object being dropped.
	 * 
	 * @return the full name
	 */

/**
	 * Convert this object to a String.  See comments in QueryTreeNode.java
	 * for how this should be done for tree printing.
	 *
	 * @return	This object as a String
	 */

/**
	 * Generic generate code for all DDL statements.
	 *
	 * @param acb	The ActivationClassBuilder for the class being built
	 * @param mb	The execute() method to be built
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	* Get a schema descriptor for this DDL object.
	* Uses this.objectName.  Always returns a schema,
	* we lock in the schema name prior to execution.
	* Checks if current authorizationID is owner of the schema.
	*
	* @return Schema Descriptor
	*
	* @exception	StandardException	throws on schema name
	*						that doesn't exist	
	*/

/**
	 * Validate that the table is ok for DDL -- e.g.
	 * that it exists, it is not a view. It is ok for
	 * it to be a system table. Also check that its 
	 * schema is ok. Currently, the only time this method
	 * is called is when user has asked for inplace 
	 * compress. eg
	 * call SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE('SYS','SYSTABLES',1,1,1);
	 * Inplace compress is allowed on both system and
	 * user tables.
	 *
	 * @return the validated table descriptor, never null
	 *
	 * @exception StandardException on error
	 */

/**
	 * Validate that the table is ok for DDL -- e.g.
	 * that it exists, it is not a view, and is not
	 * a system table, and that its schema is ok.
	 *
	 * @return the validated table descriptor, never null
	 *
	 * @exception StandardException on error
	 */

/**
	 * Just get the table descriptor. Don't worry if it belongs to a view,
	 * system table, synonym or a real table. Let the caller decide what
	 * to do.
	 * 
	 * @param tableName
	 * 
	 * @return TableDescriptor for the give TableName
	 * 
	 * 	 */

/**
	  *	Make a from list for binding query fragments in a CREATE/ALTER TABLE
      *     statement.
      *
      * @param dd  Metadata.
      * @param tableElementList the parenthesized list of columns and constraints in a CREATE/ALTER TABLE statement
      * @param creatingTable true if this is for CREATE TABLE. false if this is for ALTER TABLE
      */

