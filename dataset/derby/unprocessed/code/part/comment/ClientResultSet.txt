/** Tracker object for LOB state, used to free locators on the server. */

/**
     * Indicates which columns have been fetched as a stream or as a LOB for a
     * row. Created on-demand by a getXXXStream or a get[BC]lob call. Note that
     * we only track columns that can be accessed as a stream or a LOB object.
     */

/** Close Statement if it is set to closeOnCompletion */

/** @deprecated */

/**
     * Create a calendar with default locale and time zone.
     * @param date the initial time of the calendar
     * @return a calendar initialized to the specified time
     */

/**
     * Convert a date originally set using the default calendar to a value
     * representing the same date in a different calendar.
     *
     * @param date the date to convert
     * @param cal the calendar to convert it to
     * @return a date object that represents the date in {@code cal}
     */

/**
     * Convert a time originally set using the default calendar to a value
     * representing the same time in a different calendar.
     *
     * @param time the time to convert
     * @param cal the calendar to convert it to
     * @return a time object that represents the time in {@code cal}
     */

/**
     * Convert a timestamp originally set using the default calendar to a value
     * representing the same timestamp in a different calendar.
     *
     * @param ts the timestamp to convert
     * @param cal the calendar to convert it to
     * @return a timestamp object that represents the timestamp in {@code cal}
     */

/**
     * Retrieve the value of the specified column as a stream of two-byte
     * Unicode characters. Deprecated in JDBC 2.0 and this method will just
     * throw a feature not implemented exception.
     *
     * @param column the column to retrieve as a Unicode stream
     * @exception SQLException throws feature not implemented
     * @deprecated
     */

/** @deprecated */

/** @deprecated */

/**
     * Returns the first SQLWarning reported on this
     * ResultSet object, or null if there
     * are no warnings. Subsequent warnings are chained on the
     * returned object.
     *
     * @return the first SQLWarning in the chain, or
     * null if no warnings are reported
     * @exception SQLException if a database error occurs or the
     * result set is closed
     */

/**
     * Clear all warnings on this ResultSet and make
     * subsequent calls to getWarnings() return
     * null until a new warning is reported.
     *
     * @exception SQLException if a database error occurs or the
     * result set is closed
     */

/**
     * Moves off the insert row if positioned there, and checks the current row
     * for releasable LOB locators if positioned on a valid data row.
     *
     *      */

/**
     * Retrieves the Statement object that produced this
     * object, or null if the ResultSet was
     * not produced by a Statement object.
     *
     * @return the Statement that produced this object or
     * null
     * @exception SQLException if a database error occurs or the
     * result set is closed
     */

/**
     * Updates the designated column with a java.sql.Blob value.
     * The updater methods are used to update column values in the
     * current row or the insert row.  The updater methods do not
     * update the underlying database; instead the updateRow or
     * insertRow methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     *      * if a database access error occurs;
     * the result set concurrency is CONCUR_READ_ONLY
     * or this method is called on a closed result set
     */

/**
     * Updates the designated column with a java.sql.Blob value.
     * The updater methods are used to update column values in the
     * current row or the insert row.  The updater methods do not
     * update the underlying database; instead the updateRow or
     * insertRow methods are called to update the database.
     *
     * @param columnName the label for the column specified with the SQL AS
     * clause. If the SQL AS clause was not specified, then the label is the
     * name of the column
     * @param x the new column value
     *      * if a database access error occurs;
     * the result set concurrency is CONCUR_READ_ONLY
     * or this method is called on a closed result set
     */

/**
     * Updates the designated column using the given input stream, which
     * will have the specified number of bytes.
     * The updater methods are used to update column values in the
     * current row or the insert row.  The updater methods do not
     * update the underlying database; instead the updateRow or
     * insertRow methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x An object that contains the data to set the parameter
     * value to.
     * @param length the number of bytes in the parameter data.
     * @exception SQLException if the columnIndex is not valid;
     * if a database access error occurs;
     * the result set concurrency is CONCUR_READ_ONLY
     * or this method is called on a closed result set
     */

/**
     * Updates the designated column using the given input stream, which
     * will have the specified number of bytes.
     * The updater methods are used to update column values in the
     * current row or the insert row.  The updater methods do not
     * update the underlying database; instead the updateRow or
     * insertRow methods are called to update the database.
     *
     * @param columnName the label for the column specified with the
     * SQL AS clause.  If the SQL AS clause was not specified, then the
     * label is the name of the column
     * @param x An object that contains the data to set the parameter
     * value to.
     * @param length the number of bytes in the parameter data.
     * @exception SQLException if the columnLabel is not valid;
     * if a database access error occurs;
     * the result set concurrency is CONCUR_READ_ONLY
     * or this method is called on a closed result set
     */

/**
     * Mark this ResultSet as closed. The ResultSet will not be
     * removed from the commit and rollback listeners list in
     * Connection.
     */

/**
     * Mark this ResultSet as closed.
     *
     * @param removeListener if true the ResultSet will be removed
     * from the commit and rollback listeners list in
     * Connection.
     */

/**
     * Mark this ResultSet as closed on the server.
     */

/**
     * Method that is invoked by closeX() before the
     * result set is actually being closed. Subclasses may override
     * this method if work needs to be done before closing.
     *
     * @exception SqlException
     */

/**
     * Closes the current stream, if there is one.
     * 
     * Note that streams are implicitly closed when the next value is fetched.
     *
     *      */

/**
     * Mark a column as already having a stream or LOB accessed from it.
     * If the column was already accessed, throw an exception.
     *
     * @param columnIndex 1-based column index
     *      */

/**
     * Checks if a stream or a LOB object has already been created for the
     * specified LOB column.
     * 
     * Accessing a LOB column more than once is not forbidden by the JDBC
     * specification, but the Java API states that for maximum portability,
     * result set columns within each row should be read in left-to-right order,
     * and each column should be read only once. The restriction was implemented
     * in Derby due to complexities with the positioning of store streams when
     * the user was given multiple handles to the stream.
     *
     * @param columnIndex 1-based index of the LOB column
     *      */

/**
     * Clears the flags for used columns, typically invoked when changing the
     * result set position.
     */

/**
     * Retrieves the holdability for this ResultSet
     * object.
     *
     * @return either ResultSet.HOLD_CURSORS_OVER_COMMIT
     * or ResultSet.CLOSE_CURSORS_AT_COMMIT
     * @exception SQLException if a database error occurs
     */

/**
     * Checks whether this ResultSet object has been
     * closed, either automatically or because close()
     * has been called.
     *
     * @return true if the ResultSet is
     * closed, false otherwise
     * @exception SQLException if a database error occurs
     */

/**
     * Updates the designated column with an ascii stream value.
     * The data will be read from the stream as needed until end-of-stream is
     * reached.
     *
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the updateRow or insertRow
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     *      *      access error occurs; the result set concurrency is
     *      CONCUR_READ_ONLY or this method is called on a closed
     *      result set
     */

/**
     * Update a column with an ascii stream value.
     *
     * The updateXXX() methods are used to update column values in the current
     * row, or the insert row. The updateXXX() methods do not update the
     * underlying database, instead the updateRow() or insertRow() methods are
     * called to update the database.
     *
     * @param columnIndex
     *            the first column is 1, the second is 2, ...
     * @param x
     *            the new column value
     * @param length
     *            the length of the stream
     * @exception SQLException
     *                if a database-access error occurs
     */

/**
     * Updates the designated column with a binary stream value.
     * The data will be read from the stream as needed until end-of-stream is
     * reached.
     *
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the updateRow or insertRow
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value 
     *      *      access error occurs; the result set concurrency is
     *      CONCUR_READ_ONLY or this method is called on a closed
     *      result set
     */

/**
     * Update a column with a binary stream value.
     *
     * The updateXXX() methods are used to update column values in the current
     * row, or the insert row. The updateXXX() methods do not update the
     * underlying database, instead the updateRow() or insertRow() methods are
     * called to update the database.
     *
     * @param columnIndex
     *            the first column is 1, the second is 2, ...
     * @param x
     *            the new column value
     * @param length
     *            the length of the stream
     * @exception SQLException
     *                if a database-access error occurs
     */

/**
     * Updates the designated column using the given input stream.
     * The data will be read from the stream as needed until end-of-stream is
     * reached.
     *
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the updateRow or insertRow
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param x the new column value
     *      *      access error occurs; the result set concurrency is
     *      CONCUR_READ_ONLY or this method is called on a closed
     *      result set
     */

/**
     * Updates the designated column with a character stream value.
     * The data will be read from the stream as needed until end-of-stream is
     * reached.
     *
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the updateRow or insertRow
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param reader the new column value
     *      *      access error occurs; the result set concurrency is
     *      CONCUR_READ_ONLY or this method is called on a closed
     *      result set
     */

/**
     * Update a column with a character stream value.
     *
     * The updateXXX() methods are used to update column values in the current
     * row, or the insert row. The updateXXX() methods do not update the
     * underlying database, instead the updateRow() or insertRow() methods are
     * called to update the database.
     *
     * @param columnIndex
     *            the first column is 1, the second is 2, ...
     * @param x
     *            the new column value
     * @param length
     *            the length of the stream
     * @exception SQLException
     *                if a database-access error occurs
     */

/**
     * Updates the designated column using the given Reader
     * object. 
     * The data will be read from the stream as needed until end-of-stream is
     * reached. The JDBC driver will do any necessary conversion from UNICODE
     * to the database char format.
     *
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the updateRow or insertRow
     * methods are called to update the database.
     *
     * @param columnIndex the first column is 1, the second is 2, ...
     * @param reader an object that contains the data to set the parameter
     *      value to. 
     *      *      access error occurs; the result set concurrency is
     *      CONCUR_READ_ONLY or this method is called on a closed
     *      result set
     */

/**
     * Updates the designated column with an ascii stream value.
     * The data will be read from the stream as needed until end-of-stream is
     * reached.
     *
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the updateRow or insertRow
     * methods are called to update the database.
     *
     * @param columnName the label for the column specified with the SQL AS
     *      clause. If the SQL AS clause was not specified, then the label is
     *      the name of the column
     * @param x the new column value
     *      *      access error occurs; the result set concurrency is
     *      CONCUR_READ_ONLY or this method is called on a closed
     *      result set
     */

/**
     * Update a column with an ascii stream value.
     *
     * The updateXXX() methods are used to update column values in the current
     * row, or the insert row. The updateXXX() methods do not update the
     * underlying database, instead the updateRow() or insertRow() methods are
     * called to update the database.
     *
     * @param columnName
     *            the name of the column
     * @param x
     *            the new column value
     * @param length
     *            of the stream
     * @exception SQLException
     *                if a database-access error occurs
     */

/**
     * Updates the designated column with a binary stream value.
     * The data will be read from the stream as needed until end-of-stream is
     * reached.
     *
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the updateRow or insertRow
     * methods are called to update the database.
     *
     * @param columnLabel the label for the column specified with the SQL AS
     *      clause. If the SQL AS clause was not specified, then the label is
     *      the name of the column
     * @param x the new column value 
     *      *      access error occurs; the result set concurrency is
     *      CONCUR_READ_ONLY or this method is called on a closed
     *      result set
     */

/**
     * Update a column with a binary stream value.
     *
     * The updateXXX() methods are used to update column values in the current
     * row, or the insert row. The updateXXX() methods do not update the
     * underlying database, instead the updateRow() or insertRow() methods are
     * called to update the database.
     *
     * @param columnName
     *            the name of the column
     * @param x
     *            the new column value
     * @param length
     *            of the stream
     * @exception SQLException
     *                if a database-access error occurs
     */

/**
     * Updates the designated column using the given input stream.
     * The data will be read from the stream as needed until end-of-stream is
     * reached.
     *
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the updateRow or insertRow
     * methods are called to update the database.
     *
     * @param columnLabel the label for the column specified with the SQL AS
     *      clause. If the SQL AS clause was not specified, then the label is
     *      the name of the column
     * @param x the new column value
     *      *      access error occurs; the result set concurrency is
     *      CONCUR_READ_ONLY or this method is called on a closed
     *      result set
     */

/**
     * Updates the designated column with a character stream value.
     * The data will be read from the stream as needed until end-of-stream is
     * reached.
     *
     * The updater methods are used to update column values in the current row
     * or the insert row. The updater methods do not update the underlying
     * database; instead the updateRow or insertRow
     * methods are called to update the database.
     *
     * @param columnLabel the label for the column specified with the SQL AS
     *      clause. If the SQL AS clause was not specified, then the label is
     *      the name of the column
     * @param reader the new column value
     *      *      access error occurs; the result set concurrency is
     *      CONCUR_READ_ONLY or this method is called on a closed
     *      result set
     */

/**
     * Update a column with a character stream value.
     *
     * The updateXXX() methods are used to update column values in the current
     * row, or the insert row. The updateXXX() methods do not update the
     * underlying database, instead the updateRow() or insertRow() methods are
     * called to update the database.
     *
     * @param columnName
     *            the name of the column
     * @param reader
     *            the new column value
     * @param length
     *            length of the stream
     * @exception SQLException
     *                if a database-access error occurs
     */

/**
     * Updates the designated column with a java.sql.Clob value.
     * The updater methods are used to update column values in the
     * current row or the insert row.  The updater methods do not
     * update the underlying database; instead the updateRow or
     * insertRow methods are called to update the database.
     *
     * @param columnIndex the label for the column specified with the SQL AS
     *                    clause. If the SQL AS clause was not specified, then
     *                    the label is the name of the column
     * @param x the new column value
     *      * if a database access error occurs;
     * the result set concurrency is CONCUR_READ_ONLY
     * or this method is called on a closed result set
     */

/**
     * Updates the designated column with a java.sql.Clob value.
     * The updater methods are used to update column values in the
     * current row or the insert row.  The updater methods do not
     * update the underlying database; instead the updateRow or
     * insertRow methods are called to update the database.
     *
     * @param columnLabel the label for the column specified with the SQL AS
     *                    clause. If the SQL AS clause was not specified, then
     *                    the label is the name of the column
     * @param x the new column value
     *      * if a database access error occurs;
     * the result set concurrency is CONCUR_READ_ONLY
     * or this method is called on a closed result set
     */

/**
     * Marks the LOB at the specified column as published.
     * 
     * When a LOB is marked as published, the release mechanism will not be
     * invoked by the result set. It is expected that the code accessing the
     * LOB releases the locator when it is done with the LOB, or that the
     * commit/rollback handles the release.
     *
     * @param index 1-based column index
     */

/**
     * Initializes the LOB state tracker.
     * 
     * The state tracker is used to free LOB locators on the server. If the
     * server doesn't support locators, or there are no LOBs in the result set,
     * a no-op tracker will be used.
     */

/**
     * Returns false unless interfaces is implemented
     *
     * @param  interfaces             a Class defining an interface.
     * @return true                   if this implements the interface or
     *                                directly or indirectly wraps an object
     *                                that does.
     *      *                                whether this is a wrapper for an object
     *                                with the given interface.
     */

/**
     * Returns this if this class implements the interface
     *
     * @param  interfaces a Class defining an interface
     * @return an object that implements the interface
     *      * interface
     */

/**
     * Updates the designated column with a java.sql.NClob value. The updater
     * methods are used to update column values in the current row or the insert
     * row. The updater methods do not update the underlying database; instead
     * the updateRow or insertRow methods are called to update the database.
     *
     * @param columnIndex -
     *            the first column is 1, the second is 2
     * @param x -
     *            the new column value
     * @exception SQLException
     *                Feature not implemented for now.
     */

/**
     * Updates the designated column with a java.sql.NClob value. The updater
     * methods are used to update column values in the current row or the insert
     * row. The updater methods do not update the underlying database; instead
     * the updateRow or insertRow methods are called to update the database.
     *
     * @param columnName -
     *            the name of the Clob column
     * @param x -
     *            the new column value
     * @exception SQLException
     *                Feature not implemented for now.
     */

/**
     * Updates the designated column with a java.sql.NClob value. The updater
     * methods are used to update column values in the current row or the insert
     * row. The updater methods do not update the underlying database; instead
     * the updateRow or insertRow methods are called to update the database.
     *
     * @param columnName -
     *            the name of the Clob column
     * @param x -
     *            the new column value
     * @exception SQLException
     *                Feature not implemented for now.
     */

/**
     * Retrieve the column as an object of the desired type.
     */

