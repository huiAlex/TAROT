/**
	A handle to an open container, implememts RawContainerHandle.
	
	This class is a DerbyObserver to observe RawTransactions
	and is also a DerbyObservable to
	handle the list of pages accessed thorough this handle.
	
	This class implements Lockable (defined to be ContainerHandle) and is
	the object used to logically lock the container.

	 MT - Mutable - Immutable identity - Thread Aware
*/

/**
		Container identifier
		 MT - Immutable
	*/

/**
		Is this ContainerHandle active.

		 MT - Mutable : scoped
	*/

/**
		The actual container we are accessing. Only valid when active is true.

		 MT - Mutable : scoped
	*/

/**
		the locking policy we opened the container with. 
        Only valid when active is true.

		 MT - Mutable : scoped
	*/

/**
		our transaction. Only valid when active is true.

		 MT - Mutable : scoped
	*/

/**
		are we going to update?

		 MT - Immutable after container handle becomes active
	*/

/**
     * mode the conainter was opened in.
     **/

/**
		Create an object that is only used for locking the container.
	*/

/**
		Create a container handle that is used to actually access the container.
	*/

/**
		Add a page to the container
		The page returned will be observing me.

						@exception StandardException Standard Derby error policy
	*/

/**
		Release free space to the OS.
		
        As is possible release any free space to the operating system.  This
        will usually mean releasing any free pages located at the end of the
        file using the java truncate() interface.

		@exception StandardException	Standard Derby error policy
	*/

/**
	 * Get the reusable recordId sequence number.
	 * @return version sequence number
	 * @exception StandardException	Standard Derby error policy
	 * 	 */

/**
		Add a page to the container, if flag == ContainerHandle.ADD_PAGE_BULK,
		tell the container about it.

		The page returned will be observing me.

						@exception StandardException Standard Derby error policy
	*/

/**
		Preallocate numPage if possible.
	*/

/**
		Remove a page from the container.  

				@exception StandardException Standard Derby error policy
	*/

/**
			*/

/**
			*/

/**
				@exception StandardException Standard Derby error policy
	 */

/**
				@exception StandardException Standard Derby error policy
	 */

/**
				@exception StandardException Standard Derby error policy
	 */

/**
				@exception StandardException Standard Derby error policy
	 */

/**
				@exception StandardException Standard Derby error policy
	 */

/**
		Get the container status.  

		@exception StandardException Standard Derby error policy		
			*/

/**
		remove the container

		@exception StandardException Standard Derby error policy		
			*/

/**
			 */

/**
			 */

/**
		@exception StandardException  Standard Derby exception policy
			*/

/**
		@exception StandardException  Standard Derby exception policy
			*/

/**
		Get this page with no check - any page type or status is fine.
		Caller must be prepared to handle freed, deallocated,or alloc page
		Called by recovery ONLY.

		@exception StandardException Derby Standard error policy
	*/

/**
		Log all information necessary to recreate the container during a load
		tran.

		@exception StandardException Standard Derby error policy
	 */

/**
		Return a record handle that is initialized to the given page number and
        record id.

		@exception StandardException Standard Derby exception policy.

		@param pageNumber   the page number of the RecordHandle.
		@param recordId     the record id of the RecordHandle.

			*/

/**
		Called when the transaction is about to complete.

			*/

/**
		Attach me to a container. If this method returns false then
		I cannot be used anymore, and any reference to me must be discarded.

		@param droppedOK if true, use this container even if it is dropped,
		otherwise, return false if container is dropped.  

		@param waitForLock if true, wait on lock, otherwise, get lock no wait.

		@exception StandardException Standard Derby error policy
	*/

/**
		Return the RawTransaction I was opened in.
	*/

/**
		Return my locking policy, may be different from the Transaction's
		default locking policy.
	*/

/**
		Was I opened for updates?
        

		 MT - thread safe
	*/

/**
		Get the mode I was opened with.
	*/

/**
	   The container is about to be modified.
	   Loggable actions use this to make sure the container gets cleaned if a
	   checkpoint is taken after any log record is sent to the log stream but
	   before the container is actually dirtied.

		@exception StandardException Standard Derby error policy
	 */

/**
				@exception StandardException Standard Derby error policy
	 */

/**
    Get information about space used by the container.
    **/

/**
     * Backup the container to the specified path.
     * @param backupContainerPath  location of the backup container.
	 *  @exception StandardException	Standard Derby error policy
     */

/** {@inheritDoc} */

