/**
    AppRequester stores information about the application requester.
    It is used so that multiple sessions can share information when they are
    started from the same version of the application requester.
*/

/** 
     * AppRequester constructor
     * 
     * @exception throws IOException
     */

/**
     * get the Application requester manager level
     *
     * @param manager   codepoint for manager we are looking for
     *
     * @return manager level for that manager
     */

/**
     * Returns true if Derby's client driver supports SECMEC_USRSSBPWD 
     * DRDA security mechanism.
     */

/**
     * Check if the client expects QRYCLSIMP to be supported when the
     * protocol is LMTBLKPRC.
     *
     * @return true if QRYCLSIMP is supported for
     * LMTBLKPRC
     */

/**
     * Check if provided JCC version level is greaterThanOrEqualTo current level
     *
     * @param vLevel    Version level
     * @param rLevel    Release level
     * @param mLevel    Modification level
     */

/** 
     * set Application requester manager level
     * if the manager level is less than the minimum manager level,
     * set the manager level to zero (saying we can't handle this
     * level), this will be returned
     * to the application requester and he can decide whether or not to
     * proceed
     * For CCSIDMGR, if the target server supports the CCSID manager but
     * not the CCSID requested, the value returned is FFFF
     * For now, we won't support the CCSIDMGR since JCC doesn't request it.
     *
     * @param manager   codepoint of the manager
     * @param managerLevel  level for that manager
     *
     */

/**
     * Check if the application requester is the same as this one
     *
     * @param a application requester to compare to
     * @return true if same false otherwise
     */

/**
     * Check whether two objects are not equal when 1 of the objects could
     * be null
     *
     * @param a first object
     * @param b second object
     * @return true if not equals false otherwise
     */

/**
     * Get the maximum length supported for an exception's message
     * parameter string.
     */

/**
     * Get the type of the client.
     */

/**
     * Is this an AppRequester that supports XA 
     *
     * return true if XAMGR &gt;= 7, false otherwise
     **/

/**
     * Tells whether the client sends a trailing Derby-specific status byte
     * when transferring EXTDTA objects.
     *
     * @return {@code true} if the status byte is sent, {@code false} if not
     */

/**
     * Returns whether our AppRequester's UNICODEMGR supports UTF8 (CCSID 1208)
     * @return {@code true} if the AppRequester supports CCSID 1208, {@code false} if not
     */

/**
     * Return true if the client contains the fix for DERBY-5236, which allows
     * DDMWriter.writeLDString() to write strings that need up to 64K-1 bytes
     * when represented in UTF-8. Otherwise, writeLDString() should use the
     * old maximum length, which is 32700 bytes.
     */

/**
     * The timestamp length may be truncated for old versions of Derby.
     * See DERBY-2602.
     */

