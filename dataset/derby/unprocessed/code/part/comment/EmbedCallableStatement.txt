/**
 * Local implementation.
 *
 */

/**
	 * @exception SQLException thrown on failure
	 */

/**
	 * 	 * @exception SQLException NoOutputParameters thrown.
	 */

/**
	 *      * @exception SQLException NoOutputParameters thrown.
     */

/**
	 * JDBC 2.0
	 *
	 * Derby ignores the typeName argument because UDTs don't need it.
	 *
	 * @exception SQLException if a database-access error occurs.
	 */

/**
	 *      * @exception SQLException NoOutputParameters thrown.
     */

/**
	 *      * @exception SQLException NoOutputParameters thrown.
     */

/**
	 *      * @exception SQLException NoOutputParameters thrown.
     */

/**
	 *      * @exception SQLException NoOutputParameters thrown.
     */

/**
	 *      * @exception SQLException NoOutputParameters thrown.
     */

/**
	 *      * @exception SQLException NoOutputParameters thrown.
     */

/**
	 *      * @exception SQLException NoOutputParameters thrown.
     */

/**
     * JDBC 2.0
     *
     * Get the value of a NUMERIC parameter as a java.math.BigDecimal object.
     *
     * @param parameterIndex the first parameter is 1, the second is 2, ...
     * @return the parameter value (full precision); if the value is SQL NULL, 
     * the result is null 
     * @exception SQLException if a database-access error occurs.
     */

/**
	 *      * @exception SQLException NoOutputParameters thrown.
     * @deprecated
     */

/**
	 *      * @exception SQLException NoOutputParameters thrown.
     */

/**
	 *      * @exception SQLException NoOutputParameters thrown.
     */

/**
	 *      * @exception SQLException NoOutputParameters thrown.
     */

/**
	 *      * @exception SQLException NoOutputParameters thrown.
     */

/**
	 *      * @exception SQLException NoOutputParameters thrown.
     */

/**
	 *      * @exception SQLException NoOutputParameters thrown.
     */

/**
     * Get the value of a SQL DATE parameter as a java.sql.Date object
     *
     * @param parameterIndex the first parameter is 1, the second is 2, ...
     * @return the parameter value; if the value is SQL NULL, the result is 
     * null
     * @exception SQLException if a database-access error occurs.
     */

/**
     * Get the value of a SQL TIME parameter as a java.sql.Time object.
     *
     * @param parameterIndex the first parameter is 1, the second is 2, ...
     * @return the parameter value; if the value is SQL NULL, the result is 
	 * null
     * @exception SQLException if a database-access error occurs.
     */

/**
     * Get the value of a SQL TIMESTAMP parameter as a java.sql.Timestamp 
     * object.
     *
     * @param parameterIndex the first parameter is 1, the second is 2, ...
     * @return the parameter value; if the value is SQL NULL, the result is 
     * null
     * @exception SQLException if a database-access error occurs.
     */

/**
	 *      * @exception SQLException NoOutputParameters thrown.
     */

/**
	    * JDBC 3.0
	    *
	    * Retrieve the value of the designated JDBC DATALINK parameter as a java.net.URL object
	    *
	    * @param parameterIndex - the first parameter is 1, the second is 2
	    * @return a java.net.URL object that represents the JDBC DATALINK value used as
	    * the designated parameter
	    * @exception SQLException Feature not implemented for now.
		*/

/**
	    * JDBC 3.0
	    *
	    * Sets the designated parameter to the given java.net.URL object. The driver
	    * converts this to an SQL DATALINK value when it sends it to the database.
	    *
	    * @param parameterName - the name of the parameter
	    * @param val - the parameter value
	    * @exception SQLException Feature not implemented for now.
		*/

/**
	    * JDBC 3.0
	    *
	    * Retrieves the value of a JDBC DATALINK parameter as a java.net.URL object
	    *
	    * @param parameterName - the name of the parameter
	    * @return the parameter value. If the value is SQL NULL, the result is null.
	    * @exception SQLException Feature not implemented for now.
		*/

/**
     * JDBC 2.0
     *
     * Get a BLOB OUT parameter.
     *
     * @param parameterIndex the first parameter is 1, the second is 2, ...
     * @return an object representing a BLOB
     * @exception SQLException if a database-access error occurs.
     */

/**
     * JDBC 2.0
     *
     * Get a CLOB OUT parameter.
     *
     * @param parameterIndex the first parameter is 1, the second is 2, ...
     * @return an object representing a CLOB
     * @exception SQLException if a database-access error occurs.
     */

/**
     * JDBC 2.0
     *
     * Returns an object representing the value of OUT parameter {@code i}.
     * Use the map to determine the class from which to construct data of SQL
     * structured and distinct types.
     *
     * @param i the first parameter is 1, the second is 2, ...
     * @param map the mapping from SQL type names to Java classes
     * @return a java.lang.Object holding the OUT parameter value.
     * @exception SQLException if a database-access error occurs.
     */

/**
     * JDBC 2.0
     *
     * Get a REF(&lt;structured-type&gt;) OUT parameter.
     *
     * @param i the first parameter is 1, the second is 2, ...
     * @return an object representing data of an SQL REF Type
     * @exception SQLException if a database-access error occurs.
     */

/**
     * JDBC 2.0
     *
     * Get an Array OUT parameter.
     *
     * @param i the first parameter is 1, the second is 2, ...
     * @return an object representing an SQL array
     * @exception SQLException if a database-access error occurs.
     */

/**
     * JDBC 3.0
     *
     * Registers the OUT parameter named parameterName to the JDBC type sqlType.
     * All OUT parameters must be registered before a stored procedure is
     * executed.
     *
     * @param parameterName - the name of the parameter
     * @param sqlType - the JDBC type code defined by java.sql.Types. If the
     * parameter is of JDBC type NUMERIC or DECIMAL, the version of
     * registerOutParameter that accepts a scale value should be used.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Registers the designated output parameter. This version of the method
     * registerOutParameter should be used for a user-named or REF output
     * parameter.
     *
     * @param parameterName - the name of the parameter
     * @param sqlType - the SQL type code defined by java.sql.Types.
     * @param typeName - the fully-qualified name of an SQL structure type
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Registers the parameter named parameterName to the JDBC type sqlType.
     * This method must be called before a stored procedure is executed.
     *
     * @param parameterName - the name of the parameter
     * @param sqlType - the SQL type code defined by java.sql.Types.
     * @param scale - the desired number of digits to the right of the decimal
     * point. It must be greater than or equal to zero.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Retrieves the value of a JDBC REF (structured-type) parameter as a Ref
     * object in the Java programming language.
     *
     * @param parameterName - the name of the parameter
     * @return the parameter value as a Ref object in the Java Programming
     * language. If the value is SQL NULL, the result is null.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Retrieves the value of a JDBC BLOB parameter as a Blob object in the Java
     * programming language.
     *
     * @param parameterName - the name of the parameter
     * @return the parameter value as a Blob object in the Java Programming
     * language. If the value is SQL NULL, the result is null.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Retrieves the value of a JDBC CLOB parameter as a Clob object in the Java
     * programming language.
     *
     * @param parameterName - the name of the parameter
     * @return the parameter value as a Clob object in the Java Programming
     * language. If the value is SQL NULL, the result is null.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Retrieves the value of a JDBC ARRAY parameter as an Array object in the
     * Java programming language.
     *
     * @param parameterName - the name of the parameter
     * @return the parameter value as a Array object in the Java Programming
     * language. If the value is SQL NULL, the result is null.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the designated parameter to SQL NULL.
     *
     * @param parameterName - the name of the parameter
     * @param sqlType - the SQL type code defined in java.sql.Types
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the designated parameter to SQL NULL.
     *
     * @param parameterName - the name of the parameter
     * @param sqlType - the SQL type code defined in java.sql.Types
     * @param typeName - the fully-qualified name of an SQL user-defined type
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the designated parameter to the given Java boolean value. The driver
     * converts this to an SQL BIT value when it sends it to the database.
     *
     * @param parameterName - the name of the parameter
     * @param x - the parameter value
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Retrieves the value of a JDBC BIT parameter as a boolean in the Java
     * programming language.
     *
     * @param parameterName - the name of the parameter
     * @return the parameter value. If the value is SQL NULL, the result is
     * false.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the designated parameter to the given Java byte value. The driver
     * converts this to an SQL TINYINT value when it sends it to the database.
     *
     * @param parameterName - the name of the parameter
     * @param x - the parameter value
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Retrieves the value of a JDBC TINYINT parameter as a byte in the Java
     * programming language.
     *
     * @param parameterName - the name of the parameter
     * @return the parameter value. If the value is SQL NULL, the result is 0.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the designated parameter to the given Java short value. The driver
     * converts this to an SQL SMALLINT value when it sends it to the database.
     *
     * @param parameterName - the name of the parameter
     * @param x - the parameter value
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Retrieves the value of a JDBC SMALLINT parameter as a short in the Java
     * programming language.
     *
     * @param parameterName - the name of the parameter
     * @return the parameter value. If the value is SQL NULL, the result is 0.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the designated parameter to the given Java int value. The driver
     * converts this to an SQL INTEGER value when it sends it to the database.
     *
     * @param parameterName - the name of the parameter
     * @param x - the parameter value
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Retrieves the value of a JDBC INTEGER parameter as a int in the Java
     * programming language.
     *
     * @param parameterName - the name of the parameter
     * @return the parameter value. If the value is SQL NULL, the result is 0.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the designated parameter to the given Java long value. The driver
     * converts this to an SQL BIGINT value when it sends it to the database.
     *
     * @param parameterName - the name of the parameter
     * @param x - the parameter value
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Retrieves the value of a JDBC BIGINT parameter as a long in the Java
     * programming language.
     *
     * @param parameterName - the name of the parameter
     * @return the parameter value. If the value is SQL NULL, the result is 0.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the designated parameter to the given Java float value. The driver
     * converts this to an SQL FLOAT value when it sends it to the database.
     *
     * @param parameterName - the name of the parameter
     * @param x - the parameter value
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Retrieves the value of a JDBC FLOAT parameter as a float in the Java
     * programming language.
     *
     * @param parameterName - the name of the parameter
     * @return the parameter value. If the value is SQL NULL, the result is 0.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the designated parameter to the given Java double value. The driver
     * converts this to an SQL DOUBLE value when it sends it to the database.
     *
     * @param parameterName - the name of the parameter
     * @param x - the parameter value
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Retrieves the value of a JDBC DOUBLE parameter as a double in the Java
     * programming language.
     *
     * @param parameterName - the name of the parameter
     * @return the parameter value. If the value is SQL NULL, the result is 0.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the designated parameter to the given java.math.BigDecimal value.
     * The driver converts this to an SQL NUMERIC value when it sends it to the
     * database.
     *
     * @param parameterName - the name of the parameter
     * @param x - the parameter value
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Retrieves the value of a JDBC NUMERIC parameter as a java.math.BigDecimal
     * object with as many digits to the right of the decimal point as the value
     * contains
     *
     * @param parameterName - the name of the parameter
     * @return the parameter value. If the value is SQL NULL, the result is 0.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the designated parameter to the given Java String value. The driver
     * converts this to an SQL VARCHAR OR LONGVARCHAR value (depending on the
     * argument's size relative the driver's limits on VARCHAR values) when it
     * sends it to the database.
     *
     * @param parameterName - the name of the parameter
     * @param x - the parameter value
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Retrieves the value of a JDBC CHAR, VARCHAR, or LONGVARCHAR parameter as
     * a String in the Java programming language.
     *
     * @param parameterName - the name of the parameter
     * @return the parameter value. If the value is SQL NULL, the result is
     * null.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the designated parameter to the given Java array of bytes. The
     * driver converts this to an SQL VARBINARY OR LONGVARBINARY (depending on
     * the argument's size relative to the driver's limits on VARBINARY
     * values)when it sends it to the database.
     *
     * @param parameterName - the name of the parameter
     * @param x - the parameter value
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Retrieves the value of a JDBC BINARY or VARBINARY parameter as an array
     * of byte values in the Java programming language.
     *
     * @param parameterName - the name of the parameter
     * @return the parameter value. If the value is SQL NULL, the result is
     * null.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the designated parameter to the given java.sql.Date value. The
     * driver converts this to an SQL DATE value when it sends it to the
     * database.
     *
     * @param parameterName - the name of the parameter
     * @param x - the parameter value
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the designated parameter to the given java.sql.Date value, using the
     * given Calendar object.
     *
     * @param parameterName - the name of the parameter
     * @param x - the parameter value
     * @param cal - the Calendar object the driver will use to construct the
     * date
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Retrieves the value of a JDBC DATE parameter as a java.sql.Date object
     *
     * @param parameterName - the name of the parameter
     * @return the parameter value. If the value is SQL NULL, the result is
     * null.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Retrieves the value of a JDBC DATE parameter as a java.sql.Date object,
     * using the given Calendar object to construct the date object.
     *
     * @param parameterName - the name of the parameter
     * @param cal - the Calendar object the driver will use to construct the
     * date
     * @return the parameter value. If the value is SQL NULL, the result is
     * null.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the designated parameter to the given java.sql.Time value. The
     * driver converts this to an SQL TIME value when it sends it to the
     * database.
     *
     * @param parameterName - the name of the parameter
     * @param x - the parameter value
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Retrieves the value of a JDBC TIME parameter as ajava.sql.Time object
     *
     * @param parameterName - the name of the parameter
     * @return the parameter value. If the value is SQL NULL, the result is
     * null.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Retrieves the value of a JDBC TIME parameter as a java.sql.Time object,
     * using the given Calendar object to construct the time object.
     *
     * @param parameterName - the name of the parameter
     * @param cal - the Calendar object the driver will use to construct the
     * time
     * @return the parameter value. If the value is SQL NULL, the result is
     * null.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the designated parameter to the given java.sql.Time value using the
     * Calendar object
     *
     * @param parameterName - the name of the parameter
     * @param x - the parameter value
     * @param cal - the Calendar object the driver will use to construct the
     * time
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the designated parameter to the given java.sql.Timestamp value. The
     * driver converts this to an SQL TIMESTAMP value when it sends it to the
     * database.
     *
     * @param parameterName - the name of the parameter
     * @param x - the parameter value
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the designated parameter to the given java.sql.Timestamp value,
     * using the given Calendar object
     *
     * @param parameterName - the name of the parameter
     * @param x - the parameter value
     * @param cal - the Calendar object the driver will use to construct the
     * timestamp.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Retrieves the value of a JDBC TIMESTAMP parameter as a java.sql.Timestamp
     * object
     *
     * @param parameterName - the name of the parameter
     * @return the parameter value. If the value is SQL NULL, the result is
     * null.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Retrieves the value of a JDBC TIMESTAMP parameter as a java.sql.Timestamp
     * object, using the given Calendar object to construct the Timestamp
     * object.
     *
     * @param parameterName - the name of the parameter
     * @param cal - the Calendar object the driver will use to construct the
     * Timestamp
     * @return the parameter value. If the value is SQL NULL, the result is
     * null.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the designated parameter to the given input stream, which will have
     * the specified number of bytes.
     *
     * @param parameterName - the name of the parameter
     * @param x - the Java input stream that contains the ASCII parameter value
     * @param length - the number of bytes in the stream
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the designated parameter to the given input stream, which will have
     * the specified number of bytes.
     *
     * @param parameterName - the name of the parameter
     * @param x - the Java input stream that contains the binary parameter value
     * @param length - the number of bytes in the stream
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the designated parameter to the given Reader object, which is the
     * given number of characters long.
     *
     * @param parameterName - the name of the parameter
     * @param reader - the java.io.Reader object that contains the UNICODE data
     * @param length - the number of characters in the stream
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the value of the designated parameter with the given object. The
     * second argument must be an object type; for integral values, the
     * java.lang equivalent objects should be used.
     *
     * @param parameterName - the name of the parameter
     * @param x - the object containing the input parameter value
     * @param targetSqlType - the SQL type (as defined in java.sql.Types) to be
     * sent to the database. The scale argument may further qualify this type.
     * @param scale - for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC
     * types, this is the number of digits after the decimal point. For all
     * other types, this value will be ignored.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Retrieves the value of a parameter as an Object in the java programming
     * language.
     *
     * @param parameterName - the name of the parameter
     * @return a java.lang.Object holding the OUT parameter value
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Returns an object representing the value of OUT parameter i and uses map
     * for the custom mapping of the parameter value.
     *
     * @param parameterName - the name of the parameter
     * @param map - the mapping from SQL type names to Java classes
     * @return a java.lang.Object holding the OUT parameter value
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the value of the designated parameter with the given object. This
     * method is like the method setObject above, except that it assumes a scale
     * of zero.
     *
     * @param parameterName - the name of the parameter
     * @param x - the object containing the input parameter value
     * @param targetSqlType - the SQL type (as defined in java.sql.Types) to be
     * sent to the database.
     * @exception SQLException Feature not implemented for now.
     */

/**
     * JDBC 3.0
     *
     * Sets the value of the designated parameter with the given object. The
     * second parameter must be of type Object; therefore, the java.lang
     * equivalent objects should be used for built-in types.
     *
     * @param parameterName - the name of the parameter
     * @param x - the object containing the input parameter value
     * @exception SQLException Feature not implemented for now.
     */

/**
     * Retrieves the value of the designated parameter as a
     * java.io.Reader object in the Java programming language.
     * Introduced in JDBC 4.0.
     *
     * @param parameterIndex the first parameter is 1, the second is 2, ...
     * @return a java.io.Reader object that contains the parameter
     * value; if the value is SQL NULL, the value returned
     * is null in the Java programming language.
     *      * called on a closed CallableStatement
     */

/**
     * Get binary stream for a parameter.
     *
     * @param parameterIndex first parameter is 1, second is 2 etc.
     * @return a stream for the binary parameter, or null.
     *
     *      */

/**
     * Sets the designated parameter to the given input stream, which will have
     * the specified number of bytes.
     *
     * @param parameterName the name of the first parameter
     * @param x the java input stream which contains the ASCII parameter value
     * @param length the number of bytes in the stream
     * @exception SQLException thrown on failure.
     *
     */

/**
     * Sets the designated parameter to the given input stream, which will have
     * the specified number of bytes.
     *
     * @param parameterName the name of the first parameter
     * @param x the java input stream which contains the binary parameter value
     * @param length the number of bytes in the stream
     * @exception SQLException thrown on failure.
     *
     */

/**
     * Sets the designated parameter to the given Reader, which will have the
     * specified number of bytes.
     *
     * @param parameterName the name of the first parameter
     * @param x the java Reader which contains the UNICODE value
     * @param length the number of bytes in the stream
     * @exception SQLException thrown on failure.
     *
     */

