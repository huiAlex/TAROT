/**

  A sort implementation which does the sort in-memory if it can,
  but which can do an external merge sort so that it can sort an
  arbitrary number of rows.

**/

/**
	**/

/**
	**/

/**
	**/

/**
	**/

/**
	**/

/**
	**/

/**
	Maintains the current state of the sort as defined in
	the preceding values.  Sorts start off and end up closed.
	**/

/**
	The template as passed in on create.  Valid when the state
	is INITIALIZED through SCANNING, null otherwise.
	**/

/**
	The column ordering as passed in on create.  Valid when
	the state is INITIALIZED through SCANNING, null otherwise.
	May be null if there is no column ordering - this means
	that all rows are considered to be duplicates, and the
	sort will only emit a single row.
	**/

/**
    A lookup table to speed up lookup of a column associated with the i'th
    column to compare.  To find the column id to compare as the i'th column
    look in columnOrderingMap[i].
	**/

/**
    A lookup table to speed up lookup of Ascending state of a column, 
	**/

/**
    A lookup table to speed up lookup of nulls-low ordering of a column, 
	**/

/**
	The sort observer.  May be null.  Used as a callback.
	**/

/**
	Whether the rows are expected to be in order on insert,
	as passed in on create.
	**/

/**
	The inserter that's being used to insert rows into the sort.
	This field is only valid when the state is INSERTING.
	**/

/**
	The scan that's being used to return rows from the sort.
	This field is only valid when the state is SCANNING.
	**/

/**
	A vector of merge runs, produced by the MergeInserter.
	Might be null if no merge runs were produced.
	It is a vector of container ids.
	**/

/**
	An ordered set of the leftover rows that didn't go
	in the last merge run (might be all the rows if there
	are no merge runs).
	**/

/**
	The maximum number of entries a sort buffer can hold.
	**/

/**
	The minimum number of entries a sort buffer can hold.
	**/

/**
	Properties for mergeSort
	**/

/**
    Static initializer for MergeSort, to initialize once the properties
	for the sortBuffer.  
	**/

/**
	Open a sort controller.
	
	This implementation only supports a single sort controller
	per sort.
		**/

/**
	Open a scan controller.
		**/

/**
	Open a row source to get rows out of the sorter.
		**/

/**
	Drop the sort.
		**/

/**
     * Check the column ordering against the template, making sure that each
     * column is present in the template, is not mentioned more than once, and
     * that the columns isn't {@code null}.
     * 
     * Intended to be called as part of a sanity check. All columns are
     * orderable, since {@code DataValueDescriptor} extends {@code Orderable}.
     *
     * @return {@code true} if the ordering is valid, {@code false} if not.
     */

/**
	Check that the columns in the row agree with the columns
	in the template, both in number and in type.
	
	XXX (nat) Currently checks that the classes implementing
	each column are the same -- is this right?
	**/

/**
	Go from the CLOSED to the INITIALIZED state.
	**/

/**
	An inserter is closing.
	**/

/**
	Get rid of the merge runs, if there are any.
	Must not cause any errors because it's called
	during error processing.
	**/

/**
	Remove all the rows from the sort buffer and store them
	in a temporary conglomerate.  The temporary conglomerate
	is a "merge run".  Returns the container id of the
	merge run.
	**/

