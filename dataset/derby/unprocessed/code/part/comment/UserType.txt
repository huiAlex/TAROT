/**
 * This contains an instance of a user-defined type, that is, a java object.
 *
 */

/**
	 * @exception StandardException thrown on failure to convert
	 */

/**
	 * @exception StandardException thrown on failure to convert
	 */

/**
	 * @exception StandardException thrown on failure to convert
	 */

/**
	 * @exception StandardException thrown on failure to convert
	 */

/**
	 * @exception StandardException thrown on failure to convert
	 */

/**
	 * @exception StandardException thrown on failure to convert
	 */

/**
	 * @exception StandardException thrown on failure to convert
	 */

/**
	 * @exception StandardException thrown on failure to convert
	 */

/**

		@exception StandardException thrown on failure
	 */

/**
		@exception StandardException thrown on failure
	 */

/**
		@exception StandardException thrown on failure
	 */

/**
	 * Get the type name of this value,  overriding
	 * with the passed in class name (for user/java types).
	 */

/**
		Return my format identifier.

			*/

/** 
		@exception IOException error writing data

	*/

/**
	 * 	 *
	 * @exception IOException	Thrown on error reading the object
	 * @exception ClassNotFoundException	Thrown if the class of the object
	 *										is not found
	 */

/** @see DataValueDescriptor#cloneValue */

/**
	 * 	 */

/**
	 * 	 *
	 */

/** 
	 * 	 *
	 * @exception SQLException		Thrown on error
	 */

/**
	 * Orderable interface
	 *
	 *
	 * 	 *
	 * @exception StandardException thrown on failure
	 */

/**
		@exception StandardException thrown on error
	 */

/** no-arg constructor required by Formattable */

/**
	 * 	 *
	 */

/**
	 * 	 *
	 */

/**
	 * The = operator as called from the language module, as opposed to
	 * the storage module.
	 *
	 * @param left			The value on the left side of the =
	 * @param right			The value on the right side of the =
	 *
	 * @return	A SQL boolean value telling whether the two parameters are equal
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * The &lt;&gt; operator as called from the language module, as opposed to
	 * the storage module.
	 *
	 * @param left			The value on the left side of the operator
	 * @param right			The value on the right side of the operator
	 *
	 * @return	A SQL boolean value telling whether the two parameters
	 *			are not equal
	 *
	 * @exception StandardException		Thrown on error
	 */

/** @see DataValueDescriptor#typePrecedence */

/**
	 * Check if the value is null.  
	 *
	 * @return Whether or not value is logically null.
	 */

