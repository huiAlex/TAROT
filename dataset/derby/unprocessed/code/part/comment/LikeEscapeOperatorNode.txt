/**************************************************************************
    * Fields of the class
    **************************************************************************
    */

/**
     * Constructor for a LikeEscapeOperatorNode
     *
     * receiver like pattern [ escape escapeValue ]
     *
     * @param receiver      The left operand of the like: 
     *                              column, CharConstant or Parameter
     * @param leftOperand   The right operand of the like: the pattern
     * @param rightOperand  The optional escape clause, null if not present
     * @param cm            The context manager
     */

/**
     * implement binding for like expressions.
     * 
     * overrides BindOperatorNode.bindExpression because like has special
     * requirements for parameter binding.
     *
     * @return  The new top of the expression tree.
     *
     * @exception StandardException thrown on failure
     */

/**
    * Bind this operator
    *
    * @exception StandardException  Thrown on error
    */

/**
    * Preprocess an expression tree.  We do a number of transformations
    * here (including subqueries, IN lists, LIKE and BETWEEN) plus
    * subquery flattening.
    * NOTE: This is done before the outer ResultSetNode is preprocessed.
    *
    * @param numTables          Number of tables in the DML Statement
    * @param outerFromList      FromList from outer query block
    * @param outerSubqueryList  SubqueryList from outer query block
    * @param outerPredicateList PredicateList from outer query block
    *
    * @return The modified expression
    *
    * @exception StandardException  Thrown on error
    */

/**
     * Do code generation for this binary operator.
     *
     * This code was copied from BinaryOperatorNode and stripped down
     *
     * @param acb   The ExpressionClassBuilder for the class we're generating
     * @param mb    The method the code to place the code
     *
     *
     * @exception StandardException Thrown on error
     */

