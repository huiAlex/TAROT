/**
	Utility methods for InputStream that are stand-ins for
	a small subset of DataInput methods. This avoids pushing
	a DataInputStream just to get this functionality.
*/

/**
		Read an unsigned byte from an InputStream, throwing an EOFException
		if the end of the input is reached.

		@exception IOException if an I/O error occurs.
		@exception EOFException if the end of the stream is reached

			
	*/

/**
		Read a number of bytes into an array.

		@exception IOException if an I/O error occurs.
		@exception EOFException if the end of the stream is reached

		
	*/

/**
		Read a number of bytes into an array.
        Keep reading in a loop until len bytes are read or EOF is reached or
        an exception is thrown. Return the number of bytes read.
        (InputStream.read(byte[],int,int) does not guarantee to read len bytes
         even if it can do so without reaching EOF or raising an exception.)

		@exception IOException if an I/O error occurs.
	*/

/**
     * Skips until EOF, returns number of bytes skipped.
     * @param is
     *      InputStream to be skipped.
     * @return
     *      number of bytes skipped in fact.
     *      *      if IOException occurs. It doesn't contain EOFException.
     *      *      if the param 'is' equals null.
     */

/**
     * Skips requested number of bytes,
     * throws EOFException if there is too few bytes in the stream.
     * @param is
     *      InputStream to be skipped.
     * @param skippedBytes
     *      number of bytes to skip. if skippedBytes &gl;= zero, do nothing.
     *      *      if EOF meets before requested number of bytes are skipped.
     *      *      if IOException occurs. It doesn't contain EOFException.
     *      *      if the param 'is' equals null.
     */

/**
     * Tries harder to skip the requested number of bytes.
     * 
     * Note that even if the method fails to skip the requested number of bytes,
     * it will not throw an exception. If this happens, the caller can be sure
     * that end-of-stream has been reached.
     *
     * @param in byte stream
     * @param bytesToSkip the number of bytes to skip
     * @return The number of bytes skipped.
     *      */

