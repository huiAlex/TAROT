/**
 * Static utility routine package for all Conglomerates.
 * 
 * A collection of static utility routines that are shared by multiple
 * Conglomerate implementations.
 * 
 **/

/**
     * Create a list of all the properties that Access wants to export
     * through the getInternalTablePropertySet() call.
     * 
     * This utility routine creates a list of properties that are shared by
     * all conglomerates.  This list contains the following:
     *
     *     derby.storage.initialPages
     *     derby.storage.minimumRecordSize
     *     derby.storage.pageReservedSpace
     *     derby.storage.pageSize 
	 *     derby.storage.reusableRecordId
     *     
     * 
     *
	 * @return The Property set filled in.
     *
     * @param prop   If non-null the property set to fill in.
     **/

/**
     * Create a list of all the properties that Access wants to export
     * through the getInternalTablePropertySet() call.
     * 
     * This utility routine creates a list of properties that are shared by
     * all conglomerates.  This list contains the following:
     *
     *     derby.storage.initialPages
     *     derby.storage.minimumRecordSize
     *     derby.storage.pageReservedSpace
     *     derby.storage.pageSize 
     *     
     * 
     *
	 * @return The Property set filled in.
     *
     * @param prop   If non-null the property set to fill in.
     **/

/**
     * Given an array of objects, return an array of format id's.
     * 
     *
	 * @return An array of format id's describing the input array of objects.
     *
     * @param template a row.
     *
     **/

/**
     * Read a format id array in from a stream.
     * 
     *
	 * @return A new array of format id's.
     *
     * @param num         The number of format ids to read.
     * @param in          The stream to read the array of format id's from.
     *
	 * @exception  IOException  Thown on read error.
     **/

/**
     * Write a format id array to a stream.
     * 
     *
     * @param format_id_array The array of format ids to write.
     * @param out             The stream to write the array of format id's to.
     *
	 * @exception  IOException  Thown on write error.
     **/

/**
     * Given an array of columnOrderings, return an array of collation ids.
     * 
     * If input array is null, produce a default collation_id array of all
     * StringDataValue.COLLATION_TYPE_UCS_BASIC values.
     *
     * @return An array of collation id's describing the input array of objects.
     **/

/**
     * Write array of collation id's as a sparse array.
     * 
     * The format only writes out those array entries which are not 
     * StringDataValue.COLLATION_TYPE_UCS_BASIC.  The sparse array
     * first writes the number of entries as a compressed int.  And
     * then for each non-COLLATION_TYPE_UCS_BASIC, it writes out a
     * pair of compressed ints:
     *
     *     (array offset, array entry value)
     *
     * @param collation_id_array The array of collation ids to write.
     * @param out                The stream to write the collation id's to.
     *
	 * @exception  IOException  Thown on write error.
     **/

/**
     * Read "sparse" array of collation id's
     * 
     * The format to be read first has the number of entries as a compressed 
     * int.  And then for each non-COLLATION_TYPE_UCS_BASIC value there is
     * pair of compressed ints:
     *
     *     (array offset, array entry value)
     * 
     * reads the sparse array as written by writeCollationIdArray().
     *
     * @param collation_id_array update's only those array entries that have
     *                           been set in the sparse array stream.
     *                           Those values are set as indicated by reading 
     *                           the sparse array from the stream.
     *                           
     * @param in                 The stream to read the collation info from.
     * @return {@code true} if at least one column has a different collation
     *      than UCS BASIC, {@code false} otherwise.
     *
     **/

/**
	 ** Format a page of data, as access see's it.
	 **/

