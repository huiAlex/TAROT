/**
 * A background cleaner that {@code ConcurrentCache} can use to clean {@code
 * Cacheable}s asynchronously in a background instead of synchronously in the
 * user threads. It is normally used by the replacement algorithm in order to
 * make dirty {@code Cacheable}s clean and evictable in the future. When the
 * background cleaner is asked to clean an item, it puts the item in a queue
 * and requests to be serviced by a DaemonService running in a
 * separate thread.
 */

/** The service thread which performs the clean operations. */

/** Subscription number for this Serviceable. */

/**
     * Flag which tells whether the cleaner has a still unprocessed job
     * scheduled with the daemon service. If this flag is true,
     * calls to serviceNow() won't result in the cleaner being
     * serviced.
     */

/** A queue of cache entries that need to be cleaned. */

/**
     * Flag which tells whether the cleaner should try to shrink the cache
     * the next time it wakes up.
     */

/** The cache manager owning this cleaner. */

/**
     * Create a background cleaner instance and subscribe it to a daemon
     * service.
     *
     * @param cache the cache manager that owns the cleaner
     * @param daemon the daemon service which perfoms the work
     * @param queueSize the maximum number of entries to keep in the queue
     * (must be greater than 0)
     */

/**
     * Try to schedule a clean operation in the background cleaner.
     *
     * @param entry the entry that needs to be cleaned
     * @return true if the entry has been scheduled for clean,
     * false if the background cleaner can't clean the entry (its
     * queue is full)
     */

/**
     * Request that the cleaner tries to shrink the cache the next time it
     * wakes up.
     */

/**
     * Notify the daemon service that the cleaner needs to be serviced.
     */

/**
     * Stop subscribing to the daemon service.
     */

/**
     * Clean the first entry in the queue. If there is more work, re-request
     * service from the daemon service.
     *
     * @param context ignored
     * @return status for the performed work (normally
     * Serviceable.DONE)
     *      */

/**
     * Indicate that we want to be serviced ASAP.
     * @return true
     */

/**
     * Indicate that we don't want the work to happen immediately in the
     * user thread.
     * @return false
     */

