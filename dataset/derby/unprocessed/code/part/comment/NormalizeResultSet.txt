/**
 * Cast the rows from the source result set to match the format of the
 * result set for the entire statement.
 */

/**
     * This array contains data value descriptors that can be used (and reused)
     * by normalizeRow() to hold the normalized column values.
     */

/**
	 * Constructor for a NormalizeResultSet
	 *
	 * @param source					The NoPutResultSet from which to get rows
	 *									to be normalized
	 * @param activation				The activation for this execution
	 * @param resultSetNumber			The resultSetNumber
	 * @param erdNumber					The integer for the ResultDescription
	 *
	 * @exception StandardException	on error
	 */

/**
     * open a scan on the source. scan parameters are evaluated
     * at each open, so there is probably some way of altering
     * their values...
	 *
 	 * @exception StandardException thrown on failure 
     */

/**
	 * reopen a scan on the table. scan parameters are evaluated
	 * at each open, so there is probably some way of altering
	 * their values...
	 *
	 * @exception StandardException thrown if cursor finished.
	 */

/**
	 *
 	 * @exception StandardException thrown on failure 
	 */

/**
	 * If the result set has been opened,
	 * close the open scan.
	 *
	 * @exception StandardException thrown on error
	 */

/**
	 * Return the total amount of time spent in this ResultSet
	 *
	 * @param type	CURRENT_RESULTSET_ONLY - time spent only in this ResultSet
	 *				ENTIRE_RESULTSET_TREE  - time spent in this ResultSet and below.
	 *
	 * @return long		The total amount of time spent (in milliseconds).
	 */

/**
	 * Gets information from its source. We might want
	 * to have this take a CursorResultSet in its constructor some day,
	 * instead of doing a cast here?
	 *
	 * 	 *
	 * @return the row location of the current cursor row.
	 *
 	 * @exception StandardException thrown on failure 
	 */

/**
	 * Gets information from last getNextRow call.
	 *
	 * 	 *
	 * @return the last row returned.
	 */

/**
     * 
     * Compute the start column for an update/insert.
     *
     * @param isUpdate  True if we are executing an UPDATE statement
     * @param desc Metadata describing a result row
     * 
     */

/**
	 * Normalize a column.  For now, this means calling constructors through
	 * the type services to normalize a type to itself.  For example,
	 * if you're putting a char(30) value into a char(15) column, it
	 * calls a SQLChar constructor with the char(30) value, and the
	 * constructor truncates the value and makes sure that no non-blank
	 * characters are truncated.
	 *
     *
     * @param dtd Data type to coerce to
     * @param sourceRow row holding the source column
     * @param sourceColumnPosition position of column in row
     * @param resultCol where to stuff the coerced value
     * @param desc Additional metadata for error reporting if necessary
     *
 	 * @exception StandardException thrown on failure 
	 */

/**
	 * Normalize a row.
	 *
	 * @param sourceRow		The row to normalize
	 *
	 * @return	The normalized row
	 *
 	 * @exception StandardException thrown on failure 
	 */

/**
     * Get a cached data value descriptor that can receive the normalized
     * value of the specified column.
     *
     * @param col the column number (1-based)
     * @return a data value descriptor of the correct type for the column
     *      * created
     */

/**
     * Get a data type descriptor that describes the desired type for the
     * specified column.
     *
     * @param col the column number (1-based)
     * @return a data type descriptor for the column
     */

/**
     * 
     * Fetch the result datatypes out of the activation.
     * 
     */

/**
	 * 	 */

/**
	 * 	 */

