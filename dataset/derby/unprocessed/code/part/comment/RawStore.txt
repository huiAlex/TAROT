/**
	A Raw store that implements the RawStoreFactory module by delegating all the
	work to the lower modules TransactionFactory, LogFactory and DataFactory.
	
	String TransactionFactoryId=
	
	
	
	Class is final as it has methods with privilege blocks
	and implements PrivilegedExceptionAction.
*/

/**
	  We use this RawStore for all databases.
	  */

/**
		Is the store read-only.
			*/

/**
		Get the Transaction Factory to use with this store.
	*/

/**
     * Register a handler class for insert undo events.
     * 
     * Register a class to be called when an undo of an insert is executed.  
     * When an undo of an event is executed by the raw store 
     * UndoHandler.insertUndoNotify() will be called, allowing upper level 
     * callers to execute code as necessary.  The initial need is for the 
     * access layer to be able to queue post commit reclaim space in the case 
     * of inserts which are aborted (including the normal case of inserts 
     * failed for duplicate key violations) (see DERBY-4057)
     * 
     *
     * @param input_undo_handle Class to use to notify callers of an undo of 
     *                          an insert.
     *
     * @exception  StandardException  Standard exception policy.
     **/

/**
     * Start the replication master role for this database
     * @param dbmaster The master database that is being replicated.
     * @param host The hostname for the slave
     * @param port The port the slave is listening on
     * @param replicationMode The type of replication contract.
     * Currently only asynchronous replication is supported, but
     * 1-safe/2-safe/very-safe modes may be added later.
     * @exception StandardException 1) If replication is started on a read-only
     *                                 database
     *                              2) If replication is started when unlogged
     *                                 operations are running
     *                              3) If an error occurs while trying to boot
     *                                 the master.
     */

/**
     * Stop the replication master role for this database.
     * 
     * @exception StandardException Standard Derby exception policy,
     * thrown on error.
     */

/**
     *      */

/**
     * Backup the database to a backup directory.
     *
     * @param backupDir the name of the directory where the backup should be
     *                  stored. This directory will be created if it 
     *                  does not exist.
     * @param wait if true, waits for  all the backup blocking 
     *             operations in progress to finish.
     * @exception StandardException thrown on error
     */

/**
     * Create a directory for backup.
     *
     * @param dir the directory to create
     *      */

/**
     * Backup the database to a backup directory and enable the log archive
	 * mode that will keep the archived log files required for roll-forward
	 * from this version backup.
     *
     * @param backupDir the name of the directory where the backup should be
     *                  stored. This directory will be created if it 
     *                  does not exist.   
     *
     * @param deleteOnlineArchivedLogFiles  
     *                  If true deletes online archived 
     *                  log files that exist before this backup, delete 
     *                  will occur  only after the backup is  complete.
     *
     * @param wait      if true, waits for  all the backup blocking 
     *                  operations in progress to finish.
     *
     * @exception StandardException thrown on error.
     */

/**
	 * Get JBMS properties relevant to raw store
	 * @exception StandardException Standard Derby Error Policy
	 */

/**
		Freeze persistent store.  Reads can still happen, only cannot write.
		@exception StandardException Standard Derby Error Policy
	 */

/**
		Freeze persistent store.  Reads can still happen, only cannot write.
		@exception StandardException Standard Derby Error Policy
	 */

/**
     * Setup encryption engines according to the user properties and the
     * current database state.
     *
     * @param create whether a new database is being created, or if this is
     *      an existing database
     * @param properties database properties, including connection attributes
     * @return {@code true} if the existing data in the database should be
     *      transformed by applying a cryptographic operation.
     *      *      requested configuration is denied, or if something else goes wrong
     */

/**
		Encrypt cleartext into ciphertext.

		
		@exception StandardException Standard Derby Error Policy
	 */

/**
		Decrypt cleartext from ciphertext.

		
		@exception StandardException Standard Derby Error Policy
	 */

/**
		Returns the encryption block size used by the algorithm at time of
		creation of an encrypted database
	 */

/**
     * (re) encryption testing debug flags that are used to 
     * simulate error/crash conditions for testing purposes.
     * When any one of the following flags are set to true
     * in the debug mode, re-encryption will fail at that point.
     */

/** 
     * when the input debug flag is set, an expception 
     * is throw when run in the debug mode.
     */

/**
     * Engine might have crashed during encryption of un-encrypted datbase
     * or while re-encryptin an already encrypted database with a new key
     * after all the containers or (re) encrypted. If crash has occured
     * before all containers are encrypted, recovery wil un-do re-encryption
     * using the transaction log, nothing to be done here.
     *
     * If crash has occured after database encryption status flag 
     * (RawStoreFactory.DB_ENCRYPTION_STATUS) is set, this method 
     * will do any cleanup necessary for the recovery to correctly
     * perform the rollback if required. 
     *
     *
     *
     * @param properties  properties related to this database.
     * @exception StandardException Standard Derby Error Policy
     *
     */

/**
     * checks if the database is in the right state to (re)encrypt it.
     *
     * @param reEncrypt {@code true} if the database is getting encrypted with
     *      a new password/key
     * @param decrypt {@code true} if the database is getting decrypted
     * @exception  StandardException  
     *             if there is global transaction in the prepared state or
     *             if the database is not at the required version or above,
     *             this feature is not supported or
     *             if the log is archived for the database.
     */

/**
     * Return an id which can be used to create a container.
     * 
     * Return an id number with is greater than any existing container
     * in the current database.  Caller will use this to allocate future
     * container numbers - most likely caching the value and then incrementing
     * it as it is used.
     * 
     *
	 * @return The an id which can be used to create a container.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     *  Check to see if a database has been upgraded to the required
     *  level in order to use a store feature.
     *
     * @param requiredMajorVersion  required database Engine major version
     * @param requiredMinorVersion  required database Engine minor version
     * @param feature               Non-null to throw an exception, null to 
     *                              return the state of the version match.
     *
     * @return  true  if the database has been upgraded to 
     *         the required level,  false  otherwise.
     *
     * @exception  StandardException 
     *             if the database is not at the require version 
     *             when feature feature is 
     *             not  null . 
     */

/**
     * Removes properties related to encrypted databases.
     *
     * @param properties property set to remove from
     */

/** Tells if the attribute/property has been specified. */

/** Tells if the attribute/property has been set to {@code true}. */

/** @see RawStoreFactory#createDataWarningFile */

/**
     * Privileged lookup of the ContextService. Private so that user code
     * can't call this entry point.
     */

/**
     * Privileged lookup of a Context. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged Monitor lookup. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged service name lookup. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged startup. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged startup. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged startup. Must be private so that user code
     * can't call this entry point.
     */

