/** Underlying store stream serving bytes. */

/**
     * Position of the underlying store stream.
     * Note that the position is maintained by this class, not the underlying
     * store stream itself.
     * Future improvement: Add this functionality to the underlying
     * store stream itself to avoid another level in the stream stack.
     */

/**
     * Creates a positioned store stream on top of the specified resettable
     * stream.
     * 
     * Upon creation, the underlying stream is initiated and reset to make
     * sure the states of the streams are in sync with each other.
     *
     * @param in a {@link Resetable}-stream
     */

/**
     * Reads a number of bytes from the underlying stream and stores them in the
     * specified byte array.
     *
     * @return The actual number of bytes read, or -1 if the end of the stream
     *      is reached.
     *      */

/**
     * Reads a number of bytes from the underlying stream and stores them in the
     * specified byte array at the specified offset.
     *
     * @return The actual number of bytes read, or -1 if the end of the stream
     *      is reached.
     *      */

/**
     * Reads a single byte from the underlying stream.
     *
     * @return The next byte of data, or -1 if the end of the stream is reached.
     *      */

/**
     * Skips up to the specified number of bytes from the underlying stream.
     *
     * @return The actual number of bytes skipped.
     *      */

/**
     * Resets the resettable stream.
     *
     *      *      *      */

/**
     * Initialize the resettable stream for use.
     *
     *      *      */

/**
     * Closes the resettable stream.
     *
     *      */

/**
     * Repositions the underlying store stream to the requested position.
     * 
     * Repositioning is required because there can be several uses of the store
     * stream, which changes the position of it. If a class is dependent on the
     * underlying stream not changing its position, it must call reposition with
     * the position it expects before using the stream again.
     * 
     * If the repositioning fails because the stream is exhausted, most likely
     * because of an invalid position specified by the user, the stream is
     * reset to position zero and the {@code EOFException} is rethrown.
     *
     *      *      position is reached
     *      *      *      some other exception happens in store
     *      */

/**
     * Returns the current position of the underlying store stream.
     *
     * @return Current byte position of the store stream.
     */

