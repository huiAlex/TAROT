/**
  Utility class for parsing and producing string representations of
  ids. This class supports both delimited and un-delimited ids.

  The syntax for an id follows. 
  
      id := delim-id | unDelim-id

	  delim-id := "[""|[any char but quote]]+"
	  undelim-id := (a-z|A-Z|anyunicodeletter)[a-z|A-Z|_|0-9|anyunicodeletter|anyunicodedigit]*

	  In the syntax braces show grouping. '*' means repeat 0 or more times.
	  '|' means or. '+' means repeat 1 or more times. 
  

  In addition this class provides support for qualified names. A qualified name
  is a dot (.) separated list of ids.

  Limitations:
  
  Unicode escape sequences in ids are not supported.
  Escape sequences (\n...) are not supported.
  
  */

/**
     * Produce a delimited form of a normal value.
	  @return the delimited identifier.
	  */

/**
	  Produce a delimited two part qualified name from two
	  un-delimited identifiers.
	  @return the result.
	  */

/**
	  Make a string form of a qualified name from the array of ids provided.
	  */

/**
	  Parse a multi-part (dot separated) SQL identifier form the
      String provided. Raise an excepion
	  if the string does not contain valid SQL indentifiers.
      The returned String array contains the normalized form of the
      identifiers.
      
      @param s The string to be parsed
      @return An array of strings made by breaking the input string at its dots, '.'.
	  @exception StandardException Oops
	  */

/**
    @param r The multi-part identifier to be parsed
    @return An array of strings made by breaking the input string at its dots, '.'.
      @exception StandardException Oops
      */

/**
      Parse a SQL identifier from the String provided. Raise an excepion
      if the string does not contain a valid SQL indentifier.
      The returned String  contains the normalized form of the
      identifier.
        
	  @exception StandardException Oops
	  */

/**
	  Read an id from the StringReader provided.


	  @param normalize true means return ids in nomral form, false means
	        return them as they were entered.

	  
	  Raise an exception if the first thing in the StringReader
	  is not a valid id.

	  @exception StandardException Ooops.
	  */

/**
     * Parse a regular identifier (unquoted) returning returning either
     * the value of the identifier or a delimited identifier. Ensures
     * that all characters in the identifer are valid for a regular identifier.
     * 
     * @param r Regular identifier to parse.
     * @param normalize If true return the identifer converted to a single case, otherwise return the identifier as entered.
     * @return the value of the identifer or a delimited identifier
     *      *  
     */

/**
     * Parse a delimited (quoted) identifier returning either
     * the value of the identifier or a delimited identifier.
     * @param r Quoted identifier to parse.
     * @param normalize If true return a delimited identifer, otherwise return the identifier's value.
     * @return the value of the identifer or a delimited identifier
     *      *      */

/**
     * Verify the read is empty (no more characters in its stream).
     * @param r
     *      */

/**Index of the schema name in a jar name on a db classpath*/

/**Index of the sql jar name in a jar name on a db classpath*/

/**
	  Scan a database classpath from the string provided. This returns
	  an array with one qualified name per entry on the classpath. The
	  constants above describe the content of the returned names. This 
	  raises an an exception if the string does not contain a valid database 
	  class path.
  
      classpath := item[:item]*
	  item := id.id
	  
	  In the syntax braces ([]) show grouping. '*' means repeat 0 or more times.
	  The syntax for id is defined in IdUtil.
  
	  
	  Classpath returned is a two part name.	  
	  If the class path is empty then this returns an array
	  of zero length.

	  @exception StandardException Oops
	  */

/**
	  Scan a list of comma separated SQL identifiers from the string provided.
      This returns an array with containing the normalized forms of the identifiers.
      
      This raises an an exception if
	  the string does not contain a valid list of names.

	  @exception StandardException Oops
	  */

/**
	  Parse a list of comma separated SQL identifiers returning
      them a as elements in an array.

	  @param normalize true means return ids in nomral form, false means
	        return them as they were entered.

	  @exception StandardException Oops
	  */

/**
	  Return an IdList with all the ids that in l1 and l2
	  or null if not ids are on both lists.

	  @param l1 An array of ids in normal form
	  @param l2 An array of ids in nomral form
	  */

/**
	  Return an idList in external form with one id for every 
	  element of v. If v has no elements, return null.

	  @param normal True means the ids in v are in normal form
	         and false means they are in external form.
	  */

/**
	 * Map userName to authorizationId in its normal form.
	 * 
	 * @exception StandardException on error or userName is null
	 */

/**
	 * Get user name from URL properties (key user) without any transformation.
     * If the user property does not exist or is set to the empty string
     * then Property.DEFAULT_USER_NAME is returned.
     * 
     * 	 */

/**
	  Return an IdList with all the ids that are repeated
	  in l.

	  @param l a list of ids in normal form.
	  */

/**
	  Return an IdList with all the duplicate ids removed
	  @param l a list of ids in external form.
	  @exception StandardException Oops.
	  */

/**
	  Produce a string form of an idList from an array of
	  normalized ids.
	  */

/**
	  Produce an id list from an array of ids in external form
	  */

/**
	  Return true if the normalized value of an indentifier is on the list 
      of SQL identifiers provided.
	  @param id an id in normal form
	  @param	list a list of ids in external form.
	  @exception StandardException oops.
	  */

/**
	  Delete an normal value from a list of SQL identifiers.
      The returned list maintains its remaining identifiers in the
      format they were upon entry to the call.
      
      
	  @param id an id in normal form (quotes removed, upshifted if regular)
	  @param list a comma separated list of ids in external
	         form (possibly delmited or not upshifted).
	  @return the list with the id deleted or null if the
	    resulting list has no ids. If 'id' is not on 'list'
		this returns list unchanged. If list becomes empty after the removal
        null is returned.
				 
	  @exception StandardException oops.
	  */

/**
     * Append an identifier to a comma separated list
     * of identifiers. The passed in identifier is its
     * normal form, the list contains a list of SQL identifiers,
     * either regular or delimited. This routine takes the easy
     * way out and always appends a delimited identifier.
	  @return the list with the id appended in its delimited form. 
	  @exception StandardException oops
	  */

/**
	 * Parse role identifier to internal, case normal form. It should not be
	 * NONE nor exceed Limits.MAX_IDENTIFIER_LENGTH.
	 *
	 * @param roleName role identifier to check (SQL form, has possible quoting)
	 * @return the role name to use (internal, case normal form).
	 * @exception StandardException normal error policy
	 */

/**
	 * Check that identifier is not too long
	 * @param identifier identifier (in case normal form) to check
	 * @param identifier_length_limit maximum legal length
	 * @exception StandardException normal error policy
	 */

