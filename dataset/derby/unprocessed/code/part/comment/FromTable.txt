/**
 * A FromTable represents a table in the FROM clause of a DML statement.
 * It can be either a base table, a subquery or a project restrict.
 *
 *  *  *  *
 */

/**
	 Set of object-&gt;trulyTheBestAccessPath mappings used to keep track
	 of which of this Optimizable's "trulyTheBestAccessPath" was the best
	 with respect to a specific outer query or ancestor node.  In the case
	 of an outer query, the object key will be an instance of OptimizerImpl.
	 In the case of an ancestor node, the object key will be that node itself.
	 Each ancestor node or outer query could potentially have a different
	 idea of what this Optimizable's "best access path" is, so we have to
	 keep track of them all.
	*/

/** Operations that can be performed on bestPlanMap. */

/** the original unbound table name */

/** for resolving column references in MERGE statements in tough cases*/

/**
     * Constructor for a table in a FROM list.
     *
     * @param correlationName   The correlation name
     * @param tableProperties   Properties list associated with the table
     * @param cm                The context manager
     */

/**
	 * Get this table's correlation name, if any.
	 */

/**
	 * 	 *
	 * @exception StandardException		Thrown on error
	 *
	 */

/**
				@exception StandardException	Thrown on error
	 */

/** Most Optimizables cannot be ordered */

/** @see Optimizable#getCurrentAccessPath */

/** @see Optimizable#getBestAccessPath */

/** @see Optimizable#getBestSortAvoidancePath */

/** @see Optimizable#getTrulyTheBestAccessPath */

/** @see Optimizable#rememberSortAvoidancePath */

/** @see Optimizable#considerSortAvoidancePath */

/** @see Optimizable#rememberJoinStrategyAsBest */

/** @see Optimizable#getTableDescriptor */

/**
	 * 	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * 	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * 	 *
	 * @exception StandardException		Thrown on error
	 */

/** 
	 * 	 * @exception StandardException		Thrown on error
	 */

/** @see Optimizable#getProperties */

/** @see Optimizable#setProperties */

/** 	 * @exception StandardException		Thrown on error
	 */

/** 	 * @exception StandardException		Thrown on error
	 */

/** @see Optimizable#getBaseTableName */

/** @see Optimizable#convertAbsoluteToRelativeColumnPosition */

/** @see Optimizable#updateBestPlanMap */

/** @see Optimizable#rememberAsBest */

/** @see Optimizable#startOptimizing */

/**
	 * This method is called when this table is placed in a potential
	 * join order, or when a new conglomerate is being considered.
	 * Set this join strategy number to 0 to indicate that
	 * no join strategy has been considered for this table yet.
	 */

/**
	 * 	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Get the final CostEstimate for this FromTable.
	 *
	 * @return	The final CostEstimate for this FromTable, which is
	 *  the costEstimate of trulyTheBestAccessPath if there is one.
	 *  If there's no trulyTheBestAccessPath for this node, then
	 *  we just return the value stored in costEstimate as a default.
	 */

/** @see Optimizable#isBaseTable */

/**
     * Check if any columns containing large objects (BLOBs or CLOBs) are
     * referenced in this table.
     *
     * @return {@code true} if at least one large object column is referenced,
     * {@code false} otherwise
     */

/** 	 *
	 * @exception StandardException		Thrown on error
	 */

/** @see Optimizable#supportsMultipleInstantiations */

/** @see Optimizable#getTableNumber */

/** @see Optimizable#hasTableNumber */

/** @see Optimizable#forUpdate */

/** @see Optimizable#initialCapacity */

/** @see Optimizable#loadFactor */

/** @see Optimizable#maxCapacity */

/** @see Optimizable#hashKeyColumns */

/** @see Optimizable#setHashKeyColumns */

/**
	 * 	 *
	 * @exception StandardException		Thrown on error
	 */

/** @see Optimizable#memoryUsageOK */

/**
	 * No-op in FromTable.
	 * 
	 * 	 */

/**
	 * 	 */

/**
	 * 	 */

/**
	 * 	 */

/**
	 * 	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * 	 */

/**
	 * 	 *
	 * @exception StandardException		Thrown on error
	 */

/** 
	 * Return the user specified join strategy, if any for this table.
	 *
	 * @return The user specified join strategy, if any for this table.
	 */

/**
	 * Is this a table that has a FOR UPDATE
	 * clause.  Overridden by FromBaseTable.
	 *
	 * @return true/false
	 */

/**
	 * Set the cost estimate in this node to the given cost estimate.
	 */

/**
	 * Assign the cost estimate in this node to the given cost estimate.
	 */

/**
	 * Convert this object to a String.  See comments in QueryTreeNode.java
	 * for how this should be done for tree printing.
	 *
	 * @return	This object as a String
	 */

/**
	 * Return a ResultColumnList with all of the columns in this table.
	 * (Used in expanding '*'s.)
	 * NOTE: Since this method is for expanding a "*" in the SELECT list,
	 * ResultColumn.expression will be a ColumnReference.
	 *
	 * @param allTableName		The qualifier on the "*"
	 *
	 * @return ResultColumnList	List of result columns from this table.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Push expressions down to the first ResultSetNode which can do expression
	 * evaluation and has the same referenced table map.
	 * RESOLVE - This means only pushing down single table expressions to
	 * ProjectRestrictNodes today.  Once we have a better understanding of how
	 * the optimizer will work, we can push down join clauses.
	 *
	 * @param predicateList	The PredicateList.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Get the exposed name for this table, which is the name that can
	 * be used to refer to it in the rest of the query.
	 *
	 * @return	The exposed name of this table.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Set the table # for this table.  
	 *
	 * @param tableNumber	The table # for this table.
	 */

/**
	 * Return a TableName node representing this FromTable.
	 * Expect this to be overridden (and used) by subclasses
	 * that may set correlationName to null.
	 *
	 * @return a TableName node representing this FromTable.
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Set the (query block) level (0-based) for this FromTable.
	 *
	 * @param level		The query block level for this FromTable.
	 */

/**
	 * Get the (query block) level (0-based) for this FromTable.
	 *
	 * @return int	The query block level for this FromTable.
	 */

/**
	 * Decrement (query block) level (0-based) for this FromTable.
	 * This is useful when flattening a subquery.
	 *
	 * @param decrement	The amount to decrement by.
	 */

/**
	* Get a schema descriptor for the given table.
	* Uses this.corrTableName.
	*
	* @return Schema Descriptor
	*
	* @exception	StandardException	throws on schema name
	*						that doesn't exist	
	*/

/**
	* Get a schema descriptor for the given table.
	*
	* @param	tableName the table name
	*
	* @return Schema Descriptor
	*
	* @exception	StandardException	throws on schema name
	*						that doesn't exist	
	*/

/** 
	 * Determine whether or not the specified name is an exposed name in
	 * the current query block.
	 *
	 * @param name	The specified name to search for as an exposed name.
	 * @param schemaName	Schema name, if non-null.
	 * @param exactMatch	Whether or not we need an exact match on specified schema and table
	 *						names or match on table id.
	 *
	 * @return The FromTable, if any, with the exposed name.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Is this FromTable a JoinNode which can be flattened into 
	 * the parents FromList.
	 *
	 * @return boolean		Whether or not this FromTable can be flattened.
	 */

/**
	 * no LOJ reordering for this FromTable.
	 */

/**
	 * Transform any Outer Join into an Inner Join where applicable.
	 * (Based on the existence of a null intolerant
	 * predicate on the inner table.)
	 *
	 * @param predicateTree	The predicate tree for the query block
	 *
	 * @return The new tree top (OuterJoin or InnerJoin).
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Fill the referencedTableMap with this ResultSetNode.
	 *
	 * @param passedMap	The table map to fill in.
	 */

/**
	 * Mark as updatable all the columns in the result column list of this
	 * FromBaseTable that match the columns in the given update column list.
	 * If the list is null, it means all the columns are updatable.
	 *
     * @param updateColumns     A list representing the columns
	 *							that can be updated.
	 */

/**
	 * Return true if some columns in this table are updatable.
	 *
	 * This method is used in deciding whether updateRow() or
	 * insertRow() are allowable.
	 *
	 * @return true if some columns in this table are updatable.
	 */

/**
	 * Flatten this FromTable into the outer query block. The steps in
	 * flattening are:
	 *	o  Mark all ResultColumns as redundant, so that they are "skipped over"
	 *	   at generate().
	 *	o  Append the wherePredicates to the outer list.
	 *	o  Return the fromList so that the caller will merge the 2 lists 
	 *
	 * @param rcl				The RCL from the outer query
	 * @param outerPList	PredicateList to append wherePredicates to.
	 * @param sql				The SubqueryList from the outer query
	 * @param gbl				The group by list, if any
     * @param havingClause      The HAVING clause, if any
	 *
	 * @return FromList		The fromList from the underlying SelectNode.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Optimize any subqueries that haven't been optimized any where
	 * else.  This is useful for a RowResultSetNode as a derived table
	 * because it doesn't get optimized otherwise.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Tell the given RowOrdering about any columns that are constant
	 * due to their being equality comparisons with constant expressions.
	 */

/**
	 * Sets the original or unbound table name for this FromTable.  
	 * 
	 * @param tableName the unbound table name
	 *
	 */

/**
	 * Gets the original or unbound table name for this FromTable.  
	 * The tableName field can be changed due to synonym resolution.
	 * Use this method to retrieve the actual unbound tablename.
	 * 
	 * @return TableName the original or unbound tablename
	 *
	 */

/** set the merge table id */

/** get the merge table id */

