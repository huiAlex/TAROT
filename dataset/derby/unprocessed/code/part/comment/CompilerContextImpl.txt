/**
 *
 * CompilerContextImpl, implementation of CompilerContext.
 * CompilerContext and hence CompilerContextImpl objects are private to a LanguageConnectionContext.
 *
 */

/**
		@exception StandardException thrown by makeInvalid() call
	 */

/**
	  *	Reset compiler context (as for instance, when we recycle a context for
	  *	use by another compilation.
	  */

/**
      * Get the OptimizerFactory for this context
	  *
      * @return The OptimizerFactory for this context.
	  */

/**
	 * Get the current next subquery number from this CompilerContext.
	 *
	 * @return int	The next subquery number for the current statement.
	 *
	 */

/**
	 * Get the number of subquerys in the current statement from this CompilerContext.
	 *
	 * @return int	The number of subquerys in the current statement.
	 *
	 */

/**
	 * Get the next equivalence class for equijoin clauses.
	 *
	 * @return The next equivalence class for equijoin clauses.
	 */

/**
	 * Get the current auxiliary provider list from this CompilerContext.
	 *
	 * @return	The current AuxiliaryProviderList.
	 *
	 */

/**
	 * Set the current auxiliary provider list for this CompilerContext.
	 *
	 * @param apl	The new current AuxiliaryProviderList.
	 */

/**
	 * Add a dependency between two objects.
	 *
	 * @param d	The Dependent object.
	 * @param p	The Provider of the dependency.
	 * @exception StandardException thrown on failure.
	 *
	 */

/**
	 * Add a Provider to the current AuxiliaryProviderList, if one exists.
	 *
	 * @param p		The Provider to add.
	 */

/** @see CompilerContext#setSavedObjects */

/** @see CompilerContext#setCursorInfo */

/** @see CompilerContext#getCursorInfo */

/** @see CompilerContext#firstOnStack */

/** @see CompilerContext#isFirstOnStack */

/**
	 * Set the in use state for the compiler context.
	 *
	 * @param inUse	 The new inUse state for the compiler context.
	 */

/**
	 * Return the in use state for the compiler context.
	 *
	 * @return boolean	The in use state for the compiler context.
	 */

/**
	 * Sets which kind of query fragments are NOT allowed. Basically,
	 * these are fragments which return unstable results. CHECK CONSTRAINTS
	 * and CREATE PUBLICATION want to forbid certain kinds of fragments.
	 *
	 * @param reliability	bitmask of types of query fragments to be forbidden
	 *						see the reliability bitmasks in CompilerContext.java
	 *
	 */

/**
	 * Return the reliability requirements of this clause. See setReliability()
	 * for a definition of clause reliability.
	 *
	 * @return a bitmask of which types of query fragments are to be forbidden
	 */

/**
	 * 	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 *
	 */

/**
	 * 	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Get the compilation schema descriptor for this compilation context.
	   Will be null if no default schema lookups have occured. Ie.
	   the statement is independent of the current schema.
	 * 
	 * @return the compilation schema descirptor
	 */

/**
	 * Set the compilation schema descriptor for this compilation context.
	 *
	 * @param newDefault	the compilation schema
	 * 
	 * @return the previous compilation schema descirptor
	 */

/**
	 * 	 */

/**
	 * 	 */

/**
	 * 	 */

/**
	 * 	 */

/**
	 * 	 */

/**
	 * 	 */

/**
     * Get an array of type descriptors for all the ? parameters.
	 */

/**
	 * 	 */

/**
	 * 	 */

/**
	 * 	 */

/**
		Add a compile time warning.
	*/

/**
		Get the chain of compile time warnings.
	*/

/**
     * This constructor creates and saves the parser using the language
     * connection factory when the context is created (when the first statement
     * comes in, likely).
     */

/**
	 * Sets the current privilege type context. Column and table nodes do not know
	 * how they are being used. Higher level nodes in the query tree do not know what
	 * is being referenced.
	 * Keeping the context allows the two to come together.
	 *
	 * @param privType One of the privilege types in org.apache.derby.iapi.sql.conn.Authorizer.
	 */

/**
	 * Add a column privilege to the list of used column privileges.
	 *
	 * @param column The column whose privileges we're interested in.
	 */

/**
	 * Add a table or view privilege to the list of used table privileges.
	 *
	 * 	 */

/**
	 * Add a routine execute privilege to the list of used routine privileges.
	 *
	 * 	 */

/**
	 * 	 */

/**
	 * Add a required schema privilege to the list privileges.
	 *
	 * 	 */

/**
	 * Add a required role privilege to the list privileges.
	 *
	 * 	 */

/**
	 * @return The list of required privileges.
	 */

/**
	 * Report whether the given sequence has been referenced already.
	 */

/** Set whether we should skip adding USAGE privileges for user-defined types */

/** Return whether we are skipping USAGE privileges for user-defined types */

/**
	 * Saved execution time default schema, if we need to change it
	 * temporarily.
	 */

/**
     * Map that contains all store cost controllers opened in this compiler
     * context. Conglomerate id (long) is the key.
     */

