/**
 * This is a class that is used to temporarily
 * (non-persistently) hold rows that are used in
 * language execution.  It will store them in an
 * array, or a temporary conglomerate, depending
 * on the number of rows.  
 * 
 * It is used for deferred DML processing.
 *
 */

/** Activation object with local state information. */

/**
	 * Uses the default overflow to
 	 * a conglomerate threshold (5).
	 *
	 * @param activation the activation
	 * @param properties the properties of the original table.  Used
	 *		to help the store use optimal page size, etc.
	 * @param resultDescription the result description.  Relevant for the getResultDescription
	 * 		call on the result set returned by getResultSet.  May be null
	 */

/**
	 * Uses the default overflow to
 	 * a conglomerate threshold (5).
	 *
	 * @param activation the activation
	 * @param properties the properties of the original table.  Used
	 *		to help the store use optimal page size, etc.
	 * @param resultDescription the result description.  Relevant for the getResultDescription
	 * 		call on the result set returned by getResultSet.  May be null
	 * @param isUniqueStream - true , if it has to be temporary row holder unique stream
	 */

/**
	 * Create a temporary row holder with the defined overflow to conglom
	 *
	 * @param activation the activation
	 * @param properties the properties of the original table.  Used
	 *		to help the store use optimal page size, etc.
	 * @param resultDescription the result description.  Relevant for the getResultDescription
	 * 		call on the result set returned by getResultSet.  May be null
	 * @param overflowToConglomThreshold on an attempt to insert
	 * 		this number of rows, the rows will be put
 	 *		into a temporary conglomerate.
	 */

/**
	 * Insert a row
	 *
	 * @param inputRow the row to insert 
	 *
	 * @exception StandardException on error
 	 */

/**
	 * Maintain an unique index based on the input row's row location in the
	 * base table, this index make sures that we don't insert duplicate rows 
	 * into the temporary heap.
	 * @param inputRow  the row we are inserting to temporary row holder 
	 * @exception StandardException on error
 	 */

/**
	 * Maintain an index that will allow us to read  from the 
	 * temporary heap in the order we inserted.
	 * @param position - the number of the row we are inserting into heap
	 * @param rl the row to Location in the temporary heap 
	 * @exception StandardException on error
 	 */

/**
	 * Get a result set for scanning what has been inserted
 	 * so far.
	 *
	 * @return a result set to use
	 */

/**
	 * Purge the row holder of all its rows.
	 * Resets the row holder so that it can
	 * accept new inserts.  A cheap way to
	 * recycle a row holder.
	 *
	 * @exception StandardException on error
	 */

/**
     * Accessor to get the id of the temporary conglomerate. Temporary 
     * conglomerates have negative ids. An id equal to zero means that no 
     * temporary conglomerate has been created.
     * @return Conglomerate ID of temporary conglomerate
     */

/**
	 * Clean up
	 *
	 * @exception StandardException on error
	 */

