/**************************************************************************
     * static fields of the class
     **************************************************************************
     */

/**
     * The pad character (space).
     */

/**
     * threshold, that decides when we return space back to the VM
     * see getString() where it is used
     */

/**
     * when we know that the array needs to grow by at least
     * one byte, it is not performant to grow by just one byte
     * instead this amount is used to provide a reasonable growby size.
     */

/**
        Static array that can be used for blank padding.
    */

/**
     * Stream header generator for CHAR, VARCHAR and LONG VARCHAR. Currently,
     * only one header format is used for these data types.
     */

/**************************************************************************
     * Fields of the class
     **************************************************************************
     */

/**
     * The value as a user-created Clob
     */

/**
     * The value as a stream in the on-disk format.
     */

/**************************************************************************
     * Constructors for This class:
     **************************************************************************
     */

/**
     * no-arg constructor, required by Formattable.
     **/

/**
     * 
     * This is a special constructor used when we need to represent a password
     * as a VARCHAR (see DERBY-866). If you need a general-purpose constructor
     * for char[] values and you want to re-use this constructor, make sure to
     * keep track of the following:
     * 
     *
     * 
     * A password should never be turned into a String. This is because Java
     * garbage collection makes it easy to sniff memory for String passwords. For
     * more information, see
     * this blog.
     * It must be possible to 0 out the char[] array wrapped inside this SQLChar. This
     * reduces the vulnerability that someone could sniff the char[] password after Derby
     * has processed it.
     * 
     */

/**************************************************************************
     * Private/Protected methods of This class:
     **************************************************************************
     */

/**************************************************************************
     * Public Methods of This class:
     **************************************************************************
     */

/**
     * 
     * This is a special accessor used when we wrap passwords in VARCHARs.
     * This accessor copies the wrapped char[] and then fills it with 0s so that
     * the password can't be memory-sniffed. For more information, see the comment
     * on the SQLChar( char[] ) constructor.
     * 
     */

/**
     * 
     * Zero out the wrapped char[] so that it can't be memory-sniffed.
     * This helps us protect passwords. See
     * the comment on the SQLChar( char[] ) constructor.
     * 
     */

/**************************************************************************
     * Public Methods of DataValueDescriptor interface:
     *     Mostly implemented in Datatype.
     **************************************************************************
     */

/**
     * Get Boolean from a SQLChar.
     *
     * 
     * Return false for only "0" or "false" for false. No case insensitivity. 
     * Everything else is true.
     * 
     * The above matches JCC and the client driver.
     *
     *
     *      *
     * @exception StandardException     Thrown on error
     **/

/**
     * Get Byte from a SQLChar.
     *
     * 
     * Uses java standard Byte.parseByte() to perform coercion.
     *
     *      *
     * @exception StandardException thrown on failure to convert
     **/

/**
     * Get Short from a SQLChar.
     *
     * 
     * Uses java standard Short.parseShort() to perform coercion.
     *
     *      *
     * @exception StandardException thrown on failure to convert
     **/

/**
     * Get int from a SQLChar.
     *
     * 
     * Uses java standard Short.parseInt() to perform coercion.
     *
     *      *
     * @exception StandardException thrown on failure to convert
     **/

/**
     * Get long from a SQLChar.
     *
     * 
     * Uses java standard Short.parseLong() to perform coercion.
     *
     *      *
     * @exception StandardException thrown on failure to convert
     **/

/**
     * Get float from a SQLChar.
     *
     * 
     * Uses java standard Float.floatValue() to perform coercion.
     *
     *      *
     * @exception StandardException thrown on failure to convert
     **/

/**
     * Get double from a SQLChar.
     *
     * 
     * Uses java standard Double.doubleValue() to perform coercion.
     *
     *      *
     * @exception StandardException thrown on failure to convert
     **/

/**
     * Get date from a SQLChar.
     *
     *      *
     * @exception StandardException thrown on failure to convert
     **/

/**
     * Static function to Get date from a string.
     *
     *      *
     * @exception StandardException thrown on failure to convert
     **/

/**
     * Get time from a SQLChar.
     *
     *      *
     * @exception StandardException thrown on failure to convert
     **/

/**
     * Static function to Get Time from a string.
     *
     *      *
     * @exception StandardException thrown on failure to convert
     **/

/**
     * Get Timestamp from a SQLChar.
     *
     *      *
     * @exception StandardException thrown on failure to convert
     **/

/**
     * Static function to Get Timestamp from a string.
     *
     *      *
     * @exception StandardException thrown on failure to convert
     **/

/**************************************************************************
     * Public Methods of StreamStorable interface:
     **************************************************************************
     */

/**
     * Set this value to the on-disk format stream.
     */

/**
     * @exception StandardException     Thrown on error
     */

/**
     * @exception StandardException     Thrown on error
     */

/**
     * Returns a descriptor for the input stream for this character data value.
     *
     * @return Nothing, throws exception.
     *      *      */

/**
     * CHAR/VARCHAR/LONG VARCHAR implementation. 
     * Convert to a BigDecimal using getString.
     */

/**
     * @exception StandardException     Thrown on error
     */

/**
     * Wraps an {@code IOException} in a {@code StandardException} then throws
     * the wrapping exception.
     *
     * @param ioe the {@code IOException} to wrap
     *      */

/**
     * If possible, use getCharArray() if you don't really
     * need a string.  getString() will cause an extra 
     * char array to be allocated when it calls the the String() 
     * constructor (the first time through), so may be
     * cheaper to use getCharArray().
     *
     * @exception StandardException     Thrown on error
     */

/**
     * Get a char array.  Typically, this is a simple
     * getter that is cheaper than getString() because
     * we always need to create a char array when
     * doing I/O.  Use this instead of getString() where
     * reasonable.
     * 
     * WARNING: may return a character array that has spare
     * characters at the end.  MUST be used in conjunction
     * with getLength() to be safe.
     * 
     * @exception StandardException     Thrown on error
     */

/**
        Return my format identifier.

            */

/**
     * see if the String value is null.
         */

/**
     * Writes the user data value to a stream in the modified UTF-8 format.
     *
     * @param out destination stream
     * @param strLen string length of the value
     * @param isRaw {@code true} if the source is {@code rawData}, {@code false}
     *      if the source is {@code value}
     * @param characterReader Reader from _clobValue if it exists
     *      */

/**
     * Write a single character to a stream in the modified UTF-8 format.
     *
     * @param out the destination stream
     * @param c the character to write
     *      */

/**
     * Writes the header and the user data for a CLOB to the destination stream.
     *
     * @param out destination stream
     *      */

/**
     * Reads a CLOB from the source stream and materializes the value in a
     * character array.
     *
     * @param in source stream
     * @param charLen the char length of the value, or {@code 0} if unknown
     *      */

/**
     * Resets state after materializing value from an array.
     */

/**
     * Restores the data value from the source stream, materializing the value
     * in memory.
     *
     * @param in the source stream
     * @param utflen the byte length, or {@code 0} if unknown
     * @param knownStrLen the char length, or {@code 0} if unknown
     *      *      */

/**
     * returns the reasonable minimum amount by 
     * which the array can grow . See readExternal. 
     * when we know that the array needs to grow by at least
     * one byte, it is not performant to grow by just one byte
     * instead this amount is used to provide a resonable growby size.
     * @return minimum reasonable growby size
     */

/**
     *      *
     */

/**
        @exception StandardException thrown on error
     */

/**
        @exception StandardException thrown on error
     */

/**
     *  Shallow clone a StreamStorable without objectifying.  This is used to 
     *  avoid unnecessary objectifying of a stream object.  The only 
     *  difference of this method from cloneValue is this method does not
     *  objectify a stream.
     */

/** @see DataValueDescriptor#cloneValue */

/**
     *      *
     */

/** @see StringDataValue#getValue(RuleBasedCollator) */

/** 
     *      *
     * @exception SQLException      Thrown on error
     */

/**
        Set the value into a PreparedStatement.
    */

/**
        Only to be called when an application through JDBC is setting a
        SQLChar to a java.math.BigDecimal.
    */

/** @exception StandardException        Thrown on error */

/** @exception StandardException        Thrown on error */

/** @exception StandardException        Thrown on error */

/**
     * Set the value from the stream which is in the on-disk format.
     * @param theStream On disk format of the stream
     * @param valueLength length of the logical value in characters, or
     *      DataValueDescriptor.UNKNOWN_LOGICAL_LENGTH
     */

/**
     * Allow any Java type to be cast to a character type using
     * Object.toString.
     *      * 
     * @exception StandardException
     *                thrown on failure
     */

/**
     * Normalization method - this method may be called when putting
     * a value into a SQLChar, for example, when inserting into a SQLChar
     * column.  See NormalizeResultSet in execution.
     *
     * @param desiredType   The type to normalize the source column to
     * @param source        The value to normalize
     *
     *
     * @exception StandardException             Thrown for null into
     *                                          non-nullable column, and for
     *                                          truncation error
     */

/**
     * Set the width of the to the desired value.  Used
     * when CASTing.  Ideally we'd recycle normalize(), but
     * the behavior is different (we issue a warning instead
     * of an error, and we aren't interested in nullability).
     *
     * @param desiredWidth  the desired length
     * @param desiredScale  the desired scale (ignored)
     * @param errorOnTrunc  throw an error on truncation
     *
     * @exception StandardException     Thrown when errorOnTrunc
     *      is true and when a shrink will truncate non-white
     *      spaces.
     */

/**
     * Get the number of bytes needed to represent a string in modified
     * UTF-8, which is the encoding used by {@code writeExternal()} and
     * {@code writeUTF()}.
     *
     * @param string the string whose length to calculate
     * @param start start index (inclusive)
     * @param end end index (exclusive)
     */

/**
     * The = operator as called from the language module, as opposed to
     * the storage module.
     *
     * @param left          The value on the left side of the =
     * @param right         The value on the right side of the =
     *
     * @return  A SQL boolean value telling whether the two parameters are equal
     *
     * @exception StandardException     Thrown on error
     */

/**
     * The &lt;&gt; operator as called from the language module, as opposed to
     * the storage module.
     *
     * @param left          The value on the left side of the operator
     * @param right         The value on the right side of the operator
     *
     * @return  A SQL boolean value telling whether the two parameters
     * are not equal
     *
     * @exception StandardException     Thrown on error
     */

/**
     * The &lt; operator as called from the language module, as opposed to
     * the storage module.
     *
     * @param left          The value on the left side of the operator
     * @param right         The value on the right side of the operator
     *
     * @return  A SQL boolean value telling whether the first operand is
     *          less than the second operand
     *
     * @exception StandardException     Thrown on error
     */

/**
     * The &gt; operator as called from the language module, as opposed to
     * the storage module.
     *
     * @param left          The value on the left side of the operator
     * @param right         The value on the right side of the operator
     *
     * @return  A SQL boolean value telling whether the first operand is
     *          greater than the second operand
     *
     * @exception StandardException     Thrown on error
     */

/**
     * The &lt;= operator as called from the language module, as opposed to
     * the storage module.
     *
     * @param left          The value on the left side of the operator
     * @param right         The value on the right side of the operator
     *
     * @return  A SQL boolean value telling whether the first operand is
     *          less than or equal to the second operand
     *
     * @exception StandardException     Thrown on error
     */

/**
     * The &gt;= operator as called from the language module, as opposed to
     * the storage module.
     *
     * @param left          The value on the left side of the operator
     * @param right         The value on the right side of the operator
     *
     * @return  A SQL boolean value telling whether the first operand is
     *          greater than or equal to the second operand
     *
     * @exception StandardException     Thrown on error
     */

/**
     * This method implements the char_length function for char.
     *
     * @param result    The result of a previous call to this method, null
     *                  if not called yet
     *
     * @return  A SQLInteger containing the length of the char value
     *
     * @exception StandardException     Thrown on error
     *
     *      */

/**
     *      *
     * @exception StandardException     Thrown on error
     */

/**
     * This method implements the like function for char (with no escape value).
     *
     * @param pattern       The pattern to use
     *
     * @return  A SQL boolean value telling whether the first operand is
     *          like the second operand
     *
     * @exception StandardException     Thrown on error
     */

/**
     * This method implements the like function for char with an escape value.
     *
     * @param pattern       The pattern to use
     *
     * @return  A SQL boolean value telling whether the first operand is
     *          like the second operand
     *
     * @exception StandardException     Thrown on error
     */

/**
     * This method implements the locate function for char.
     * @param searchFrom    - The string to search from
     * @param start         - The position to search from in string searchFrom
     * @param result        - The object to return
     *
     * Note: use getString() to get the string to search for.
     *
     * @return  The position in searchFrom the fist occurrence of this.value.
     *              0 is returned if searchFrom does not contain this.value.
     * @exception StandardException     Thrown on error
     */

/**
     * The SQL substr() function.
     *
     * @param start     Start of substr
     * @param length    Length of substr
     * @param result    The result of a previous call to this method,
     *                  null if not called yet.
     * @param maxLen    Maximum length of the result
     *
     * @return  A ConcatableDataValue containing the result of the substr()
     *
     * @exception StandardException     Thrown on error
     */

/**
     * This function public for testing purposes.
     *
     * @param trimType  Type of trim (LEADING, TRAILING, or BOTH)
     * @param trimChar  Character to trim
     * @param source    String from which to trim trimChar
     *
     * @return A String containing the result of the trim.
     */

/**
     * @param trimType  Type of trim (LEADING, TRAILING, or BOTH)
     * @param trimChar  Character to trim from this SQLChar (may be null)
     * @param result    The result of a previous call to this method,
     *                  null if not called yet.
     *
     * @return A StringDataValue containing the result of the trim.
     */

/**      *
     * @exception StandardException     Thrown on error
     */

/**      *
     * @exception StandardException     Thrown on error
     */

/** @see DataValueDescriptor#typePrecedence */

/**
     * Compare two Strings using standard SQL semantics.
     *
     * @param op1               The first String
     * @param op2               The second String
     *
     * @return  -1 - op1 &lt;  op2
     *           0 - op1 == op2
     *           1 - op1 &gt; op2
     */

/** 
     * Compare two SQLChars.  
     *
     * @exception StandardException     Thrown on error
     */

/**
     * Compare two Strings using standard SQL semantics.
     *
     * @param op1               The first String
     * @param op2               The second String
     *
     * @return  -1 - op1 &lt;  op2
     *           0 - op1 == op2
     *           1 - op1 &gt; op2
     */

/**
     * This method gets called for the collation sensitive char classes ie
     * CollatorSQLChar, CollatorSQLVarchar, CollatorSQLLongvarchar,
     * CollatorSQLClob. These collation sensitive chars need to have the 
     * collation key in order to do string comparison. And the collation key
     * is obtained using the Collator object that these classes already have.
     * 
     * @return CollationKey obtained using Collator on the string
     *      */

/**
     * Hash code implementation for collator sensitive subclasses.
     */

/**
     * Get a SQLVarchar for a built-in string function.  
     *
     * @return a SQLVarchar.
     *
     * @exception StandardException     Thrown on error
     */

/** @exception StandardException        Thrown on error */

/**
     * Gets a trace representation for debugging.
     *
     * @return a trace representation of this SQL Type.
     */

/**
     * Returns the default stream header generator for the string data types.
     *
     * @return A stream header generator.
     */

/**
     * Sets the mode for the database being accessed.
     *
     * @param inSoftUpgradeMode {@code true} if the database is being accessed
     *      in soft upgrade mode, {@code false} if not, and {@code null} if
     *      unknown
     */

