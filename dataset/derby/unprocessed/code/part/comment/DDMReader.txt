/**
     * This constructor is used for testing the protocol
    * It is used by ProtocolTestAdapter to read the protocol returned by the
     * server 
     */

/**
     * Initialize values for this session, the reader is reused so we need to
     * set null and 0 values
     */

/**
     * Next DSS has same correlator as current DSS
     *
     * @return true if next DSS has the same correlator as current DSS
     */

/**
     * Next DSS has different correlator than current DSS
     *
     * @return true if next DSS has a different correlator than current DSS
     */

/**
     * Length of current DDM object
     *
     * @return length of DDM object
     */

/**
     * Is there more in this DDM object
     *
     * @return true if DDM length is &gt; 0
     */

/**
     * Is there more in this DDS object
     *
     * @return true if DDS length is &gt; 0
     */

/** 
     * Is there more data in the buffer
     *
     * @return true if there is more data in the buffer
     */

/**
     * Check for the command protocol
     *
     * @return true if this is a command; false otherwise
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read DSS header
     * DSS Header format is 
     *  2 bytes - length
     *  1 byte  - 'D0'  - indicates DDM data
     *  1 byte  - DSS format
     *      |---|---------|----------|
     *      | 0 |  flags  |  type    |
     *      |---|---------|----------|
     *      | 0 | 1  2  3 | 4 5 6 7  |
     *      |---|---------|----------|
     *      bit 0 - '0'
     *      bit 1 - '0' - unchained, '1' - chained
     *      bit 2 - '0' - do not continue on error, '1' - continue on error
     *      bit 3 - '0' - next DSS has different correlator, '1' - next DSS has
     *                      same correlator
     *      type - 1 - Request DSS
     *           - 2 - Reply DSS
     *           - 3 - Object DSS
     *           - 4 - Communications DSS
     *           - 5 - Request DSS where no reply is expected
     *  2 bytes - request correlation id
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read Reply DSS
     * This is used in testing the protocol.  We shouldn't see a reply
     * DSS when we are servicing DRDA commands
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read the DDM Length and CodePoint
     *
     * @param isLayerBStreamingPossible true only when layer B streaming is possible
     * @return - returns codepoint
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read the CodePoint
     *
     * @return - returns codepoint
     */

/**
     * Push DDM Length on to collection stack
     */

/**
     *  Get the next CodePoint from a collection
     *  @return NO_CODEPOINT if collection stack is empty or remaining length is
     *      0; otherwise,  read length and code point
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Get the next CodePoint from a collection and check that it matches the specified
     *  CodePoint
     * @param   codePointCheck  - codePoint to check against
     * @return  codePoint
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * The following routines read different types from the input stream
     * Data can be in network order or platform order depending on whether the
     * data is part of the protocol or data being received
     * The platform is determined by EXCSAT protocol
     */

/**
     * Read byte value
     * @return  value
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read byte value and mask out high order bytes before returning
     * @return value
     */

/**
     * Read network short value
     * @return  value
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read signed network short value
     * @return  value
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read platform short value
     * @return  value
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read network int value
     * @return  value
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read platform int value
     * @return  value
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read network long value
     * @return  value
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read network six byte value and put it in a long v
     * @return  value
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read platform long value
     * @return  value
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read platform float value
     * @return  value
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read platform double value
     * @return  value
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read a BigDecimal value
     * @param   precision of the BigDecimal
     * @param   scale of the BigDecimal
     * @return  value
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Creates an InputStream which can stream EXTDTA objects.
     * The InputStream uses this DDMReader to read data from network. The 
     * DDMReader should not be used before all data in the stream has been read.
     * @param checkNullability used to check if the stream is null. If it is 
     * null, this method returns null
     * @return EXTDTAReaderInputStream object which can be passed to prepared
     *         statement as a binary stream.
     * @exception DRDAProtocolException standard DRDA protocol exception
     */

/**
     * This method is used by EXTDTAReaderInputStream to read the first chunk 
     * of data.
     * This lengthless method must be called only when layer B streaming.
     *
     * @exception DRDAProtocolException standard DRDA protocol exception
     */

/**
     * This method is used by EXTDTAReaderInputStream to read the first chunk 
     * of data.
     * @param desiredLength the desired length of chunk. This parameter is ignored when layerB Streaming is doing.
     * @exception DRDAProtocolException standard DRDA protocol exception
     */

/**
     * This method is used by EXTDTAReaderInputStream to read the next chunk 
     * of data.
     *
     * Calling this method finishes layer B streaming 
     * if continuation of DSS segment was finished.
     * This lengthless method must be called only when layer B streaming.
     *
     * @exception IOException IOException
     */

/**
     * This method is used by EXTDTAReaderInputStream to read the next chunk 
     * of data.
     *
     * Furthermore, when Layer B streaming is carried out,
     * calling this method finishes layer B streaming 
     * if continuation of DSS segment was finished.
     *
     * @param desiredLength the desired length of chunk. This parameter is ignored when layerB Streaming is doing.
     * @exception IOException IOException
     */

/**
     * This method is used by EXTDTAReaderInputStream to read the next chunk 
     * of data.
     *
     * Furthermore, when Layer B streaming is carried out,
     * calling this method may finish layer B streaming.
     *
     * @param readHeader set to true if the dss continuation should be read
     * @param desiredLength the desired length of chunk. This parameter is ignored when layerB Streaming is doing.
     * @exception DRDAProtocolException standard DRDA protocol exception
     */

/**
    * Convert a range of packed nybbles (up to 9 digits without overflow) to an int.
    * Note that for performance purpose, it does not do array-out-of-bound checking.
    * @param buffer         buffer to read from
    * @param offset         offset in the buffer
    * @param startNybble        start nybble
    * @param numberOfNybbles    number of nybbles
    * @return   an int value
    */

/**
     * Convert a range of packed nybbles (up to 18 digits without overflow) to a long.
     * Note that for performance purpose, it does not do array-out-of-bound checking.
     * @param buffer        buffer to read from
     * @param offset        offset in the buffer
     * @param startNybble       start nybble
     * @param numberOfNybbles   number of nybbles
     * @return  an long value
     */

/**
     * Compute the int array of magnitude from input value segments.
     * @param   input value segments
     * @return  array of int magnitudes
     */

/**
     * Read encrypted string
     * @param   decryptM  decryption manager
     * @param   securityMechanism security mechanism
     * @param   initVector   initialization vector for cipher
     * @param   sourcePublicKey  public key (as in Deffie-Hellman algorithm)
     *                           from source (encryptor)
     * @return  decrypted string
     *
     * @exception DRDAProtocolException if a protocol error is detected
     * @exception java.sql.SQLException wrapping any exception in decryption
     */

/**
     * Read string value
     * Strings in DRDA protocol are encoded in EBCDIC by default so we
     * need to convert to UCS2
     * @param length  - length of string to read
     * @return value
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read string value into a DRDAString object.
     *
     * @param dst  destination for the read string
     * @param size size (in bytes) of string to read
     * @param unpad if true, remove padding (trailing spaces)
     *
     * @exception DRDAProtocolException
     */

/**
     * Read encoded string value
     * @param length  - length of string to read
     * @return value
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read specified length of string value in DDM data with default encoding
     * @param length  - length of string to read
     * @return value
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read length delimited string value in DDM data with default encoding
     * @return value
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read string value
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read byte string value
     * @param length  - length of string to read
     * @return byte array
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read byte string value
     * @return byte array
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Skip byte string value
     * @param length  - length of string to skip
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Skip byte string value
     *
     * @exception DRDAProtocolException
     */

/**
     * Skip remaining DSS
     *
     * @exception DRDAProtocolException
     */

/**
     * Convert EBCDIC byte array to unicode string
     *
     * @param   buf - byte array
     * @return string
     */

/**
     * Adjust remaining length
     *
     * @param length - adjustment length
     */

/********************************************************************/

/********************************************************************/

/**
     * Read string value
     * @param length  - length of string to read
     * @return value
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Read string value
     * @return value
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**************************************************************************/

/**
     * Make sure a certain amount of Layer A data is in the buffer.
     * The data will be in the buffer after this method is called.
     *
     * @param desiredDataSize - amount of data we need
     *
     * @exception   DRDAProtocolException
     */

/**
     * Make sure a certain amount of Layer B data is in the buffer.
     * The data will be in the buffer after this method is called.
     *
     * @param desiredDataSize - amount of data we need
     * @param adjustLen - whether to adjust the remaining lengths
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Compress B Layer data if extended total length is used
     * by removing the continuation headers
     *
     * @param continueDssHeaderCount - amount of data we need
     *
     * @exception   throws DRDAProtocolException
     */

/**
     * Methods to manage the data buffer.
     * Methods orginally from JCC
     * RESOLVE: need to check if this is the best performing way of doing this
     */

/**
     * This is a helper method which shifts the buffered bytes from
     * wherever they are in the current buffer to the beginning of
     * different buffer (note these buffers could be the same).
     * State information is updated as needed after the shift.
     * @param destinationBuffer - buffer to shift data to
     */

/**
     * This method makes sure there is enough room in the buffer
     * for a certain number of bytes.  This method will allocate
     * a new buffer if needed and shift the bytes in the current buffer
     * to make ensure space is available for a fill.  Right now
     * this method will shift bytes as needed to make sure there is
     * as much room as possible in the buffer before trying to
     * do the read.  The idea is to try to have space to get as much data as possible
     * if we need to do a read on the socket's stream.
     *
     * @param desiredSpace - amount of data we need
     */

/**
     * This method will attempt to read a minimum number of bytes
     * from the underlying stream.  This method will keep trying to
     * read bytes until it has obtained at least the minimum number.
     * @param minimumBytesNeeded - minimum required bytes
     *
     * @exception DRDAProtocolException if a protocol error is detected
     */

/**
     * Print a internal trace message
     */

/**
     * Return chaining bit for current DSS.
     */

