/**
 * A ColumnDefinitionNode represents a column definition in a DDL statement.
 * There will be a ColumnDefinitionNode for each column in a CREATE TABLE
 * statement, and for the column in an ALTER TABLE ADD COLUMN statement.
 *
 */

/**
     * The data type of this column.
     */

/**
     * Constructor for a ColumnDefinitionNode
	 *
	 * @param name			The name of the column
	 * @param defaultNode	The default value of the column
	 * @param dataTypeServices	A DataTypeServices telling the type
	 *				of the column
     * @param autoIncrementInfo Info for auto-increment columns
     * @param cm            The context manager
	 */

/**
	 * Convert this object to a String.  See comments in QueryTreeNode.java
	 * for how this should be done for tree printing.
	 *
	 * @return	This object as a String
	 */

/**
	 * Returns the unqualified name of the column being defined.
	 *
	 * @return	the name of the column
	 */

/**
	 * Returns the data type of the column being defined.
	 *
	 * @return	the data type of the column
	 */

/** Set the type of this column */

/**
     * Set the nullability of the column definition node.
      */

/**
     * Set the collation type, note derivation is always
     * implicit for any catalog item.
     */

/**
	 * Return the DataValueDescriptor containing the default value for this
	 * column
	 *
	 * @return	The default value of the column
	 */

/**
	 * Return the DefaultInfo containing the default information for this
	 * column
	 *
	 * @return	The default info for the column
	 */

/**
	 * Set the generation clause (Default) bound to this column.
	 */

/**
	 * Return the DefaultNode, if any, associated with this node.
	 *
	 * @return The DefaultNode, if any, associated with this node.
	 */

/**
	 * Return true if this column has a generation clause.
	 */

/**
	 * Get the generation clause.
	 */

/**
	 * Is this an autoincrement column?
	 *
	 * @return Whether or not this is an autoincrement column.
	 */

/**
	 * Get the autoincrement start value
	 *
	 * @return Autoincrement start value.
	 */

/**
	 * Get the autoincrement increment value
	 *
	 * @return Autoincrement increment value.
	 */

/**
	 * Get the autoincrement cycle value
	 *
	 * @return Autoincrement cycle value.
	 */

/**
	 * Get the status of this autoincrement column 
	 *
	 * @return ColumnDefinitionNode.CREATE_AUTOINCREMENT - 
	 * 		if this definition is for autoincrement column creatoin
	 *   ColumnDefinitionNode.MODIFY_AUTOINCREMENT_RESTART_VALUE -
	 * 		if this definition is for alter sutoincrement column to change the start value 
	 *   ColumnDefinitionNode.MODIFY_AUTOINCREMENT_INC_VALUE 
	 * 		if this definition is for alter autoincrement column to change the increment value
	 */

/**
	 * Check the validity of a user type.  Checks whether this column
	 * definition describes a user type that either doesn't exist or is
	 * inaccessible, or that doesn't implement Serializable.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Get the UUID of the old column default.
	 *
	 * @return The UUID of the old column default.
	 */

/**
	 * Get the action associated with this node.
	 *
	 * @return The action associated with this node.
	 */

/**
	 * Check the validity of the default, if any, for this node.
	 *
	 * @param dd		The DataDictionary.
	 * @param td		The TableDescriptor.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Check the validity of the autoincrement values for this node.
	 * The following errors are thrown by this routine.
	 * 1. 42z21 Invalid Increment; i.e 0.
	 * 2. 42z22 Invalid Type; autoincrement created on a non-exact-numeric type
	 * 3. 42995 The requested function does not apply to global temporary tables
	 *
	 * @param 		dd		DataDictionary.
	 * @param		td		table descriptor.
	 * @param		tableType	base table or declared global temporary table.
	 *
	 * @exception 	StandardException if autoincrement default is incorrect; i.e
	 * 				if increment is 0 or if initial or increment values are out
	 * 				of range for the datatype.
	 */

/**
	 * checks to see if autoincrementIncrement and autoincrementInitial
	 * are within the bounds of the type whose min and max values are
	 * passed into this routine.
	 */

/**
	 * Check the validity of the default for this node.
	 *
	 * @param td		The TableDescriptor.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Check the validity of the default for this node
	 *
	 * @param columnType TypeId of the target column.
	 * @param columnDesc Description of the type of the
	 *		target column.
	 * @param defaultType TypeId of the default node.
	 * @param defaultNode Parsed ValueNode for the default value.
	 * @param defaultText Unparsed default value (as entered
	 * 		by user).
	 * @return True if the defaultNode abides by the restrictions
	 * 	imposed by DB2 on default constants; false otherwise.
	 *
	 */

/**
	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
	 * how tree printing is supposed to work.
	 *
	 * @param depth		The depth of this node in the tree
	 */

