/**
 * This class represents access to system-wide Derby privileges.
 * 
  
   Permission Description Risk 
    "jmx" "control"  Controls the ability of JMX clients to control
  Derby and view security sensitive attributes through Derby's MBeans.
      JMX clients may be able to change the state of the running system 
    "jmx" "monitor"  Controls the ability of JMX clients to
      monitor Derby through Derby's MBeans, such as viewing number of current connections and
      configuration settings.  Note: security related settings require control
      action on jmx  JMX clients can see information about a runing system
      including software versions. 
 
 */

/**
     * Permission target name ("server") for actions applicable
     * to the network server.
     */

/**
     * Permission target name ("engine") for actions applicable
     * to the core database engine.
     */

/**
     * Permission target name ("jmx") for actions applicable
     * to management of Derby's JMX MBeans.
     */

/**
     * The server and engine shutdown action ("shutdown").
     */

/**
     * Action ("control") to perform control actions through JMX
     * on engine, server or jmx.
     * 
     * For JMX control permission is required to get
     * attributes that are deemed sensiive from a security
     * aspect, such as the network server's port number,
     * security mechanisms and any information about the
     * file system.
     */

/**
     * Action ("monitor") to perform monitoring actions through JMX
     * on engine and server.
     */

/**
     * Action ("useDerbyInternals") by the engine to lookup Derby contexts.
     */

/**
     * The legal system permission names.
     */

/**
     * Set of legal actions in their canonical form.
     */

/** Constant representing {@code SystemPermission("engine, "monitor")}. */

/**
     * Actions for this permission.
     */

/**
     * Bit mask representing the actions. It is not serialized, and has
     * to be recalculated when the object is deserialized.
     */

/**
     * Creates a new SystemPermission with the specified name.
     *
     * @param name the name of the SystemPermission
     *      *      *      */

/**
     * Check if name and actions are valid, normalize the actions string,
     * and calculate the actions mask.
     *
     * @param name the name of the permission
     * @param actions the actions of the permission
     *      *      */

/**
     * Return the permission's actions in a canonical form.
     */

/**
     * Return a canonical form of the passed in actions.
     * Actions are lower-cased, in the order of LEGAL_ACTIONS
     * and only appear once.
     */

/**
     * Get a set of all actions specified in a string. Actions are transformed
     * to lower-case, and leading and trailing blanks are stripped off.
     *
     * @param actions the specified actions string
     * @return a set of all the specified actions
     */

/**
     * Build a comma-separated actions string suitable for returning from
     * {@code getActions()}.
     *
     * @param actions the list of actions
     * @return comma-separated string with the actions
     */

/**
     * Does this permission equal another object.
     * True if its and identical class with same
     * name and (canonical) actions.
     */

/**
     * Does this permission imply another. Only true
     * if the other permission is a SystemPermission
     * with the same name and all the actions
     * of the permission are present in this.
     * Note that none of the actions imply any other
     * with this SystemPermission.
     */

/**
     * Get a mask of bits that represents the actions
     * and can be used for the implies method.
     */

/**
     * Called upon deserialization for restoring the state of this
     * SystemPermission from a stream.
     */

/**
     * A collection of {@code SystemPermission} objects. Instances of this
     * class must be thread-safe and serializable, per the specification of
     * {@code java.security.PermissionCollection}.
     */

/**
         * Called upon Serialization for saving the state of this
         * SystemPermissionCollection to a stream.
         */

/**
         * Called upon deserialization for restoring the state of this
         * SystemPermissionCollection from a stream.
         */

