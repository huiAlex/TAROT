/**
 * Converts the characters served by a {@code java.io.Reader} to a stream
 * returning the data in the on-disk modified UTF-8 encoded representation used
 * by Derby.
 * 
 * Length validation is performed. If required and allowed by the target column
 * type, truncation of blanks will also be performed.
 */

/**
     * Application's reader wrapped in a LimitReader.
     */

/** Constant indicating the first iteration of {@code fillBuffer}. */

/** Buffer space reserved for one 3 byte encoded char and the EOF marker. */

/**
     * Constant indicating that no mark is set in the stream, or that the read
     * ahead limit of the mark has been exceeded.
     */

/**
     * Buffer to hold the data read from stream and converted to the modified
     * UTF-8 format. The initial size is dependent on whether the data value
     * length is known (limited upwards to 32 KB), but it may grow if
     * {@linkplain #mark(int)} is invoked.
     */

/** Stream mark, set through {@linkplain #mark(int)}. */

/** Read ahead limit for mark, set through {@linkplain #mark(int)}. */

/** Tells if the stream content is/was larger than the buffer size. */

/**
     * The generator for the stream header to use for this stream.
     *      */

/** The length of the header. */

/**
     * Number of characters to truncate from this stream.
     * The SQL standard allows for truncation of trailing spaces for CLOB,
     * VARCHAR and CHAR. If zero, no characters are truncated, unless the
     * stream length exceeds the maximum length of the column we are inserting
     * into.
     */

/**
     * If positive, length of the expected final value, after truncation if any,
     * in characters. If negative, the maximum length allowed in the column we
     * are inserting into. A negative value means we are working with a stream
     * of unknown length, inserted through one of the JDBC 4.0 "lengthless
     * override" methods.
     */

/** The type name for the column data is inserted into. */

/** The number of chars encoded. */

/**
     * Create a stream that will truncate trailing blanks if required/allowed.
     *
     * If the stream must be truncated, the number of blanks to truncate
     * is specified to allow the stream to be checked for exact length, as
     * required by JDBC 3.0. If the stream is shorter or longer than specified,
     * an exception is thrown during read.
     *
     * @param appReader application reader
     * @param valueLength the expected length of the reader in characters
     *      (positive), or the inverse (maxColWidth * -1) of the maximum column
     *      width if the expected stream length is unknown
     * @param numCharsToTruncate the number of trailing blanks to truncate
     * @param typeName type name of the column data is inserted into
     * @param headerGenerator the stream header generator
     */

/**
     * Creates a UTF-8 stream for an application reader whose length isn't
     * known at insertion time.
     * 
     * The application reader is coming in through one of the "lengthless
     * overrides" added in JDBC 4.0, for instance
     * java.sql.PreparedStatement.setCharacterStream(int,Reader).
     * A limit is placed on the length of the application reader. If the reader
     * exceeds the maximum length, truncation of trailing blanks is attempted.
     * If truncation fails, an exception is thrown.
     *
     * @param appReader application reader
     * @param maximumLength maximum allowed length in number of characters for
     *      the reader, typically the maximum field size
     * @param typeName type name of the column data is inserted into
     * @param headerGenerator the stream header generator
     *      */

/**
     * Reads a byte from the stream.
     * 
     * Characters read from the source stream are converted to the UTF-8 Derby
     * specific encoding.
     *
     * @return The byte read, or {@code -1} if the end-of-stream is reached.
     *      *      the stream has been closed
     *      *      */

/**
     * Reads up to {@code len} bytes from the stream.
     * 
     * Characters read from the source stream are converted to the UTF-8 Derby
     * specific encoding.
     *
     * @return The number of bytes read, or {@code -1} if the end-of-stream is
     *      reached.
     *      *      the stream has been closed
     *      *      */

/**
     * Fills the internal buffer with data read from the source stream.
     * 
     * The characters read from the source are converted to the modified UTF-8
     * encoding, used as the on-disk format by Derby.
     *
     * @param startingOffset offset at which to start filling the buffer, used
     *      to avoid overwriting the stream header data on the first iteration
     *      *      (different than specified), or if truncation of blanks fails
     *      */

/**
     * Validate the length of the stream, take corrective action if allowed.
     *
     * JDBC 3.0 (from tutorial book) requires that an input stream has the
     * correct number of bytes in the stream.
     * If the stream is too long, trailing blank truncation is attempted if
     * allowed. If truncation fails, or is disallowed, an exception is thrown.
     *
     *      *      *      stream is too long and cannot be truncated, or the stream length
     *      does not match the specified length
     */

/**
     * Determine if trailing blank truncation is allowed.
     */

/**
     * Attempt to truncate the stream by removing trailing blanks.
     */

/**
     * return resources 
     */

/**
     * Return an optimized version of bytes available to read from 
     * the stream.
     * 
     * Note, it is not exactly per {@code java.io.InputStream#available()}.
     */

/**
     * Marks the current position in the stream.
     * 
     * Note that this stream is not marked at position zero by default (i.e.
     * in the constructor).
     *
     * @param readAheadLimit the maximum limit of bytes that can be read before
     *      the mark position becomes invalid
     */

/**
     * Repositions this stream to the position at the time the mark method was
     * last called on this input stream.
     *
     *      *      *      the mark has been exceeded
     */

/**
     * Tests if this stream supports mark/reset.
     * 
     * The {@code markSupported} method of {@code ByteArrayInputStream} always
     * returns {@code true}.
     *
     * @return {@code true}, mark/reset is always supported.
     */

