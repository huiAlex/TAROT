/**
 * For INSERT/UPDATE/DELETE impls.  Used to tag them.
 */

/**
     * This array contains data value descriptors that can be used (and reused)
     * to hold the normalized column values.
     */

/**
	 * Constructor
	 *
 	 * @param activation		an activation
	 *
 	 * @exception StandardException on error
	 */

/**
     * Returns the description of the inserted rows.
     * REVISIT: Do we want this to return NULL instead?
     *
     * @return the description of the inserted rows
	 */

/**
	 * Get next row from the source result set.
	 * 
	 * @param source		SourceResultSet
	 * Also look at Track#2432/change 12433
     * @return             The next row in the result set
     *      *                     Standard error policy
	 */

/**
	 * For deferred update, get a deferred sparse row based on the
	 * deferred non-sparse row. Share the underlying columns. If there
	 * is no column bit map, make them the same row.
	 *
     * @param deferredBaseRow  the deferred non-sparse row
     * @param baseRowReadList  the columns to include (1-based bit map)
     * @param lcc              the language connection context
     * @return                 the deferred sparse row
	 * @exception StandardException		Thrown on error
	 */

/**
     * Decode the update lock mode.
     * 
     * The value for update lock mode is in the second most significant byte for
     * TransactionControl.SERIALIZABLE_ISOLATION_LEVEL isolation level. Otherwise
     * (REPEATABLE READ, READ COMMITTED, and READ UNCOMMITTED) the lock mode is
     * located in the least significant byte.
     * 
     * This is done to override the optimizer choice to provide maximum 
     * concurrency of record level locking except in SERIALIZABLE where table
     * level locking is required in heap scans for correctness.
     *
     * @param lockMode the compiled encoded lock mode for this query
     * @return the lock mode (record or table) to use to open the result set
     *      */

/**
	 * get the index name given the conglomerate id of the index.
	 * 
	 * @param indexCID		conglomerate ID of the index.
	 * 
	 * @return index name of given index.
	 */

/**
     * 
     * Normalize a row as part of the INSERT/UPDATE action of a MERGE statement.
     * This applies logic usually found in a NormalizeResultSet, which is missing for
     * the MERGE statement.
     * 
     * @param sourceResultSet        the result set for which this action is
     *                               to be performed
     * @param row                    the row to be normalized
     * @return                       the normalized row
     *      */

