/**
 * Abstract ResultSet class for NoPutResultSets which
 * contain a scan. Returns rows that may be a column sub-set of the
 * rows in the underlying object to be scanned. If accessedCols is
 * not null then a sub-set of columns will be fetched from the underlying
 * object (usually into the candidate row object), then the returned
 * rows will be a compacted form of that row, with the not-fetched columns
 * moved out. If accessedCols is null then the full row will be returned.
 * 
 * Example: if accessedCols indicates that we want to retrieve columns
 * 1 and 4, then candidate row will have space for 5
 * columns (because that's the size of the rows in the underlying object),
 * but only cols "1" and "4" will have values:
 * 
 * 
 */

/** If true, the table is marked as table locked in SYS.SYSTABLES. */

/** If true, the isolation level is unspecified and must be refreshed on
     * each open. */

/** The lock mode supplied through the constructor. */

/** Tells whether the isolation level needs to be updated. */

/** The actual lock mode used. */

/** The scan isolation level. */

/** Object used to create and reset the candidate row. */

/** The candidate row, matches the shape of the rows in
     * the underlying object to be scanned.
     */

/**
     * If not null indicates the subset of columns that
     * need to be pulled from the underlying object to be scanned.
     * Set from the PreparedStatement's saved objects, if it exists.
     */

/** true if the scan should pick up row locations */

/**
     * Construct a ScanResultSet.
     *
     * @param activation the activation
     * @param resultSetNumber number of the result set (unique within statement)
     * @param resultRowTemplate identifier of saved object for row template
     * @param lockMode lock mode (record or table)
     * @param tableLocked true if marked as table locked in SYS.SYSTABLES
     * @param isolationLevel language isolation level for the result set
     * @param colRefItem Identifier of saved object for accessedCols,
     * -1 if need to fetch all columns.
     * @param optimizerEstimatedRowCount estimated row count
     * @param optimizerEstimatedCost estimated cost
     */

/**
     * Initialize the isolation level and the lock mode. If the result set was
     * constructed with an explicit isolation level, or if the isolation level
     * has already been initialized, this is a no-op. All sub-classes should
     * invoke this method from their openCore() methods.
     */

/**
     * Get the lock mode based on the language isolation level. Always do row
     * locking unless the isolation level is serializable or the table is
     * marked as table locked.
     *
     * @param languageLevel the (language) isolation level
     * @return lock mode
     */

/** Determine whether this scan should return row locations */

/**
     * Translate isolation level from language to store.
     *
     * @param languageLevel language isolation level
     * @return store isolation level
     */

/**
     * Can we get instantaneous locks when getting share row
     * locks at READ COMMITTED.
     */

/**
     * Return the isolation level of the scan in the result set.
     */

/**
     * Close the result set.
     *
     * @exception StandardException if an error occurs
     */

