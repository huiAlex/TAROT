/**
     * Value used to signal unknown length of data.
     */

/**
     * Convert the input targetJdbcType to the correct JdbcType used by CrossConverters.
     */

/**
     * 
     * Get a boolean value from a CHAR column. In order to match the embedded
     * driver and JCC we return false iff the CHAR value is "0" or "false".
     * 
     *
     * 
     * Leading and trailing whitespace is removed from the input string before
     * it's compared to "0" and "false". No other normalization is performed.
     * Specifically, no case conversion is performed, so the comparison is
     * case sensitive, and everything that doesn't exactly match "0" or "false"
     * will be considered true.
     * 
     *
     * @param source the value of a CHAR column
     * @return false if source is "0" or "false", true otherwise
     */

/**
     * Convert a string to a date in the specified calendar. Accept the same
     * format as {@code Date.valueOf()}.
     *
     * @param s the string to parse
     * @param cal the calendar (or null to use the default calendar)
     * @return a {@code Date} value that represents the date in the
     * calendar {@code cal}
     *      */

/**
     * Initialize the date components of a {@code java.util.Calendar} from
     * a string on the format YYYY-MM-DD. All other components are left
     * untouched.
     *
     * @param cal the calendar whose date components to initialize
     * @param date a string representing a date
     *      * format YYYY-MM-DD
     */

/**
     * Convert a character to a digit.
     *
     * @param ch the character
     * @return the corresponding digit (0-9)
     *      */

/**
     * Convert a string to a time in the specified calendar. Accept the same
     * format as {@code java.sql.Time.valueOf()}.
     *
     * @param s the string to parse
     * @param cal the calendar (or null to use the default calendar)
     * @return a {@code java.sql.Time} value that represents the time in the
     * calendar {@code cal}
     *      */

/**
     * Initialize the time components of a {@code java.util.Calendar} from a
     * string on the format HH:MM:SS. All other components are left untouched.
     *
     * @param cal the calendar whose time components to initialize
     * @param time a string representing a time
     *      * format HH:MM:SS
     */

/**
     * Convert a string to a timestamp in the specified calendar. Accept the
     * same format as {@code java.sql.Timestamp.valueOf()}.
     *
     * @param s the string to parse
     * @param cal the calendar (or null to use the default calendar)
     * @return a {@code java.sql.Timestamp} value that represents the timestamp
     * in the calendar {@code cal}
     *      */

