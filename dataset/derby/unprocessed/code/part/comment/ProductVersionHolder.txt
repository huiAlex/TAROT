/**
	  Create a ProductVersionHolder

	  Please see the documentation for the varient of getProductVesionHolder
	  that takes the same parameters as this for a description of the parameters.
	  */

/**
	  Create a valid ProductVersionHolder. If any of the
	  parameters provided is invalid, this returns null.
	  @param productName The name of the product. productName.length()
	  must be greater than 0. The syntax for a product name is
	  'productGenus[:productSpecies]'. 
	  @param majorVersion The most significant portion of a 3 
	  part product version.  Must be non-negative.
	  @param minorVersion The second portion of a 3 part 
	  product version. Must be non-negative.
	  @param maintVersion The least significant portion of a 3 part
	  product version. Must be non-negative.
	  @param drdaMaintVersion The protocol modification number for minor release.
	  @param buildNumber The buildNumber for a product. 
	  @param isBeta true iff the product is beta.
	  @return A valid ProductVersionHolder of null if any of the parameters
	  provided are not valid.
	  */

/**
	  Get a ProductVersionHolder for a product of a given genus,
	  that is available in the caller's environment. 
	  Even though this uses a priv bock, it may stil fail when
	  the jar the version is being fetched from, is different to the
	  one that loaded this class, AND the jars are in different security contexts.

	  @param productGenus The genus for the product.
	  @return The ProductVersionHolder or null if
	  a product with the given genus is not available in the
	  caller's environment.
	  */

/**
		Load the version info from the already opened properties files.
		We need to do this because if the jar files (e.g. db2jtools and db2j)
		are in different security contexts (entries in the policy files) then
		we cannot load the version information for one of them correctly.
		This is because the this class will either have been loaded from
		only one of the jars and hence can only access the resource in its own jar.
		By making code specific to the jar open the resource we are guaranteed it will work.
	*/

/**
	  Get a ProductVersionHolder based on the information in
	  the Properties object provided.

	  @param p The properties object that holds the productVersion
	  information.
	  @return The ProductVersionHolder or null if
	  a product with the given genus is not available in the
	  caller's environment.
	  */

/**
	  Return the product vendor name.
	  */

/**
	  Return the external product name.
	  */

/**
	  Return the major version number.
	  */

/**
	  Return the minor version number.
	  */

/**
	  Return the encoded maintainence version number.
	  */

/** 
		Return the drda protocol maintenance version for this minor release.
		Starts at 0 for each minor release and only incremented 
		when client behaviour changes based on the server version.
	**/

/**
       Return the fix pack version from the maintenance encoding.
	*/

/**
	  Return true if this is a beta product.
	  */

/**
	  Return true if this is a alpha product.
	  */

/**
	  Return the build number for this product.
	  */

/**
     * Return the build number as an integer if possible,
     * mapping from the SVN number.
     * nnnnn -&gt; returns nnnnn
     * nnnnnM -&gt; returns -nnnnn indicates a modified code base
     * nnnnn:mmmmm -&gt; returns -nnnnn
     * anything else -&gt; returns -1
    */

/**
	  Parse a string containing a non-negative integer. Return
	  a negative integer is the String is invalid.

	  @param s A string with a non-negative integer (a sequence
	  of decimal digits.)
	  @return the integer or a negative number if s is invalid.
	  */

/**
	  Return  a string representation of this ProductVersion. The
	  difference between this and createProductVersionString, is
	  that this method retruns a String when this ProductVersionHolder
	  holds invalid version information.
	 */

/**
		Return the feature version string, ie. major.minor. (e.g. 5.2)
	*/

/**
		Convert a major and minor number with beta status into a string.
	*/

/**
		Returns a short-hand value for the product version string.
		Used by Sysinfo.
		Includes the optional  designation
	*/

