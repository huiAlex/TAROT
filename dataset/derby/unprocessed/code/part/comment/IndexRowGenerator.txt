/**
 * This class extends IndexDescriptor for internal use by the
 * DataDictionary.
 * 
 * For a description of how deferrable and non-deferrable constraints
 * are backed differently, including the meaning of the
 * boolean attributes used here, see {@link
 * org.apache.derby.catalog.IndexDescriptor}.
 */

/**
	 * Constructor for an IndexRowGeneratorImpl
	 *
	 * @param indexDescriptor		An IndexDescriptor to delegate calls to
	 */

/**
	 * Get a template for the index row, to be used with getIndexRow.
	 *
	 * @return	A row template for the index row.
	 */

/**
     * Get a NULL Index Row for this index. This is useful to create objects
     * that need to be passed to ScanController.
     *
     * @param columnList ColumnDescriptors describing the base table.
     * @param rowLocation   empty row location.
     *
     * @exception StandardException thrown on error.
     */

/**
	 * Get an index row for this index given a row from the base table
	 * and the RowLocation of the base row.  This method can be used
	 * to get the new index row for inserts, and the old and new index
	 * rows for deletes and updates.  For updates, the result row has
	 * all the old column values followed by all of the new column values,
	 * so you must form a row using the new column values to pass to
	 * this method to get the new index row.
	 *
	 * @param baseRow	A row in the base table
	 * @param rowLocation	The RowLocation of the row in the base table
	 * @param indexRow	A template for the index row.  It must have the
	 *					correct number of columns.
	 * @param bitSet	If non-null, then baseRow is a partial row and the
	 *					set bits in bitSet represents the column mapping for
	 *					the partial row to the complete base row.  WARNING:
	 *					 ONE based!!!
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
     * Return an array of collation ids for this table.
     * 
     * Return an array of collation ids, one for each column in the
     * columnDescriptorList.  This is useful for passing collation id info
     * down to store, for instance in createConglomerate() to create
     * the index.
     *
     * This is only expected to get called during ddl, so object allocation
     * is ok. 
     *
	 * @param columnList ColumnDescriptors describing the base table.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
	 * Get the IndexDescriptor that this IndexRowGenerator is based on.
	 */

/** Zero-argument constructor for Formatable interface */

/**
     *      */

/** @see IndexDescriptor#isUnique */

/** @see IndexDescriptor#baseColumnPositions */

/** @see IndexDescriptor#getKeyColumnPosition */

/** @see IndexDescriptor#numberOfOrderedColumns */

/** @see IndexDescriptor#indexType */

/** @see IndexDescriptor#isAscending */

/** @see IndexDescriptor#isDescending */

/** @see IndexDescriptor#isAscending */

/** @see IndexDescriptor#setBaseColumnPositions */

/** @see IndexDescriptor#setIsAscending */

/** @see IndexDescriptor#setNumberOfOrderedColumns */

/**
	 * Test for value equality
	 *
	 * @param other		The other indexrowgenerator to compare this one with
	 *
	 * @return	true if this indexrowgenerator has the same value as other
	 */

/**
	  	  */

/**
	 * 	 *
	 * @exception IOException	Thrown on read error
	 * @exception ClassNotFoundException	Thrown on read error
	 */

/**
	 *
	 * @exception IOException	Thrown on write error
	 */

/**
     * Privileged lookup of a Context. Must be private so that user code
     * can't call this entry point.
     */

