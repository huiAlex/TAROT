/**
	Implementation of the monitor that uses the class loader
	that the its was loaded in for all class loading.

*/

/**
		Hash table of objects that implement PersistentService keyed by their getType() method.
	*/

/**
		Shut down a service that was started by this Monitor. Will
		cause the stop() method to be called on each loaded module.
	*/

/**
		Return the name of the service that the passed in module lives in.
	*/

/**
		Set the locale for the service *outside* of boot time.

		@exception StandardException Standard Derby error.
	*/

/**
		Set the locale for the service at boot time. The passed in
		properties must be the one passed to the boot method.

		@exception StandardException Standard Derby error.
	*/

/**
		Return the PersistentService object for a service.
		Will return null if the service does not exist.
	*/

/**
		Start a module.

		@exception StandardException se An attempt to start the module failed.

			*/

/**
		Obtain a class that supports the given identifier.

		@param fmtId identifer to associate with class

		@return a reference InstanceGetter

		@exception StandardException See Monitor.classFromIdentifier

			*/

/**
		Obtain an new instance of a class that supports the given identifier.

		@return a reference to a newly created object or null if a matching class
			    cannot be found.
	*/

/**
		load a module instance.

		Look through the implementations for a module that implements the
		required factory interface and can handle the properties given.

		The module's start or create method is not called.
	*/

/**
		Find a class that implements the required index, return the index
        into the implementations vector of that class. Returns -1 if no class
		could be found.
	*/

/**
     * Return a new instance of class {@code classObject} using
     * a no-param constructor.
     * @param classObject the class to instantiate
     * @return the instantiated object
     */

/**
		Return an array of the service identifiers that are running and
		implement the passed in protocol (java interface class name).

		@return The list of service names, if no services exist that
		implement the protocol an array with zero elements is returned.

			*/

/**
		Should only be called if reportOn is true
		apart from report/Exception().
	*/

/**
		Look for any services in the a properties set and the application
		property set and then start them.

		A service is defined by derby.service.name=protocol
	*/

/**
		Start a peristent service.

					*/

/**
		Create a persistent service.

		@return The module from the service if it was created successfully, null if a service already existed.

		@exception StandardException An exception was thrown trying to create the service.

			*/

/**
     *  Removes a PersistentService.
     *  Could be used for drop database.
       @param name : Service name to be removed.
       
    */

/**
		Start a non-persistent service.

					*/

/**
		Create an implementation set.
		Look through the properties object for all properties that
		start with derby.module and add the value into the vector.

		If no implementations are listed in the properties object
		then null is returned.
	*/

/**
	 * Get the complete set of module properties by
	 * loading in contents of all the org/apache/derby/modules.properties
	 * files. This must be executed in a privileged block otherwise
	 * when running in a security manager environment no properties will
	 * be returned.
	 */

/**
		Return a property set that has the runtime properties removed.
	*/

/**	
		Get InputStream for application properties file Returns nul if it does not exist.
	*/

/**
	*/

/**
     * Determine which of the set of service providers (PersistentService objects)
     * are supported in the current environment. If a PersistentService
     * implementation does not implement ModuleControl then it is assumed
     * it does support the current environment. Otherwise the canSupport()
     * method makes the determination. Any providers that are not supported
     * are removed from the list.
	*/

/**
		Boot all persistent services that can be located at run time.

		
		This method enumerates through all the service providers that
		are active and calls bootPersistentServices(PersistentService)
		to boot all the services that that provider knows about.
	*/

/**
		Boot all persistent services that can be located by a single service provider

		
		This method enumerates through all the service providers that
		are active and calls bootPersistentServices(PersistentService)
		to boot all the services that that provider knows about.
	*/

/**
		Find a provider and start  a service.
	*/

/**
		Find the service provider from a name that includes a service type,
		ie. is of the form 'type:name'. If type is less than 3 characters
		then it is assumed to be of type directory, i.e. a windows driver letter.
	*/

/**
     * Return a PersistentService implementation to handle the subSubProtocol.
     * @return Valid PersistentService or null if the protocol is not handled.
      */

/**
     * Find the StorageFactory class name that handles the subSub protocol.
     * Looks in the system property set and the set defined during boot.
 
      * @return Valid class name, or null if no StorageFactory handles the protocol.
     */

/**
		Boot a service under the control of the provider
	*/

/**
		Boot (start or create) a service (persistent or non-persistent).
	*/

/**
	Return the UUID factory for this system.  Returns null
	if there isn't one.
	See com.ibm.db2j.system.System
	*/

/**
     * Returns the Timer factory for this system.
     *
     * @return the system's Timer factory.
     */

/**
		If the module implements ModuleSupportable then call its
		canSupport() method to see if it can or should run in
		this setup. If it doesn't then it can always run.
	*/

/**
		Boot a module. If the module implements ModuleControl
		then its boot() method is called. Otherwise all the
		boot code is assumed to take place in its constructor.
	*/

/**
		Get the locale from the ContextManager and then find the bundle
		based upon that locale.
	*/

/**
     * Privileged lookup of the ContextService. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged shutdown of the ContextService. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged startup. Must be private so that user code
     * can't call this entry point. Returns true if the system is
     * already booted or in the process of shutting down.
     */

/**
		Initialize the monitor wrt the current environemnt.
		Returns false if the monitor cannot be initialized, true otherwise.
	*/

