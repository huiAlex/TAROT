/**
 * AssertFailure is raised when an ASSERT check fails. Because assertions are
 * not used in production code, are never expected to fail, and recovering from
 * their failure is expected to be hard, they are under RuntimeException so that
 * no one needs to list them in their throws clauses. An AssertFailure at the
 * outermost system level will result in system shutdown.
 *
 * An AssertFailure also contains a string representation of a full thread dump
 * for all the live threads at the moment it was thrown if the JVM supports it
 * and we have the right permissions.
 *
 * If the JVM doesn't have the method Thread.getAllStackTraces i.e, we are on a
 * JVM &lt; 1.5, or if we don't have the permissions java.lang.RuntimePermission
 * "getStackTrace" and "modifyThreadGroup", a message saying so is stored
 * instead.
 *
 * The thread dump string is printed to System.err after the normal stack trace
 * when the error is thrown, and it is also directly available by getThreadDump().
 */

/**
     * This constructor takes the pieces of information
     * expected for each error.
     *
     * @param message the message associated with
     * the error.
     *
     * @param nestedError errors can be nested together;
     * if this error has another error associated with it,
     * it is specified here. The 'outermost' error should be
     * the most severe error; inner errors should be providing
     * additional information about what went wrong.
     **/

/**
     * This constructor takes the just the message for this error.
     *
     * @param message the message associated with the error.
     **/

/**
     * This constructor expects no arguments or nested error.
     **/

/**
     * Returns the thread dump stored in this AssertFailure as a string.
     *
     * @return - thread dump string.
     */

/**
     * Overrides printStackTrace() in java.lang.Throwable to include
     * the thread dump after the normal stack trace.
     */

/**
     * Overrides printStackTrace(PrintStream s) in java.lang.Throwable
     * to include the thread dump after the normal stack trace.
     */

/**
     * Overrides printStackTrace(PrintWriter s) in java.lang.Throwable
     * to include the thread dump after the normal stack trace.
     */

/**
     * Tells if generating a thread dump is supported in the running JVM.
     */

/**
     * Dumps stack traces for all the threads if the JVM supports it.
     * The result is returned as a string, ready to print.
     *
     * If the JVM doesn't have the method Thread.getAllStackTraces
     * i.e, we are on a JVM &lt; 1.5, or  if we don't have the permissions:
     * java.lang.RuntimePermission "getStackTrace" and "modifyThreadGroup",
     * a message saying so is returned instead.
     *
     * @return stack traces for all live threads as a string or an error message.
     */

