/**
 * ResultSetFactory provides a wrapper around all of
 * the result sets used in this execution implementation.
 * This removes the need of generated classes to do a new
 * and of the generator to know about all of the result
 * sets.  Both simply know about this interface to getting
 * them.
 * 
 * In terms of modularizing, we can create just an interface
 * to this class and invoke the interface.  Different implementations
 * would get the same information provided but could potentially
 * massage/ignore it in different ways to satisfy their
 * implementations.  The practicality of this is to be seen.
 * 
 * The cost of this type of factory is that once you touch it,
 * you touch *all* of the possible result sets, not just
 * the ones you need.  So the first time you touch it could
 * be painful ... that might be a problem for execution.
 *
 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
			 */

/**
				@exception StandardException thrown on error
	 */

/**
    	a hash scan generator, for ease of use at present.
				@exception StandardException thrown on error
	 */

/**
    	a distinct scan generator, for ease of use at present.
				@exception StandardException thrown on error
	 */

/**
    	a minimal table scan generator, for ease of use at present.
				@exception StandardException thrown on error
	 */

/**
    	Table/Index scan where rows are read in bulk
				@exception StandardException thrown on error
	 */

/**
		Multi-probing scan that probes an index for specific values contained
		in the received probe list.

		All index rows for which the first column equals probeVals[0] will
		be returned, followed by all rows for which the first column equals
		probeVals[1], and so on.  Assumption is that we only get here if
		probeVals has at least one value.

				@exception StandardException thrown on error
	 */

/**
				@exception StandardException	Thrown on error
	 */

/**
				@exception StandardException	Thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown when unable to create the
			result set
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
			 */

/**
				@exception StandardException thrown on error
	 */

/**
				@exception StandardException thrown on error
	 */

/**
    	a minimal union scan generator, for ease of use at present.
				@exception StandardException thrown on error
	 */

/**
	 *	a referential action dependent table scan generator.
	 *  	 *	@exception StandardException thrown on error
	 */

/**
	 * 	 */

