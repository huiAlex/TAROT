/**
 * SQLBlob satisfies the DataValueDescriptor,
 * interfaces (i.e., OrderableDataType). 
 * It uses the SQLLongVarbit implementation, which implements a String holder,
 * e.g. for storing a column value; it can be specified
 * when constructed to not allow nulls. Nullability cannot be changed
 * after construction.
 * 
 * Because LOB types are not orderable, we'll override those
 * methods...
 *
 */

/**
	 * Return max memory usage for a SQL Blob
	 */

/**
     * Tells if this BLOB value is, or will be, represented by a stream.
     *
     * @return {@code true} if the value is represented by a stream,
     *      {@code false} otherwise.
     */

/**
     * Returns a clone of this BLOB value.
     * 
     * Unlike the other binary types, BLOBs can be very large. We try to clone
     * the underlying stream when possible to avoid having to materialize the
     * value into memory.
     *
     * @param forceMaterialization any streams representing the data value will
     *      be materialized if {@code true}, the data value will be kept as a
     *      stream if possible if {@code false}
     * @return A clone of this BLOB value.
     */

/**
     *      */

/**
      * Return a JDBC Blob. Originally implemented to support DERBY-2201.
      */

/**
	 * Normalization method - this method may be called when putting
	 * a value into a SQLBit, for example, when inserting into a SQLBit
	 * column.  See NormalizeResultSet in execution.
	 *
	 * @param desiredType	The type to normalize the source column to
	 * @param source		The value to normalize
	 *
	 * @exception StandardException				Thrown for null into
	 *											non-nullable column, and for
	 *											truncation error
	 */

/**
	   Return my format identifier.
           
	   	*/

/** 
	 * 	 *
	 * @exception SQLException		Thrown on error
	 * 	 */

/** @see DataValueDescriptor#typePrecedence */

/**
     * Set the value from an non-null object.
     */

/**
     * Tell if this blob is length less.
     *
     * @return true if the length of the blob is not known,
     *      false otherwise
     */

