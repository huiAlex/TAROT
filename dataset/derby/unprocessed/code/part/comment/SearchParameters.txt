/**

  Parameters that are passed down during a recursive b-tree search.
  This class is intended to be used as a struct, primarily to make
  it easier to pass a number of search parameters around, and also
  to make it easy to re-use objects and not re-allocate.

**/

/**
     * Position on key just left of a sequence of partial key matches.
     * Used by scan which will then start scan on next key.
     **/

/**
     * Position on last key in a sequence of partial key matches.
     * Used by scan which will then start scan on next key.
     **/

/**
	The key being searched for.  Never intended to be modified
	for the lifetime of the object.
	**/

/**
	An index row with the correct types for the index,
	into which rows are read during the search.
	Rows are read into the template during a page search, but
	they will be overwritten; there is only one template per
	search.
	**/

/**
	The b-tree this search is for.  Effectively read-only for the
	lifetime of this object.
	**/

/**
	The resulting slot from the search.  Updated when the search completes.
	**/

/**
	Whether the row found exactly matched the searchKey.  Updated 
	when the search completes.
	**/

/**
	Whether the search is for the optimizer, to determine range of scan.
	**/

/**
	If this is an optimizer search, the fraction of rows that are left of 
    the current search.  When the search completes this number multiplied by
    the number of leaf rows in the table is the number of rows left of
    the result slot in the search.
	**/

/**
	If this is an optimizer search, the fraction of rows that are "in" the 
    the current search.  This number is used as we descend down the tree to 
    track the percentage of rows that we think are in the current subtree
    defined by all leaf's that can be reached from the current branch.
	**/

/**
	Construct search parameters.

    @exception StandardException Standard exception policy.
	**/

