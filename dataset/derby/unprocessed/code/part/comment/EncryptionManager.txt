/****************************************************************
     * Below are methods for the SECMEC_USRSSBPWD security mechanism.
     ****************************************************************/

/**
     * This method generates an 8-Byte random seed for the client (source).
     *
     * @return a random 8-Byte seed.
     */

/**
     * Strong Password Substitution (USRSSBPWD).
     *
     * This method generates a password substitute to send to the target
     * server.
     * 
     * Substitution algorithm works as follow:
     *
     * PW_TOKEN = SHA-1(PW, ID)
     * The password (PW) and user name (ID) can be of any length greater
     * than or equal to 1 byte.
     * The client generates a 20-byte password substitute (PW_SUB) as follows:
     * PW_SUB = SHA-1(PW_TOKEN, RDr, RDs, ID, PWSEQs)
     * 
     * w/ (RDs) as the random client seed and (RDr) as the server one.
     * 
     * See PWDSSB - Strong Password Substitution Security Mechanism
     * (DRDA Vol.3 - P.650)
     *
     * @param userName The user's name
     * @param password The user's password
     * @param sourceSeed_ random client seed (RDs)
     * @param targetSeed_ random server seed (RDr)
     *
     * @return a password substitute.
     */

/*********************************************************************
     * RESOLVE:                                                          *
     * The methods and static vars below should go into some 'shared'    *
     * package when the capability is put back in (StringUtil.java).     *
     *********************************************************************/

/**
        Convert a byte array to a String with a hexadecimal format.
        The String may be converted back to a byte array using fromHexString.
        
        For each byte (b) two characters are generated, the first character
        represents the high nibble (4 bits) in hexadecimal ({@code b & 0xf0}),
        the second character represents the low nibble ({@code b & 0x0f}).
        
        The byte at {@code data[offset]} is represented by the first two
        characters in the returned String.

        @param  data    byte array
        @param  offset  starting byte (zero based) to convert.
        @param  length  number of bytes to convert.

        @return the String (with hexidecimal format) form of the byte array
    */

/**
  
        Convert a string into a byte array in hex format.
        
        For each character (b) two bytes are generated, the first byte 
        represents the high nibble (4 bits) in hexadecimal ({@code b & 0xf0}),
        the second byte represents the low nibble ({@code b & 0x0f}).
        
        The character at {@code str.charAt(0)} is represented by the
        first two bytes in the returned String.

        @param  str string
        @param  offset  starting character (zero based) to convert.
        @param  length  number of characters to convert.

        @return the byte[]  (with hexadecimal format) form of the string (str)
    */

