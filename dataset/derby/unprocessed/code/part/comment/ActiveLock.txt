/**
	A Lock represents a granted or waiting lock request.

	
	MT - Mutable - Immutable identity : Thread Aware
*/

/**
		Set to true if the object waiting on this thread should wake up,
		MT - mutable - java synchronized(this)
	*/

/**
		Set to true if the Lock potentially could be granted.

		MT - mutable - single thread required
	*/

/**
		If true then this lock can be granted even if
		it is not the first lock request on the wait queue.
		This can occur if the compatibility space already holds
		a lock on the object.
	*/

/**
		Initialize the lock, should be seen as part of the constructor. A future
		version of this class may become mutable - mutable identity.

		MT - single thread required
	*/

/**	
		Set the potentially granted flag, returns true if the
		flag changed its state.

		MT - single thread required
	*/

/**	
		Clear the potentially granted flag.

		MT - single thread required
	*/

/**
		Wait for a lock to be granted, returns when the lock is granted.
		
		The sleep wakeup scheme depends on the two booleans wakeUpNow and potentiallyGranted.
		  
		MT - Single thread required - and assumed to be the thread requesting the lock.

		@return true if the wait ended early (ie. someone else woke us up).

		@exception StandardException timeout, deadlock or thread interrupted
	*/

/**
		Wake up anyone sleeping on this lock.

		MT - Thread Safe
	*/

