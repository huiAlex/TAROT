/**
 * An UpdateNode represents an UPDATE statement.  It is the top node of the
 * query tree for that statement.
 * For positioned update, there may be no from table specified.
 * The from table will be derived from the cursor specification of
 * the named cursor.
 *
 */

/**
     * Constructor for an UpdateNode.
	 *
	 * @param targetTableName	The name of the table to update
     * @param resultSet         The ResultSet that we will generate
     * @param matchingClause   Non-null if this DML is part of a MATCHED clause of a MERGE statement.
     * @param cm                The context manager
	 */

/**
	 * Convert this object to a String.  See comments in QueryTreeNode.java
	 * for how this should be done for tree printing.
	 *
	 * @return	This object as a String
	 */

/**
	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
	 * how tree printing is supposed to work.
	 *
	 * @param depth		The depth of this node in the tree
	 */

/**
	 * Bind this UpdateNode.  This means looking up tables and columns and
	 * getting their types, and figuring out the result types of all
	 * expressions, as well as doing view resolution, permissions checking,
	 * etc.
	 * 
	 * Binding an update will also massage the tree so that
	 * the ResultSetNode has a set of columns to contain the old row
	 * value, followed by a set of columns to contain the new row
	 * value, followed by a column to contain the RowLocation of the
	 * row to be updated.
	 *
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
     * Get the names of the explicitly set columns, that is, the columns on the left side
     * of SET operators.
     */

/**
     * Associate all added columns with the TARGET table of the enclosing
     * MERGE statement.
     */

/**
     * Tag the original columns mentioned in the result list.
     */

/**
     * Collect all of the result set columns.
     */

/**
     * Collect all of the CastNodes in the WHERE clause and on the right side
     * of SET operators. Later on, we will need to add permissions for all UDTs
     * mentioned by these nodes.
     */

/**
     * Tag all of the nodes which may require privilege checks.
     * These are various QueryTreeNodes in the WHERE clause and on the right
     * side of SET operators.
     */

/**
     * Add to an evolving list all of the nodes under an expression which may require privilege checks.
     */

/**
     * Add UPDATE_PRIV on all columns on the left side of SET operators.
     */

/**
     * Add privilege checks for UDTs referenced by this statement.
     */

/**
	 * Return true if the node references SESSION schema tables (temporary or permanent)
	 *
	 * @return	true if references SESSION schema tables, else false
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Compile constants that Execution will use
	 *
	 * @exception StandardException		Thrown on failure
	 */

/**
	 * Updates are deferred if they update a column in the index
	 * used to scan the table being updated.
	 */

/**
	 * Code generation for update.
	 * The generated code will contain:
	 *		o  A static member for the (xxx)ResultSet with the RowLocations	and
	 *		   new update values
	 *		o  The static member will be assigned the appropriate ResultSet within
	 *		   the nested calls to get the ResultSets.  (The appropriate cast to the
	 *		   (xxx)ResultSet will be generated.)
	 *		o  The CurrentRowLocation() in SelectNode's select list will generate
	 *		   a new method for returning the RowLocation as well as a call to
	 *		   that method when generating the (xxx)ResultSet.
	 *
	 * @param acb	The ActivationClassBuilder for the class being built
	 * @param mb	The method for the execute() method to be built
	 *
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Return the type of statement, something from
	 * StatementType.
	 *
	 * @return the type of statement
	 */

/**
	 * Construct the changedColumnIds array. Note we sort its entries by
	 * columnId.
	 */

/**
     * Add all of the columns mentioned by the generation clauses of generated
     * columns. The generated columns were added when we called
     * addGeneratedColumns earlier on.
     */

/**
     * Add generated columns to the update list as necessary. We add
     * any column whose generation clause mentions columns already
     * in the update list. We fill in a list of all generated columns affected
     * by this update. We also fill in a list of all generated columns which we
     * added to the update list.
     */

/**
	 * Check table name and then clear it from the result set columns.
	 * 
	 * @exception StandardExcepion if invalid column/table is specified.
	 */

/**
	 * Normalize synonym column references to have the name of the base table. 
	 *
	 * @param rcl	    The result column list of the target table
	 * @param fromTable The table name to set the column refs to
	 * 
	 * @exception StandardException		Thrown on error
	 */

/**
     * Do not allow generation clauses to be overriden. Throws an exception if
     * the user attempts to override the value of a generated column.  The only
     * value allowed in a generated column is DEFAULT. We will use
     * addedGeneratedColumns list to pass through the generated columns which
     * have already been added to the update list.
     *
     * @param targetRCL  the row in the table being UPDATEd
     * @param addedGeneratedColumns generated columns which the compiler added
     *        earlier on
     *      */

