/**
 * An OrderByList is an ordered list of columns in the ORDER BY clause.
 * That is, the order of columns in this list is significant - the
 * first column in the list is the most significant in the ordering,
 * and the last column in the list is the least significant.
 *
 */

/**
     * {@code true} if this instance orders a
     * {@literal }.
     * See {@link #isTableValueCtorOrdering}.
     */

/**
     * Constructor.
     * Initialize with the type of the result set this {@code OrderByList} is
     * attached to, e.g. {@code SELECT}, {@code VALUES} or a set operation.
     * @param rs The result set this {@code OrderByList} is ordering. May be
     *           null
     * @param cm The context manager
    */

/**
		Add a column to the list
	
		@param column	The column to add to the list
	 */

/**
	 * Are all columns in the list ascending.
	 *
	 * @return	Whether or not all columns in the list ascending.
	 */

/**
		Get a column from the list
	
		@param position	The column to get from the list
	 */

/**
	 *	Bind the update columns by their names to the target resultset of the
     * cursor specification.
	 *
	 * 	@param target	The underlying result set
	 *	@exception StandardException		Thrown on error
	 */

/**
	 * Adjust addedColumnOffset values due to removal of a duplicate column
	 *
	 * This routine is called by bind processing when it identifies and
	 * removes a column from the result column list which was pulled up due
	 * to its presence in the ORDER BY clause, but which was later found to
	 * be a duplicate. The OrderByColumn instance for the removed column
	 * has been adjusted to point to the true column in the result column
	 * list and its addedColumnOffset has been reset to -1. This routine
	 * finds any other OrderByColumn instances which had an offset greater
	 * than that of the column that has been deleted, and decrements their
	 * addedColumOffset to account for the deleted column's removal.
	 *
	 * @param gap   column which has been removed from the result column list
	 */

/**
		Pull up Order By columns by their names to the target resultset
		of the cursor specification.

		@param target	The underlying result set
	
	 */

/**
	 * Is this order by list an in order prefix of the specified RCL.
	 * This is useful when deciding if an order by list can be eliminated
	 * due to a sort from an underlying distinct or union.
	 *
	 * @param sourceRCL	The source RCL.
	 *
	 * @return Whether or not this order by list an in order prefix of the specified RCL.
	 */

/**
	 * Order by columns now point to the PRN above the node of interest.
	 * We need them to point to the RCL under that one.  This is useful
	 * when combining sorts where we need to reorder the sorting
	 * columns.
	 */

/**
	 * Build a new RCL with the same RCs as the passed in RCL
	 * but in an order that matches the ordering columns.
	 *
	 * @param resultColumns	The RCL to reorder.
	 *	
	 *	@exception StandardException		Thrown on error
	 */

/**
		Remove any constant columns from this order by list.
		Constant columns are ones where all of the column references
		are equal to constant expressions according to the given
		predicate list.
	 */

/**
		Remove any duplicate columns from this order by list.
		For example, one may "ORDER BY 1, 1, 2" can be reduced
		to "ORDER BY 1, 2".
		Beetle 5401.
	 */

/**
    	generate the sort result set operating over the source
		expression.

		@param acb the tool for building the class
		@param mb	the method the generated code is to go into
		@exception StandardException thrown on failure
	 */

/**
     *      *
     * @exception StandardException     Thrown on error
     */

/**
     *      *
     * @exception StandardException     Thrown on error
     */

/**
	 * 	 *
	 * @exception StandardException		Thrown on error
	 */

/** @see RequiredRowOrdering#sortNeeded */

/** @see RequiredRowOrdering#sortNotNeeded */

/**
	 * Remap all ColumnReferences in this tree to be clones of the
	 * underlying expression.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Get whether or not a sort is needed.
	 *
	 * @return Whether or not a sort is needed.
	 */

/**
	 * Determine whether or not this RequiredRowOrdering has a
	 * DESCENDING requirement for the column referenced by the
	 * received ColumnReference.
	 */

/**
     * @return {@code true} if the {@code ORDER BY} is attached to a
     * {@literal }, i.e. a {@code VALUES} clause.
     */

