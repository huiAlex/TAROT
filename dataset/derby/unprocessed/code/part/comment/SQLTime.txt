/**
     * Convert a SQL TIME to a JDBC java.sql.Timestamp.
     * 
     * Behaviour is to set the date portion of the Timestamp
     * to the actual current date, which may not match the
     * SQL CURRENT DATE, which remains fixed for the lifetime
     * of a SQL statement. JDBC drivers (especially network client drivers)
     * could not be expected to fetch the CURRENT_DATE SQL value
     * on every query that involved a TIME value, so the current
     * date as seen by the JDBC client was picked as the logical behaviour.
     * See DERBY-1811.
	 */

/**
		Return my format identifier.

			*/

/** 
		@exception IOException error writing data

	*/

/**
	 * 	 *
	 * @exception IOException	Thrown on error reading the object
	 */

/** @see DataValueDescriptor#cloneValue */

/**
	 * 	 */

/**
	 * 	 *
	 */

/** 
	 * 	 *
	 * @exception SQLException		Thrown on error
	 */

/**
	 * Orderable interface
	 *
	 *
	 * 	 *
	 * @exception StandardException thrown on failure
	 */

/**
		@exception StandardException thrown on error
	 */

/** no-arg constructor required by Formattable */

/**
     * Construct a time from a string. The allowed time formats are:
     *
     *old ISO and IBM European standard: hh.mm[.ss]
     *IBM USA standard: hh[:mm] {AM | PM}
     *JIS and current ISO: hh:mm[:ss]
     *
     * 
     * @exception StandardException if the syntax is invalid or the value is
     * out of range
     */

/**
     * Construct a time from a string. The allowed time formats are:
     *
     *old ISO and IBM European standard: hh.mm[.ss]
     *IBM USA standard: hh[:mm] {AM | PM}
     *JIS and current ISO: hh:mm[:ss]
     *
     * 
     * @exception StandardException if the syntax is invalid or the value is
     * out of range
     */

/**
	 * Set the value from a correctly typed Time object.
	 * 	 */

/**
		
		@exception StandardException thrown on failure.
	 */

/**
		
		@exception StandardException thrown on failure.
	 */

/**
	 * 	 * 
	 * @exception StandardException		Thrown on error
	 */

/**
	 * 	 * 
	 * @exception StandardException		Thrown on error
	 */

/**
	 * 	 * 
	 * @exception StandardException		Thrown on error
	 */

/**
	 * 	 * 
	 * @exception StandardException		Thrown on error
	 */

/**
	 * 	 * 
	 * @exception StandardException		Thrown on error
	 */

/**
	 * 	 * 
	 * @exception StandardException		Thrown on error
	 */

/** @see DataValueDescriptor#typePrecedence */

/**
	 * Check if the value is null.  
	 *
	 * @return Whether or not value is logically null.
	 */

/**
	 * Get the time value 
	 * Since this is a JDBC object we use the JDBC definition
	 * we use the JDBC definition, see JDBC API Tutorial and Reference
	 * section 47.3.12
	 * Date is set to Jan. 1, 1970
	 *
	 * @return	The localized time value.
	 */

/**
     * Set the time portion of a date-time value into
     * the passed in Calendar object from its encodedTime
     * value. Note that this is only the time down
     * to a resolution of one second. Only the HOUR_OF_DAY,
     * MINUTE and SECOND fields are modified. The remaining
     * state of the Calendar is not modified.
     */

/**
     * Get a java.sql.Time object from an encoded time
     * and nano-second value. As required by JDBC the
     * date component of the Time object will be set to
     * Jan. 1, 1970
     * @param cal Calendar to use for conversion
     * @param encodedTime Derby encoded time value
     * @param nanos number of nano-seconds.
     * @return Valid Time object.
     */

/**
	 * Get the encoded hour value (may be different than hour value for
	 *  	current timezone if value encoded in a different timezone)
	 *
	 * @return	hour value
	 */

/**
	 * Get the encoded minute value (may be different than the minute value for
	 *  	current timezone if value encoded in a different timezone)
	 *
	 * @return	minute value
	 */

/**
	 * Get the encoded second value (may be different than the second value for
	 *  	current timezone if value encoded in a different timezone)
	 *
	 * @return	second value
	 */

/**
	 *	Calculate the encoded time from a Calendar object
	 *	encoded time is hour &lt;&lt; 16 + min &lt;&lt; 8 + sec
	 *  this function is also used by SQLTimestamp 
	 *
	 * @param	cal calendar with time set
	 * @return	encoded time
     *
     * @exception StandardException if the time is not in the DB2 range
	 */

/**
     * Convert a time to a JDBC escape format string
     *
     * @param hour
     * @param minute
     * @param second
     * @param sb The resulting string is appended to this StringBuffer
     */

/**
	 * Get the String version from the encodedTime.
	 *
	 * @return	 string value.
	 */

/**
	 * Compute encoded time value
	 * Time is represented by hour &lt;&lt; 16 + minute &lt;&lt; 8 + seconds
	 */

/** Adding this method to ensure that super class' setInto method doesn't get called
      * that leads to the violation of JDBC spec( untyped nulls ) when batching is turned on.
      */

/**
     * Add a number of intervals to a datetime value. Implements the JDBC escape TIMESTAMPADD function.
     *
     * @param intervalType One of FRAC_SECOND_INTERVAL, SECOND_INTERVAL, MINUTE_INTERVAL, HOUR_INTERVAL,
     *                     DAY_INTERVAL, WEEK_INTERVAL, MONTH_INTERVAL, QUARTER_INTERVAL, or YEAR_INTERVAL
     * @param intervalCount The number of intervals to add
     * @param currentDate Used to convert time to timestamp
     * @param resultHolder If non-null a DateTimeDataValue that can be used to hold the result. If null then
     *                     generate a new holder
     *
     * @return startTime + intervalCount intervals, as a timestamp
     *
     * @exception StandardException
     */

/**
     * Finds the difference between two datetime values as a number of intervals. Implements the JDBC
     * TIMESTAMPDIFF escape function.
     *
     * @param intervalType One of FRAC_SECOND_INTERVAL, SECOND_INTERVAL, MINUTE_INTERVAL, HOUR_INTERVAL,
     *                     DAY_INTERVAL, WEEK_INTERVAL, MONTH_INTERVAL, QUARTER_INTERVAL, or YEAR_INTERVAL
     * @param time1
     * @param currentDate Used to convert time to timestamp
     * @param resultHolder If non-null a NumberDataValue that can be used to hold the result. If null then
     *                     generate a new holder
     *
     * @return the number of intervals by which this datetime is greater than time1
     *
     * @exception StandardException
     */

