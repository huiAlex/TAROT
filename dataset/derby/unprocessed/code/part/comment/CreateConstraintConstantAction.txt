/**
 *	This class  describes actions that are ALWAYS performed for a
 *	constraint creation at Execution time.
 *
 *	 */

/**
	 *	Make one of these puppies.
	 *
	 *  @param constraintName	Constraint name.
	 *  @param constraintType	Constraint type.
     *  @param characteristics  Constraint characteristics
     *  @param forCreateTable   Constraint is being added for a CREATE TABLE
	 *  @param tableName		Table name.
	 *	@param tableId			UUID of table.
	 *  @param schemaName		the schema that table and constraint lives in.
	 *  @param columnNames		String[] for column names
	 *  @param indexAction		IndexConstantAction for constraint (if necessary)
	 *  @param constraintText	Text for check constraint
	 *	@param otherConstraint 	information about the constraint that this references
	 *  @param providerInfo Information on all the Providers
	 */

/**
	 *	This is the guts of the Execution-time logic for CREATE CONSTRAINT.
	 *  
	 *  A constraint is represented as:
	 *  
	 *   ConstraintDescriptor.
	 *  
	 *  If a backing index is required then the index will
	 *  be created through an CreateIndexConstantAction setup
	 *  by the compiler.
	 *  
	 *  Dependencies are created as:
	 *  
	 *   ConstraintDescriptor depends on all the providers collected
     *  at compile time and passed into the constructor.
	 *   For a FOREIGN KEY constraint ConstraintDescriptor depends
     *  on the ConstraintDescriptor for the referenced constraints
     *  and the privileges required to create the constraint.
	 *  

	 *  	 *  	 *		 *
	 * @exception StandardException		Thrown on failure
	 */

/**
	 * Is the constant action for a foreign key
	 *
	 * @return true/false
	 */

/**
	 * Generate an array of column positions for the column list in
	 * the constraint.
	 *
	 * @param td	The TableDescriptor for the table in question
	 * @param columnsMustBeOrderable	true for primaryKey and unique constraints
	 *
	 * @return int[]	The column positions.
	 */

/**
	  *	Get the text defining this constraint.
	  *
	  *	@return	constraint text
	  */

