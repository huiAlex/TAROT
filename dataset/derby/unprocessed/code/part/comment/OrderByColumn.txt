/**
 * An OrderByColumn is a column in the ORDER BY clause.  An OrderByColumn
 * can be ordered ascending or descending.
 *
 * We need to make sure that the named columns are
 * columns in that query, and that positions are within range.
 *
 */

/**
     * If this sort key is added to the result column list then it is at result column position
     * 1 + resultColumnList.size() - resultColumnList.getOrderBySelect() + addedColumnOffset
     * If the sort key is already in the result column list then addedColumnOffset &lt; 0.
     */

/**
     * Constructor.
	 *
	 * @param expression            Expression of this column
     * @param cm                    The context manager
	 */

/**
	 * Convert this object to a String.  See comments in QueryTreeNode.java
	 * for how this should be done for tree printing.
	 *
	 * @return	This object as a String
	 */

/**
	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
	 * how tree printing is supposed to work.
	 *
	 * @param depth		The depth of this node in the tree
	 */

/**
	 * Mark the column as descending order
	 */

/**
	 * Get the column order.  Overrides 
	 * OrderedColumn.isAscending.
	 *
	 * @return true if ascending, false if descending
	 */

/**
	 * Mark the column as ordered NULL values lower than non-NULL values.
	 */

/**
	 * Get the column NULL ordering. Overrides
	 * OrderedColumn.getIsNullsOrderedLow.
	 *
	 * @return true if NULLs ordered low, false if NULLs ordered high
	 */

/**
	 * Get the underlying ResultColumn.
	 *
	 * @return The underlying ResultColumn.
	 */

/**
	 * Get the underlying expression, skipping over ResultColumns that
	 * are marked redundant.
	 */

/**
	 * Bind this column.
	 *
	 * During binding, we may discover that this order by column was pulled
	 * up into the result column list, but is now a duplicate, because the
	 * actual result column was expanded into the result column list when "*"
	 * expressions were replaced with the list of the table's columns. In such
	 * a situation, we will end up calling back to the OrderByList to
	 * adjust the addedColumnOffset values of the columns; the "oblist"
	 * parameter exists to allow that callback to be performed.
	 *
	 * @param target	The result set being selected from
	 * @param oblist    OrderByList which contains this column
	 *
	 * @exception StandardException		Thrown on error
	 * @exception StandardException		Thrown when column not found
	 */

/**
	 * Checks whether the whole expression (OrderByColumn) itself
	 * found in the select clause.
	 * @param target Result set
	 * @return boolean: whether any expression match found
	 * 	 */

/**
	 * This method checks a ColumnReference of this OrderByColumn
	 * against the ColumnReferences of the select clause of the query.
	 * @param target result set
	 * @param crOfExpression the CR to be checked
	 * @return whether a match found or not
	 * 	 */

/**
	 * Pull up this orderby column if it doesn't appear in the resultset
	 *
	 * @param target	The result set being selected from
	 *
	 */

/**
	 * Order by columns now point to the PRN above the node of interest.
	 * We need them to point to the RCL under that one.  This is useful
	 * when combining sorts where we need to reorder the sorting
	 * columns.
	 */

/**
	 * Is this OrderByColumn constant, according to the given predicate list?
	 * A constant column is one where all the column references it uses are
	 * compared equal to constants.
	 */

/**
	 * Remap all the column references under this OrderByColumn to their
	 * expressions.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Reset addedColumnOffset to indicate that column is no longer added
	 *
	 * An added column is one which was artificially added to the result
	 * column list due to its presence in the ORDER BY clause, as opposed to
	 * having been explicitly selected by the user. Since * is not expanded
	 * until after the ORDER BY columns have been pulled up, we may add a
	 * column, then later decide it is a duplicate of an explicitly selected
	 * column. In that case, this method is called, and it does the following:
	 * - resets addedColumnOffset to -1 to indicate this is not an added col
	 * - calls back to the OrderByList to adjust any other added cols
	 */

/**
	 * Adjust addedColumnOffset to reflect that a column has been removed
	 *
	 * This routine is called when a previously-added result column has been
	 * removed due to being detected as a duplicate. If that added column had
	 * a lower offset than our column, we decrement our offset to reflect that
	 * we have just been moved down one slot in the result column list.
	 *
	 * @param gap   offset of the column which has just been removed from list
	 */

/**
	 * Accept the visitor for all visitable children of this node.
	 *
	 * @param v the visitor
	 *
	 * @exception StandardException on error
	 */

