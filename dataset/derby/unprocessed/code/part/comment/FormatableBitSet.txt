/**
 * FormatableBitSet is implemented as a packed array of bytes.
 *
 */

/********************************************************
	**
	**	This class implements Formatable. That means that it
	**	can write itself to and from a formatted stream. If
	**	you add more fields to this class, make sure that you
	**	also write/read them with the writeExternal()/readExternal()
	**	methods.
	**
	**	If, inbetween releases, you add more fields to this class,
	**	then you should bump the version number emitted by the getTypeFormatId()
	**	method.
	**
	********************************************************/

/**
	** Bits are stored as an array of bytes.
	** Bits are numbered starting at 0.  Bits
	** 0..7 go in byte[0], 8..15 in byte[1] and so on.
	** The number of bytes is tracked as part
	** of the byte array.  The number of bits
	** being used is derived by the number of
	** bytes being used and the number of bits
	** being used by the last byte.  The partially
	** unused byte is always byte[byte.length] with the
	** lowest bits being unused.
	**
	** Zero length bits are stored using a
	** zero length byte array, with all bits
	** marked as unused.
	*/

/**
	 * Niladic Constructor
	 */

/**
	 * Constructs a Bit with the initial number of bits
	 */

/**
	 * Constructs a Bit from an array of bytes.  Assume
	 * bytes are all being used.
	 *
	 * @param newValue	The array of bytes to make up the new Bit
	 */

/**
	 * Copy constructor
	 *
	 * @param original the FormatableBitSet to make a copy from
	 */

/**
	 * This method returns true if the following conditions hold:
	 * 1. The number of bits in the bitset will fit into the allocated
	 * byte array. 2. 'lengthAsBits' and 'bitsInLastByte' are
	 * consistent. 3. All unused bits in the byte array are
	 * unset. This represents an invariant for the class, so this
	 * method should always return true.
	 *
	 * The method is public, but is primarily intended for testing and
	 * ASSERTS.
	 * @return true if invariant holds, false otherwise
	 */

/**
	 * Get the length in bytes of a Bit value
	 *
	 * @return	The length in bytes of this value
	 */

/**
	** Get the length in bits
	**
	** @return The length in bits for this value
	**
	** NOTE: could possibly be changed to a long.  As is
	** we are restricted to 2^(31-3) -&gt; 256meg instead
	** of 2^31 (Integer.MAX_VALUE) like other datatypes
	** (or 2 gig).  If it is ever changed to a long
	** be sure to change read/writeExternal which write
	** out the length in bits.
	*/

/**
	 * Get the length in bits -- alias for getLength()
	 *
	 * @return The length in bits for this value
	 */

/**
	 * Get the value of the byte array
	 *
	 * @return	The value of the byte array
	 */

/**
	 * Grow (widen) a FormatableBitSet so that it contains at least N
	 * bits. If the bitset already has more than n bits, this is a
	 * noop. Negative values of n are not allowed.
	 * ASSUMPTIONS: that all extra bits in the last byte are
	 * zero.
	 *
	 * @param n	The number of bits you want.  The bits are
	 *			always added as 0 and are appended to the
	 *			least significant end of the bit array.
	 *
	 */

/**
	 * Shrink (narrow) a FormatableBitSet to N bits. N may not be
	 * larger than the current bitset size, or negative.
	 *
	 * @param n	The number of bits the caller wants.  The
	 * 			bits are always removed from the
	 *			least significant end of the bit array.
	 */

/**
	 * Bit equivalence.  Compare this with other.
	 * If the length is different, then cannot be
	 * equal so short circuit.  Otherwise, rely on
	 * compare().  Note that two zero length bits are
	 * considered equal.
	 *
	 * @param other	the other bit to compare to
	 *
	 * @return TRUE|FALSE
	 */

/**
	 * Bit comparison.  Compare this with other.
	 * Will always do a byte by byte compare.
	 *
	 * Given 2 similar bits of unequal lengths (x and y),
	 * where x.getLength() &lt; y.getLength() but where:
	 *
	 *	 x[0..x.getLength()] == y[0..x.getLength()]
	 *
	 * then x &lt; y.
	 *
	 *
	 * @param other the other bit to compare to
	 *
	 * @return -1	- if other &lt;  this
	 *			0	- if other == this
	 *			1	- if other &gt;  this
	 *
	 */

/**
     * Produce a hash code by putting the value bytes into an int, exclusive OR'ing
     * if there are more than 4 bytes.
     *
     * @return the hash code
     */

/**
	 * Bit isSet
	 *
	 * @param position	the bit to check
	 *
	 */

/**
	 * Bit get -- alias for isSet()
	 *
	 * @param position	the bit to check
	 *
	 */

/**
	 * Bit set
	 *
	 * @param position	the bit to set
	 *
	 */

/**
	 * Bit clear
	 *
	 * @param position	the bit to clear
	 *
	 */

/**
	  Clear all the bits in this FormatableBitSet
	  */

/**
	* Figure out how many bytes are needed to
	* store the input number of bits.
	*
	* @param bits	bits
	*
	* @return	the number of bytes
	*/

/**
	* Figure out how many bits are in the last
	* byte from the total number of bits.
	*
	* @param	bits	bits
	*
	* @return	the number of bits
	*/

/**
	 * Format the string into BitSet format: {0, 2, 4, 8} if bits 0, 2, 4, 8
	 * are set.
	 *
	 * @return A new String containing the formatted Bit value
	 */

/**
	 * Statically calculates how many bits can fit into the number of
	 * bytes if this Bit object is externalized.  Only valid for this
	 * implementation of Bit.
	 */

/**
	 * A utility method which treats the byte argument as an 8-bit
	 * bitset and finds the first set bit in that byte. Assumes that
	 * at least one bit in v is set (v!=0).
	 * @param v a non-zero byte to check for set bits
	 * @return the zero-based index of the first set bit in the argument byte
	 */

/**
	 * If any bit is set, return the zero-based bit index of the first
	 * bit that is set. If no bit is set, return -1. By using
	 * anySetBit() and anySetBit(beyondBit), one can quickly go thru
	 * the entire bit array to return all set bit.
	 *
	 * @return the zero-based index of the first bit that is set, or
	 * -1 if no bit is set
	 */

/**
	 * Like anySetBit(), but return any set bit whose number is bigger than
	 * beyondBit. If no bit is set after beyondBit, -1 is returned. 
	 * By using anySetBit() and anySetBit(beyondBit), one can quickly go
	 * thru the entire bit array to return all set bit.
	 *
	 * @param beyondBit Only look at bit that is greater than this bit number.
	 *                  Supplying a value of -1 makes the call equivalent to
	 *                  anySetBit().
	 * @return the bit number of a bit that is set, or -1 if no bit after
	 * beyondBit is set
	 */

/**
	 * Bitwise OR this FormatableBitSet with another
	 * FormatableBitSet. The result is stored in this bitset. The
	 * operand is unaffected. A null operand is treated as an empty
	 * bitset (i.e. a noop). A bitset that is smaller than its operand
	 * is expanded to the same size.
	 *
	 * @param otherBit bitset operand
	 */

/**
     * Copy the bytes from another FormatableBitSet. Assumes that this bit set
     * is at least as large as the argument's bit set.
     */

/**
	 * Bitwise AND this FormatableBitSet with another
	 * FormatableBitSet. The result is stored in this bitset. The
	 * operand is unaffected. A null operand is treated as an empty
	 * bitset (i.e. clearing this bitset). A bitset that is smaller
	 * than its operand is expanded to the same size.
	 * @param otherBit bitset operand
	 */

/**
	 * Bitwise XOR this FormatableBitSet with another
	 * FormatableBitSet. The result is stored in this bitset. The
	 * operand is unaffected. A null operand is treated as an empty
	 * bitset (i.e. a noop). A bitset that is smaller than its operand
	 * is expanded to the same size.
	 * @param otherBit bitset operand
	 */

/**
	 * Get a count of the number of bits that are set.
	 *
	 * @return The number of bits that are set.
	 */

/**
	 * Format: 
	 *		int		length in bits  
	 *		byte[]					
	 *
	 * 	*/

/** 
	 * Note: gracefully handles zero length
	 * bits -- will create a zero length array
	 * with no bits being used.  Fortunately
	 * in.read() is ok with a zero length array
	 * so no special code.
	 * 
	 * WARNING: this method cannot be changed w/o
	 * changing SQLBit because SQLBit calls this
	 * directly w/o calling read/writeObject(), so
	 * the format id is not stored in that case.
	 *
	 * 	 */

/**
	 * Get the formatID which corresponds to this class.
	 *
	 *	@return	the formatID of this class
	 */

