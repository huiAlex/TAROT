/** The id of the next transaction to be started. */

/**
		Get the LockFactory to use with this store.
	*/

/**
		Database creation finished
		@exception StandardException standard Derby error policy
	*/

/**
     * Common work done to create local or global transactions.
     *
     * @param rsf    the raw store factory creating this xact.
     * @param parentTransaction parent transaction (if this is a nested user transaction)
     * @param cm     the current context manager to associate the xact with.
     * @param compatibilitySpace 
     *               if null, use the transaction being created, else if 
     *               non-null use this compatibilitySpace.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
		Find the TransactionTableEntry with the given ID and make the passed in
		transaction assume the identity and properties of that
		TransactionTableEntry.
		Used in recovery only.
	*/

/**
		Rollback all active transactions that has updated the raw store.
		Use the recovery Transaction that is passed in to do all the work.
		Used in recovery only.

		
		Transactions are rolled back in the following order:
		
		internal transactions in reversed beginXact chronological order,
		all other transactions in reversed beginXact chronological order,
		

		@param recoveryTransaction use this transaction to do all the user 
                                   transaction work

		@exception StandardException any exception thrown during rollback
	*/

/**
        Run through all prepared transactions known to this factory 
        and restore their state such that they remain after recovery, and
        can be found and handled by a XA transaction manager.  This includes
        creating a context manager for each, pushing a xact context, and
        reclaiming update locks on all data changed by the transaction.

        Expected to be called just after the redo and undo recovery loops, 
        where the transaction table should be empty except for prepared
        xacts.

		Used only in recovery.

		@exception StandardException Derby Standard Error policy
	*/

/**
		Get the earliest log instant that is still active, ie, the first log
		record logged by the earliest transaction that is still active.
		
		The logging system must guarentee that the transaction table is
		populated in the order transactions are started.
		Used in recovery only.
	*/

/**
		Really this is just a convience routine for callers that might not
		have access to a log factory.
	*/

/**
	**	Set the shortTranId, this is called by the log factory after recovery
	*/

/**
		Create a new RawTransaction, a context for it and push the context
		onto the current context manager.  Then add the transacion to the
		transaction table.

		@param contextName the name of the transaction context
		@param xact the Transaction object
		@param abortAll if true, then any error will abort the whole
		transaction.  Otherwise, let XactContext.cleanupOnError decide what to
		do
		@param rsf the raw store factory
		@param excludeMe during systeme quiesce, i.e., this transaction should
		not be allowed to be active during a quiesce state.


		@exception StandardException Standard Derby error policy

	*/

/**
		Add a transaction to the list of transactions that has updated
		the raw store.  
		
		This is called underneath the BeginXact log operation's doMe method.
		The logging system must guarentee that transactions are added in the
		true order they are started, as defined by the order of beginXact log
		record in the log.
	*/

/**
		Remove a transaction from the list of transactions that has updated the
		raw store.
	*/

/**
        Change state of transaction to prepared.  Used by recovery to update
        the transaction table entry to prepared state.
	*/

/**
		Submit this post commit work to the post commit daemon
	*/

/**
		Returns true if there is no in flight updating tranasaction.
		Caller must be aware that if there is no other mechanism to stop
		transactions from starting and ending, then this information is
		outdated as soon as it is reported.

		Only call this function in special times - e.g, during recovery
	*/

/**
     * Check if there are any prepared transanctions in the 
     * transaction table. 
     *
     * Caller must be aware that if there is no other mechanism to stop
     * transactions from starting and ending, then this information is
     * outdated as soon as it is reported.
     *
     * @return     true if there are prepared 
     *              transactions in the transaction table,
     *              false otherwise.
     */

/**
		remove the transaction Id an return false iff the transaction is found
		in the table and it doesn't need exclusion from quiesce state
	 */

/**
		Make a new UUID for whomever that wants it
	*/

/**
		Get a locking policy for a transaction.
	*/

/**
		Return the transaction table to be logged with the checkpoint operation
	 */

/**
		Use this transaction table, which is gotten from a checkpoint
		operation.  Use ONLY during recovery.
	 */

/**
	 * @return false, if the Database creation finished
	 */

/**
	 * Return the module providing XAresource interface to the transaction 
     * table. 
     *
	 * @exception StandardException Standard Derby exception policy.
	 */

/**
     * Block the online backup. Backup needs to be blocked while 
     * executing any unlogged operations or any opearation that 
     * prevents from  making a consistent backup.
     * 
     * @param wait if true, waits until the backup 
     *             is blocked. 
     * @return     true if backup is blocked.
     *			   false otherwise.
     */

/**
     * Unblock the backup, a backup blocking operation finished. 
	 */

/**
	 * Checks if there are any backup blocking operations in progress and 
	 * prevents new ones from starting until the backup is finished. 
	 * If backup blocking operations are in progress and   wait 
	 * parameter value is true, then it will wait for the current 
	 * backup blocking operations to finish. 
	 * 
	 * A Consistent backup can not be made if there are any backup 
	 * blocking operations (like unlogged operations) are in progress
	 *
	 * @param wait if true, waits for the current backup blocking 
	 *             operation in progress to finish.
	 * @return     true if no backup blocking operations are in 
     *             progress
	 *             false otherwise.
     * @exception RuntimeException if runtime exception occurs, in which case
     *             other threads blocked on backupSemaphore are notified
	 */

/**
	 * Backup completed. Allow backup blocking operations. 
	 */

/**
     * Privileged lookup of the ContextService. Private so that user code
     * can't call this entry point.
     */

/**
     * Privileged Monitor lookup. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged startup. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged startup. Must be private so that user code
     * can't call this entry point.
     */

