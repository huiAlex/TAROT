/**
 * The Database interface provides control over the physical database
 * (that is, the stored data and the files the data are stored in),
 * connections to the database, operations on the database such as
 * backup and recovery, and all other things that are associated
 * with the database itself.
 * 
 * The Database interface does not provide control over things that are part of
 * the Domain, such as users.
 * 
 * I'm not sure what this will hold in a real system, for now
 * it simply provides connection-creation for us.  Perhaps when it boots,
 * it creates the datadictionary object for the database, which all users
 * will then interact with?
 *
 */

/**
     * DataDictionary for this database.
     */

/**
     * Return the engine type that this Database implementation
     * supports.
     * This implementation supports the standard database.
	  */

/**
     * Return the DataDictionary for this database, set up at boot time.
     */

/**
     * Start the replication master role for this database
     * @param dbmaster The master database that is being replicated.
     * @param host The hostname for the slave
     * @param port The port the slave is listening on
     * @param replicationMode The type of replication contract.
     * Currently only asynchronous replication is supported, but
     * 1-safe/2-safe/very-safe modes may be added later.
     * @exception SQLException Thrown on error
     */

/**
     * Stop the replication master role for this database.
     * 
     * @exception SQLException Thrown on error
     */

/**
     * Only a SlaveDatabase can be in replication slave mode. Always 
     * throws an exception
     * 
     * @exception SQLException Always thrown because BasicDatabase cannot 
     * be in replication slave mode
     */

/**
     *      */

/**
		Return the UUID of this database.
        @deprecated
	*/

/** @exception StandardException	Thrown on error */

/** @exception StandardException	Thrown on error */

/** @exception StandardException	Thrown on error */

/** @exception StandardException	Thrown on error */

/**
		Is the database active (open).
	*/

/**
	  	  @exception StandardException Thrown on error.
	*/

/**
	  	  @exception StandardException Thrown on error.
	*/

/**
	  	*/

/**
     * Get the set of database properties from the set stored
     * on disk outside of service.properties.
     */

/**
     * 
     * Return true if the Lucene plugin is loaded.
     * 
     */

/** Get the location of the Lucene indexes */

/**
     * 
     * Get the database StorageFactory.
     * 
     */

/**
     * 
     * Backup Lucene indexes to the backup directory. This assumes
     * that the rest of the database has been backup up and sanity
     * checks have been run.
     * 
     */

/**
     * Privileged lookup of the ContextService. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged Monitor lookup. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged startup. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged startup. Must be private so that user code
     * can't call this entry point.
     */

