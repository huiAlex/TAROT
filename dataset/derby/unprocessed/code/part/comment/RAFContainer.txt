/**
	RAFContainer (short for RandomAccessFileContainer) is a concrete subclass of FileContainer
	for FileContainers which are implemented on java.io.RandomAccessFile.
*/

/**
		Remove the container

		@exception StandardException Standard Derby error policy
	*/

/**
		Read a page into the supplied array.

		 MT - thread safe
		@exception IOException exception reading page
		@exception StandardException Standard Derby error policy
	*/

/**
		Write a page from the supplied array.

		 MT - thread safe

		@exception StandardException Standard Derby error policy
		@exception IOException IO error accessing page
	*/

/**
     * Updates the page array with container header if the page is a first
     * allocation page and encrypts the page data if the database is encrypted.
     *
     * @param pageNumber the page number of the page
     * @param pageData  byte array that has the actual page data.
     * @param encryptionBuf buffer that is used to store encrypted version of
     *      the page, or {@code null} if encryption is to be skipped
     * @param encryptWithNewEngine whether to use the new encryption engine for
     *      encryption (only considered if {@code encryptionBuf != null})
     * @return byte array of the the page data as it should be on the disk.
     */

/**
		Pad the file upto the passed in page offset.
		Returns true if the file needed padding.
	*/

/**
     * Clean the container.
     * 
     * Write out the container header and sync all dirty pages of this
     * container to disk before returning.
     * 
     * checkpoint calls this interface through callbacks by telling
     * the cache manager to clean all containers in the open container
     * cache.  This sync of the file happens as part of writing and then
     * syncing the container header in writeRAFHeader().
     * 
     *
     * @param forRemove Is clean called because container is being removed?
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
		Preallocate some pages if need be
	*/

/**
     * Truncate pages of a container.
     * 
     * Truncate all pages from lastValidPagenum+1 through the end of the file.
     * 
     *
     * @param lastValidPagenum  The page number of the last valid page of the
     *                          file.  All pages after this one are truncated.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
		Write the header of a random access file and sync it
		@param create if true, the container is being created
				if false, the container already exist
		@param syncFile if true, sync the file
	*/

/**
		flush the cache to ensure all of my pages are written to disk

		@exception StandardException Standard Derby error policy
	*/

/**
     * Copy the contents of a {@code StorageFile} to a {@code java.io.File}.
     *
     * @param from the file to copy from
     * @param to the file to copy to
     *      */

/**
     * Remove a file.
     * @param file the file to remove
     *      */

/**
     * Only used by RAFContainer4 (NIO) to reopen RAF when its channel gets
     * closed due to interrupts.
     *
     * @param currentIdentity
     *      */

/**
     * Creates encrypted or decrypted version of the container.
     *
     * Reads all the pages of the container from the original container
     * through the page cache, then either encrypts page data with the new
     * encryption mechanism or leaves the page data un-encrypted, and finally
     * writes the data to the specified new container file.
     * 
     * The encryption and decryption engines used to carry out the
     * cryptographic operation(s) are configured through the raw store, and
     * accessed via the data factory. Note that the pages have already been
     * decrypted before being put into the page cache.
     *
     * @param handle the container handle
     * @param newFilePath file to store the new version of the container in
     * @param doEncrypt tells whether to encrypt or not
     * @exception StandardException Derby Standard error policy
     */

/**
     * Get a RandomAccessFile for accessing a file in read-write mode.
     * @param file the file to access
     * @return a RandomAccessFile
     *      * read-write mode
     *      */

