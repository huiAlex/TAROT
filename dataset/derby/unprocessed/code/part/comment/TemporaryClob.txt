/**
 * A Clob representation where the Clob is stored either in memory or on disk.
 * 
 * Character positions given as input to methods in this class are always
 * 1-based. Byte positions are always 0-based.
 */

/**
     * Connection child assoicated with this Clob.
     * 
     * Currently only used for synchronization in *some* streams associated
     * with the Clob. This suggests something is off wrt. synchronization.
     */

/** Underlying structure holding this Clobs raw bytes. */

/** Tells whether this Clob has been released or not. */

/**
     * Cached character length of the Clob.
     * 
     * A value of {@code 0} is interpreted as unknown length, even though it is
     * a valid value. If the length is requested and the value is zero, an
     * attempt to obtain the length is made by draining the source.
     */

/**
     * Shared internal reader, closed when the Clob is released.
     * This is a performance optimization, and the stream is shared between
     * "one time" operations, for instance {@code getSubString} calls. Often a
     * subset, or the whole, of the Clob is read subsequently and then this
     * optimization avoids repositioning costs (the store does not support
     * random access for LOBs).
     * NOTE: Do not publish this reader to the end-user.
     */

/** The internal reader wrapped so that it cannot be closed. */

/** Simple one-entry cache for character-byte position. */

/**
     * Clones the content of another internal Clob.
     *
     * @param dbName name of the assoicated database
     * @param conChild assoiated connection child
     * @param clob the Clob whose content to clone
     * @return A read-write Clob.
     *      *      */

/**
     * Clones the content of another internal Clob.
     *
     * @param dbName name of the assoicated database
     * @param conChild assoiated connection child
     * @param clob the Clob whose content to clone
     * @param length number of chars in new InternalClob
     * @return A read-write Clob.
     *      *      */

/**
     * Constructs a TemporaryClob object used to perform
     * operations on a CLOB value.
     * @param conChild connection object used to obtain synchronization object
     * 
     *      *      null
     */

/**
     * Releases this Clob by freeing assoicated resources.
     *
     *      */

/**
     * Returns a stream serving the raw bytes of this Clob.
     * 
     * The stream is managed by the underlying byte store, and can serve bytes
     * both from memory and from a file on disk.
     *
     * @return A stream serving the raw bytes of the stream, initialized at
     *      byte position 0.
     *      */

/**
     * Constructs a TemporaryClob object and
     * initializes with a initial String.
     * @param data initial value in String
     * @param conChild connection object used to obtain synchronization object
     */

/**
     * Finds the corresponding byte position for the given UTF-8 character
     * position, starting from the byte position startPos.
     * See comments in SQLChar.readExternal for more notes on
     * processing the UTF8 format.
     *
     * @param charPos character position
     * @return Stream position in bytes for the given character position.
     *      *      the Clob length +1
     *      */

/**
     * Returns the update count of this Clob.
     *
     * @return Update count.
     */

/**
     * Constructs and returns a Writer for the CLOB value.
     *
     * @param pos the initial position in bytes for the Writer
     * @return A Writer to write to the CLOB value.
     *      *      */

/**
     * Constructs and returns a Reader.
     * @param pos initial position of the returned Reader in
     *      number of characters. Expected to be non-negative. The first
     *      character is at position 0.
     * @return A Reader with the underlying CLOB
     *      value as source.
     *      *      */

/**
     *      */

/**
     * Returns number of characters in the Clob.
     *
     * @return The length of the Clob in number of characters.
     *      */

/**
     * Returns the cached character count for the Clob, if any.
     *
     * @return The number of characters in the Clob, or {@code -1} if unknown.
     */

/**
     * Returns the size of the Clob in bytes.
     *
     * @return Number of bytes in the CLOB value.
     *      */

/**
     * Inserts a string at the given position.
     *
     * @param str the string to insert
     * @param insertionPoint the character position to insert the string at
     * @return Number of characters inserted.
     *      *      *      */

/**
     * Tells if this Clob has been released.
     *
     * @return {@code true} if released, {@code false} if not.
     */

/**
     * Tells if this Clob is intended to be writable.
     *
     * @return true
     */

/**
     * Truncate the Clob to the specifiec size.
     *
     * @param newCharLength the new length, in characters, of the Clob
     *      */

/**
     * Converts a string into the modified UTF-8 byte encoding.
     *
     * @param str string to represent with modified UTF-8 encoding
     * @return Byte array representing the string in modified UTF-8 encoding.
     */

/**
     * Copies the content of another Clob into this one.
     *
     * @param clob the Clob to copy from
     *      *      */

/**
     * Copies the content of another Clob into this one.
     *
     * @param clob the Clob to copy from
     * @param charLength number of chars to copy
     *      *      specified length
     *      *      */

/**
     * Makes sure the Clob has not been released.
     * 
     * All operations are invalid on a released Clob.
     *
     *      */

/**
     * Updates the internal state after a modification has been performed on
     * the Clob content.
     * 
     * Currently the state update consists of dicarding the internal reader to
     * stop it from delivering stale data, to reset the byte/char position
     * cache if necessary, and to reset the cached length.
     *
     * @param charChangePosition the position where the Clob change started
     */

/**
     * Returns a character stream descriptor for the stream.
     * 
     * All streams from the underlying source ({@code LOBStreamControl}) are
     * position aware and can be moved to a specific byte position cheaply.
     * The maximum length is not really needed, nor known, at the moment, so
     * the maximum allowed Clob length in Derby is used.
     *
     * @return A character stream descriptor.
     *      */

/**
     * A simple class to hold the byte position for a character position.
     * 
     * The implementation is very simple and is basically intended to speed up
     * writing a sequence of consequtive characters one character at a time.
     * Even though this should be avoided if possible, the penalty of updating a
     * large Clob this way and finding the correct byte position by navigating
     * from the start of the byte stream each time is so severe that a simple
     * caching mechanism should be in place. Note that for other encodings than
     * UTF-8, this might not be a problem if the mapping between character
     * position and byte position is one-to-one.
     * 
     * Note that to ensure consistency between character and byte positions,
     * access to this class must be synchronized externally to avoid caller 1
     * getting the character position, then caller 2 updates the cached values
     * and then caller 1 gets the updated byte position.
     */

/**
         * Returns the last cached byte position.
         *
         * @return The byte position for the last cached character position.
         */

/**
         * Returns the last cached character position.
         *
         * @return The last cached character position.
         */

/**
         * Updates the position cache.
         *
         * @param charPos the character position to cache the byte position for
         * @param bytePos byte position for the specified character position
         */

/**
         * Resets the position cache.
         */

