/**
	Stream that takes a raw input stream and converts it
	to the on-disk format of the binary types by prepending the
	length of the value.
    
    If the length of the stream is known then it is encoded
    as the first bytes in the stream in the defined format.
    
    If the length is unknown then the first four bytes will
    be zero, indicating unknown length.
    
    Note: This stream cannot be re-used. Once end of file is
    reached, the next read call will throw an EOFException
    
    */

/**
     * Number of bytes of length encoding.
     * 
     */

/**
     * Encoding of the length in bytes which will be
     * seen as the first encodedLength.length bytes of
     * this stream.
     */

/**
     * The length of the stream.
     * Unknown if less than 0.
     */

/**
     * The maximum allowed length for the stream.
     * No limit if less than 0.
     */

/**
     * The type of the column the stream is inserted into.
     * Used for length less streams, null if not in use.
     */

/**
     * Create a binary on-disk stream from the given InputStream.
     *
     * The on-disk stream prepends a length encoding, and validates that the
     * actual length of the stream matches the specified length (as according
     * to JDBC 3.0).
     *
     * @param in application's raw binary stream passed into JDBC layer
     * @param length length of the stream
     *      *      This exception should never be exposed to the user, and seeing it
     *      means a programming error exists in the code.
     */

/**
     * Create a binary on-disk stream from the given InputStream
     * of unknown length.
     *
     * A limit is placed on the maximum length of the stream.
     *
     * @param in the application stream
     * @param maximumLength maximum length of the column data is inserted into
     * @param typeName type name for the column data is inserted into
     *      *      name is null. This exception should never be exposed
     *      to the user, and seeing it means a programming error exists in the
     *      code. Although a missing type name is not critical, an exception is
     *      is thrown to signal the intended use of this constructor.
     */

/**
		Read from the wrapped stream prepending the intial bytes if needed.
        If stream has been read, and eof reached, in that case any subsequent
        read will throw an EOFException
	*/

/**
		JDBC 3.0 (from tutorial book) requires that an
		input stream has the correct number of bytes in
		the stream.
	*/

/**
		Read from the wrapped stream prepending the intial bytes if needed.
        If stream has been read, and eof reached, in that case any subsequent
        read will throw an EOFException
	*/

