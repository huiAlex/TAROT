/**
     * Version indentifier of the control row within the page.  
     * 
     * This is the format id of the control row.  The format id is currently
     * one of either StoredFormatIds.ACCESS_BTREE_LEAFCONTROLROW_ID or
     * StoredFormatIds.ACCESS_BTREE_BRANCHCONTROLROW_ID.
     **/

/**
     * Pointer to page which is "left" at the current level.
     * 
     * Currently all pages at a level are doubly linked.  The leftmost page
     * in a level has a leftSiblingPageNumber == 
     * ContainerHandle.INVALID_PAGE_NUMBER.  All key values on the page which
     * is left must precede the first key value on the current page.
     **/

/**
     * Pointer to page which is "right" at the current level.
     * 
     * Currently all pages at a level are doubly linked.  The rightmost page
     * in a level has a rightSiblingPageNumber == 
     * ContainerHandle.INVALID_PAGE_NUMBER.  All key values on the page which
     * is right of the current page must follow the last key value on the 
     * current page.
     **/

/**
     * The parent page of the current page.
     * 
     * For consistency checking it is useful to maintain the parentPageNumber
     * field of the current page.  The root page has a value of 
     * ContainerHandle.INVALID_PAGE_NUMBER in it's parentPageNumber field.
     * 
     * RESOLVE (mikem) - we need to come up with some way to not maintain these,
     * maybe by providing a property on secondary index or a different 2nd 
     * index.
     *
     **/

/**
     * The level of the btree.
     * 
     * The leaf level of the btree is 0.  The first branch level (parent level
     * of the leaf), is level 1.  The height of the btree is (level + 1).
     * 
     * The smallest btree is a one page btree with only a leaf, and no branch
     * pages. 
     **/

/**
     * Is this page the root of the btree?
     * 
     * Currently "1" if the page is the root page, else "0".
     * 
     * RESOLVE (mikem) When real datatype come about, this value should 
     * probably be just a bit in some status word.
     **/

/**
     * A copy of the Conglomerate that describes the owning conglom.
     * 
     * This information is used during logical undo to get the type information
     * so that rows can be compared and searched for.  We may be able to get
     * away with a subset of the information stored in the conglomerate.
     * 
     * RESOLVE (mikem) - change this to only store the info on the root page.
     **/

/**
     * The page that this control row describes.
     **/

/**
     * The page that this control row describes.
     **/

/**
     * row used to replace fetchFieldFromSlot() calls.
     **/

/**
     * FetchDescriptor used to replace fetchFieldFromSlot() calls.
     **/

/**
     * In memory hint about whether to use the last_search_result hint during
     * search.
     **/

/**
     * In memory hint about where to begin the binary search to find a key
     * on the the current control page.
     **/

/**
     * Column number assignments for columns of the control row.
     * 
     * The control row is stored as the first row in a btree page.  The row
     * is an array of columns.  The Control row columns are the columns numbered
     * from ControlRow.CR_COLID_FIRST through ControlRow.CR_COLID_LAST.  The
     * classes which implement the concrete derived classes of ControlRow may
     * add columns to the control row, but they must be added after the 
     * ControlRow columns.
     **/

/**
     * bit sets used to fetch single columns at a time.
     **/

/**
     * Values passed in the flag argument to splitFor.
     **/

/**
     * The slot at which all control rows reside.
     **/

/**
     * No arg constructor.
     * 
     * GetControlRowForPage() will call this constructor when it uses the 
     * monitor to create a control row dynamically given a given format id.
     **/

/**
     * Constructor for making a new control row as part of allocating a new
	 * page.  Fills in all the fields but does not write them anywhere.
     * 
	 * 
	 * Changes to this constructor will probably require changes to the
	 * corresponding accessor(s).
     *
     * @param btree      Static information about the btree.
     * @param page       The page described by this control row.
     * @param parent     The parent page of this page, "null" if this page is 
     *                   root or if not maintaining parent links.
     * @param isRoot     Is this page the root of the tree?
     *
     *
     * @exception StandardException Standard exception policy.
     **/

/**
     * Constructor for making a control row for an existing page.
     * 
     * Not all the fields are filled in; their values will get faulted in from 
     * the page as necessary.
     * 
	 * Classes which extend ControlRow must delegate to this constructor
	 * and may want to override it as well.
	 * Changes to this constructor will probably require changes to the
	 * corresponding accessor(s).
     *
     * @param container  Open container 
     * @param page       The page described by this control row.
     *
     * @exception StandardException Standard exception policy.
     **/

/**
     * Get version of the control row.
     * 
     * Returns the version of the control row, faulting it in from the page
     * if necessary.
     *
	 * @return version of the control row.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Set version of the control row.
     * 
     * Sets the version of the control row.  Updates both the in-memory 
     * control row and the disk copy.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
	 * Get the control row for this page's left sibling, or null if there is no
	 * left sibling (which probably means it's the leftmost page at its level).
	 * Since right-to-left traversal of an index level	is deadlock-prone, this 
	 * method will only get get the left sibling if it can latch it without
	 * waiting.
     *
	 * @exception WaitError if the latch request would have had to wait.
     *
     * @exception StandardException Standard exception policy.
	 **/

/**
	Return the control row for this page's right sibling.  Unlike getting
	the left sibling, it's ok to wait for the right sibling latch since
	left-to-right is the deadlock-free ordering.

    @exception StandardException Standard exception policy.
	**/

/**
	Get the page number of the left sibling. Fault it's value in if it
    hasn't been yet.

    @exception StandardException Standard exception policy.
	**/

/**
	Get the page number of the right sibling. Fault it's value in if it
    hasn't been yet.

    @exception StandardException Standard exception policy.
	**/

/**
	Get the page number of the parent, if it's being maintained.
	Note that there is intentionally no way to get the control
	row for the parent page - the b-tree code NEVER traverses
	up the tree, even in consistency checks.

    @exception StandardException Standard exception policy.
	**/

/**
     * Get format id information for row on page.
     * 
     * Returns the format id information for a row on the page. faulting it 
     * in from the page if necessary.
     *
	 * @return format id of a row on the page.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
	  Get the control row from the given page in the b-tree.
	  The returned control row will be of the correct type
	  for the page (i.e., either a LeafControlRow or a
	  BranchControlRow).

    @exception StandardException Standard exception policy.
	 **/

/**
	Get the control row for the given page if the latch on the
	page can be obtained without waiting, else return null.

    @exception StandardException Standard exception policy.
	**/

/**
	Release this control row's resources.
	**/

/**
    Search this index page.
    
    This method is very performance sensitive.  It is the intention that no
    object allocations occur during the execution of this method.
    
    This method performs a binary search on the page and finds the entry i on
    the page such that entry[i] &lt;= key &lt; entry[i+1].  The result of the search
    is filled into the passed in params structure.

    @param params the parameters of the search

    @exception StandardException could be thrown by underlying raw store 
    operations.

        **/

/**
	 ** Perform consistency checks which are common to all
	 ** pages that derive from ControlRow (both leaf and 
	 ** branch pages).  The checks are:
	 ** 
	 **  This page thinks the parent argument is actually
	 **      its parent.
	 **  The level of this page is 1 less than the level of
	 **      the parent.
	 **  All the rows on the page are in order.
	 **  Both left and right siblings, if they exist, are at
	 **      the same level of this page.
	 **  This page is the left sibling of its right sibling,
	 **      and it's the right sibling of its left sibling.
	 **  The last row on the left sibling is &lt; the first
	 **      row on this page.
	 **  The first row on the right sibling is &gt; than the
	 **      the last row on this page.
	 ** 
	 ** Note that these last two are really only true if there
	 ** are never duplicate keys.

    @exception StandardException Standard exception policy.
	 **/

/**
	 ** Check that all rows on the page are in order.  This
	 ** means that each key is &gt; than the previous key.

    @exception StandardException Standard exception policy.
	 **/

/**
	 ** Perform checks on the siblings of this page: make sure
	 ** that they're at the same level as this page, that they're
	 ** mutually linked together, and that the first/last keys
	 ** on sibling pages are in order.

    @exception StandardException Standard exception policy.
	 **/

/**
	 ** Link this page to the right of the target page.
	 ** 
	 ** Upon entry, this page and the target must be
	 ** latched.  Upon exit, this page and the target
	 ** remain latched.
	 ** 
	 ** This method carefully acquires pages from left
	 ** to right in order to avoid deadlocks.

    @exception StandardException Standard exception policy.
	 */

/**
	 ** Unlink this page from its siblings.  This method
	 ** will give up and return false rather than run the
	 ** risk of a deadlock.
	 ** 
	 ** On entry this page must be latched.  The siblings
	 ** are latched and unlatched during the operation.  Upon
	 ** exit, this page will remain latched, but unlinked from
	 ** its siblings and deallocated from the container.
	 ** 
	 ** The seemingly odd situation that this page will be
	 ** returned latched but deallocated is intentional.
	 ** The container will not be able to reuse this page
	 ** until the latch is released, and the caller may still
	 ** need to read information out of it.

    @exception StandardException Standard exception policy.
	 **/

/**
     * Get the row.
     * 
     * Return the object array that represents the control row for use
     * in raw store fetch, insert, and/or update.
     *
	 * @return The row.
     *
     **/

/**
     * Check consistency of the page and its children, returning the number of 
     * pages seen, and throwing errors if inconsistencies are found.
     * 
     *
	 * @return The identifier to be used to open the conglomerate later.
     *
     * @param btree  The open btree to associate latches/locks with.
     * @param parent The parent page of this page, "null" if this page is 
     *               root or if not maintaining parent links.
     * @param check_other_pages
     *               Should the consistency check go to other pages (this 
     *               option breaks the latch protocol).
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Return the left child pointer for the page.
     * 
     * Leaf pages don't have children, so they override this and return null.
     *
	 * @return The page which is the leftmost child of this page.
     *
     * @param btree  The open btree to associate latches/locks with.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Return the right child pointer for the page.
     * 
     * Leaf pages don't have children, so they override this and return null.
     *
	 * @return The page which is the rightmost child of this page.
     *
     * @param btree  The open btree to associate latches/locks with.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Perform page specific initialization.
     * 
     *
     **/

/**
     * Is the current page the leftmost leaf of tree?
     * 
     *
	 * @return true if the current page is the leftmost leaf of the tree,
     *              else return false.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Is the current page the rightmost leaf of tree?
     * 
     *
	 * @return true if the current page is the rightmost leaf of the tree,
     *              else return false.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
	 ** Perform a recursive search, ultimately returning the latched
	 ** leaf page and row slot after which the given key belongs.
	 ** The slot is returned in the result structure.  If the key
	 ** exists on the page, the resultExact field will be true.  Otherwise,
	 ** resultExact field will be false, and the row slot returned will be
	 ** the one immediately preceding the position at which the key
	 ** belongs.

    @exception StandardException Standard exception policy.
	 **/

/**
     * Get the number of columns in the control row.  
     * 
     * Control rows all share the first columns as defined by this class and
     * then add columns to the end of the control row.  For instance a branch
     * control row add a child page pointer field.
     * 
     *
	 * @return The total number of columns in the control row.
     **/

/**
     * Search and return the left most leaf page.
     * 
	 * Perform a recursive search, ultimately returning the
     * leftmost leaf page which is the first leaf page in the
	 * leaf sibling chain.  (This method might better be called
	 * getFirstLeafPage()).
     *
	 * @return The leftmost leaf page.
     *
     * @param btree  The open btree to associate latches/locks with.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Search and return the right most leaf page.
     * 
	 * Perform a recursive search, ultimately returning the
	 * rightmost leaf page which is the last leaf page in the
	 * leaf sibling chain.  (This method might better be called
	 * getLastLeafPage()).
     *
	 * @return The rightmost leaf page.
     *
     * @param btree  The open btree to associate latches/locks with.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
	 ** Recursively print the tree starting at current node in tree.

    @exception StandardException Standard exception policy.
	 **/

/**
		Called when the page is being evicted from cache or when a rollback
		happened on the page and may possibly have changed the control row's 
        value

			**/

/**
     * Return a new template for reading a data row from the current page.
     * 
     * Default implementation for rows which are the same as the conglomerates
     * template, sub-classes can alter if underlying template is different
     * (for instance branch rows add an extra field at the end).
     *
	 * @return Newly allocated template.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
	 ** Debug toString() method's.
	 **/

/**
     * Dump complete information about control row and rows on the page.
     * 
     *
	 * @return string with all info.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * The standard toString().
     * 
     * This is a concise print out of the info in the control row, does not
     * include anything the page.
     * 
     * 
     **/

