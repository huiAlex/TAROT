/**
The CacheableConglomerate implements a single item in the cache used by
the Conglomerate directory to cache Conglomerates.  It is simply a wrapper
object for the conglomid and Conglomerate object that is read from the
Conglomerate Conglomerate.   It is a wrapper rather than extending 
the conglomerate implementations because we want to cache all conglomerate
implementations: (ie. Heap, B2I, ...).

References to the Conglomerate objects cached by this wrapper will be handed
out to callers.  When this this object goes out of cache callers may still
have references to the Conglomerate objects, which we are counting on java
to garbage collect.  The Conglomerate Objects never change after they are
created.

**/

/**
		Put the object into the No Identity state. 

		 MT - single thread required - Method must only be called be cache 
        manager and the cache manager will guarantee only one thread can be 
        calling it.

	*/

/**
		Get the identity of this object.

		 MT - thread safe.

	*/

/**
		Returns true if the object is dirty. 
        Will only be called when the object is unkept.

		 MT - thread safe 

	*/

/**
		Clean the object.
		It is up to the object to ensure synchronization of the isDirty()
		and clean() method calls.
		
		If forRemove is true then the 
		object is being removed due to an explicit remove request, in this case
		the cache manager will have called this method regardless of the
		state of the isDirty() 

		
		If an exception is thrown the object must be left in the clean state.

		 MT - thread safe - Can be called at any time by the cache manager, 
        it is the responsibility of the object implementing Cacheable to ensure
        any users of the object do not conflict with the clean call.

		@exception StandardException Standard Derby error policy.

	*/

