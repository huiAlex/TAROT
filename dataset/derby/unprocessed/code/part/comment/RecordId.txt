/**
	Implementation of RecordHandle.

	
	MT - Mutable - Immutable identity : Thread Aware -
	The methods of RecordHandle only access the identity
	    of the object and so the object appears immutable to them, as required.
	The methods of Lockable  are single thread required.

*/

/**
		Page the record lives in.
		MT - Immutable
	*/

/**
		The actual record id.
		MT - Immutable
	*/

/**
        Last slot number this record id was at.
    */

/**
		Get my record id.

		
		MT - thread safe

			*/

/**
		Get my page number.

		
		MT - thread safe

			*/

/**
     * What slot number might the record be at?
     * 
     * The raw store guarantees that the record handle of a record will not
     * change, but its slot number may.  When a RecordId is constructed the
     * caller could have provided a slot number, if so return that slot number
     * hint here.  If a hint was not provided then the default 
     * Page.FIRST_SLOT_NUMBER will be returned.
     *
	 * @return The slot number the record handle may be at.
     **/

/**
		Lock me.

		
		MT - Single thread required (methods of Lockable)

			*/

/**
		Determine if this request can be granted.
        
        Implements the grant/wait lock logic for row locks.  See the
        table in RowLock for more information.

		
		MT - Single thread required (methods of Lockable)

			*/

/**
		Is a caller that holds a lock compatible with themselves?
        
        Row locks held in the same transaction are always compatible with
        themselves.

		
		MT - Single thread required (methods of Lockable)

			*/

/**
		Unlock me.

		
		MT - Single thread required (methods of Lockable)

			*/

/**
		Implement value equality.
		
		MT - Thread safe
	*/

/**
		Return a hashcode based on value.
		
		MT - thread safe
	*/

/**
		This lockable wants to participate in the Virtual Lock table.
	 */

