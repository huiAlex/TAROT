/**
 * A ResultSetNode represents a result set, that is, a set of rows.  It is
 * analogous to a ResultSet in the LanguageModuleExternalInterface.  In fact,
 * code generation for a a ResultSetNode will create a "new" call to a
 * constructor for a ResultSet.
 *
 */

/**
     * Convert this object to a String.  See comments in QueryTreeNode.java
     * for how this should be done for tree printing.
     *
     * @return  This object as a String
     */

/**
	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
	 * how tree printing is supposed to work.
	 *
	 * @param depth		The depth of this node in the tree
	 */

/** Return true if this is a statement result set */

/** Return true if this is a cursor target table */

/** Set whether this is a cursor target table */

/** Get the scratch estimate */

/** Set the scratch estimate */

/**
	 * Get the resultSetNumber in this ResultSetNode. Expected to be set during
	 * generate(). Must be public in order to satisfy the Optimizable contract.
	 *
	 * @return int 	The resultSetNumber.
	 */

/**
	 * Get the CostEstimate for this ResultSetNode.
	 *
	 * @return	The CostEstimate for this ResultSetNode.
	 */

/** Set the CostEstimate for this ResultSetNode */

/**
	 * Get the final CostEstimate for this ResultSetNode.
	 *
	 * @return	The final CostEstimate for this ResultSetNode.
	 */

/** Get the final cost estimate which we've set so far */

/** Set the final cost estimate */

/**
	 * Assign the next resultSetNumber to the resultSetNumber in this ResultSetNode. 
	 * Expected to be done during generate().
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Bind the non VTI tables in this ResultSetNode.  This includes getting their
	 * descriptors from the data dictionary and numbering them.
	 *
	 * @param dataDictionary	The DataDictionary to use for binding
	 * @param fromListParam		FromList to use/append to.
	 *
	 * @return	ResultSetNode
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Bind the VTI tables in this ResultSetNode.  This includes getting their
	 * descriptors from the data dictionary and numbering them.
	 *
	 * @param fromListParam		FromList to use/append to.
	 *
	 * @return	ResultSetNode
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Bind the expressions in this ResultSetNode.  This means binding the
	 * sub-expressions, as well as figuring out what the return type is for
	 * each expression.
	 *
	 * @param fromListParam		FromList to use/append to.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Bind the expressions in this ResultSetNode if it has tables.  This means binding the
	 * sub-expressions, as well as figuring out what the return type is for
	 * each expression.
	 *
	 * @param fromListParam		FromList to use/append to.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Bind the expressions in the target list.  This means binding the
	 * sub-expressions, as well as figuring out what the return type is
	 * for each expression.  This is useful for EXISTS subqueries, where we
	 * need to validate the target list before blowing it away and replacing
	 * it with a SELECT true.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Set the type of each parameter in the result column list for this
	 * table constructor.
	 *
	 * @param typeColumns	The ResultColumnList containing the desired result
	 *						types.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Remember that this node is the source result set for an INSERT.
	 */

/** Return true if this is the source result set for an INSERT */

/**
	 * Verify that a SELECT * is valid for this type of subquery.
	 *
	 * @param outerFromList	The FromList from the outer query block(s)
	 * @param subqueryType	The subquery type
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Expand "*" into a ResultColumnList with all of the columns
	 * in the table's result list.
	 *
	 * @param allTableName		The qualifier on the "*"
	 *
	 * @return ResultColumnList The expanded list, or {@code null} if
	 * {@code allTableName} is non-null and doesn't match a table name in
	 * this result set
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Try to find a ResultColumn in the table represented by this FromTable
	 * that matches the name in the given ColumnReference.
	 *
	 * @param columnReference	The columnReference whose name we're looking
	 *				for in the given table.
	 *
	 * @return	A ResultColumn whose expression is the ColumnNode
	 *			that matches the ColumnReference.
	 *		Returns null if there is no match.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Set the result column for the subquery to a boolean true,
	 * Useful for transformations such as
	 * changing:
	 *		where exists (select ... from ...) 
	 * to:
	 *		where (select true from ...)
	 *
	 * NOTE: No transformation is performed if the ResultColumn.expression is
	 * already the correct boolean constant.
	 * 
	 * @param onlyConvertAlls	Boolean, whether or not to just convert *'s
	 * @return ResultSetNode whose resultColumn was transformed; defaults
	 *  to "this" here, but can be overridden by subclasses.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Get the FromList.  Create and return an empty FromList.  (Subclasses
	 * which actuall have FromLists will override this.)  This is useful because
	 * there is a FromList parameter to bindExpressions() which is used as
	 * the common FromList to bind against, allowing us to support
	 * correlation columns under unions in subqueries.
	 *
	 * @return FromList
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Bind the result columns of this ResultSetNode when there is no
	 * base table to bind them to.  This is useful for SELECT statements,
	 * where the result columns get their types from the expressions that
	 * live under them.
	 *
	 * @param fromListParam		FromList to use/append to.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Bind untyped nulls to the types in the given ResultColumnList.
	 * This is used for binding the nulls in row constructors and
	 * table constructors.  In all other cases (as of the time of
	 * this writing), we do nothing.
	 *
	 * @param rcl	The ResultColumnList with the types to bind nulls to
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Preprocess a ResultSetNode - this currently means:
	 *	o  Generating a referenced table map for each ResultSetNode.
	 *  o  Putting the WHERE and HAVING clauses in conjunctive normal form (CNF).
	 *  o  Converting the WHERE and HAVING clauses into PredicateLists and
	 *	   classifying them.
	 *  o  Ensuring that a ProjectRestrictNode is generated on top of every 
	 *     FromBaseTable and generated in place of every FromSubquery.  
	 *  o  Pushing single table predicates down to the new ProjectRestrictNodes.
	 *
	 * @param numTables			The number of tables in the DML Statement
	 * @param gbl				The group by list, if any
	 * @param fromList			The from list, if any
	 *
	 * @return ResultSetNode at top of preprocessed tree.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
     * Find the unreferenced result columns and project them out.
     */

/**
	 * Ensure that the top of the RSN tree has a PredicateList.
	 *
	 * @param numTables			The number of tables in the query.
	 * @return ResultSetNode	A RSN tree with a node which has a PredicateList on top.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Add a new predicate to the list.  This is useful when doing subquery
	 * transformations, when we build a new predicate with the left side of
	 * the subquery operator and the subquery's result column.
	 *
	 * @param predicate		The predicate to add
	 *
	 * @return ResultSetNode	The new top of the tree.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Evaluate whether or not the subquery in a FromSubquery is flattenable.  
	 * Currently, a FSqry is flattenable if all of the following are true:
	 *		o  Subquery is a SelectNode. (ie, not a RowResultSetNode or a UnionNode)
	 *		o  It contains no top level subqueries.  (RESOLVE - we can relax this)
	 *		o  It does not contain a group by or having clause
	 *		o  It does not contain aggregates.
	 *
	 * @param fromList	The outer from list
	 *
	 * @return boolean	Whether or not the FromSubquery is flattenable.
	 */

/**
	 * Get a parent ProjectRestrictNode above us.
	 * This is useful when we need to preserve the
	 * user specified column order when reordering the
	 * columns in the distinct when we combine
	 * an order by with a distinct.
	 *
	 * @return A parent ProjectRestrictNode to do column reordering
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Optimize a ResultSetNode. This means choosing the best access
	 * path for each table under the ResultSetNode, among other things.
	 * 
	 * The only RSNs that need to implement their own optimize() are a 
	 * SelectNode and those RSNs that can appear above a SelectNode in the 
	 * query tree.  Currently, a ProjectRestrictNode is the only RSN that 
	 * can appear above a SelectNode.
	 *
	 * @param dataDictionary	The DataDictionary to use for optimization
	 * @param predicates		The PredicateList to apply.
	 * @param outerRows			The number of outer joining rows
	 *
	 * @return	ResultSetNode	The top of the optimized query tree
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Modify the access paths according to the decisions the optimizer
	 * made.  This can include adding project/restrict nodes,
	 * index-to-base-row nodes, etc.
	 *
	 * @return	The modified query tree
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Modify the access paths according to the decisions the optimizer
	 * made.  This can include adding project/restrict nodes,
	 * index-to-base-row nodes, etc.
	 *
	 * @param predList A list of optimizable predicates that should
	 *  be pushed to this ResultSetNode, as determined by optimizer.
	 * @return The modified query tree
	 * @exception StandardException        Thrown on error
	 */

/**
	 * Set the resultColumns in this ResultSetNode
	 *
	 * @param newRCL		The new ResultColumnList for this ResultSetNode
	 */

/**
	 * Get the resultColumns for this ResultSetNode
	 *
	 * @return ResultColumnList for this ResultSetNode
	 */

/**
	 * Set the referencedTableMap in this ResultSetNode
	 *
	 * @param newRTM	The new referencedTableMap for this ResultSetNode
	 */

/**
	 * Get the referencedTableMap for this ResultSetNode. Must be public
     * in order to satisfy the Optimizable contract.
	 *
	 * @return JBitSet	Referenced table map for this ResultSetNode
	 */

/**
	 * Fill the referencedTableMap with this ResultSetNode.
	 *
	 * @param passedMap	The table map to fill in.
	 */

/**
	 * Check for (and reject) ? parameters directly under the ResultColumns.
	 * This is done for SELECT statements.
	 *
	 * @exception StandardException		Thrown if a ? parameter found
	 *									directly under a ResultColumn
	 */

/**
	 * Check for (and reject) XML values directly under the ResultColumns.
	 * This is done for SELECT/VALUES statements.  We reject values
	 * in this case because JDBC does not define an XML type/binding
	 * and thus there's no standard way to pass such a type back
	 * to a JDBC application.
	 *
	 * @exception StandardException		Thrown if an XML value found
	 *									directly under a ResultColumn
	 */

/**
	 * Rename generated result column names as '1', '2' etc... These will be the result
	 * column names seen by JDBC clients.
	 */

/**
		This method is overridden to allow a resultset node to know
		if it is the one controlling the statement -- i.e., it is
		the outermost result set node for the statement.
	 */

/**
	 * This ResultSet is the source for an Insert.  The target RCL
	 * is in a different order and/or a superset of this RCL.  In most cases
	 * we will add a ProjectRestrictNode on top of the source with an RCL that
	 * matches the target RCL.
	 * NOTE - The new or enhanced RCL will be fully bound.
	 *
	 * @param target            the target node for the insert
	 * @param inOrder           are source cols in same order as target cols?
	 * @param colMap			int array representation of correspondence between
	 *							RCLs - colmap[i] = -1 -&gt; missing in current RCL
	 *								   colmap[i] = j -&gt; targetRCL(i) &lt;-&gt; thisRCL(j+1)
	 * @return a node that replaces this node and whose RCL matches the target
	 * RCL. May return this node if no changes to the RCL are needed, or if the
	 * RCL is modified in-place.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Generate an RCL that can replace the original RCL of this node to
	 * match the RCL of the target for the insert.
	 *
	 * @param target the target node for the insert
	 * @param colMap int array representation of correspondence between
	 *        RCLs - colmap[i] = -1 -&gt; missing in current RCL
	 *               colmap[i] = j -&gt; targetRCL(i) &lt;-&gt; thisRCL(j+1)
	 * @return an RCL that matches the target RCL
	 */

/**
	 * Generate the RC/expression for an unspecified column in an insert.
	 * Use the default if one exists.
	 *
	 * @param targetTD			Target TableDescriptor if the target is not a VTI, null if a VTI.
     * @param targetVTI         Target description if it is a VTI, null if not a VTI
	 * @param columnNumber		The column number
	 * @param dataDictionary	The DataDictionary
	 * @return	The RC/expression for the unspecified column.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Generate a ProjectRestrictNode to put on top of this node if it's the
	 * source for an insert, and the RCL needs reordering and/or addition of
	 * columns in order to match the target RCL.
	 *
	 * @param target the target node for the insert
	 * @param colMap int array representation of correspondence between
	 *        RCLs - colmap[i] = -1 -&gt; missing in current RCL
	 *               colmap[i] = j -&gt; targetRCL(i) &lt;-&gt; thisRCL(j+1)
	 * @return a ProjectRestrictNode whos RCL matches the target RCL
	 */

/**
	  * Create a ResultColumn for a column with a generation clause.
	  */

/**
	  *	Parse a default and turn it into a query tree.
	  *
	  *	@param	defaultText			Text of Default.
	  *
	  * @return	The parsed default as a query tree.
	  *
	  * @exception StandardException		Thrown on failure
	  */

/**
	 * Make a ResultDescription for use in a ResultSet.
	 * This is useful when generating/executing a NormalizeResultSet, since
	 * it can appear anywhere in the tree.
	 *
	 * @return	A ResultDescription for this ResultSetNode.
	 */

/**
		Determine if this result set is updatable or not, for a cursor
		(i.e., is it a cursor-updatable select).  This returns false
		and we expect selectnode to refine it for further checking.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
		return the target table of an updatable cursor result set.
		since this is not updatable, just return null.
	 */

/**
		Mark this ResultSetNode as the target table of an updatable
		cursor.  Most types of ResultSetNode can't be target tables.
		@return true if the target table supports positioned updates.
	 */

/**
		Mark this ResultSetNode as *not* the target table of an updatable
		cursor.
	 */

/**
	 * Generate the code for a NormalizeResultSet.
	   The call must push two items before calling this method
	   
	    pushGetResultSetFactoryExpression
	    the expression to normalize
	   
	 *
	 * @param acb				The ActivationClassBuilder
	 * @param mb				The method to put the generated code in
	 * @param resultSetNumber	The result set number for the NRS
	 * @param resultDescription	The ERD for the ResultSet
	 *
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * The optimizer's decision on the access path for a result set
	 * may require the generation of extra result sets.  For example,
	 * if it chooses an index for a FromBaseTable, we need an IndexToBaseRowNode
	 * above the FromBaseTable (and the FromBaseTable has to change its
	 * column list to match the index.
	 *
	 * This method in the parent class does not generate any extra result sets.
	 * It may be overridden in child classes.
	 *
	 * @return	A ResultSetNode tree modified to do any extra processing for
	 *			the chosen access path
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Search to see if a query references the specifed table name.
	 *
	 * @param name		Table name (String) to search for.
	 * @param baseTable	Whether or not name is for a base table
	 *
	 * @return	true if found, else false
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Return whether or not this ResultSetNode contains a subquery with a
	 * reference to the specified target.
	 * 
	 * @param name	The table name.
	 *
	 * @return boolean	Whether or not a reference to the table was found.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Return whether or not the underlying ResultSet tree will return
	 * a single row, at most.
	 * This is important for join nodes where we can save the extra next
	 * on the right side if we know that it will return at most 1 row.
	 *
	 * @return Whether or not the underlying ResultSet tree will return a single row.
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Return whether or not the underlying ResultSet tree is for a NOT EXISTS
	 * join.
	 *
	 * @return Whether or not the underlying ResultSet tree if for NOT EXISTS.
	 */

/**
	 * Get the optimizer for this result set.
	 * 
	 * @return If this.optimizer has has already been created by the
	 *  getOptimizer() method above, then return it; otherwise,
	 *  return null.
	 */

/** Get the optimizer being used on this result set */

/** Set the optimizer for use on this result set */

/**
	 * Get a cost estimate to use for this ResultSetNode.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Accept the visitor for all visitable children of this node.
	 * 
	 * @param v the visitor
	 *
	 * @exception StandardException on error
	 */

/**
	 * Consider materialization for this ResultSet tree if it is valid and cost effective
	 * (It is not valid if incorrect results would be returned.)
	 *
	 * @return Top of the new/same ResultSet tree.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Return whether or not to materialize this ResultSet tree.
	 *
	 * @return Whether or not to materialize this ResultSet tree.
	 *			would return valid results.
	 *
	 * @exception StandardException		Thrown on error
	 */

/** 
	 * Determine whether or not the specified name is an exposed name in
	 * the current query block.
	 *
	 * @param name	The specified name to search for as an exposed name.
	 * @param schemaName	Schema name, if non-null.
	 * @param exactMatch	Whether or not we need an exact match on specified schema and table
	 *						names or match on table id.
	 *
	 * @return The FromTable, if any, with the exposed name.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Decrement (query block) level (0-based) for 
	 * all of the tables in this ResultSet tree.
	 * This is useful when flattening a subquery.
	 *
	 * @param decrement	The amount to decrement by.
	 */

/**
	 * Push the order by list down from the cursor node
	 * into its child result set so that the optimizer
	 * has all of the information that it needs to 
     * consider sort avoidance. Presumes a new level
     * has been initialized by {@link #pushQueryExpressionSuffix()}.
	 *
	 * @param orderByList	The order by list
	 */

/**
     * Push down the offset and fetch first parameters, if any. This method
     * should be overridden by the result sets that need this. Presumes a new
     * level has been initialized by {@link #pushQueryExpressionSuffix()}.
     *
     * @param offset    the OFFSET, if any
     * @param fetchFirst the OFFSET FIRST, if any
     * @param hasJDBClimitClause true if the clauses were added by (and have the semantics of) a JDBC limit clause
     */

/**
	 * General logic shared by Core compilation and by the Replication Filter
	 * compiler. A couple ResultSets (the ones used by PREPARE SELECT FILTER)
	 * implement this method.
	 *
	 * @param acb	The ExpressionClassBuilder for the class being built
	 * @param mb	The method the expression will go into
	 *
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Get the lock mode for the target of an update statement
	 * (a delete or update).  The update mode will always be row for
	 * CurrentOfNodes.  It will be table if there is no where clause.
	 *
	 * 	 *
	 * @return	The lock mode
	 */

/**
	 * Mark this node and its children as not being a flattenable join.
	 */

/**
	 * Return whether or not the underlying ResultSet tree
	 * is ordered on the specified columns.
	 * RESOLVE - This method currently only considers the outermost table 
	 * of the query block.
	 *
	 * @param	crs					The specified ColumnReference[]
	 * @param	permuteOrdering		Whether or not the order of the CRs in the array can be permuted
     * @param   fbtHolder           List that is to be filled with the FromBaseTable
	 *
	 * @return	Whether the underlying ResultSet tree
	 * is ordered on the specified column.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Return whether or not this ResultSet tree is guaranteed to return
	 * at most 1 row based on heuristics.  (A RowResultSetNode and a
	 * SELECT with a non-grouped aggregate will return at most 1 row.)
	 *
	 * @return Whether or not this ResultSet tree is guaranteed to return
	 * at most 1 row based on heuristics.
	 */

/**
     * Replace any DEFAULTs with the associated tree for the default if
     * allowed, or flag (when inside top level set operator nodes). Subqueries
     * are checked for illegal DEFAULTs elsewhere.
     *
     * @param ttd   The TableDescriptor for the target table.
     * @param tcl   The RCL for the target table.
     * @param allowDefaults true if allowed
     *
     * @exception StandardException         Thrown on error
     */

/**
	 * Is it possible to do a distinct scan on this ResultSet tree.
	 * (See SelectNode for the criteria.)
	 *
	 * @param distinctColumns the set of distinct columns
	 * @return Whether or not it is possible to do a distinct scan on this ResultSet tree.
	 */

/**
	 * Mark the underlying scan as a distinct scan.
	 */

/**
	 * Same goal as adjustForSortElimination above, but this version
	 * takes a RequiredRowOrdering to allow nodes to adjust based on
	 * the ORDER BY clause, if needed.
	 */

/**
	 * Count the number of distinct aggregates in the list.
	 * By 'distinct' we mean aggregates of the form:
	 *	SELECT MAX(DISTINCT x) FROM T
	 *
	 * @return number of aggregates
	 */

/**
     * For ease of pushing order by, offset and fetch first/next clauses into
     * nodes. Clauses on the same nesting level have the same index in the
     * lists, so at any level, any of the lists' elements may be empty. For
     * example,
     *
     * {@code (select * from t order by a fetch next 5 rows only) order by b}
     *
     * would have
     * 
     *
     * When starting pushing clauses for a new level, always remember to do a
     * {@link #push} before adding the clauses via {@link #setOffset}, {@link
     * #setFetchFirst}, {@link #setOrderByList} and {@link
     * #setHasJDBCLimitClause}.
     */

/**
     * Set up a new level for order by and fetch/offset clauses.
     * See Javadoc for {@link ResultSetNode.QueryExpressionClauses}.
     * Overridden by implementors of pushOrderByNode, pushOffsetFetchFirst.
     */

