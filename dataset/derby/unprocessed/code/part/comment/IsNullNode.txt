/**
 * This node represents either a unary 
 * IS NULL or IS NOT NULL comparison operator
 *
 */

/**
     * If {@code true}, this node represents a NOT NULL node rather than a
     * NULL node. Note that this state is mutable, cf {@link #getNegation}.
     */

/**
	 * Negate the comparison.
	 *
	 * @param operand	The operand of the operator
	 *
	 * @return UnaryOperatorNode	The negated expression
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Bind a ? parameter operand of the IS [NOT] NULL predicate.
	 *
	 * @exception StandardException		Thrown on error
	 */

/** @see RelationalOperator#usefulStartKey */

/** @see RelationalOperator#usefulStopKey */

/** @see RelationalOperator#getStartOperator */

/** @see RelationalOperator#getStopOperator */

/** @see RelationalOperator#generateOperator */

/** @see RelationalOperator#generateNegate */

/** @see RelationalOperator#getOperator */

/** @see RelationalOperator#compareWithKnownConstant */

/**
	 * 	 *
	 * @exception StandardException		Thrown on error
	 */

/** @see RelationalOperator#equalsComparisonWithConstantExpression */

/** 
	 * 	 *
	 * @exception StandardException	thrown on error
	 */

/**
	 * null operators are defined on DataValueDescriptor.
	 * Overrides method in UnaryOperatorNode for code generation purposes.
	 */

/** @see ValueNode#isRelationalOperator */

/** @see ValueNode#optimizableEqualityNode */

