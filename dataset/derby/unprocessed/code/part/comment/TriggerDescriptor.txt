/**
	 * Niladic constructor, for formatable
	 */

/**
	 * Get the trigger UUID
	 *
	 * @return the id
	 */

/**
	 * Get the trigger name
	 *
	 * @return	the name
	 */

/**
	 * Get the triggers schema descriptor
	 *
	 * @return the schema descriptor
	 *
	 * @exception StandardException on error
	 */

/**
	 * Indicate whether this trigger listens for this
	 * type of event.
	 *
	 * @param event TRIGGER_EVENT_XXXX
	 *
	 * @return true if it listens to the specified event.
	 */

/**
	 * Get the trigger event mask.  Currently, a trigger
	 * may only listen for a single event, though it may
	 * OR multiple events in the future.
	 *
	 * @return the trigger event mask
	 */

/**
	 * Get the time that this trigger was created.
	 *
	 * @return the time the trigger was created
	 */

/**
	 * Is this a before trigger
	 *
	 * @return true if it is a before trigger
	 */

/**
	 * Is this a row trigger
	 *
	 * @return true if it is a before trigger
	 */

/**
	 * Get the trigger action sps UUID
	 *
	 * @return the uuid of the sps action
	 */

/**
	 * Get the trigger action sps from SYSSTATEMENTS. If we find that
	 * the sps is invalid and the trigger is defined at row level and it
	 * has OLD/NEW transient variables through REFERENCES clause, then
	 * the sps from SYSSTATEMENTS may not be valid anymore. In such a 
	 * case, we regenerate the trigger action sql and use that for the
	 * sps and update SYSSTATEMENTS using this new sps. This update of
	 * SYSSTATEMENTS was introduced with DERBY-4874
	 *
	 * @param lcc	The LanguageConnectionContext to use.
	 * @return the trigger action sps
	 *
	 * @exception StandardException on error
	 */

/**
     * Get the SPS for the triggered SQL statement or the WHEN clause.
     *
     * @param lcc the LanguageConnectionContext to use
     * @param isWhenClause {@code true} if the SPS for the WHEN clause is
     *   requested, {@code false} if it is the triggered SQL statement
     * @return the requested SPS
     *      */

/**
	 * Get the trigger when clause sps UUID
	 *
	 * @return the uuid of the sps action
	 */

/**
     * Get the SQL text of the WHEN clause.
     * @return SQL text for the WHEN clause, or {@code null} if there is
     *   no WHEN clause
     */

/**
	 * Get the trigger when clause sps 
	 *
     * @param lcc the LanguageConnectionContext to use
	 * @return the sps of the when clause
	 *
	 * @exception StandardException on error
	 */

/**
	 * Get the trigger table descriptor
	 *
	 * @return the table descripor upon which this trigger
 	 * is declared
	 *
	 * @exception StandardException on error
	 */

/**
	 * Get the referenced table descriptor for this trigger.
	 *
	 * @return the referenced table descriptor
	 *
	 * @exception StandardException on error
	 */

/**
	 * Get the referenced column array for this trigger, used in "alter table
	 * drop column", we get the handle and change it
	 *
	 * @return the referenced column array
	 */

/** Update the array of referenced columns */

/**
	 * Get the referenced column array for the trigger action columns.
	 *
	 * @return the referenced column array
	 */

/** Set the referenced column array for trigger actions */

/**
     * Is this trigger enforced
	 *
     * @return true if it is enforced
	 */

/**
     * Mark this trigger as enforced
	 *
	 */

/**
	 * Mark this trigger as disabled
	 *
	 */

/**
	 * Does this trigger need to fire on this type of
	 * DML?
	 *
	 * @param stmtType	the type of DML 
	 * (StatementType.INSERT|StatementType.UPDATE|StatementType.DELETE)
	 * @param modifiedCols	the columns modified, or null for all
	 *
	 * @return true/false
	 *
	 * @exception StandardException on error
	 */

/**
	 * Get the original trigger definition.
	 *
	 * @return The trigger definition.
	 */

/**
	 * Get whether or not OLD was replaced
	 * in the REFERENCING clause.
	 *
	 * @return Whether or not OLD was replaced
	 * in the REFERENCING clause.
	 */

/**
	 * Get whether or not NEW was replaced
	 * in the REFERENCING clause.
	 *
	 * @return Whether or not NEW was replaced
	 * in the REFERENCING clause.
	 */

/**
	 * Get the old Referencing name, if any,
	 * from the REFERENCING clause.
	 *
	 * @return The old Referencing name, if any,
	 * from the REFERENCING clause.
	 */

/**
	 * Get the new Referencing name, if any,
	 * from the REFERENCING clause.
	 *
	 * @return The new Referencing name, if any,
	 * from the REFERENCING clause.
	 */

/**		
	 * @return the stored form of this provider
	 *
	 * 	 */

/**
	 * Return the name of this Provider.  (Useful for errors.)
	 *
	 * @return String	The name of this provider.
	 */

/**
	 * Get the provider's UUID
	 *
	 * @return 	The provider's UUID
	 */

/**
	 * Get the provider's type.
	 *
	 * @return char		The provider's type.
	 */

/**
	 * Check that all of the dependent's dependencies are valid.
	 *
	 * @return true if the dependent is currently valid
	 */

/**
	 * Prepare to mark the dependent as invalid (due to at least one of
	 * its dependencies being invalid).
	 *
	 * @param action	The action causing the invalidation
	 * @param p			the provider
	 * @param lcc		the language connection context
	 *
	 * @exception StandardException thrown if unable to make it invalid
	 */

/**
	 * Mark the dependent as invalid (due to at least one of
	 * its dependencies being invalid).  Always an error
	 * for a trigger -- should never have gotten here.
	 *
	 * @param 	lcc the language connection context
	 * @param	action	The action causing the invalidation
	 *
	 * @exception StandardException thrown if called in sanity mode
	 */

/**
	 * Read this object from a stream of stored objects.
	 *
	 * @param in read this.
	 *
	 * @exception IOException					thrown on error
	 * @exception ClassNotFoundException		thrown on error
	 */

/**
	 * Write this object to a stream of stored objects.
	 *
	 * @param out write bytes here.
	 *
	 * @exception IOException		thrown on error
	 */

/**
	 * Get the formatID which corresponds to this class.
	 *
	 *	@return	the formatID of this class
	 */

/** @see TupleDescriptor#getDescriptorType */

/** @see TupleDescriptor#getDescriptorName */

/**
     * Privileged lookup of a Context. Must be private so that user code
     * can't call this entry point.
     */

