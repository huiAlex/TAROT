/**
 * This node is the superclass  for all unary comparison operators, such as is null
 * and is not null.
 *
 */

/**
	 * Bind this comparison operator.  All that has to be done for binding
	 * a comparison operator is to bind the operand and set the result type 
	 * to SQLBoolean.
	 *
	 * @param fromList			The query's FROM list
	 * @param subqueryList		The subquery list being built as we find SubqueryNodes
     * @param aggregates        The aggregate list being built as we find AggregateNodes
	 *
	 * @return	The new top of the expression tree.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Set the type info for this node.  This method is useful both during 
	 * binding and when we generate nodes within the language module outside 
	 * of the parser.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Eliminate NotNodes in the current query block.  We traverse the tree, 
	 * inverting ANDs and ORs and eliminating NOTs as we go.  We stop at 
	 * ComparisonOperators and boolean expressions.  We invert 
	 * ComparisonOperators and replace boolean expressions with 
	 * boolean expression = false.
	 * NOTE: Since we do not recurse under ComparisonOperators, there
	 * still could be NotNodes left in the tree.
	 *
	 * @param	underNotNode		Whether or not we are under a NotNode.
	 *							
	 *
	 * @return		The modified expression
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Negate the comparison.
	 *
	 * @param operand	The operand of the comparison operator
	 *
	 * @return BinaryOperatorNode	The negated expression
	 *
	 * @exception StandardException		Thrown on error
	 */

/** @see RelationalOperator#getColumnOperand */

/** @see RelationalOperator#getColumnOperand */

/** @see RelationalOperator#getOperand */

/** @see RelationalOperator#selfComparison */

/**
	 * 	 */

/**
	 * 	 *
	 * @exception StandardException		Thrown on error
	 */

/** @see RelationalOperator#getStartOperator */

/** @see RelationalOperator#getStopOperator */

/** @see RelationalOperator#generateOrderedNulls */

/**
	 * 	 *
	 * @exception StandardException		Thrown on error
	 */

/** @see RelationalOperator#generateAbsoluteColumnId */

/** @see RelationalOperator#generateRelativeColumnId */

/**
	 * Get the absolute 0-based column position of the ColumnReference from 
	 * the conglomerate for this Optimizable.
	 *
	 * @param optTable	The Optimizable
	 *
	 * @return The absolute 0-based column position of the ColumnReference
	 */

/** @see RelationalOperator#orderedNulls */

/** @see RelationalOperator#isQualifier */

/** 
	 * 	 *
	 * @exception StandardException	thrown on error
	 */

