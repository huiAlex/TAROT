/**
     * Writes a stream with a known length onto the wire.
     * 
     * To avoid DRDA protocol exceptions, the data is truncated or padded as
     * required to complete the transfer. This can be avoided by implementing
     * the request abort mechanism specified by DRDA, but it is rather complex
     * and may not be worth the trouble.
     * 
     * Also note that any exceptions generated while writing the stream will
     * be accumulated and raised at a later time.
     *
     * @param length the byte length of the stream
     * @param in the stream to transfer
     * @param writeNullByte whether or not to write a NULL indicator
     * @param parameterIndex one-based parameter index
     *      *      causing the connection to be broken
     */

/**
     * Pads a value with zeros until it has reached its defined length.
     * 
     * This functionality was introduced to handle the error situation where
     * the actual length of the user stream is shorter than specified. To avoid
     * DRDA protocol errors (or in this case a hang), we have to pad the data
     * until the specified length has been reached. In a later increment the
     * Derby-specific EXTDTA status flag was introduced to allow the client to
     * inform the server that the value sent is invalid.
     *
     * @param leftToRead total number of bytes left to read
     * @param bytesToRead remaining bytes to read before flushing
     * @param writeStatus whether or not to wrote the Derby-specific trailing
     *      EXTDTA status flag (see DRDAConstants)
     * @param status the EXTDTA status (for this data value), ignored if
     *      {@code writeStatus} is {@code false}
     *      */

/**
     * Signal the completion of a DSS Layer A object.
     * 
     * The length of the DSS object will be calculated based on the difference
     * between the start of the DSS, saved in the variable
     * {@link #dssLengthLocation_}, and the current offset into the buffer which
     * marks the end of the data.
     * 
     * In the event the length requires the use of continuation DSS headers,
     * one for each 32k chunk of data, the data will be shifted and the
     * continuation headers will be inserted with the correct values as needed.
     * Note: In the future, we may try to optimize this approach
     * in an attempt to avoid these shifts.
     */

/**
     * Write string with no minimum or maximum limit.
     * @param codePoint codepoint to write  
     * @param string    value to write
     *      */

/**
     * Encode a string and put it into the buffer. A larger buffer will be
     * allocated if the current buffer is too small to hold the entire string.
     *
     * @param string the string to encode
     * @return the number of bytes in the encoded representation of the string
     */

/**
     * Writes a long into the buffer, using six bytes.
     *
     * @param v the value to write
     *      *      represented by six bytes.
     */

/**
     * Writes the Derby-specific EXTDTA status flag to the send buffer.
     * 
     * The existing buffer is flushed to make space for the flag if required.
     *
     * @param flag the Derby-specific EXTDTA status flag
     *      */

