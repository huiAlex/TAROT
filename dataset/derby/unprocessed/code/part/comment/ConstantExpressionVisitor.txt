/**
 * 
 * This visitor replaces a {@code ValueNode} with a node representing a
 * constant value, if the {@code ValueNode} is known to always evaluate to the
 * same value. It may for instance replace a sub-tree representing {@code 1=1}
 * with a constant {@code TRUE}.
 * 
 *
 * 
 * The actual evaluation of the {@code ValueNode}s is performed by invoking
 * {@link ValueNode#evaluateConstantExpressions()} on every {@code ValueNode}
 * in the query tree.
 * 
 *
 * 
 * In contrast to most other visitors, this visitor walks the tree bottom-up.
 * Top-down processing of the tree would only evaluate constant expressions
 * at the leaf level, so for instance {@code (1=1)=(1=2)} would only be
 * simplified to {@code TRUE=FALSE}. With bottom-up processing, the top-level
 * = node will be processed after the leaves, and it sees the intermediate
 * tree {@code TRUE=FALSE} which it is able to transform into the even simpler
 * tree {@code FALSE}.
 * 
 */

/**
     * Visit the node and call {@code evaluateConstantExpressions()} if it
     * is a {@code ValueNode}.
     *
     *      */

/**
     * {@inheritDoc}
     * @return {@code false}, since the entire tree should be visited
     */

/**
     * {@inheritDoc}
     * @return {@code false}, since the entire tree should be visited
     */

/**
     * {@inheritDoc}
     * @return {@code true}, since the tree should be walked bottom-up
     */

