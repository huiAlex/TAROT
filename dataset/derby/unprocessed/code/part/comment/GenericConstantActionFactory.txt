/**
 * Factory for creating ConstantActions.
 *
 * Implemetation note: For most operations, the ResultSetFactory
 *    determines if the operation is allowed in a readonly/target database.
 *    Because we perform JAR add/drop/replace with a utility rather than
 *    using normal language processing we never get a result set for these
 *    operations. For this reason, the ConstantActionFactory rather than
 *    the ResultSetFactory checks if the these operations are allowed.
 *
 */

/**
	 * Get ConstantAction for SET CONSTRAINTS statement.
	 *
     *  @param constraints  The constraints to set, if null,
     *                      set them ALL.
     *  @param initiallyDeferred   ncodes IMMEDIATE (false), DEFERRED (true)
	 */

/**
	 *	Make a ConstantAction for a constraint.
	 *
	 *  @param constraintName	Constraint name.
	 *  @param constraintType	Constraint type.
     *  @param constraintCharacteristics
     *                          Constraint characteristics, see {@link
     *  org.apache.derby.impl.sql.compile.ConstraintDefinitionNode#characteristics}
     *  @param forCreateTable   True if for a CREATE TABLE
	 *  @param tableName		Table name.
	 *	@param tableId			UUID of table.
	 *  @param schemaName		Schema that table lives in.
	 *  @param columnNames		String[] for column names
	 *  @param indexAction		IndexConstantAction for constraint (if necessary)
	 *  @param constraintText	Text for check constraint
	 *	@param otherConstraint	The referenced constraint, if a foreign key constraint
	 *  @param providerInfo Information on all the Providers
	 */

/**
	 *	Make the ConstantAction for a CREATE ALIAS statement.
	 *
	 *  @param aliasName		Name of alias.
	 *  @param schemaName		Alias's schema. 
	 *  @param javaClassName	Name of java class.
	 *  @param aliasType		The alias type
	 */

/**
	 * Make the ConstantAction for a CREATE SCHEMA statement.
	 *
	 *  @param schemaName	Name of table.
	 *  @param aid			Authorizaton id
	 */

/**
	 * Make the ConstantAction for a CREATE ROLE statement.
	 *
	 * @param roleName	Name of role.
	 */

/**
	 * Make the ConstantAction for a SET ROLE statement.
	 *
	 * @param roleName  Name of role
	 * @param type      Literal (== 0)
	 *                  or ?    (== StatementType.SET_ROLE_DYNAMIC)
	 */

/**
	 * Make the ConstantAction for a CREATE SEQUENCE statement.
	 *
	 * @param sequenceName	Name of sequence.
     * @param dataType
     * @param initialValue
     * @param stepValue
     * @param maxValue
     * @param minValue
     * @param cycle
	 */

/**
	 *	Make the ConstantAction for a CREATE TABLE statement.
	 *
	 *  @param schemaName	name for the schema that table lives in.
	 *  @param tableName	Name of table.
	 *  @param tableType	Type of table (e.g., BASE, global temporary table).
	 *  @param columnInfo	Information on all the columns in the table.
	 *		 (REMIND tableDescriptor ignored)
	 *  @param constraintActions	CreateConstraintConstantAction[] for constraints
	 *  @param properties	Optional table properties
	 * @param lockGranularity	The lock granularity.
	 * @param onCommitDeleteRows	If true, on commit delete rows else on commit preserve rows of temporary table.
	 * @param onRollbackDeleteRows	If true, on rollback, delete rows from temp tables which were logically modified. true is the only supported value
	 */

/**
	 *	Make the ConstantAction for a savepoint statement (ROLLBACK savepoint, RELASE savepoint and SAVEPOINT).
	 *
	 *  @param savepointName	name for the savepoint.
	 *  @param statementType	Type of savepoint statement ie rollback, release or set savepoint
	 */

/**
	 *	Make the ConstantAction for a CREATE VIEW statement.
	 *
	 *  @param schemaName	Name of the schema that table lives in.
	 *  @param tableName	Name of table.
	 *  @param tableType	Type of table (in this case TableDescriptor.VIEW_TYPE).
	 *	@param viewText		Text of query expression for view definition
	 *  @param checkOption	Check option type
	 *  @param columnInfo	Information on all the columns in the table.
	 *  @param providerInfo Information on all the Providers
	 *	@param compSchemaId	ID of schema in which the view is to be bound
	 *						when accessed in the future.
	 *		 (REMIND tableDescriptor ignored)
	 */

/**
	 *	Make ConstantAction to drop a constraint.
	 *
	 *  @param constraintName	Constraint name.
	 *	@param constraintSchemaName		Constraint Schema Name
	 *  @param tableName		Table name.
	 *	@param tableId			UUID of table.
	 *  @param tableSchemaName				the schema that table lives in.
	 *  @param indexAction		IndexConstantAction for constraint (if necessary)
	 *	@param behavior			The drop behavior (e.g. StatementType.RESTRICT)
     *  @param verifyType       Verify that the constraint is of this type.
	 */

/**
     *  Make ConstantAction to drop a constraint.
     *
     *  @param constraintName   Constraint name.
     *  @param constraintSchemaName     Constraint Schema Name
     *  @param characteristics  The presumably altered characteristics
     *  @param tableName        Table name.
     *  @param tableId          UUID of table.
     *  @param tableSchemaName  The schema that table lives in.
     *  @param indexAction      IndexConstantAction for constraint (if necessary)
     */

/**
	 *	Make the ConstantAction for a DROP INDEX statement.
	 *
	 *
	 *	@param	fullIndexName		Fully qualified index name
	 *	@param	indexName			Index name.
	 *	@param	tableName			The table name
	 *	@param	schemaName					Schema that index lives in.
	 *  @param  tableId				UUID for table
	 *  @param  tableConglomerateId	heap conglomerate ID for table
	 *
	 */

/**
	 *	Make the ConstantAction for a DROP ALIAS statement.
	 *
	 *
	 *	@param	aliasName			Alias name.
	 *	@param	aliasType			Alias type.
	 *
	 */

/**
	 *	Make the ConstantAction for a DROP ROLE statement.
	 *
	 *	@param	roleName			role name to be dropped
	 *
	 */

/**
	 *	Make the ConstantAction for a DROP SEQUENCE statement.
	 *
     *  @param sd the schema the sequence object belongs to
	 *	@param	seqName	name of sequence to be dropped
	 *
	 */

/**
	 *	Make the ConstantAction for a DROP SCHEMA statement.
	 *
	 *	@param	schemaName			Table name.
	 *
	 */

/**
	 *	Make the ConstantAction for a DROP TABLE statement.
	 *
	 *
	 *	@param	fullTableName		Fully qualified table name
	 *	@param	tableName			Table name.
	 *	@param	sd					Schema that table lives in.
	 *  @param  conglomerateNumber	Conglomerate number for heap
	 *  @param  tableId				UUID for table
	 *  @param  behavior			drop behavior, CASCADE, RESTRICT or DEFAULT
	 *
	 */

/**
	 *	Make the ConstantAction for a DROP VIEW statement.
	 *
	 *
	 *	@param	fullTableName		Fully qualified table name
	 *	@param	tableName			Table name.
	 *	@param	sd					Schema that view lives in.
	 *
	 */

/**
	 *	Make the ConstantAction for a RENAME TABLE/COLUMN/INDEX statement.
	 *
	 *	@param	fullTableName Fully qualified table name
	 *	@param	tableName   Table name.
	 *	@param	oldObjectName   Old object name
	 *	@param	newObjectName   New object name.
	 *	@param	sd    Schema that table lives in.
	 *	@param	tableId   UUID for table
	 *  @param	usedAlterTable	True if used Alter Table command, false if used Rename
	 *  @param	renamingWhat	Value indicates if Rename Column/Index.
	 *
	 */

/**
	 *	Make the ConstantAction for an updatable VTI statement.
	 *
     * @param statementType             Statement type, cf.
     * {@link org.apache.derby.vti.DeferModification#INSERT_STATEMENT} etc.
     * @param deferred                  Deferred processing mode?
	 *
	 * @exception StandardException		Thrown on failure
	 */

/**
	 *	Make the ConstantAction for an updatable VTI statement.
	 *
     * @param statementType    Statement type, cf.
     * {@link org.apache.derby.vti.DeferModification#INSERT_STATEMENT} etc.
     * @param deferred         Deferred processing mode?
     * @param changedColumnIds Array of ids of changed columns
	 *
	 * @exception StandardException		Thrown on failure
	 */

/**
	 * Make the ConstantAction for a LOCK TABLE statement.
	 *
	 *  @param fullTableName		Full name of the table.
	 *  @param conglomerateNumber	Conglomerate number for the heap
	 *  @param exclusiveMode		Whether or not to get an exclusive lock.
	 */

/**
	 * Make the ConstantAction for a SET SCHEMA statement.
	 *
	 *  @param schemaName	Name of schema.
	 *  @param type			Literal, USER or ?
	 */

/**
	 * Make the ConstantAction for a SET TRANSACTION ISOLATION statement.
	 *
	 * @param isolationLevel	The new isolation level.
	 */

/**
	 * Make the ConstantAction for a DROP TRIGGER statement.
	 *
	 * @param	sd					Schema that stored prepared statement lives in.
	 * @param	triggerName			Name of the Trigger
	 * @param	tableId				The table this trigger is defined upon
	 */

/**
	 * Make the constant action for Drop Statistics statement.
	 *
	 * @param sd			Schema Descriptor of the schema in which the object 
	 * resides. 
	 * @param fullTableName full name of the object for which statistics are
	 * being dropped.
	 * @param objectName	 object name for which statistics are being dropped.
	 * @param forTable 		 is it an index or table whose statistics aer being
	 * consigned to the garbage heap?
	 */

/**
	 * Make the constant action for a Grant statement
	 *
	 * @param privileges The list of privileges to be granted
	 * @param grantees The list of grantees
	 */

/**
	 * Make the ConstantAction for a GRANT role statement.
	 *
	 * @param roleNames list of roles to be granted
	 * @param grantees  list of authentication ids (user or roles) to
	 *                  which roles(s) are to be granted
	 */

/**
	 * Make the constant action for a Revoke statement
	 * 
	 * @param privileges The list of privileges to be revokeed
	 * @param grantees The list of grantees
	 */

/**
	 * Make the ConstantAction for a REVOKE role statement.
	 *
	 * @param roleNames list of roles to be revoked
	 * @param grantees  list of authentication ids (user or roles) for whom
	 *                  roles are to be revoked
	 */

/**
	 * Make the ConstantAction for a WHEN [ NOT ] MATCHED clause.
	 */

/**
	 * Make the ConstantAction for a MERGE statement.
	 */

/**
     * Privileged lookup of a Context. Must be private so that user code
     * can't call this entry point.
     */

