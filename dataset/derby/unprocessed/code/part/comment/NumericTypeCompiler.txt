/**
 * This class implements TypeId for the SQL numeric datatype.
 *
 */

/** @see TypeCompiler#interfaceName */

/**
	 * 	 */

/**
	 * Get the method name for getting out the corresponding primitive
	 * Java type.
	 *
	 * @return String		The method call name for getting the
	 *						corresponding primitive Java type.
	 */

/**
	 * 	 */

/**
	 * 	 *
	 * @exception StandardException		Thrown on error
	 */

/** @see TypeCompiler#convertible */

/**
         * Tell whether this type (numeric) is compatible with the given type.
         *
         * @param otherType     The TypeId of the other type.
         */

/** @see TypeCompiler#storable */

/**
     * Return the method name to get a Derby DataValueDescriptor object of the
     * correct type. This implementation returns {@code "getDataValue"}, unless
     * the type is {@code DECIMAL}, in which case {@code "getDecimalDataValue"}
     * is returned.
     */

/**
	 * Get the precision of the operation involving
	 * two of the same types.  Only meaningful for
	 * decimals, which override this.
	 *
	 * @param operator a string representing the operator,
	 *		null means no operator, just a type merge
	 * @param leftType the left type
	 * @param rightType the left type
	 *
	 * @return	the resultant precision
	 */

/**
	 * Get the scale of the operation involving
	 * two of the same types.  Since we don't really
	 * have a good way to pass the resultant scale
	 * and precision around at execution time, we
	 * will model that BigDecimal does by default.
	 * This is good in most cases, though we would
	 * probably like to use something more sophisticated
	 * for division.
	 *
	 * @param operator a string representing the operator,
	 *		null means no operator, just a type merge
	 * @param leftType the left type
	 * @param rightType the left type
	 *
	 * @return	the resultant precision
	 */

