/**
     * This flag is true while bindExpression() is executing. It is used to
     * avoid infinite recursion when bindExpression() is reentered.
     */

/**
     * Generated boolean field to hold the indicator
     * for if any of the parameters to a
     * RETURNS NULL ON NULL INPUT function are NULL.
     * Only set if this node is calling such a function.
     * Set at generation time.
     */

/**
     * Authorization id of user owning schema in which routine is defined.
     */

/**
     * Constructor for a NonStaticMethodCallNode
	 *
	 * @param methodName		The name of the method to call
     * @param javaClassName     The name of the java class that the static
     *                          method belongs to.
     * @param cm                The context manager
	 */

/**
     * Constructor for a StaticMethodCallNode
     *
     * @param methodName        The name of the method to call
     * @param javaClassName     The name of the java class that the static
     *                          method belongs to.
     * @param cm                The context manager
     */

/**
     * Get the aggregate, if any, which this method call resolves to.
     */

/** Flag that this function invocation appears in a GROUP BY clause */

/**
	 * Bind this expression.  This means binding the sub-expressions,
	 * as well as figuring out what the return type is for this expression.
	 *
	 * @param fromList		The FROM list for the query this
     *                      expression is in, for binding columns.
     * @param subqueryList  The subquery list being built as we find SubqueryNodes
     * @param aggregates    The aggregate list being built as we find AggregateNodes
	 *
	 * @return	this or an AggregateNode
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Returns true if the routine permits SQL.
	 */

/**
	 * If this SQL function has parameters which are SQLToJavaValueNode over
	 * JavaToSQLValueNode and the java value node underneath is a SQL function
	 * defined with CALLED ON NULL INPUT, then we can get rid of the wrapper
	 * nodes over the java value node for such parameters. This is because
	 * SQL functions defined with CALLED ON NULL INPUT need access to only
	 * java domain values.
	 * This can't be done for parameters which are wrappers over SQL function
	 * defined with RETURN NULL ON NULL INPUT because such functions need
	 * access to both sql domain value and java domain value. - Derby479
     * This optimization is not available if the outer function is
	 * RETURN NULL ON NULL INPUT. That is because the SQLToJavaNode is
	 * responsible for compiling the byte code which skips the method call if
     * the parameter is null--if we remove the SQLToJavaNode, then we don't
     * compile that check and we get bug DERBY-1030.
	 */

/**
	 * Resolve a routine. Obtain a list of routines from the data dictionary
	 * of the correct type (functions or procedures) and name.
	 * Pick the best routine from the list. Currently only a single routine
	 * with a given type and name is allowed, thus if changes are made to
	 * support overloaded routines, careful code inspection and testing will
	 * be required.
	 */

/**
     * 
     * Coerce an actual method parameter to the declared type of the corresponding
     * routine argument.
     * 
     */

/**
     * Wrap a parameter in a CAST node.
     */

/**
	 * Add code to set up the SQL session context for a stored
	 * procedure or function which needs a nested SQL session
	 * context (only needed for those which can contain SQL).
	 *
     * The generated code calls pushNestedSessionContext.
     * 	 *
	 * @param acb activation class builder
	 * @param mb  method builder
	 */

/**
		Push extra code to generate the casts within the
		arrays for the parameters passed as arrays.
	*/

/**
	 * Convert this object to a String.  See comments in QueryTreeNode.java
	 * for how this should be done for tree printing.
	 *
	 * @return	This object as a String
	 */

/**
	 * Do code generation for this method call
	 *
	 * @param acb	The ExpressionClassBuilder for the class we're generating
	 * @param mb	The method the expression will go into
	 *
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Set default privilege of EXECUTE for this node. 
	 */

