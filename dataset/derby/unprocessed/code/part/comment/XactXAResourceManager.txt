/**************************************************************************
     * Fields of the class
     **************************************************************************
     */

/**************************************************************************
     * Constructors for This class:
     **************************************************************************
     */

/**************************************************************************
     * Private/Protected methods of This class:
     **************************************************************************
     */

/**************************************************************************
     * Public Methods implementing XAResourceManager interface
     **************************************************************************
     */

/**
     * This method is called to commit the global transaction specified by xid.
     * 
     * RESOLVE - how do we map to the "right" XAExceptions.
     * 
     *
     * @param cm       The ContextManager returned from the find() call.
     * @param xid      A global transaction identifier.
     * @param onePhase If true, the resource manager should use a one-phase
     *                 commit protocol to commit the work done on behalf of 
     *                 xid.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Find the given Xid in the transaction table.
     * 
     * This routine is used to find a in-doubt transaction from the list
     * of Xid's returned from the recover() routine.  
     * 
     * In the current implementation it is up to the calling routine
     * to make the returned ContextManager the "current" ContextManager
     * before calls to commit,abort, or forget.  The caller is responsible
     * for error handling, ie. calling cleanupOnError() on the correct
     * ContextManager.
     * 
     * If the Xid is not in the system, "null" is returned.
     * RESOLVE - find out from sku if she wants a exception instead?
     * 
     *
     * @param xid      A global transaction identifier.
     *
     **/

/**
     * This method is called to remove the given transaction 
     * from the transaction table/log.
     * 
     * Used to let the store remove all record from log and transaction
     * table of the given transaction.  This should only be used to 
     * clean up heuristically completed transactions, otherwise commit or
     * abort should be used to act on other transactions.
     * 
     *
     * @param cm       The ContextManager returned from the find() call.
     * @param xid      A global transaction identifier.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * rollback the transaction identified by Xid.
     * 
     * The given transaction is roll'ed back and it's history is not
     * maintained in the transaction table or long term log.
     * 
     *
     * @param cm       The ContextManager returned from the find() call.
     * @param xid      A global transaction identifier.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**************************************************************************
     * Public Methods of XXXX class:
     **************************************************************************
     */

