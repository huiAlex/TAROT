/**
 * Describe a routine (procedure or function) alias.
 *
 *  */

/** PARAMETER STYLE JAVA */

/** PARAMETER STYLE DERBY_JDBC_RESULT_SET */

/** PARAMETER STYLE DERBY */

/** Masks for the sqlOptions field */

/**
     * Types of the parameters. If there are no parameters
     * then this may be null (or a zero length array).
     */

/**
         * Name of each parameter. As of DERBY 10.3, parameter names
         * are optional. If the parameter is unnamed, parameterNames[i]
         * is a string of length 0
         */

/**
		IN, OUT, INOUT
	*/

/**
		Return type for functions. Null for procedures.
	*/

/**
		Parameter style - always PS_JAVA at the moment.
	*/

/**
		This field contains several pieces of information:

        bits 0-3    sqlAllowed = MODIFIES_SQL_DATA, READS_SQL_DATA,CONTAINS_SQL, or NO_SQL

        bit 4         on if function is DETERMINISTIC, off otherwise
        bit 5         on if running with definer's right, off otherwise
    */

/**
		SQL Specific name (future)
	*/

/**
		True if the routine is called on null input.
		(always true for procedures).
	*/

/**
		Create a RoutineAliasInfo for an internal PROCEDURE.
	*/

/**
		Create a RoutineAliasInfo for a PROCEDURE or FUNCTION
	*/

/**
     * Types of the parameters. If there are no parameters
     * then this may return null (or a zero length array).
     */

/** Set the paramter types. Useful if they need to be bound. */

/**
         * Returns an array containing the names of the parameters.
         * As of DERBY 10.3, parameter names are optional (see DERBY-183
         * for more information). If the i-th parameter was unnamed,
         * parameterNames[i] will contain a string of length 0.
         */

/**
	 * Read this object from a stream of stored objects.
	 *
	 * @param in read this.
	 *
	 * @exception IOException					thrown on error
	 * @exception ClassNotFoundException		thrown on error
	 */

/**
     * Old releases (10.3 and before) wrote out the runtime
     * DataTypeDescriptor for routine parameter and return types.
     * 10.4 onwards (DERBY-2775) always writes out the catalog
     * type TypeDescriptor. Here we see what object was read from
     * disk and if it was the old type, now mapped to OldRoutineType,
     * we extract the catalog type and use that.
     * 
     * @param onDiskType The object read that represents the type.
     * @return A type descriptor.
     */

/**
	 * Write this object to a stream of stored objects.
	 *
	 * @param out write bytes here.
	 *
	 * @exception IOException		thrown on error
	 */

/**
	 * Get the formatID which corresponds to this class.
	 *
	 *	@return	the formatID of this class
	 */

/**
	 * Get this alias info as a string.  NOTE: The "ALIASINFO" column
	 * in the SYSALIASES table will return the result of this method
	 * on a ResultSet.getString() call.  That said, since the dblook
	 * utility uses ResultSet.getString() to retrieve ALIASINFO and
	 * to generate the DDL, THIS METHOD MUST RETURN A STRING THAT
	 * IS SYNTACTICALLY VALID, or else the DDL generated by dblook
	 * will be incorrect.
	 */

/**
     * Set the collation type of all string types declared for
     * use in this routine to the given collation type.
     * @param collationType
     */

