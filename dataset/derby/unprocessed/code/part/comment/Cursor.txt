/**
     * Makes the next row the current row. Returns true if the current
     * row position is a valid row position.
     *
     * @param allowServerFetch if false, don't fetch more data from
     * the server even if more data is needed
     * @return {@code true} if current row position is valid
     * @exception SqlException if an error occurs
     */

/**
     * Makes the next row the current row. Returns true if the current
     * row position is a valid row position.
     *
     * @return {@code true} if current row position is valid
     * @exception SqlException if an error occurs
     */

/**
     * Set the value of value of allRowsReceivedFromServer_.
     *
     * @param b a {@code boolean} value indicating whether all
     * rows are received from the server
     */

/**
     * Return {@code true} if all rows are received from the
     * server.
     *
     * @return {@code true} if all rows are received from the
     * server.
     */

/**
     * Calculate the column offsets for a row.
     *
     * @param row row index
     * @param allowServerFetch if true, allow fetching more data from
     * server
     * @return {@code true} if the current row position is a
     * valid row position.
     * @exception SqlException
     * @exception DisconnectException
     */

/**
     * Keep track of updated status for this row.
     *
     * @param isRowUpdated true if row has been updated
     *
     *      */

/**
     * Get updated status for this row. 
     * Minion of ResultSet#rowUpdated.
     *
     *      */

/**
     * Get deleted status for this row. 
     * Minion of ResultSet#rowDeleted.
     *
     *      */

/**
     * Instantiate an instance of Calendar that can be re-used for getting
     * Time, Timestamp, and Date values from this cursor.  Assumption is
     * that all users of the returned Calendar object will clear it as
     * appropriate before using it.
     */

/**
     * Returns a reference to the locator procedures.
     * 
     * These procedures are used to operate on large objects referenced on the
     * server by locators.
     *
     * @return The locator procedures object.
     */

/**
     * Returns the locator for the specified LOB column, or {@link
     * Lob#INVALID_LOCATOR} if the LOB was not sent as a locator. The server
     * may send the LOB value instead of a locator if it is running an old
     * version which doesn't support locators, or if the database it accesses
     * is soft upgraded from a version that doesn't have the necessary
     * stored procedures for locator support.
     * 
     * Note that this method cannot be invoked on a LOB column that is NULL.
     *
     * @param column 1-based column index
     * @return A positive integer locator if valid, {@link Lob#INVALID_LOCATOR}
     *      otherwise.
     */

/**
     * Returns a {@code Blob} object.
     *
     * @param column 1-based column index
     * @param agent associated agent
     * @param toBePublished whether the Blob will be published to the user
     * @return A {@linkplain java.sql.Blob Blob} object.
     *      */

/**
     * Returns a {@code Clob} object.
     *
     * @param column 1-based column index
     * @param agent associated agent
     * @param toBePublished whether the Clob will be published to the user
     * @return A {@code java.sql.Clob} object.
     *      */

