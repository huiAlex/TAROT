/**
     * The underlying Clob object, which may change depending on what the user
     * does with the Clob.
     */

/** Tells whether the Clob has been freed or not. */

/**
     * Creates an empty Clob object.
     *
     * @param con The Connection object associated with this EmbedClob object.
     *      *
     */

/**
     * Creates a Clob on top of a data value descriptor.
     * 
     * This constructor should only be called by {@link EmbedResultSet#getClob}.
     * The data value descriptor may provide a String or a stream
     * as the source of the Clob.
     *
     * @param dvd string data value descriptor providing the Clob source
     * @param con associated connection for the Clob
     *      */

/**
     * Returns the number of characters in the CLOB value
     * designated by this Clob object.
     *
     * @return The length of the CLOB in number of characters.
     * @exception SQLException if obtaining the length fails
     */

/**
     * Gets the Clob contents as a stream of characters.
     * @return A character stream containing the CLOB data.
     * @exception SQLException if there is an error accessing the
     *    CLOB
     */

/**
     * Gets the CLOB value designated by this Clob
     * object as a stream of Ascii bytes.
     * @return An Ascii stream containing the CLOB data. Valid
     *      values in the stream are 0 - 255.
     * @exception SQLException if there is an error accessing the
     *    CLOB value
     */

/**
     * Determines the character position at which the specified
     * Clob object searchstr appears in this
     * Clob object.  The search begins at position
     * start.
     * @param searchClob the Clob object for which to search
     * @param start the position at which to begin searching; the first
     *              position is 1
     * @return the position at which the Clob object appears,
     * else -1; the first position is 1
     * @exception SQLException if there is an error accessing the
     * CLOB value
     */

/**
    Following methods are for the new JDBC 3.0 methods in java.sql.Clob
    (see the JDBC 3.0 spec). We have the JDBC 3.0 methods in Local20
    package, so we don't have to have a new class in Local30.
    The new JDBC 3.0 methods don't make use of any new JDBC3.0 classes and
    so this will work fine in jdbc2.0 configuration.
    */

/**
     * JDBC 3.0
     *
     * Writes the given Java String to the CLOB value that this Clob object
     * designates at the position pos.
     *
     * @param pos the position at which to start writing to the CLOB value that
     *      this Clob object represents
     * @return the number of characters written
     *      */

/**
     * JDBC 3.0
     *
     * Writes len characters of str, starting at character offset, to the CLOB
     * value that this Clob represents.
     *
     * @param pos the position at which to start writing to this Clob object
     * @param str the string to be written to the CLOB value that this Clob
     *      designates
     * @param offset the offset into str to start reading the characters to be
     *      written
     * @param len the number of characters to be written
     * @return the number of characters written
     * @exception SQLException if writing the string fails
     */

/**
     * JDBC 3.0
     *
     * Retrieves a stream to be used to write Ascii characters to the CLOB
     * value that this Clob object represents, starting at position pos.
     *
     * @param pos the position at which to start writing to this Clob object
     * @return the stream to which ASCII encoded characters can be written
     * @exception SQLException if obtaining the stream fails
     */

/**
     * JDBC 3.0
     *
     * Retrieves a stream to be used to write a stream of characters to the CLOB
     * value that this Clob object represents, starting at position pos.
     *
     * @param pos the position at which to start writing to this Clob object
     * @return the stream to which Unicode encoded characters can be written
     * @exception SQLException if obtaining the stream fails
     */

/**
     * JDBC 3.0
     *
     * Truncates the CLOB value that this Clob designates to have a length of
     * len characters
     *
     * @param len the length, in characters, to which the CLOB value should be
     *      truncated, 0 is accepted
     * @exception SQLException if truncating the CLOB value fails
     */

/**
     * Frees the Clob and releases the resources that it holds.
     * 
     * The object is invalid once the free method
     * is called. If free is called multiple times, the
     * subsequent calls to free are treated as a no-op.
     *
     *      */

/**
     * Returns a Reader object that contains a partial
     * Clob value, starting with the character specified by pos,
     * which is length characters in length.
     *
     * @param pos the offset to the first character of the partial value to
     * be retrieved.  The first character in the Clob is at position 1.
     * @param length the length in characters of the partial value to be
     * retrieved.
     * @return Reader through which the partial Clob
     * value can be read.
     *      * number of
     * characters in the {@code Clob} or if {@code pos + length} is greater than
     * {@code Clob.length() +1}
     */

/**
     * Makes a writable clone of the current Clob.
     * 
     * This is called when we have a {@link StoreStreamClob} and the user calls
     * a method updating the content of the Clob. A temporary Clob will then be
     * created to hold the updated content.
     *
     *      *      */

/**
     * Makes a writable clone of the current Clob.
     * 
     * This is called when we have a {@link StoreStreamClob} and the user calls
     * a method updating the content of the Clob. A temporary Clob will then be
     * created to hold the updated content.
     *
     * @param len number of characters to be cloned (should be smaller
     *      than clob length)
     *      *      */

/**
     * Returns the current internal Clob representation.
     * 
     * Care should be taken, as the representation can change when the user
     * performs operations on the Clob. An example is if the Clob content is
     * served from a store stream and the user updates the content. The
     * internal representation will then be changed to a temporary Clob copy
     * that allows updates.
     *
     * @return The current internal Clob representation.
     */

/**     
     * @return locator value for this Clob.
     */

