/**
 * A parameter.  Originally lifted from ParameterValueSet.
 *
 */

/**
	** Our value
	*/

/**
		Compile time JDBC type identifier.
	*/

/**
		Compile time Java class name.
	*/

/**
		Mode of the parameter, from ParameterMetaData
	*/

/**
		Type that has been registered.
	*/

/**
		Scale that has been registered.
	*/

/**
	 * When a decimal output parameter is registered we give it a 
	 * precision
	 */

/**
	 * Constructor for a Parameter
	 *
	 * @param pvs the parameter set that this is part of
	 * @param isReturnOutputParameter true if this is a return output parameter
	 */

/**
	 * Clone myself.  It is a shallow copy for everything but
	 * the underlying data wrapper and its value -- e.g. for
	 * everything but the underlying SQLInt and its int.
	 *
	 * @param pvs the parameter value set
	 *
	 * @return a new generic parameter.
	 */

/**
	 * Set the DataValueDescriptor and type information for this parameter
	 *
	 */

/**
	 * Clear the parameter, unless it is a return
	 * output parameter
	 */

/**
	 * Get the parameter value.  Doesn't check to
	 * see if it has been initialized or not.
	 *
	 * @return the parameter value, may return null
	 */

/**
	 * Mark the parameter as an output parameter.
	 *
	 * @param sqlType	A type from java.sql.Types
	 * @param scale		scale, -1 if no scale arg
	 *
	 * @exception StandardException on error
	 */

/**
	 * Validate the parameters.  This is done for situations where
	 * we cannot validate everything in the setXXX() calls.  In
	 * particular, before we do an execute() on a CallableStatement,
	 * we need to go through the parameters and make sure that
	 * all parameters are set up properly.  The motivator for this
	 * is that setXXX() can be called either before or after
	 * registerOutputParamter(), we cannot be sure we have the types
	 * correct until we get to execute().
	 *
	 * @exception StandardException if the parameters aren't valid
	 */

/**
	 * Return the scale of the parameter.
	 *
	 * @return scale
	 */

/**
	 * get string for param number
	 */

