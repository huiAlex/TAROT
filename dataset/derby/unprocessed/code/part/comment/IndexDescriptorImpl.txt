/**
 * See also {@link org.apache.derby.iapi.sql.dictionary.IndexRowGenerator}.
 * 
 * For a description of how deferrable and non-deferrable constraints
 * are backed differently, including the meaning of the
 * boolean attributes used here, see {@link
 * org.apache.derby.catalog.IndexDescriptor}.
 */

/********************************************************
	**
	**	This class implements Formatable. That means that it
	**	can write itself to and from a formatted stream. If
	**	you add more fields to this class, make sure that you
	**	also write/read them with the writeExternal()/readExternal()
	**	methods.
	**
    **  If, in between releases, you add more fields to this class,
	**	then you should bump the version number emitted by the getTypeFormatId()
	**	method.
	**
	********************************************************/

/**
     * The index represents a PRIMARY KEY or a UNIQUE NOT NULL constraint which
     * is deferrable.
     * {@code true} implies {@code isUnique == false} and
     * {@code isUniqueWithDuplicateNulls == false} and
     * {@code hasDeferrableChecking == true}.
     */

/**
     * The index represents a constraint which is deferrable.
     */

/** Zero-argument constructor for Formatable interface */

/**
     * 
     * 
     *      */

/**
     *
     * @return  {@code true} is the index supports a deferrable constraint
     */

/**
     * The index represents a PRIMARY KEY or a UNIQUE NOT NULL constraint which
     * is deferrable.
     * {@code true} implies {@code #isUnique() == false} and
     * {@code #isUniqueWithDuplicateNulls() == false} and
     * {@code #hasDeferrableChecking() == true}.
     *
     * @return {@code true} is the index supports such a constraint
     */

/** @see IndexDescriptor#isUnique */

/** @see IndexDescriptor#baseColumnPositions */

/** @see IndexDescriptor#getKeyColumnPosition */

/** @see IndexDescriptor#numberOfOrderedColumns */

/** @see IndexDescriptor#indexType */

/** @see IndexDescriptor#isAscending */

/** @see IndexDescriptor#isDescending */

/** @see IndexDescriptor#isAscending */

/** @see IndexDescriptor#setBaseColumnPositions */

/** @see IndexDescriptor#setIsAscending */

/** @see IndexDescriptor#setNumberOfOrderedColumns */

/**
	 * 	 *
	 * @exception IOException	Thrown on read error
	 */

/**
	 * 	 *
	 * @exception IOException	Thrown on write error
	 */

/**
	 * Test for value equality
	 *
	 * @param other		The other indexrowgenerator to compare this one with
	 *
	 * @return	true if this indexrowgenerator has the same value as other
	 */

/**
	  	  */

