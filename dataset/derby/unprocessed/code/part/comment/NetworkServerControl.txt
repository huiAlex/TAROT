/**
     * Creates a NetworkServerControl object that is configured to control
     * a Network Server on a specified port and InetAddress with given
     * user credentials.
     *
     * @param address     The IP address of the Network Server host.
     *                     address cannot be null.
     *
     * @param portNumber  port number server is to used. If &lt;= 0,
     *                    default port number is used
     *
     * @param userName    The user name for actions requiring authorization.
     *
     * @param password    The password for actions requiring authorization.
     *
     *      */

/**
     * Creates a NetworkServerControl object that is configured to control
     * a Network Server on the default host and the default port with given
     * user credentials.
     *
     * @param userName    The user name for actions requiring authorization.
     *
     * @param password    The password for actions requiring authorization.
     *
     *      */

/**
     * 
     * Creates a NetworkServerControl object that is configured to control
     * a Network Server on a  specified port and InetAddress.
     *
     *  Examples: 
     * 
     * 
     * To configure for port 1621 and listen on the loopback address:
     *
     *  NetworkServerControl  util = new
     * NetworkServerControl(InetAddress.getByName("localhost"), 1621);
     * 
     * 
     *
     * @param address     The IP address of the Network Server host.
     *                     address cannot be null.

     * @param portNumber  port number server is to used. If &lt;= 0,
     *                    default port number is used
     *                       
     *      */

/**
     * 
     * Creates a NetworkServerControl object that is configured to control
     * a Network Server on the default host(localhost)
     * and the default port(1527) unless derby.drda.portNumber and 
     * derby.drda.host are set.
     * 
     * new NetworkServerControl() 
     *
     * is equivalent to calling
     *
     * new NetworkServerControl(InetAddress.getByName("localhost"),1527);
     * 
     * 
     *
     *      */

/**
     * main routine for NetworkServerControl
     *
     * @param args  array of arguments indicating command to be executed.
     * See class comments for more information
     */

/**********************************************************************
     * Public NetworkServerControl  commands
     * The server commands throw exceptions for errors, so that users can handle
     * them themselves.
     ************************************************************************
     **/

/** Start a Network Server.
     *  This method will launch a separate thread and start a Network Server.
     *  This method  may return before the server is ready to accept connections.
     *  This will also install a security manager with a default security policy.
     *  Use the ping method to verify that the server has started.
     *
     * 
     *  Note: an alternate method to starting the Network Server with the API,
     *  is to use the derby.drda.startNetworkServer property in 
     *  derby.properties.
     * 
     *  
     * 
     * @param consoleWriter   PrintWriter to which server console will be 
     *                        output. Null will disable console output. 
     *
     * @exception Exception if there is an error starting the server.
     *
     *      */

/**
     * Shutdown a Network Server.
     * Shuts down the Network Server listening on the port and InetAddress
     * specified in the constructor for this NetworkServerControl object.
     *
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Check if the Network Server is started.
     * Excecutes and returns without error if the server has started
     *
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Turn tracing on or off for the specified connection 
     * on the Network Server.
     *
     * @param on true to turn tracing on, false to turn tracing off.
     *
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Turn tracing on or off for all connections on the Network Server.
     *
     * @param connNum connection number. Note: Connection numbers will print
     *                in the Derby error log if logConnections is on
     * @param on true to turn tracing on, false to turn tracing off.
     *
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Turn logging connections on or off. When logging is turned on a message is
     * written to the Derby error log each time a connection 
     * is made.
     *
     * @param on            true to turn on, false to turn  off
     *
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Set directory for trace files. The directory must be on the machine
     * where the server is running.
     *
     * @param traceDirectory    directory for trace files on machine 
     *                          where server is running
     *
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Return classpath and version information about the running 
     * Network Server. 
     *
     * @return sysinfo output
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Return detailed session runtime information about sessions,
     * prepared statements, and memory usage for the running Network Server. 
     *
     * @return run time information
     * @exception Exception throws an exception if an error occurs
     */

/**
     * Set Network Server maxthread parameter.  This is the maximum number 
     * of threads that will be used for JDBC client connections.   setTimeSlice
     * should also be set so that clients will yield appropriately.
     *
     * @param max       maximum number of connection threads.
     *                  If &lt;= 0, connection threads will be created when 
     *                  there are no free connection threads.
     *
     * @exception Exception throws an exception if an error occurs
     *      */

/** Returns the current maxThreads setting for the running Network Server
     * 
     * @return maxThreads setting 
     * @exception Exception throws an exception if an error occurs
     *      */

/**
     * Set Network Server connection time slice parameter.  
     * This should be set and is only relevant if setMaxThreads &gt; 0.
     *
     * @param timeslice number of milliseconds given to each session before yielding to
     *                      another session, if &lt;=0, never yield.
     *
     * @exception Exception throws an exception if an error occurs
     *      */

/** Return the current timeSlice setting for the running Network Server
     * 
     * @return timeSlice  setting
     * @exception Exception throws an exception if an error occurs
     *      */

/**
     * Get current Network server properties
     *
     * @return Properties object containing Network server properties
     * @exception Exception throws an exception if an error occurs
     */

/** Protected methods ***/

/***
     * set the client locale. Used by servlet for localization
     * @param locale  Locale to use
     *
     */

/**
     * Return true if we need to install a Security Manager. All of the
     * following must apply. See DERBY-2196.
     *
     * 
     * The VM was booted with NetworkServerContro.main() as the
     * entry point. This is handled by the fact that this method is only called
     * by main().
     * The VM isn't already running a SecurityManager.
     * The command must be "start".
     * The customer didn't specify the -noSecurityManager flag on the startup command
     * line.
     * 
     */

/**
     * Verify that all prerequisites are met before bringing up a security
     * manager. See DERBY-2196. If prerequisites aren't met, raise an
     * exception which explains how to get up and running. At one point, we were going to require
     * that authentication be enabled before bringing up a security manager.
     * This, however, gave rise to incompatibilities. See DERBY-2757.
     *
     * Currently, this method is a nop.
     */

/**
     * Install a SecurityManager governed by the Basic startup policy. See DERBY-2196.
     */

/**
     * Get the hostname as a value suitable for substituting into the
     * default server policy file. The special
     * wildcard valuse "0.0.0.0" and "::" are forced to be "*" since that is the wildcard
     * hostname understood by SocketPermission. SocketPermission does
     * not understand the "0.0.0.0" and "::" wildcards. IPV6 addresses are
     * enclosed in square brackets. This logic arose from two JIRAs:
     * DERBY-2811 and DERBY-2874.
     */

/**
     *
     * Find the url of the library directory which holds derby.jar and
     * derbynet.jar. The Basic policy assumes that both jar files live in the
     * same directory.
     * 
     */

/**
     *
     * Get the URL of the policy file. Typically, this will be some pointer into
     * derbynet.jar.
     * 
     */

