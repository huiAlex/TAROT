/**
 * 
 * XML utility methods for the JUnit tests.
 * 
 */

/**
     * Determine whether or not the classpath with which we're
     * running has the JAXP API classes required for use of
     * the Derby XML operators.
     */

/**
     * Determine whether or not the classpath with which we're
     * running has a JAXP implementation.
     */

/**
     * Determine if we have support evaluating XPath queries.
     */

/**
     * The filepath for the directory that holds the XML "helper" files
     * (i.e. the files to insert and their schema documents).
     */

/**
     * Return true if the classpath contains JAXP and
     * an implementation of the JAXP interfaces, for example the
     * Xalan classes (this method doesn't care about
     * support for XPath queries).
     */

/**
     * Return true if the classpath meets all of the requirements
     * for use of the SQL/XML operators.
     */

/**
     * Insert the contents of a file into the received column of
     * the received table using "setCharacterStream".  Expectation
     * is that the file is in the directory indicated by 
     * HELPER_FILE_LOCATION.
     *
     * @param conn Connection on which to perform the insert.
     * @param tableName Table into which we want to insert.
     * @param colName Column in tableName into which we want to insert.
     * @param fName Name of the file whose content we want to insert.
     * @param numRows Number of times we should insert the received
     *  file's content.
     */

/**
     * 
     * Determine whether or not the classpath with which we're
     * running contains a JAXP implementation that supports
     * evaluating XPath queries.
     * 
     *
     * 
     * Assumption is that we only get to this method if we already
     * know that there *is* an implementation of JAXP in the classpath.
     * 
     */

/**
     * Return the string form of the URL for the jar file that contains
     * whichever JAXP parser implementation is picked up from the user's
     * classpath.  If the JAXP parser is not in the user's classpath,
     * then it must be embedded within the JVM (either implicitly or else
     * through use of "endorsed standards" jars), in which case we return
     * null.
     */

