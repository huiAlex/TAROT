/** Mutex which guards the internal state of the entry. */

/**
     * The cached object. If it is null, it means that the entry is invalid
     * (either uninitialized or removed).
     */

/** How many threads are currently keeping this entry. */

/**
     * Condition variable used to notify a thread that it is allowed to remove
     * the entry from the cache. If it is null, there is no thread waiting for
     * the entry to be unkept.
     */

/**
     * Condition variable used to notify a thread that the setting of this
     * entry's identity is complete. This variable is non-null when the object
     * is created, and will be set to null when the identity has been set.
     *      */

/**
     * Callback object used to notify the replacement algorithm about events on
     * the cached objects (like accesses and requests for removal).
     */

/**
     * Block until the current thread is granted exclusive access to the entry.
     */

/**
     * Block until this entry's cacheable has been initialized (that is, until
     * {@code settingIdentityComplete()} has been called on this object). If
     * the cacheable has been initialized before this method is called, it will
     * return immediately. The entry must have been locked for exclusive access
     * before this method is called. If the method needs to wait, it will
     * release the lock and reobtain it when it wakes up again.
     */

/**
     * Give up exclusive access.
     */

/**
     * Notify this entry that the initialization of its cacheable has been
     * completed. This method should be called after
     * Cacheable.setIdentity() or
     * Cacheable.createIdentity() has been called.
     */

/**
     * Increase the keep count for this entry. An entry which is kept cannot be
     * removed from the cache.
     *
     * @param accessed if true, notify the entry's callback object
     * that it has been accessed (normally because of calls to create, find or
     * findCached); otherwise, don't notify the callback object
     */

/**
     * Decrement the keep count for this entry. An entry cannot be removed from
     * the cache until its keep count is zero.
     */

/**
     * Check whether or not this entry is kept.
     *
     * @return true if the object is kept
     */

/**
     * Unkeep the entry and wait until no other thread is keeping it. This
     * method is used when a thread requests the removal of the entry. As
     * defined by the contract of CacheManager.remove(), it is the
     * responsibility of the caller to ensure that only a single thread
     * executes this method on an object.
     *
     *      */

/**
     * Set the cached object held by this entry.
     *
     * @param c a cacheable, or null if the entry is about to be
     * removed
     */

/**
     * Return the cached object held by this entry.
     *
     * @return the cached object in this entry
     */

/**
     * Check whether this entry holds a valid object. That is, it must hold
     * a non-null Cacheable and have completed setting its
     * identity.
     *
     * @return true if the entry holds a valid object
     */

/**
     * Set the callback object used to notify the replacement algorithm about
     * actions performed on the cached object.
     *
     * @param cb the callback object
     */

/**
     * Clear this entry and notify the replacement algorithm that the
     * Cacheable can be reused.
     */

