/**
 * TypeId describes the static information about a SQL type
 * independent of any specific attributes of the type such
 * as length. So the TypeId for CHARACTER describes the
 * fundamental information about CHARACTER. A specific
 * type (e.g. CHARACTER(10)) is described by a TypeDescriptor for
 * a catlog type and a DataTypeDescriptor for a runtime type.
 * (note a DataTypeDescriptor adds runtime attributes to the
 * TypeDescriptor it has).
 * 
 * A TypeId is immutable.
   
 * The equals(Object) method can be used to determine if two typeIds are for the same type,
 * which defines type id equality.


    */

/**
         * Various fixed numbers related to datatypes.
         */

/**
         * The following constants define the type precedence hierarchy.
         */

/**
         * Create a TypeId for the given format identifiers using
         * a BaseTypeIdImpl. Used to create the static final variables
         * of this class.
         */

/**
     * Return all of the builtin type ids.
     */

/**
         * Get a TypeId of the given JDBC type.  This factory method is
         * intended to be used for built-in types.  For user-defined types,
         * we will need a factory method that takes a Java type name.
         *
         * @param JDBCTypeId    The JDBC Id of the type, as listed in
         *                      java.sql.Types
         *
         * @return      The appropriate TypeId, or null if there is no such
         *                      TypeId.
         */

/**
     * This factory  method is used for ANSI UDTs. If the className argument is null,
     * then this TypeId will have to be bound.
     *
     * @param schemaName Schema that the type definition lives in.
     * @param unqualifiedName The second part of the ANSI dot-separated name for the type.
     * @param className The Java class which is bound to the schema-qualified name by the CREATE TYPE statement.
     *
     * @return A bound type TypeId describing this ANSI UDT.
     */

/**
         * Get a TypeId for the class that corresponds to the given Java type
         * name.
         * 
         * @param javaTypeName
         *            The name of the Java type
         * 
         * @return A TypeId for the SQL type that corresponds to the Java type,
         *         null if there is no corresponding type.
         */

/**
         * Given a SQL type name return the corresponding TypeId.
         * @param SQLTypeName Name of SQL type
         * @return TypeId or null if there is no corresponding SQL type.
         */

/**
     * Get the TypeId (fundemental type information)
     * for a catalog type.
     * @param catalogType
     * @return TypeId that represents the base type, null if not applicable.
     */

/**
         * Constructor for a TypeId
         *
         * @param formatId      Format id of specific type id.
         * @param baseTypeId    The Base type id
         */

/**
         * we want equals to say if these are the same type id or not.
         */

/**
         * JDBC has its own idea of type identifiers which is different from
         * the Derby internal type ids.  The JDBC type ids are defined
         * as public final static ints in java.sql.Types.  This method translates
         * a Derby internal TypeId to a JDBC type id. For java objects this
         * returns JAVA_OBJECT in Java2 and OTHER in JDK 1.1. For Boolean datatypes,
         * this returns Type.BOOLEAN in JDK1.4 and Type.BIT for jdks prior to 1.4
         *
         * @return      The JDBC type Id for this type
         */

/**
         * Returns the SQL name of the datatype. If it is a user-defined type,
         * it returns the full Java path name for the datatype, meaning the
         * dot-separated path including the package names.
         *
         * @return      A String containing the SQL name of this type.
         */

/**
         * Tell whether this is a built-in type.
         * NOTE: There are 3 "classes" of types:
         *                      built-in                - system provided types which are implemented internally
         *                                                        (int, smallint, etc.)
         *                      system built-in - system provided types, independent of implementation
         *                                                        (date, time, etc.)
         *                      user types              - types implemented outside of the system
         *                                                        (java.lang.Integer, asdf.asdf.asdf, etc.)
         *
         * @return      true for built-in types, false for user-defined types.
         */

/**
         * Get the maximum precision of the type.  For types with variable
         * precision, this is an arbitrary high precision.
         *
         * @return      The maximum precision of the type
         */

/**
         * Get the maximum scale of the type.  For types with variable scale,
         * this is an arbitrary high scale.
         *
         * @return      The maximum scale of the type
         */

/**
         * Does this TypeId represent a TypeId for a StringDataType.
         *
         * @return Whether or not this TypeId represents a TypeId for a StringDataType.
         */

/**
		 * Is this a TypeId for DATE/TIME/TIMESTAMP
		 *
		 * @return true if this is a DATE/TIME/TIMESTAMP
		 */

/**
		 * Is this a TypeId for REAL
		 *
		 * @return true if this is a REAL
		 */

/**
		 * Is this a TypeId for floating point (REAL/DOUBLE)
		 *
		 * @return true if this is a REAL or DOUBLE
		 */

/**
		 * Is this a TypeId for DOUBLE
		 *
		 * @return true if this is a DOUBLE
		 */

/**
		 * Is this a fixed string type?
		 * @return true if this is CHAR
		 */

/** 
		 *Is this a Clob?
		 * @return true if this is CLOB
		 */

/** 
		 *Is this a Blob?
		 * @return true if this is BLOB
		 */

/** 
		 *Is this a LongVarchar?
		 * @return true if this is LongVarchar
		 */

/** 
		 *Is this a LongVarbinary?
		 * @return true if this is LongVarbinary
		 */

/** 
		 * Is this DATE/TIME or TIMESTAMP?
		 *
		 * @return true if this DATE/TIME or TIMESTAMP
		 */

/**
         * Is this a TIMESTAMP?
         *
         * @return true if this is a TIMESTAMP
         */

/** 
         *Is this an XML doc?
         * @return true if this is XML
         */

/**
         * Tell whether this type is orderable, that is, can participate
         * in comparisons.
         *
         * @param cf    A ClassFactory
         *
         * @return      true for orderable types, false for non-orderable types.
         */

/**
         * Get the name of the corresponding Java type.
         *
         * Each SQL type has a corresponding Java type.  When a SQL value is
         * passed to a Java method, it is translated to its corresponding Java
         * type.  For example, when a SQL date column is passed to a method,
         * it is translated to a java.sql.Date.
         *
         * @return      The name of the corresponding Java type.
         */

/**
         * Get the name of the corresponding Java type.
         *
         * This method is used directly from EmbedResultSetMetaData (jdbc)
         * to return the corresponding type (as choosen by getObject).
         * It solves a specific problem for BLOB types where the 
         * getCorrespondingJavaTypeName() is used internall for casting
         * which doesn't work if changed from byte[] to java.sql.Blob.
         * So we do it here instread, to avoid unexpected sideeffects.
         *
         * @return      The name of the corresponding Java type.
         */

/**
         * Get the maximum maximum width of the type (that's not a typo).  For
         * types with variable length, this is the absolute maximum for the type.
         *
         * @return      The maximum maximum width of the type
         */

/**
         * Converts this TypeId, given a data type descriptor (including length/precision),
         * to a string. E.g.
         *
         *                      VARCHAR(30)
         *
         *
         *      For most data types, we just return the SQL type name.
         *
         *      @param  dts     Data type descriptor that holds the length/precision etc. as necessary
         *
         *       @return        String version of datatype, suitable for running through
         *                      the Parser.
         */

/**
         * Is this a type id for a numeric type?
         *
         * @return Whether or not this a type id for a numeric type.
         */

/**
         * Is this a type id for a decimal type?
         *
         * @return Whether or not this a type id for a decimal type.
         */

/**
         * Is this a type id for a boolean type?
         *
         * @return Whether or not this a type id for a boolean type.
         */

/**
         * Is this a type id for a ref type?
         *
         * @return Whether or not this a type id for a ref type.
         */

/**
         * Is this a type id for a concatable type?
         *
         * @return Whether or not this a type id for a concatable type.
         */

/**
         * Is this a type id for a bit type?
         *
         * @return Whether or not this a type id for a bit type.
         */

/**
         * Is this a type id for a LOB type?
         *
         * @return Whether or not this a type id for a LOB type.
         */

/**
         * Is this a type id for a long concatable type?
         *
         * @return Whether or not this a type id for a long concatable type.
         */

/**
         * Is this a type id for a user defined type?
         *
         * @return Whether or not this a type id for a user defined type.
         */

/**
         * Get the formatID which corresponds to this class.
         *
         *      @return the formatID of this class
         */

/** 
         *  Get SQL null value.
         *  @return SQL null value for this type.
         */

/**
         * Is this type StreamStorable?
         *
         * @return      true if this type has variable length.
         */

/**
         * Get the approximate length of this type in bytes.
         * For most datatypes this is just going to be
         * dts.getMaximumWidth().  Some types, such as
         * bit, will override this.
         *
         * @param dts Data type descriptor that holds the 
         *              length/precision etc. as necessary
         *
         * @return the length in bytes
         */

/**
         * Get the base type id that is embedded in this type id.  The base type
         * id is an object with a minimal implementation of TypeId that is intended
         * to be usable on the client side.
         */

/**
         * Get the precision of the merge of two Decimals
         *
         * @param leftType the left type
         * @param rightType the left type
         *
         * @return      the resultant precision
         */

/**
         * Get the scale of the merge of two decimals
         *
         * @param leftType the left type
         * @param rightType the left type
         *
         * @return      the resultant precision
         */

/**
         * Does type hava a declared variable length (defined by the application).
         * Examples are CHAR(10), CLOB(1M).
         * Unbounded long types, like LONG VARCHAR return false here.
         * @return boolean true if type is variable length false if not.  
         */

