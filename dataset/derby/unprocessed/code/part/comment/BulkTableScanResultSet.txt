/**
 * Read a base table or index in bulk.  Most of the
 * work for this method is inherited from TableScanResultSet.
 * This class overrides getNextRowCore (and extends 
 * re/openCore) to use a row array and fetch rows
 * from the Store in bulk  (using fetchNextGroup).
 * 
 * Since it retrieves rows in bulk, locking is not
 * as is usual -- locks may have already been released
 * on rows as they are returned to the user.  Hence,
 * this ResultSet is not suitable for a query running
 * Isolation Level 1, cursor stability.
 * 
 * Note that this code is only accessable from an
 * optimizer override.  If it makes sense to have the
 * optimizer select bulk reads, then this should
 * probably be rolled into TableScanResultSet.
 *
 */

/**
 	 * Constructor.  Just save off the rowsPerRead argument
	 * and pass everything else down to TableScanResultSet
	 * 
	 * 	 *
	 * @exception StandardException thrown on failure to open
	 */

/**
     * Adjust the bulk fetch size according to the parameters. Bulk fetch may
     * be disabled by returning 1 from this method. Disabling of bulk fetch
     * may happen if the cursor is holdable and it contains LOB columns
     * (DERBY-1511) because
     *
     * @param activation the activation for the executing statement
     * @param rowsPerRead how many rows to read in each chunk if a bulk fetch
     * is OK to use
     * @param disableForHoldable whether or not bulk fetch should be disabled
     * for holdable cursors
     * @return the bulk fetch size to use
     */

/**
 	 * Open the scan controller
	 *
	 * @param tc transaction controller will open one if null
     *
	 * @exception StandardException thrown on failure to open
	 */

/**
	 * Open up the result set.  Delegate
	 * most work to TableScanResultSet.openCore().
	 * Create a new array with  rows
	 * for use in fetchNextGroup().
	 *
	 * @exception StandardException thrown on failure to open
	 */

/**
     * Get a blank row by cloning the candidate row and lopping off
     * the trailing RowLocation column for scans done on
     * behalf of MERGE statements.
     */

/**
	 * Reopen the result set.  Delegate
	 * most work to TableScanResultSet.reopenCore().
	 * Reuse the array of rows.
	 *
	 * @exception StandardException thrown on failure to open
	 */

/**
	 * Return the next row (if any) from the scan (if open).
	 * Reload the rowArray as necessary.
	 *
	 * @exception StandardException thrown on failure to get next row
	 */

/**
	 * If the result set has been opened,
	 * close the open scan.  Delegate most
	 * of the work to TableScanResultSet.
	 *
	 * @exception StandardException on error
	 */

/**
	 * Can we get instantaneous locks when getting share row
	 * locks at READ COMMITTED.
	 */

/**
	 * 	 */

