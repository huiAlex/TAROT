/**
 * 
 * A class used for storing information on how to build {@code ExecRow}
 * instances. Typically created by the compiler and used during execution
 * to produce and reset row templates.
 * 
 *
 * 
 * This class must be {@code Formatable} so that it can be stored in the
 * database as part of a stored prepared statement generated for trigger
 * actions or metadata queries. The stored format does not need to be stable
 * across different versions, since the stored prepared statements are
 * discarded on upgrade and will never be read by other Derby versions than
 * the one that originally wrote them.
 * 
 */

/** If true, the row should be an {@code ExecIndexRow}. */

/**
     * Array of templates used for creating NULL values to put in the row.
     * The templates are either {@code DataValueDescriptor}s or
     * {@code DataTypeDescriptor}s.
     */

/** Array of 1-based column numbers for the columns to access. */

/** The number of columns to set in the row. */

/** The highest column number in the row. */

/**
     * Create an instance that produces an {@code ExecRow} instance of
     * the specified size.
     *
     * @param size the number of columns to initialize in the produced row
     * @param indexable {@code true} if the returned row should be an
     * {@code ExecIndexRow}, {@code false} otherwise
     */

/**
     * Public no-arg constructor required by the {@code Formatable} interface.
     * Should not be called directly.
     */

/**
     * Add a template from which a NULL value of the correct type can be
     * created. It should either be a {@code DataValueDescriptor} or a
     * {@code DataTypeDescriptor}.
     *
     * @param column the column number
     * @param columnTemplate a template from which a NULL value can be created
     * (either a {@code DataValueDescriptor} or a {@code DataTypeDescriptor})
     */

/**
     * Build a new {@code ExecRow} instance with the columns specified by
     * the {@link #setColumn(int, Object)} method initialized to empty (NULL)
     * values.
     *
     * @param ef an execution factory used to create a row
     * @return a row initialized with NULL values of the requested types
     */

/**
     * Reset a row by creating fresh NULL values.
     * @param row the row to reset
     */

