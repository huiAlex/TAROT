/**
 *
 * The ContextManager collects contexts as they are
 * created. It maintains stacks of contexts by
 * named ids, so that the top context of a given
 * type can be returned. It also maintains a global
 * stack so that contexts can be traversed in the
 * order they were created.
 * 
 * The first implementation of the context manager
 * assumes there is only one thread to worry about
 * and that the user(s) of the class only create one
 * instance of ContextManager.
 */

/**
	 * The CtxStack implement a stack on top of an ArrayList (to avoid
	 * the inherent overhead associated with java.util.Stack which is
	 * built on top of java.util.Vector, which is fully
	 * synchronized).
	 */

/**
	 * Empty ArrayList to use as void value
	 */

/**
	 * HashMap that holds the Context objects. The Contexts are stored
	 * with a String key.
	 * 	 */

/**
	 * List of all Contexts
	 */

/**
	 * Add a Context object to the ContextManager. The object is added
	 * both to the holder list and to a stack for the specific type of
	 * Context.
	 * @param newContext the new Context object
	 */

/**
	 * Obtain the last pushed Context object of the type indicated by
	 * the contextId argument.
	 * @param contextId a String identifying the type of Context
	 * @return The Context object with the corresponding contextId, or null if not found
	 */

/**
	 * Remove the last pushed Context object, regardless of type. If
	 * there are no Context objects, no action is taken.
	 */

/**
	 * Removes the specified Context object. If
	 * the specified Context object does not exist, the call will fail.
	 * @param theContext the Context object to remove.
	 */

/**
     * Is the ContextManager empty containing no Contexts.
     */

/**
	 * Return an unmodifiable list reference to the ArrayList backing
	 * CtxStack object for this type of Contexts. This method allows
	 * fast traversal of all Contexts on that stack. The first element
	 * in the List corresponds to the bottom of the stack. The
	 * assumption is that the Stack will not be modified while it is
	 * being traversed.
	 * @param contextId the type of Context stack to return.
	 * @return an unmodifiable "view" of the ArrayList backing the stack
	 * 	 * 	 */

/**
     * clean up error and print it to derby.log. Extended diagnosis including
     * thread dump to derby.log and javaDump if available, will print if the
     * database is active and severity is greater than or equals to
     * SESSTION_SEVERITY or as configured by
     * derby.stream.error.extendedDiagSeverityLevel property
     * 
     * @param error the error we want to clean up
     * @param diagActive
     *        true if extended diagnostics should be considered, 
     *        false not interested of extended diagnostic information
     * @return true if the context manager is shutdown, false otherwise.
     */

/**
		Check to see if we have been interrupted. If we have then
		a ShutdownException will be thrown. This will be either the
		one passed to interrupt or a generic one if some outside
		source interrupted the thread.
	*/

/**
		Set the locale for this context.
	*/

/**
	 * Flush the built up error string to whereever
	 * it is supposed to go, and reset the error string
	 */

/**
     * return the severity of the exception. Currently, this method 
     * does not determine a severity that is not StandardException 
     * or SQLException.
     * @param error - Throwable error
     * 
     * @return int vendorcode/severity for the Throwable error
     *            - error/exception to extract vendorcode/severity. 
     *            For error that we can not get severity, 
     *            NO_APPLICABLE_SEVERITY will return.
     */

/**
	 * Constructs a new instance. No CtxStacks are inserted into the
	 * hashMap as they will be allocated on demand.
	 * @param csf the ContextService owning this ContextManager
	 * @param stream error stream for reporting errors
	 */

/**
     * The thread that owns this ContextManager, set by
     * ContextService.setCurrentContextManager and reset
     * by resetCurrentContextManager. Only a single
     * thread can be active in a ContextManager at any time,
     * and the thread only "owns" the ContextManager while
     * it is executing code within Derby. In the JDBC case
     * setCurrentContextManager is called at the start of
     * a JBDC method and resetCurrentContextManager on completion.
     * Nesting within the same thread is supported, such as server-side
     * JDBC calls in a Java routine or procedure. In that case
     * the activeCount will represent the level of nesting, in
     * some situations.
     * 

     *      *      *      */

/**
     * Count of the number of setCurrentContextManager calls
     * by a single thread, for nesting situations with a single
     * active Contextmanager. If nesting is occuring with multiple
     * different ContextManagers then this value is set to -1
     * and nesting is represented by entries in a stack in the
     * ThreadLocal variable, threadContextList.
     * 
     *      */

/** Internal list with all the elements of the stack. */

/** Read-only view of the internal list. */

