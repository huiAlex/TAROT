/**
	LogicalUndoOperation is a compensation operation that rolls back the change of
	an LogicalUndoable operation.  A LogicalUndoOperation itself is not undo-able, i.e,
	it is loggable but not undoable.

	
	@derby.formatId	LOGOP_PAGE_LOGICAL_UNDO
		the formatId is written by FormatIdOutputStream when this object is
		written out by writeObject
	@derby.purpose	undo a logical log operation 
	@derby.upgrade
	@derby.diskLayout
		PageBasicOperation	the super class
		recordId(CompressedInt) the recordId of the changed row (this may not
				be the recordId during rollback if the record moved from one
				page to another) 
		OptionalData	none (compensation operation never have optional data)
	@derby.endFormat
	

*/

/** The operation to be rolled back */

/** Set up a compensation operation during run time rollback */

/**
		Return my format identifier.
	*/

/**
		Write this out.
		@exception IOException error writing to log stream
	*/

/**
		Read this in
		@exception IOException error reading from log stream
		@exception ClassNotFoundException log stream corrupted
	*/

/** 
		Compensation methods
	*/

/** Set up a LogicalOperation during recovery redo. */

/**
		Loggable methods
	*/

/** Apply the undo operation, in this implementation of the
		RawStore, it can only call the undoMe method of undoOp

		@param xact			the Transaction that is doing the rollback
		@param instant		the log instant of this undo operation
		@param in			optional data

		@exception IOException Can be thrown by any of the methods of ObjectInput.
		@exception StandardException Standard Derby policy.

	 */

/**
	  DEBUG: Print self.
	*/

