/**
	An InputStream that allows reading from an array of bytes. The array
	of bytes that is read from can be changed without having to create a new
	instance of this class.
*/

/**
	 * Create an ArrayInputStream with a zero length byte array.
	 * The position is set to 0 and the limit is the entire byte array.
	 *
	 */

/**
	 * Create an ArrayInputStream with the passed in data.
	 * The position is set to 0 and the limit is the entire byte array.
	 * @param data
	 */

/**
		Set the array of bytes to be read.
		Position is set to zero.
	*/

/**
		Return a reference to the array of bytes this stream is going to read
		from so that caller may load it with stuff 
	*/

/**
     * Skip as many bytes as possible, but no more than {@code count}.
     *
     * @param count the number of bytes to skip
     * @return the number of bytes that were skipped
     */

/**
		A setLimit which also sets the position to be offset.

		@exception IOException limit is out of range 
	*/

/**
		Clears the limit by setting the limit to be the entire byte array.

			*/

/**
     * Skip as many bytes as possible, but no more than {@code n}.
     *
     * @param n the number of bytes to skip
     * @return the number of bytes that were skipped
     */

/**
     * Read a compressed int from the stream.
     * 
     * Read a compressed int from the stream, which is assumed to have
     * been written by a call to CompressNumber.writeInt().
     * 
     * Code from CompressedNumber is inlined here so that these fields can
     * be read from the array with a minimum of function calls.
     * 
     * The format of a compressed int is as follows:
     *
     * Formats are (with x representing value bits):
     * 
     * 1 Byte- 00xxxxxx                            val &lt;= 63 (0x3f)
     * 2 Byte- 01xxxxxx xxxxxxxx                   val &gt; 63 &amp;&amp; &lt;= 16383 (0x3fff)
     * 4 byte- 1xxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx val &gt; 16383 &amp;&amp; &lt;= MAX_INT
     * 
     *
     * @exception IOException if an I/O error happens
     **/

/**
     * Read a compressed long from the stream.
     * 
     * Read a compressed long from the stream, which is assumed to have
     * been written by a call to CompressNumber.writeLong().
     * 
     * Code from CompressedNumber is inlined here so that these fields can
     * be read from the array with a minimum of function calls.
     * 
     * The format of a compressed int is as follows:
     *
     * Formats are (with x representing value bits):
     * 
     * value &gl;= 16383 (0x3fff): 
     *     2 byte - 00xxxxxx xxxxxxxx 
     *
     * value &gt; 16383 &amp;&amp; &lt;= 0x3fffffff:
     *     4 byte - 01xxxxxx xxxxxxxx xxxxxxxx xxxxxxxx
     *
     * value &lt; 0x3fffffff &amp;&lt; &lt;= MAX_LONG:
     *     8 byte - 1xxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx
     * 
     *
     **/

