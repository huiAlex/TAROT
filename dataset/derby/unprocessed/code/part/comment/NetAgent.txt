/**
     * Flag which indicates that a writeChain has been started and data sent to
     * the server.
     * If true, starting a new write chain will throw a DisconnectException. 
     * It is cleared when the write chain is ended.
     */

/**
     * Specifies the maximum blocking time that should be used when sending
     * and receiving messages. The timeout is implemented by using the the 
     * underlying socket implementation's timeout support. 
     * 
     * Note that the support for timeout on sockets is dependent on the OS 
     * implementation. For the same reason we ignore any exceptions thrown
     * by the call to the socket layer.
     * 
     * @param timeout The timeout value in seconds. A value of 0 corresponds to 
     * infinite timeout.
     */

/**
     * Returns the current timeout value that is set on the socket.
     * 
     * Note that the support for timeout on sockets is dependent on the OS 
     * implementation. For the same reason we ignore any exceptions thrown
     * by the call to the socket layer.
     * 
     * @return The timeout value in seconds. A value of 0 corresponds to
     * that no timeout is specified on the socket.
     */

/**
     * Marks the agent's write chain as dirty. A write chain is dirty when data
     * from it has been sent to the server. A dirty write chain cannot be reset 
     * and reused for another request until the remaining data has been sent to
     * the server and the write chain properly ended. 
     * 
     * Resetting a dirty chain will cause the new request to be appended to the 
     * unfinished request already at the server, which will likely lead to 
     * cryptic syntax errors.
     */

/**
     * Switches the current CCSID manager to UTF-8
     */

/**
     * Switches the current CCSID manager to EBCDIC
     */

