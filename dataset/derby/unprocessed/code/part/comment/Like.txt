/**
	Like matching algorithm. Not too speedy for %s.

	SQL92 says the escape character can only and must be followed
	by itself, %, or _.  So if you choose % or _ as the escape character,
	you can no longer do that sort of matching.

	Not the most recent Like -- missing the unit tests

 */

/**
	  
	 This method gets called for UCS_BASIC and territory based character
	 string types to look for a pattern in a value string. It also deals
	 with escape character if user has provided one.
	  
		@param val value to compare. if null, result is null.
		@param valLength length of val
		@param pat pattern to compare. if null, result is null.
		@param patLength length of pat
		@param escape escape character. Must be 1 char long.
			if null, no escape character is used.
		@param escapeLength length of escape
		@param collator null if we are dealing with UCS_BASIC 
		    character string types. If not null, then we use it to 
		    get collation elements for characters in val and 
		    non-metacharacters in pat to do the comparison.

		@return null if val or pat null, otherwise true if match
		and false if not.
		@exception StandardException thrown if data invalid
	 */

/**
		Calculate the shortest length string that could match this pattern
	 */

/**
	 * checkLengths  
	 *
	 * Returns null if we are not done.
	 * Returns true if we are at the end of our value and pattern
	 * Returns false if there is more pattern left but out of input value
	 *
	 * @param vLoc current index into char[] val
	 * @param vEnd end index or our value
	 * @param pLoc current index into our char[] pattern
	 * @param pat  pattern char []
	 * @param pEnd end index of our pattern []
	 */

/**
	 * Determine whether or not this LIKE can be transformed into optimizable
	 * clauses.  It can if the pattern is non-null and if the length == 0 or
	 * the first character is not a wild card.
	 *
	 * @param pattern	The right side of the LIKE
	 *
	 * @return	Whether or not the LIKE can be transformed
	 */

/**
	 * Return the substring from the pattern for the optimization &gt;= clause.
	 *
	 * @param pattern	The right side of the LIKE
	 * @param escape	The escape clause
	 * @param maxWidth	Maximum length of column, for null padding
	 *
	 * @return	The String for the &gt;= clause
	 */

/** 
     *  greaterEqualString -- for Escape clause only
     *  
     *  Walk the pattern character by character
     *  @param pattern like pattern to build from
     *  @param escChar the escape character in the pattern
     */

/**
	 * stripEscapesNoPatternChars
	 *
	 * @param pattern	pattern String to search
	 * @param escChar	the escape character
	 *
	 * @return a stripped of ESC char string if no pattern chars, null otherwise
	 * @exception StandardException thrown if data invalid
	 */

/**
	 * Return the substring from the pattern for the &lt; clause.
	 *
	 * @param pattern	The right side of the LIKE
	 * @param escape	The escape clause
	 * @param maxWidth	Maximum length of column, for null padding
	 *
	 * @return	The String for the &lt; clause
	 * @exception StandardException thrown if data invalid
	 */

/**
 	 * Return whether or not the like comparison is still needed after
	 * performing the like transformation on a constant string.  The
	 * comparison is not needed if the constant string is of the form:
	 *		CONSTANT%  (constant followed by a trailing %)
	 *
	 * @param pattern	The right side of the LIKE
	 *
	 * @return Whether or not the like comparison is still needed.
	 */

/**
	 * Pad a string with null characters, in order to make it &gt; and &lt;
	 * comparable with SQLChar.
	 * 
	 * @param string	The string to pad
	 * @param len		Max number of characters to pad to
	 * @return the string padded with 0s up to the given length
	 */

