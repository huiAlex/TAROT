/**
 * A Predicate represents a top level predicate.
 *
 */

/**
     * Constructor.
	 *
	 * @param andNode		The top of the predicate	 
	 * @param referencedSet	Bit map of referenced tables
     * @param cm            The context manager
	 */

/**
	 * 	 */

/**
	 * 	 */

/**
	 * 	 */

/** @see OptimizablePredicate#markStartKey */

/** @see OptimizablePredicate#isStartKey */

/** @see OptimizablePredicate#markStopKey */

/** @see OptimizablePredicate#isStopKey */

/** @see OptimizablePredicate#markQualifier */

/** @see OptimizablePredicate#isQualifier */

/** @see OptimizablePredicate#compareWithKnownConstant */

/**
	 * 	 *
	 * @exception StandardException		Thrown on error
	 */

/** @see OptimizablePredicate#equalsComparisonWithConstantExpression */

/** @see OptimizablePredicate#selectivity */

/** @see OptimizablePredicate#getIndexPosition */

/**
	 * Return the andNode.
	 *
	 * @return AndNode	The andNode.
	 */

/**
	 * Set the andNode.
	 *
	 * @param andNode	The new andNode.
	 */

/**
	 * Return the pushable.
	 *
	 * @return boolean	Whether or not the predicate is pushable.
	 */

/**
	 * Set whether or not this predicate is pushable.  This method
	 * is intended for use when creating a copy of the predicate, ex
	 * for predicate pushdown.  We choose not to add this assignment
	 * to copyFields() because the comments for that method say that
	 * it should copy all fields _except_ the two specified at init
	 * time; "pushable" is one of the two specified at init time.
	 *
	 * @param pushable Whether or not the predicate is pushable.
	 */

/**
	 * Return the referencedSet.
	 *
	 * @return JBitSet	The referencedSet.
	 */

/**
	 * Set the equivalence class, if any, for this predicate.
	 *
	 * @param equivalenceClass	The equivalence class for this predicate.
	 */

/**
	 * Get the equivalenceClass for this predicate.
	 *
	 * @return The equivalenceClass for this predicate.
	 */

/**
	 * Categorize this predicate.  Initially, this means
	 * building a bit map of the referenced tables for each predicate.
	 *
	 * @exception StandardException		Thrown on error
	 */

/**
	 * Get the RelationalOperator on the left side of the AND node, if
	 * there is one.  If the left side is not a RelationalOperator, return
	 * null.
	 *
	 * @return	The RelationalOperator on the left side of the AND node,
	 *			if any.
	 */

/**
     * Is this predicate a possible Qualifier for store?
     * 
     * Current 2 types of predicates can be pushed to store: 
     *   1) RelationalOperator - 
     *      represented with by left operand as instance of RelationalOperator.
     *   2) A single And'd term of a list of OR terms
     *      represented by left operand as instance of OrNode.
     *
     * More checking specific operator's terms to see if they are finally
     * pushable to store.  In the final push at execution each term of the AND 
     * or OR must be a Relational operator with a column reference on one side 
     * and a constant on the other.
     *
     *
	 * @return true if term is wither a AND of a RelationalOperator, or an
     *              OR of one or more Relational Operators.
     *
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
     * Is this predicate an pushable OR list?
     * 
     * Does the predicate represent a AND'd list of OR term's, all of which
     * are pushable.  To be pushable each of OR terms must be a legal 
     * qualifier, which is a column reference on one side of a Relational
     * operator and a constant on the other.
     *
	 * @return true if the predicate is a pushable set of OR clauses.
     *
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**
	 * Return whether or not this predicate has been used
	 * to add a new search clause of the specified type via transitive closure.
	 * NOTE: This can only be true if this is an equijoin
	 * between 2 column references.
	 *
	 * @param ro	The search clause that we are currently considering
	 *				as the source for transitive closure
	 *
	 * @return	Whether or not this predicate has been used
	 *			to add a new search clause of the specified type via transitive 
     *			closure.
	 */

/**
	 * Mark this predicate as having been used to add a new predicate
	 * of the specified type via transitive closure on search clauses.
	 *
	 * @param ro	The search clause that we are currently considering
	 *				as the source for transitive closure
	 *
	 */

/**
	 * Get the start operator for this predicate for a scan.
	 *
	 * @param optTable	The optimizable table, so we can tell which side of
	 *					the operator the search column is on.
	 *
	 * @return	The start operator for a start key on this column.
	 */

/**
	 * Set the position of the index column that this predicate restricts
	 *
	 * @param indexPosition	The position of the index column that this
	 *						predicate restricts.
	 */

/**
	 * Clear the start/stop position and qualifier flags
	 */

/**
	 * Convert this object to a String.  See comments in QueryTreeNode.java
	 * for how this should be done for tree printing.
	 *
	 * @return	This object as a String
	 */

/**
	 * Get a string version of the column references for this predicate
	 * IF it's a binary relational operator.  We only print out the
	 * names of the operands if they are column references; otherwise
	 * we just print a dummy value.  This is for debugging purposes
	 * only--it's a convenient way to see what columns the predicate
	 * is referencing, especially when tracing through code and printing
	 * assert failure.
	 */

/**
	 * Prints the sub-nodes of this object.  See QueryTreeNode.java for
	 * how tree printing is supposed to work.
	 *
	 * @param depth		The depth of this node in the tree
	 */

/**
	 * Accept the visitor for all visitable children of this node.
	 * 
	 * @param v the visitor
	 *
	 * @exception StandardException on error
	 */

/**
	 * Copy all fields of this Predicate (except the two that
	 * are set from 'init').
	 *
	 */

/**
	 * Determine whether or not this predicate is eligible for
	 * push-down into subqueries.  Right now the only predicates
	 * we consider to be eligible are those which 1) are Binary
	 * Relational operator nodes and 2) have a column reference
	 * on BOTH sides, each of which has a reference to a base
	 * table somewhere beneath it.
	 *
	 * @return Whether or not this predicate is eligible to be
	 *  pushed into subqueries.
	 */

/**
	 * Is this predicate a join predicate?  In order to be so,
	 * it must be a binary relational operator node that has
	 * a column reference on both sides.
	 *
	 * @return Whether or not this is a join predicate.
	 */

/**
	 * Indicate that this predicate is a scoped copy of some other
	 * predicate (i.e. it was created as the result of a call to
	 * getPredScopedForResultSet() on some other predicate).
	 */

/**
	 * Return whether or not this predicate is a scoped copy of
	 * another predicate.
	 */

/**
	 * Return whether or not this predicate corresponds to a legitimate
	 * relational operator.
	 *
	 * @return False if there is no relational operator for this predicate
	 *  OR if this predicate is an internal "probe predicate" (in which
	 *  case it "looks" like we have a relational operator but in truth
	 *  it's a disguised IN-list operator). True otherwise.
	 */

/**
	 * Return whether or not this predicate is an IN-list probe
	 * predicate.
	 */

/**
	 * If this predicate corresponds to an IN-list, return the underlying
	 * InListOperatorNode from which it was built.  There are two forms
	 * to check for:
	 *
	 *  1. This predicate is an IN-list "probe predicate", in which case
	 *     the underlying InListOpNode is stored within the binary relational
	 *     operator that is the left operand of this predicate's AND node.
	 *
	 *  2. This predicate corresponds to an IN-list that could _not_ be
	 *     transformed into a "probe predicate" (i.e. the IN-list contains
	 *     one or more non-parameter, non-constant values). In that case
	 *     the underlying InListOpNode is simply the left operand of
	 *     this predicate's AND node.
	 *
	 * If this predicate does not correspond to an IN-list in any way,
	 * this method will return null.
	 */

/**
	 * Does the work of getSourceInList() above, but can also be called
	 * directly with an argument to indicate whether or not we should
	 * limit ourselves to probe predicates.
	 *
	 * @param probePredOnly If true, only get the source IN list for this
	 *   predicate *if* it is an IN-list probe predicate.  If false,
	 *   return the underlying InListOperatorNode (if it exists) regardless
	 *   of whether this is a probe predicate or an un-transformed IN-list
	 *   pred.
	 * 
	 * @return Underlying InListOp for this predicate (depending on
	 *   the value of probePredOnly), or null if this predicate does
	 *   not correspond to an IN-list in any way.
	 */

