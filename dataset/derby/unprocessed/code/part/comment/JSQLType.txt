/**
 *	Type descriptor which wraps all 3 kinds of types supported in Derby's
 *	JSQL language: SQL types, Java primitives, Java classes.
 *
 *	This interface was originally added to support the serializing of WorkUnit
 *	signatures.
 *
 *
 */

/**
	  *	Public 0-arg constructor for Formatable machinery.
	  */

/**
	  *	Create a JSQLType from a SQL type.
	  *
	  *	@param	sqlType	the SQL type to wrap
	  */

/**
	  *	Create a JSQLType given the name of a Java primitive or java class.
	  *
	  *	@param	javaName	name of java primitive or class to wrap
	  */

/**
	  *	Create a JSQLType for a Java primitive.
	  *
	  *	@param	primitiveKind	primitive to wrap
	  */

/**
	  *	What kind of type is this:
	  *
	  *	@return	one of the following: SQLTYPE, JAVA_PRIMITIVE, JAVA_CLASS
	  */

/**
	  *	If this is a JAVA_PRIMITIVE, what is its name?
	  *
	  *	@return	BOOLEAN, INT, ... if this is a JAVA_PRIMITIVE.
	  *				NOT_PRIMITIVE if this is SQLTYPE or JAVA_CLASS.
	  */

/**
	  *	If this is a JAVA_CLASS, what is it's name?
	  *
	  *	@return	java class name if this is a JAVA_CLASS
	  *				null if this is SQLTYPE or JAVA_PRIMITIVE
	  */

/**
	  *	What's our SQLTYPE?
	  *
	  *	@return	the DataTypeDescriptor corresponding to this type
	  *
	  */

/**
	 * Get the formatID which corresponds to this class.
	 *
	 *	@return	the formatID of this class
	 */

/**
	  	  @exception IOException thrown on error
	  @exception ClassNotFoundException	thrown on error
	  */

/**

	  @exception IOException thrown on error
	  */

/**
	  *	Initialize this JSQL type. Minion of all constructors.
	  *
	  *	@param	category		SQLTYPE, JAVA_CLASS, JAVA_PRIMITIVE
	  *	@param	sqlType			corresponding SQL type if category=SQLTYPE
	  *	@param	javaClassName	corresponding java class if category=JAVA_CLASS
	  *	@param	primitiveKind	kind of primitive if category=JAVA_PRIMITIVE
	  */

/**
	  *	Gets the name of the java wrapper class corresponding to a primitive.
	  *
	  *	@param	primitive	BOOLEAN, INT, ... etc.
	  *
	  *	@return	name of the java wrapper class corresponding to the primitive
	  */

/**
	  *	Translate the name of a java primitive to an id
	  *
	  *	@param	name	name of primitive
	  *
	  *	@return	BOOLEAN, INT, ... etc if the name is that of a primitive.
	  *			NOT_PRIMITIVE otherwise
	  */

