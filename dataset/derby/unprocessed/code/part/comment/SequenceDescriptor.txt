/**
 * This class is used by rows in the SYS.SYSSEQUENCES system table.
 * See the header comment of SYSSEQUENCESRowFactory for the
 * contract of that table. In particular, if the CURRENTVALUE column
 * is null, then the sequence has been exhausted and no more values
 * can be generated from it.
 */

/**
     * Constructor
     *
     * @param dataDictionary data dictionary
     * @param sequenceUUID   unique identification in time and space of this sequence
     *                       descriptor
     * @param sequenceName
     */

/**
	 * 	 */

/**
	 * 	 */

/**
     * Drop this sequence descriptor. Only restricted drops allowed right now.
     *
     *      */

/**
	 * Check that all of the dependent's dependencies are valid.
	 *
	 * @return true if the dependent is currently valid
	 */

/**
	 * Prepare to mark the dependent as invalid (due to at least one of
	 * its dependencies being invalid).
	 *
	 * @param action	The action causing the invalidation
	 * @param p			the provider
	 * @param lcc		the language connection context
	 *
	 * @exception StandardException thrown if unable to make it invalid
	 */

/**
	 * Mark the dependent as invalid (due to at least one of
	 * its dependencies being invalid).
	 *
	 * @param 	lcc the language connection context
	 * @param	action	The action causing the invalidation
	 *
	 * @exception StandardException thrown if called in sanity mode
	 */

/**
     *      */

/**
     *      */

/**
     * Get the provider's UUID
     *
     * @return The provider's UUID
     */

/**
     * Is this provider persistent?  A stored dependency will be required
     * if both the dependent and provider are persistent.
     *
     * @return boolean              Whether or not this provider is persistent.
     */

/**
     * Return the name of this Provider.  (Useful for errors.)
     *
     * @return String   The name of this provider.
     */

/**
     * Get the provider's type.
     *
     * @return char         The provider's type.
     */

/**
     * @return the stored form of this provider
     *      */

