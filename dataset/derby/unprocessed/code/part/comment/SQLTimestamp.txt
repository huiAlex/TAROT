/**
 * This contains an instance of a SQL Timestamp object.
 * 
 * SQLTimestamp is stored in 3 ints - an encoded date, an encoded time and
 *		nanoseconds
 * encodedDate = 0 indicates a null WSCTimestamp
 *
 * SQLTimestamp is similar to SQLTimestamp, but it does conserves space by not keeping a GregorianCalendar object
 *
 * PERFORMANCE OPTIMIZATION:
 *	We only instantiate the value field when required due to the overhead of the
 *	Date methods.
 *	Thus, use isNull() instead of "value == null" and
 *	getTimestamp() instead of using value directly.
 */

/**
		getDate returns the date portion of the timestamp
		Time is set to 00:00:00.0
		Since Date is a JDBC object we use the JDBC definition
		for the time portion.  See JDBC API Tutorial, 47.3.12.

		@exception StandardException thrown on failure
	 */

/**
		getTime returns the time portion of the timestamp
		Date is set to 1970-01-01
		Since Time is a JDBC object we use the JDBC definition
		for the date portion.  See JDBC API Tutorial, 47.3.12.
		@exception StandardException thrown on failure
	 */

/**
		Return my format identifier.

			*/

/** 
		@exception IOException error writing data

	*/

/**
	 * 	 *
	 * @exception IOException	Thrown on error reading the object
	 */

/** @see DataValueDescriptor#cloneValue */

/**
	 * 	 */

/**
	 * 	 *
	 */

/** 
	 * 	 *
	 * @exception SQLException		Thrown on error
	 */

/**
		@exception StandardException thrown on error
	 */

/** no-arg constructor required by Formattable */

/**
     * Create a new SQLTimestamp instance that represents the specified
     * Timestamp in the time zone of the given Calendar.
     * @param value the Timestamp value to be represented by this instance
     * @param cal the time zone of the calendar is used to construct the
     * database timestamp value
     *      */

/**
     * Create a new SQLTimestamp instance that represents the specified
     * Timestamp in the local time zone.
     * @param value the Timestamp value to be represented by this instance
     *      */

/**
     * Construct a timestamp from a string. The allowed formats are:
     *
     *JDBC escape: yyyy-mm-dd hh:mm:ss[.fffff]
     *IBM: yyyy-mm-dd-hh.mm.ss[.nnnnnn]
     *
     * The format is specified by a parameter to the constructor. Leading zeroes may be omitted from the month, day,
     * and hour part of the timestamp. The microsecond part may be omitted or truncated.
     */

/**
     * Construct a timestamp from a string. The allowed formats are:
     *
     *JDBC escape: yyyy-mm-dd hh:mm:ss[.fffff]
     *IBM: yyyy-mm-dd-hh.mm.ss[.nnnnnn]
     *
     * The format is specified by a parameter to the constructor. Leading zeroes may be omitted from the month, day,
     * and hour part of the timestamp. The microsecond part may be omitted or truncated.
     */

/**
     * Parse a localized timestamp.
     *
     * @param str the timestamp string, with trailing blanks removed.
     * @param localeFinder
     *
     * @return a {encodedDate, encodedTime} array.
     *
     * @exception ParseException If the string is not a valid timestamp.
     */

/**
     * Parse a timestamp or a date. DB2 allows timestamps to be used as dates or times. So
     * date('2004-04-15-16.15.32') is valid, as is date('2004-04-15').
     *
     * This method does not handle localized timestamps.
     *
     * @param parser a DateTimeParser initialized with a string.
     * @param timeRequired If true then an error will be thrown if the time is missing. If false then the time may
     *                     be omitted.
     *
     * @return {encodedDate, encodedTime, nanosecond} array.
     *
     * @exception StandardException if the syntax is incorrect for an IBM standard timestamp.
     */

/**
	 * Set the value from a correctly typed Timestamp object.
	 * 	 */

/**
				When converting from a date to a timestamp, time is set to 00:00:00.0

	 */

/**
		
	 */

/**
	 * 	 * 
	 * @exception StandardException		Thrown on error
	 */

/**
	 * 	 * 
	 * @exception StandardException		Thrown on error
	 */

/**
	 * 	 * 
	 * @exception StandardException		Thrown on error
	 */

/**
	 * 	 * 
	 * @exception StandardException		Thrown on error
	 */

/**
	 * 	 * 
	 * @exception StandardException		Thrown on error
	 */

/**
	 * 	 * 
	 * @exception StandardException		Thrown on error
	 */

/** @see DataValueDescriptor#typePrecedence */

/**
	 * Check if the value is null.  encodedDate value of 0 is null
	 *
	 * @return Whether or not value is logically null.
	 */

/**
	 * Get the value field.  We instantiate the field
	 * on demand.
	 *
	 * @return	The value field.
	 */

/**
	 * Set the encoded values for the timestamp
	 *
	 */

/**
		computeEncodedDate sets the date in a Calendar object
		and then uses the SQLDate function to compute an encoded date
		The encoded date is
			year &lt;&lt; 16 + month &lt;&lt; 8 + date
		@param value	the value to convert
		@return 		the encodedDate

	 */

/**
		computeEncodedTime extracts the hour, minute and seconds from
		a java.util.Date value and encodes them as
			hour &lt;&lt; 16 + minute &lt;&lt; 8 + second
		using the SQLTime function for encoding the data
		@param value	the value to convert
		@return 		the encodedTime

	 */

/**
     * Compute the SQL timestamp function.
     *
     * @exception StandardException
     */

/**
     * Add a number of intervals to a datetime value. Implements the JDBC escape TIMESTAMPADD function.
     *
     * @param intervalType One of FRAC_SECOND_INTERVAL, SECOND_INTERVAL, MINUTE_INTERVAL, HOUR_INTERVAL,
     *                     DAY_INTERVAL, WEEK_INTERVAL, MONTH_INTERVAL, QUARTER_INTERVAL, or YEAR_INTERVAL
     * @param count The number of intervals to add
     * @param currentDate Used to convert time to timestamp
     * @param resultHolder If non-null a DateTimeDataValue that can be used to hold the result. If null then
     *                     generate a new holder
     *
     * @return startTime + intervalCount intervals, as a timestamp
     *
     * @exception StandardException
     */

/**
     * Finds the difference between two datetime values as a number of intervals. Implements the JDBC
     * TIMESTAMPDIFF escape function.
     *
     * @param intervalType One of FRAC_SECOND_INTERVAL, SECOND_INTERVAL, MINUTE_INTERVAL, HOUR_INTERVAL,
     *                     DAY_INTERVAL, WEEK_INTERVAL, MONTH_INTERVAL, QUARTER_INTERVAL, or YEAR_INTERVAL
     * @param time1
     * @param currentDate Used to convert time to timestamp
     * @param resultHolder If non-null a NumberDataValue that can be used to hold the result. If null then
     *                     generate a new holder
     *
     * @return the number of intervals by which this datetime is greater than time1
     *
     * @exception StandardException
     */

/**
     * Promotes a DateTimeDataValue to a timestamp.
     *
     *
     * @return the corresponding timestamp, using the current date if datetime is a time,
     *         or time 00:00:00 if datetime is a date.
     *
     * @exception StandardException
     */

