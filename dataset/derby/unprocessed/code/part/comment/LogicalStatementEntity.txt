/**
 * Common class interacting with the JDBC statement cache for logical prepared
 * statements and logical callable statements.
 * 
 * Note that {@link #getPhysPs} and {@link #getPhysCs} takes care of checking if
 * the logical statement has been closed. The physical statement will take care
 * of validating itself.
 * 
 * Beside from the above, special treatment of logical entities happens
 * on close. This is the point where cache interaction takes place, and also
 * where the appropriate methods are called on the physical statement to perform
 * the necessary clean up for later reuse.
 * 
 * A note regarding the thread safety of this class, is that access to
 * {@code physicalPs} and {@code physicalCs} is guarded by the instance of this
 * class, but it is assumed that operation on/within the physical statement is
 * synchronized in the physical statement itself .
 */

/**
     * Tells if we're holding a callable statement or not.
     * 
     * Used for sanity checking.
     */

/**
     * Associated physical prepared statement.
     * 
     * If this is {@code null}, the logical entity is closed.
     */

/**
     * Associated physical callable statement, if any.
     * 
     * This is a convenience reference, to avoid having to cast on every
     * invocation of {@link #getPhysCs} if the logical entity represents a
     * callable statement.
     */

/** The owner of this logical entity. */

/** The key for the associated statement. */

/** Cache for physical statements. */

/**
     * Create a logical entity for a {@link java.sql.PreparedStatement}.
     *
     * @param physicalPs a physical {@link java.sql.PreparedStatement}
     * @param stmtKey cache key for the physical statement
     * @param cacheInteractor creating statement cache interactor
     *      */

/**
     * Returns the associated physical prepared statement.
     *
     * @return A prepared statement.
     *      */

/**
     * Returns the associated physical callable statement.
     *
     * @return A callable statement.
     *      */

/**
     * Returns the associated physical statement.
     *
     * @return A statement.
     *      */

/**
     * Close the logical statement.
     *
     *      */

/**
     * Tells if the logical entity is closed.
     * 
     * If this method is used to avoid the possibility of raising an exception
     * because the logical statement has been closed and then invoke a method on
     * the physical statement, one must synchronize on this instance in the
     * calling code.
     *
     * @return {@code true} if closed, {@code false} if open.
     */

/**
     * Check whether this instance wraps an object that implements the interface
     * specified by {@code iface}.
     *
     * @param iface a class defining an interface
     * @return {@code true} if this instance implements {@code iface}, or
     * {@code false} otherwise
     *      * instance implements {@code iface}
     */

/**
     * Returns an instance of the specified interface if this instance is
     * a wrapper for the interface.
     *
     * @param  iface a class defining an interface
     * @return an object that implements the interface
     *      * interface
     */

