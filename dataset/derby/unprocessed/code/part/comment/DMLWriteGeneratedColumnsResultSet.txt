/**
	 * keeps track of autoincrement values that are generated by 
	 * getSetAutoincrementValues.
	 */

/**
	 * If set to true, implies that Derby has generated autoincrement 
	 * values for this (rep)resultset. During refresh for example, the 
	 * autoincrement values are not generated but sent from the source 
	 * to target or vice-versa.
	 */

/**
	 * Constructor
	 *
 	 * @param activation		an activation
	 *
 	 * @exception StandardException on error
	 */

/**
     * getSetAutoincrementValue will get the autoincrement value of the 
     * columnPosition specified for the target table. If increment is 
     * non-zero we will also update the autoincrement value. 
     *
     * @param columnPosition	position of the column in the table (1-based)
     * @param increment			amount of increment. 
     *
     * @exception StandardException if anything goes wrong.
     */

/**
     * Verify that the auto-generated columns list (by position) has valid
     * column positions for the table.
     */

/**
     * Verify that the auto-generated columns list (by name) has valid
     * column names for the table. If all the column names are valid,
     * convert column names array to corresponding column positions array
     * Save that column positions array in activation. We do this to 
     * simplify the rest of the logic(it only has to deal with column 
     * positions here after).
     *
     * @exception StandardException		Thrown on error if invalid column
     * name in the list.
     */

/**
	 * Check that the received ColumnDescriptor corresponds to a column
	 * for which it is possible to fetch auto-generated keys.
	 */

/**
     * If user didn't provide columns list for auto-generated columns, then only include
     * columns with auto-generated values in the resultset. Those columns would be ones
     * with default value defined.
     */

/**
     * Remove duplicate columns from the array. Then use this array to generate a sub-set
     * of insert resultset to be returned for JDBC3.0 getGeneratedKeys() call.
     */

/**
     * Take the input row and return a new compact ExecRow
     * using the column positions provided in columnIndexes.
     * Copies references, no cloning.
     */

