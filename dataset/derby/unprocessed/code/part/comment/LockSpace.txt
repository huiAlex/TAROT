/**

	A LockSpace represents the complete set of locks held within
	a single compatibility space, broken into groups of locks.

    A LockSpace contains a HashMap keyed by the group reference,
    the data for each key is a HashMap of Lock's.

     A LockSpace can have an owner (for instance a
    transaction). Currently, the owner is used by the virtual lock table to
    find out which transaction a lock belongs to. Some parts of the code also
    use the owner as a group object which guarantees that the lock is released
    on a commit or an abort. The owner has no special meaning to the lock
    manager and can be any object, including null. 
*/

/**
	An Enumeration that returns the the Lockables
	in a group.
*/

/** Map from group references to groups of locks. */

/** Reference to the owner of this compatibility space. */

/** The maximum number of elements to cache in {@link #spareGroups}. */

/** Cached HashMaps for storing lock groups. */

/**
	 * Creates a new LockSpace instance.
	 *
	 * @param owner an object representing the owner of the compatibility space
	 */

/**
	 * Get the object representing the owner of the compatibility space.
	 *
	 * @return the owner of the compatibility space
	 */

/**
		Add a lock to a group.
	*/

/**
		Unlock all the locks in a group and then remove the group.
	*/

/**
		Unlock all locks in the group that match the key
	*/

/**
		Return true if locks are held in a group
	*/

/**
	 * Return true if locks are held in this compatibility space.
	 * @return true if locks are held, false otherwise
	 */

/**
		Clear a limit set by setLimit.
	*/

/**
		Return a count of the number of locks
		held by this space. The argument bail
		indicates at which point the counting
		should bail out and return the current
		count. This routine will bail if the
		count is greater than bail. Thus this
		routine is intended to for deadlock
		code to find the space with the
		fewest number of locks.
	*/

