/**
		Start this module. We need a read/write version of the class utilities

		@exception StandardException standard Derby policy
	 */

/**
		Stop this module.  In this case, nothing needs to be done.
	 */

/**
	 * a class.  Once it is created, fields, methods,
	 * interfaces, static initialization code, 
	 * and constructors can be added to it.
	 * 
	   Java: package #packageName;
	  	 #modifiers #className extends #superClass { }
	  		// modifiers is the | of the JVM constants for
	  		// the modifiers such as static, public, etc.
	   
	 *
	 * See java.lang.reflect.Modifiers
	 * @param packageName the name of the package the class is in.
	 *	null if it is in the default package.
	 * @param modifiers the | of the Modifiers
	 *	constants representing the visibility and control of this
	 *	method.
	 * @param className the name of the class or interface
	 * @param superClass the name of the superclass or superinterface
	 *
	 * @return the class builder.
	 */

/**
	 * Get the VM Type ID that corresponds with the given java type name.
	 * This uses the cache of VM type ids.
	 *
	 * @param javaType	The java type name to translate to a java VM type id
	 *
	 * @return		The java VM type ID
	 */

/**
	 * Map vm types as strings to vm types as the VM
	 * handles, with int ids. Used in mapping opcodes
	 * based on type of operand/stack entry available.
	 */

/**
     * Privileged startup. Must be private so that user code
     * can't call this entry point.
     */

