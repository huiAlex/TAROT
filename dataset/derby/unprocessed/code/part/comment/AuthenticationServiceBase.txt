/**
		Trace flag to trace authentication operations
	*/

/**
        Userid with Strong password substitute DRDA security mechanism
    */

/**
	/*
	** Methods of module control - To be overriden
	*/

/**
		Start this module.  In this case, nothing needs to be done.
		
		@exception StandardException upon failure to load/boot
		the expected authentication service.
	 */

/**
	 * 	 */

/**
	 * Authenticate a User inside JBMS.T his is an overload method.
	 *
	 * We're passed-in a Properties object containing user credentials information
	 * (as well as database name if user needs to be validated for a certain
	 * database access).
	 *
	 * 	 * org.apache.derby.iapi.jdbc.AuthenticationService#authenticate
	 *
	 *
	 */

/**
	 * Returns a property if it was set at the database or
	 * system level. Treated as SERVICE property by default.
	 *
	 * @return a property string value.
	 **/

/**
     * 
     * Get a transaction for performing authentication at the database level.
     * 
     */

/**
     * Get all the database properties.
     * @return the database properties, or {@code null} if there is no
     * access factory
     */

/**
     * 
     * Get the name of the database if we are performing authentication at the database level.
     * 
     */

/**
	  	*/

/** Parse the value of the password lifetime property. Return null if it is bad. */

/** Parse the value of the password expiration threshold property. Return null if it is bad. */

/**
	  	*/

/**
	  	  @exception StandardException Thrown on error.
	*/

/**
     * 
	 * This method hashes a clear user password using a
	 * Single Hash algorithm such as SHA-1 (SHA equivalent)
	 * (it is a 160 bits digest)
     * 
	 *
     * 
	 * The digest is returned as an object string.
     * 
     *
     * 
     * This method is only used by the SHA-1 authentication scheme.
     * 
	 *
	 * @param plainTxtUserPassword Plain text user password
	 *
	 * @return hashed user password (digest) as a String object
     *         or {@code null} if the plaintext password is {@code null}
	 */

/**
     * 
     * Convert a string into a byte array in hex format.
     * 
     *
     * 
     * For each character (b) two bytes are generated, the first byte
     * represents the high nibble (4 bits) in hexadecimal ({@code b & 0xf0}),
     * the second byte represents the low nibble ({@code b & 0x0f}).
     * 
     *
     * 
     * The character at {@code str.charAt(0)} is represented by the first two
     * bytes in the returned String.
     * 
     *
     * 
     * New code is encouraged to use {@code String.getBytes(String)} or similar
     * methods instead, since this method does not preserve all bits for
     * characters whose codepoint exceeds 8 bits. This method is preserved for
     * compatibility with the SHA-1 authentication scheme.
     * 
     *
     * @param str string
     * @return the byte[] (with hexadecimal format) form of the string (str)
     */

/**
     * Find the data dictionary for the current connection.
     *
     * @return the {@code DataDictionary} for the current connection
     */

/**
     * Privileged lookup of the ContextService. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged lookup of a Context. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged service name lookup. Must be private so that user code
     * can't call this entry point.
     */

/**
     * Privileged module lookup. Must be package protected so that user code
     * can't call this entry point.
     */

