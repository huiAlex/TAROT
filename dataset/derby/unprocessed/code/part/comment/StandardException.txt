/**
	StandardException is the root of all exceptions that are handled
	in a standard fashion by the database code, mainly in the language code.
	
    This class is abstract to ensure that an implementation only throws
	a specific exception (e.g. TransactionException) which is a sub-class
	
	A method in an iterface in a protocol under com.ibm.db2j.protocol.Database must
	only throw a StandardException (if it needs to throw an exception).
	This indicates that the method can throw an exception and therefore its
	caller must ensure that any resources it allocates will be cleaned up
	in the event of an exception in the StandardException hierarchy.
	
	Implementations of methods that throw StandardException can have throws
	clause that are more specific than StandardException.
*/

/**
	 * This constructor is used when we already have the
	 * message text.
	 * 
	 * @param sqlState the sql state of the message
	 * @param text the text of the message
	 */

/**
		Yes, report me. Errors that need this method to return
		false are in the minority.
	*/

/**
		Set my report type.
	*/

/**
		Return the 5 character SQL State.
		If you need teh identifier that was used to create the
		message, then use getMessageId(). getMessageId() will return the
		string that corresponds to the field in org.apache.derby.iapi.reference.SQLState.
	*/

/**
     * Get the next {@code SQLException} that should be put into the parent
     * exception when this instance is converted to an {@code SQLException}.
     * @return the next exception
     */

/**
     * Mark this exception as one that is thrown by a public API method.
     * The purpose is to signal that this should be a top-level exception,
     * so that it doesn't get wrapped inside multiple layers of other
     * SQLExceptions or StandardExceptions as it travels up through the
     * code layers.
     *      */

/**
		Convert a message identifer from org.apache.derby.iapi.reference.SQLState to
		a SQLState five character string.
	 *	@param messageID - the sql state id of the message from Derby
	 *	@return String 	 - the 5 character code of the SQLState ID to returned to the user 
	*/

/**
		Get the severity given a message identifier from org.apache.derby.iapi.reference.SQLState.
	*/

/**
     * Dummy exception to catch incorrect use of
     * StandardException.newException(), at compile-time. If you get a
     * compilation error because this exception isn't caught, it means
     * that you are using StandardException.newException(...)
     * incorrectly. The nested exception should always be the second
     * argument.
     *      *      */

/**
     * Dummy overload which should never be called. Only used to
     * detect incorrect usage, at compile time.
     * @param messageID - the sql state id of the message
     * @param a1 - Message arg
     * @param t - Incorrectly placed exception to be nested
     * @return nothing - always throws
     *      */

/**
     * Dummy overload which should never be called. Only used to
     * detect incorrect usage, at compile time.
     * @param messageID - the sql state id of the message
     * @param a1 - First message arg
     * @param a2 - Second message arg
     * @param t - Incorrectly placed exception to be nested
     * @return nothing - always throws
     *      */

/**
     * Creates a new StandardException using message text that has already been localized.
     *
     * @param MessageID The SQLState and severity are derived from the ID. However the text message is not.
     * @param t The Throwable that caused this exception, null if this exception was not caused by another Throwable.
     * @param localizedMessage The message associated with this exception.
     *        It is the caller's responsibility to ensure that this message is properly localized.
     *
     * See org.apache.derby.iapi.tools.i18n.LocalizedResource
     */

/**
     * Unpack the exception, looking for a StandardException, which carries
	 * the Derby messageID and arguments. 
	 * 	 * 	 */

/**
     * Check if the top-level throwable is just a vacuous wrapper that does
     * not carry any useful information except what's returned by the
     * {@link Throwable#getCause()} method.
     *
     * @param t the throwable to check
     * @return {@code true} if the throwable is a vacuous wrapper and the
     *   only useful piece of information is the cause, or {@code false}
     *   otherwise
     */

/**
		Similar to unexpectedUserException but makes no assumtion about
		when the execption is being called. The error is wrapped as simply
		as possible.
	*/

/**
	** A special exception to close a session.
	*/

/**
		The message stored in the super class Throwable must be set
		up object creation. At this time we cannot get any information
		about the object itself (ie. this) in order to determine the
		natural language message. Ie. we need to class of the objec in
		order to look up its message, but we can't get the class of the
		exception before calling the super class message.
		
		Thus the message stored by Throwable and obtained by the
		getMessage() of Throwable (ie. super.getMessage() in this
		class) is the message identifier. The actual text message
		is stored in this class at the first request.

	*/

/**
		Return the message identifier that is used to look up the
		error message text in the messages.properties file.
	*/

/**
		Get the error code for an error given a type. The value of
		the property messageId.type will be returned, e.g.
		deadlock.sqlstate.
	*/

/**
		Don't print the class name in the toString() method.
	*/

/**
     * Is this a lock timeout exception.
     * 
     *
     * @return true if this exception is a lock timeout.
     *
     **/

/**
     * Is this a self-deadlock exception caused by a nested transaction
     * being blocked by its parent's locks.
     * 
     *
     * @return true if this exception is a self-deadlock.
     *
     **/

/**
     * Is this a lock timeout or lock deadlock exception.
     * 
     *
     * @return true if this exception is a lock timeout or lock deadlock.
     *
     **/

