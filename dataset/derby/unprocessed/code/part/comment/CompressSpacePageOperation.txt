/**

Log operation to implement compressing space from a container and returning
it to the operating system.

**/

/**************************************************************************
     * Fields of the class
     **************************************************************************
     */

/**
     * The new highest page on this allocation page.  The number is the
     * offset of the page in the array of pages maintained by this 
     * allocation page, for instance a value of 0 indicates all page except
     * the first one are to be truncated.  If all pages are truncated then 
     * the offset is set to -1.
     **/

/**
     * The number of allocated pages in this allocation page prior to 
     * the truncate.  Note that all pages from NewHighestPage+1 through
     * newHighestPage+num_pages_truncated should be FREE.
     **/

/**************************************************************************
     * Constructors for This class:
     **************************************************************************
     */

/**************************************************************************
     * Public Methods of Formatable interface.
     **************************************************************************
     */

/**
		@exception IOException error reading from log stream
		@exception ClassNotFoundException cannot read object from input
	*/

/**
		Return my format identifier.
	*/

/**************************************************************************
     * Public Methods of Loggable interface.
     **************************************************************************
     */

/**
     * Compress space from container.
     * 
     * Compress the indicate space from the container, returning the free
     * pages to the OS.  Update the allocation page to reflect the file
     * change.
     *
     * @param tran      transaction doing the operation.
     * @param instant   log instant for this operation.
     * @param in        unused by this log operation.
     *
	 * @exception  StandardException  Standard exception policy.
     **/

/**************************************************************************
     * Public Methods of Undoable interface.
     **************************************************************************
     */

/**
     * Compress space undo.
     * 
     *
	 * @exception StandardException Thrown by methods I call 
     *      **/

/** debug */

