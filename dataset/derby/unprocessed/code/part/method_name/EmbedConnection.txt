EmbedConnection
checkDatabaseBooted
createBoot
handleDBNotFound
isDropDatabase
isCryptoBoot
isHardUpgradeBoot
isStartReplicationSlaveBoot
isStartReplicationMasterBoot
isReplicationFailover
isStopReplicationMasterBoot
isStopReplicationSlaveBoot
isInternalShutdownSlaveDatabase
isSet
isTrue
vetTrue
getReplicationOperation
handleStartReplicationMaster
handleStopReplicationMaster
handleStopReplicationSlave
internalStopReplicationSlave
handleFailoverMaster
handleFailoverSlave
removePhaseTwoProps
EmbedConnection
checkUserCredentials
emptyCredential
compareDatabaseNames
checkUserIsNotARole
checkIsDBOwner
getEngineType
createStatement
createStatement
createStatement
prepareStatement
prepareStatement
prepareStatement
prepareStatement
prepareStatement
prepareStatement
prepareStatement
prepareCall
prepareCall
prepareCall
nativeSQL
setAutoCommit
getAutoCommit
commit
rollback
close
checkForTransactionInProgress
close
isClosed
getMetaData
getHoldability
setHoldability
setReadOnly
isReadOnly
setCatalog
getCatalog
setTransactionIsolation
getTransactionIsolation
getWarnings
clearWarnings
setTypeMap
addWarning
getDBName
getLanguageConnection
checkIfClosed
handleException
handleException
setInactive
finalize
needCommit
commitIfNeeded
commitIfAutoCommit
getConnectionSynchronization
setupContextStack
restoreContextStack
createDatabase
checkDatabaseCreatePrivileges
sleep
stripSubSubProtocolPrefix
bootDatabase
prepareMetaDataStatement
getLocalDriver
getContextManager
filterProperties
getDatabase
getTR
pushConnectionContext
setApplicationConnection
getApplicationConnection
setDrdaID
isInGlobalTransaction
resetFromPool
xa_prepare
xa_commit
xa_rollback
transactionIsIdle
setResultSetType
setPrepareIsolation
getPrepareIsolation
getResultSetOrderId
newSQLException
toString
createClob
createBlob
addLOBMapping
removeLOBMapping
getLOBMapping
clearLOBMapping
getIncLOBKey
addLOBReference
getlobHMObj
cancelRunningStatement
getCurrentSchemaName
addLobFile
removeLobFile
isAborting
beginAborting
setSavepoint
setSavepoint
commonSetSavepointCode
rollback
releaseSavepoint
verifySavepointCommandIsAllowed
verifySavepointArg
getSchema
setSchema
checkConflictingCryptoAttributes
createArrayOf
createNClob
createSQLXML
createStruct
isValid
setClientInfo
setClientInfo
getClientInfo
getClientInfo
getTypeMap
isWrapperFor
unwrap
abort
run
getNetworkTimeout
setNetworkTimeout
getMonitor
run
findService
run
startPersistentService
run
createPersistentService
run
removePersistentService
run
privilegedGetLCC
run
