<Class>
    <Id>110</Id>
    <Package>org.codehaus.groovy.classgen.asm</Package>
    <ClassName>UnaryExpressionHelper</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>UnaryExpressionHelper  /** 
 * A helper class used to generate bytecode for unary expressions. AST transformations willing to use a custom unary expression helper may set the  {@link WriterControllerFactory} node metadata on aclass node to provide a custom  {@link WriterController} which would in turn use a custom expressionhelper.
 * @see BinaryExpressionHelper
 * @author Cedric Champeau
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>unaryPlus</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>unaryMinus</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>bitwiseNegate</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>controller</FieldName>
            <FieldType>WriterController</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>UnaryExpressionHelper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>controller</ParamName>
                    <FieldType>WriterController</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeUnaryPlus</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>UnaryPlusExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [subExpression=expression.getExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>subExpression;visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();box;[]</InnerMethodInvoke>
                <InnerMethodInvoke>unaryPlus;call;[controller.getMethodVisitor()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();replace;[ClassHelper.OBJECT_TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getAssertionWriter();record;[expression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeUnaryMinus</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>UnaryMinusExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [subExpression=expression.getExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>subExpression;visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();box;[]</InnerMethodInvoke>
                <InnerMethodInvoke>unaryMinus;call;[controller.getMethodVisitor()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();replace;[ClassHelper.OBJECT_TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getAssertionWriter();record;[expression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeBitwiseNegate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>BitwiseNegationExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [subExpression=expression.getExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>subExpression;visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();box;[]</InnerMethodInvoke>
                <InnerMethodInvoke>bitwiseNegate;call;[controller.getMethodVisitor()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();replace;[ClassHelper.OBJECT_TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getAssertionWriter();record;[expression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeNotExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>NotExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [subExpression=expression.getExpression()]</InnerVar>
                <InnerVar>int [mark=controller.getOperandStack().getStackLength()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>subExpression;visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();castToBool;[mark, true]</InnerMethodInvoke>
                <InnerMethodInvoke>BytecodeHelper;negateBoolean;[controller.getMethodVisitor()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getAssertionWriter();record;[expression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>