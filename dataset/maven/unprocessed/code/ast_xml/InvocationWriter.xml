<Class>
    <Id>480</Id>
    <Package>org.codehaus.groovy.classgen.asm</Package>
    <ClassName>InvocationWriter</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>invokeMethodOnCurrent</FieldName>
            <FieldType>MethodCallerMultiAdapter</FieldType>
        </Field>
        <Field>
            <FieldName>invokeMethodOnSuper</FieldName>
            <FieldType>MethodCallerMultiAdapter</FieldType>
        </Field>
        <Field>
            <FieldName>invokeMethod</FieldName>
            <FieldType>MethodCallerMultiAdapter</FieldType>
        </Field>
        <Field>
            <FieldName>invokeStaticMethod</FieldName>
            <FieldType>MethodCallerMultiAdapter</FieldType>
        </Field>
        <Field>
            <FieldName>invokeClosureMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>castToVargsArray</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>CLASS_FOR_NAME_STRING</FieldName>
            <FieldType>MethodNode</FieldType>
        </Field>
        <Field>
            <FieldName>asTypeMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>castToTypeMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>castToClassMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>castToStringMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>castToEnumMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>selectConstructorAndTransformArguments</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>controller</FieldName>
            <FieldType>WriterController</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>InvocationWriter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wc</ParamName>
                    <FieldType>WriterController</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeInvokeMethodCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>MethodCallExpression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>useSuper</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>adapter</ParamName>
                    <FieldType>MethodCallerMultiAdapter</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [objectExpression=call.getObjectExpression()]</InnerVar>
                <InnerVar>Expression [messageName=new CastExpression(ClassHelper.STRING_TYPE,call.getMethod())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>origin</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>adapter</ParamName>
                    <FieldType>MethodCallerMultiAdapter</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>safe</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>spreadSafe</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>implicitThis</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [cn=controller.getClassNode()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;makeCall;[origin, new ClassExpression(cn), receiver, message, arguments, adapter, safe, spreadSafe, implicitThis]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeDirectMethodCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>target</ParamName>
                    <FieldType>MethodNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>implicitThis</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <FieldType>TupleExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [methodName=target.getName()]</InnerVar>
                <InnerVar>CompileStack [compileStack=controller.getCompileStack()]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>ClassNode [declaringClass=target.getDeclaringClass()]</InnerVar>
                <InnerVar>ClassNode [classNode=controller.getClassNode()]</InnerVar>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>int [opcode=INVOKEVIRTUAL]</InnerVar>
                <InnerVar>int [argumentsToRemove=0]</InnerVar>
                <InnerVar>int [stackSize=operandStack.getStackLength()]</InnerVar>
                <InnerVar>String [owner=BytecodeHelper.getClassInternalName(declaringClass)]</InnerVar>
                <InnerVar>ClassNode [receiverType=receiver != null ? controller.getTypeChooser().resolveType(receiver,classNode) : declaringClass]</InnerVar>
                <InnerVar>String [desc=BytecodeHelper.getMethodDescriptor(target.getReturnType(),target.getParameters())]</InnerVar>
                <InnerVar>ClassNode [ret=target.getReturnType().redirect()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;loadArguments;[args.getExpressions(), target.getParameters()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[opcode, owner, methodName, desc, opcode == INVOKEINTERFACE]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();remove;[argumentsToRemove]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();push;[ret]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lastIsArray</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>argumentList</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [last=argumentList.get(pos)]</InnerVar>
                <InnerVar>ClassNode [type=controller.getTypeChooser().resolveType(last,controller.getClassNode())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadArguments</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>argumentList</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>para</ParamName>
                    <FieldType>Parameter[]</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [lastParaType=para[para.length - 1].getOriginType()]</InnerVar>
                <InnerVar>AsmClassGenerator [acg=controller.getAcg()]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeDirectCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>origin</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>adapter</ParamName>
                    <FieldType>MethodCallerMultiAdapter</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>implicitThis</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>containsSpreadExpression</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [fittingAdapter=adapter == invokeMethodOnCurrent || adapter == invokeStaticMethod]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeCachedCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>origin</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>sender</ParamName>
                    <FieldType>ClassExpression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>adapter</ParamName>
                    <FieldType>MethodCallerMultiAdapter</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>safe</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>spreadSafe</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>implicitThis</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>containsSpreadExpression</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeUncachedCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>origin</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>sender</ParamName>
                    <FieldType>ClassExpression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>adapter</ParamName>
                    <FieldType>MethodCallerMultiAdapter</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>safe</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>spreadSafe</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>implicitThis</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>containsSpreadExpression</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>CompileStack [compileStack=controller.getCompileStack()]</InnerVar>
                <InnerVar>AsmClassGenerator [acg=controller.getAcg()]</InnerVar>
                <InnerVar>int [operandsToRemove=2]</InnerVar>
                <InnerVar>int [numberOfArguments=containsSpreadExpression ? -1 : AsmClassGenerator.argumentSize(arguments)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>compileStack;pushLHS;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;pushImplicitThis;[implicitThis]</InnerMethodInvoke>
                <InnerMethodInvoke>receiver;visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;box;[]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;popImplicitThis;[]</InnerMethodInvoke>
                <InnerMethodInvoke>adapter;call;[controller.getMethodVisitor(), numberOfArguments, safe, spreadSafe]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;popLHS;[]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;replace;[ClassHelper.OBJECT_TYPE, operandsToRemove]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>origin</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>sender</ParamName>
                    <FieldType>ClassExpression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>adapter</ParamName>
                    <FieldType>MethodCallerMultiAdapter</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>safe</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>spreadSafe</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>implicitThis</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [containsSpreadExpression=AsmClassGenerator.containsSpreadExpression(arguments)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;makeUncachedCall;[origin, sender, receiver, message, arguments, adapter, safe, spreadSafe, implicitThis, containsSpreadExpression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeClassForNameCall</MethodName>
            <MethodComment>/** 
 * if Class.forName(x) is recognized, make a direct method call
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>origin</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassExpression [ce=(ClassExpression)receiver]</InnerVar>
                <InnerVar>String [msg=getMethodName(message)]</InnerVar>
                <InnerVar>ArgumentListExpression [ae=makeArgumentList(arguments)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeArgumentList</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ArgumentListExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ArgumentListExpression [ae]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMethodName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [methodName=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeInvokeMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>MethodCallExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isClosureCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>MethodCallExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [classNode=controller.getClassNode()]</InnerVar>
                <InnerVar>String [methodName=call.getMethodAsString()]</InnerVar>
                <InnerVar>FieldNode [field=classNode.getDeclaredField(methodName)]</InnerVar>
                <InnerVar>Expression [arguments=call.getArguments()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invokeClosure</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AsmClassGenerator [acg=controller.getAcg()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>acg;visitVariableExpression;[new VariableExpression(methodName)]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();box;[]</InnerMethodInvoke>
                <InnerMethodInvoke>invokeClosureMethod;call;[controller.getMethodVisitor()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();replace;[ClassHelper.OBJECT_TYPE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isStaticInvocation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>MethodCallExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>usesSuper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>MethodCallExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [expression=call.getObjectExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeInvokeStaticMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>StaticMethodCallExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;makeCall;[call, new ClassExpression(call.getOwnerType()), new ConstantExpression(call.getMethod()), call.getArguments(), InvocationWriter.invokeStaticMethod, false, false, false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeDirectConstructorCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>ConstructorCallExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StatementMeta [meta=(StatementMeta)call.getNodeMetaData(StatementMeta.class)]</InnerVar>
                <InnerVar>ConstructorNode [cn=null]</InnerVar>
                <InnerVar>String [ownerDescriptor=prepareConstructorCall(cn)]</InnerVar>
                <InnerVar>TupleExpression [args=makeArgumentList(call.getArguments())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;loadArguments;[args.getExpressions(), cn.getParameters()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;finnishConstructorCall;[cn, ownerDescriptor, args.getExpressions().size()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareConstructorCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cn</ParamName>
                    <FieldType>ConstructorNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [owner=BytecodeHelper.getClassInternalName(cn.getDeclaringClass())]</InnerVar>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitTypeInsn;[NEW, owner]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[DUP]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finnishConstructorCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cn</ParamName>
                    <FieldType>ConstructorNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>ownerDescriptor</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>argsToRemove</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [desc=BytecodeHelper.getMethodDescriptor(ClassHelper.VOID_TYPE,cn.getParameters())]</InnerVar>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESPECIAL, ownerDescriptor, "&lt;init&gt;", desc, false]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();remove;[argsToRemove]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();push;[cn.getDeclaringClass()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeNormalConstructorCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>ConstructorCallExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [arguments=call.getArguments()]</InnerVar>
                <InnerVar>Expression [receiverClass=new ClassExpression(call.getType())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getCallSiteWriter();makeCallSite;[receiverClass, CallSiteWriter.CONSTRUCTOR, arguments, false, false, false, false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeInvokeConstructor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>ConstructorCallExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeNormalConstructorCall;[call]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeAICCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>ConstructorCallExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConstructorNode [cn=call.getType().getDeclaredConstructors().get(0)]</InnerVar>
                <InnerVar>OperandStack [os=controller.getOperandStack()]</InnerVar>
                <InnerVar>String [ownerDescriptor=prepareConstructorCall(cn)]</InnerVar>
                <InnerVar>List&lt;Expression&gt; [args=makeArgumentList(call.getArguments()).getExpressions()]</InnerVar>
                <InnerVar>Parameter[] [params=cn.getParameters()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getCompileStack();pushImplicitThis;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();popImplicitThis;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;finnishConstructorCall;[cn, ownerDescriptor, args.size()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadVariableWithReference</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>var</ParamName>
                    <FieldType>VariableExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeSingleArgumentCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getCallSiteWriter();makeSingleArgumentCall;[receiver, message, arguments]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeSpecialConstructorCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>ConstructorCallExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getCompileStack();pushInSpecialConstructorCall;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;visitSpecialConstructorCall;[call]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();pop;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitSpecialConstructorCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>ConstructorCallExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [callNode=controller.getClassNode()]</InnerVar>
                <InnerVar>List&lt;ConstructorNode&gt; [constructors=sortConstructors(call,callNode)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sortConstructors</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ConstructorNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>ConstructorCallExpression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>callNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;ConstructorNode&gt; [constructors=new ArrayList&lt;ConstructorNode&gt;(callNode.getDeclaredConstructors())]</InnerVar>
                <InnerVar>Comparator [comp=new Comparator(){
  public int compare(  Object arg0,  Object arg1){
    ConstructorNode c0=(ConstructorNode)arg0;
    ConstructorNode c1=(ConstructorNode)arg1;
    String descriptor0=BytecodeHelper.getMethodDescriptor(ClassHelper.VOID_TYPE,c0.getParameters());
    String descriptor1=BytecodeHelper.getMethodDescriptor(ClassHelper.VOID_TYPE,c1.getParameters());
    return descriptor0.compareTo(descriptor1);
  }
}
]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Collections;sort;[constructors, comp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arg0</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>arg1</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConstructorNode [c0=(ConstructorNode)arg0]</InnerVar>
                <InnerVar>ConstructorNode [c1=(ConstructorNode)arg1]</InnerVar>
                <InnerVar>String [descriptor0=BytecodeHelper.getMethodDescriptor(ClassHelper.VOID_TYPE,c0.getParameters())]</InnerVar>
                <InnerVar>String [descriptor1=BytecodeHelper.getMethodDescriptor(ClassHelper.VOID_TYPE,c1.getParameters())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeDirectConstructorCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constructors</ParamName>
                    <FieldType>ConstructorNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>ConstructorCallExpression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>callNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [arguments=call.getArguments()]</InnerVar>
                <InnerVar>List&lt;Expression&gt; [argumentList]</InnerVar>
                <InnerVar>ConstructorNode [cn=getMatchingConstructor(constructors,argumentList)]</InnerVar>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>Parameter[] [params=cn.getParameters()]</InnerVar>
                <InnerVar>String [descriptor=BytecodeHelper.getMethodDescriptor(ClassHelper.VOID_TYPE,params)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESPECIAL, BytecodeHelper.getClassInternalName(callNode), "&lt;init&gt;", descriptor, false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeMOPBasedConstructorCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constructors</ParamName>
                    <FieldType>ConstructorNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>ConstructorCallExpression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>callNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>TreeMap&lt;Integer,ConstructorNode&gt; [sortedConstructors=new TreeMap&lt;Integer,ConstructorNode&gt;()]</InnerVar>
                <InnerVar>Label[] [targets=new Label[constructors.size()]]</InnerVar>
                <InnerVar>int[] [indices=new int[constructors.size()]]</InnerVar>
                <InnerVar>Iterator&lt;Integer&gt; [hashIt=sortedConstructors.keySet().iterator()]</InnerVar>
                <InnerVar>Iterator&lt;ConstructorNode&gt; [constructorIt=sortedConstructors.values().iterator()]</InnerVar>
                <InnerVar>Label [defaultLabel=new Label()]</InnerVar>
                <InnerVar>Label [afterSwitch=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>call.getArguments();visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[DUP]</InnerMethodInvoke>
                <InnerMethodInvoke>BytecodeHelper;pushConstant;[mv, -1]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getAcg();visitClassExpression;[new ClassExpression(callNode)]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;remove;[1]</InnerMethodInvoke>
                <InnerMethodInvoke>selectConstructorAndTransformArguments;call;[mv]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[SWAP]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLookupSwitchInsn;[defaultLabel, indices, targets]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[defaultLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[NEW, "java/lang/IllegalArgumentException"]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[DUP]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLdcInsn;["This class has been compiled with a super class which is binary incompatible with the current super class found on classpath. You should recompile this class with the new version."]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESPECIAL, "java/lang/IllegalArgumentException", "&lt;init&gt;", "(Ljava/lang/String;)V", false]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ATHROW]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[afterSwitch]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[POP]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadAndCastElement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>operandStack</ParamName>
                    <FieldType>OperandStack</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <FieldType>MethodVisitor</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <FieldType>Parameter[]</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>p</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [type=parameters[p].getType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>operandStack;push;[ClassHelper.OBJECT_TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[DUP]</InnerMethodInvoke>
                <InnerMethodInvoke>BytecodeHelper;pushConstant;[mv, p]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[AALOAD]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;push;[ClassHelper.OBJECT_TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;doGroovyCast;[type]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;swap;[]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;remove;[2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMatchingConstructor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ConstructorNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constructors</ParamName>
                    <FieldType>ConstructorNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>argumentList</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConstructorNode [lastMatch=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>castToNonPrimitiveIfNecessary</MethodName>
            <MethodComment>/** 
 * This converts sourceType to a non primitive by using Groovy casting. sourceType might be a primitive This might be done using SBA#castToType
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sourceType</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>targetType</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>OperandStack [os=controller.getOperandStack()]</InnerVar>
                <InnerVar>ClassNode [boxedType=os.box()]</InnerVar>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>castNonPrimitiveToBool</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>last</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>BytecodeHelper;unbox;[mv, ClassHelper.boolean_TYPE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>coerce</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>from</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>target</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>OperandStack [os=controller.getOperandStack()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>os;box;[]</InnerMethodInvoke>
                <InnerMethodInvoke>(new ClassExpression(target));visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>os;remove;[1]</InnerMethodInvoke>
                <InnerMethodInvoke>asTypeMethod;call;[mv]</InnerMethodInvoke>
                <InnerMethodInvoke>BytecodeHelper;doCast;[mv, target]</InnerMethodInvoke>
                <InnerMethodInvoke>os;replace;[target]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>