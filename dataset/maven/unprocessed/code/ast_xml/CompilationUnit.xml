<Class>
    <Id>510</Id>
    <Package>org.codehaus.groovy.control</Package>
    <ClassName>CompilationUnit</ClassName>
    <SuperClass>ProcessingUnit</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CompilationUnit  /** 
 * The CompilationUnit collects all compilation data as it is generated by the compiler system. You can use this object to add additional source units to the compilation, or force the compilation to be run again (to affect only the deltas). &lt;p&gt; You can also add PhaseOperations to this compilation using the addPhaseOperation method. This is commonly used when you want to wire a new AST Transformation into the compilation.
 * @author &lt;a href="mailto:cpoirier@dreaming.org"&gt;Chris Poirier&lt;/a&gt;
 * @author &lt;a href="mailto:blackdrag@gmx.org"&gt;Jochen Theodorou&lt;/a&gt;
 * @author &lt;a href="mailto:roshandawrani@codehaus.org"&gt;Roshan Dawrani&lt;/a&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>astTransformationsContext</FieldName>
            <FieldType>ASTTransformationsContext</FieldType>
        </Field>
        <Field>
            <FieldName>sources</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>sources</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>summariesBySourceName</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>summariesByPublicClassName</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>classSourcesByPublicClassName</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>names</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>names</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>queuedSources</FieldName>
            <FieldType>LinkedList</FieldType>
        </Field>
        <Field>
            <FieldName>queuedSources</FieldName>
            <FieldType>SourceUnit</FieldType>
        </Field>
        <Field>
            <FieldName>ast</FieldName>
            <FieldType>CompileUnit</FieldType>
        </Field>
        <Field>
            <FieldName>generatedClasses</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>generatedClasses</FieldName>
            <FieldType>GroovyClass</FieldType>
        </Field>
        <Field>
            <FieldName>verifier</FieldName>
            <FieldType>Verifier</FieldType>
        </Field>
        <Field>
            <FieldName>debug</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>configured</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>classgenCallback</FieldName>
            <FieldType>ClassgenCallback</FieldType>
        </Field>
        <Field>
            <FieldName>progressCallback</FieldName>
            <FieldType>ProgressCallback</FieldType>
        </Field>
        <Field>
            <FieldName>resolveVisitor</FieldName>
            <FieldType>ResolveVisitor</FieldType>
        </Field>
        <Field>
            <FieldName>staticImportVisitor</FieldName>
            <FieldType>StaticImportVisitor</FieldType>
        </Field>
        <Field>
            <FieldName>optimizer</FieldName>
            <FieldType>OptimizerVisitor</FieldType>
        </Field>
        <Field>
            <FieldName>classNodeResolver</FieldName>
            <FieldType>ClassNodeResolver</FieldType>
        </Field>
        <Field>
            <FieldName>phaseOperations</FieldName>
            <FieldType>LinkedList[]</FieldType>
        </Field>
        <Field>
            <FieldName>newPhaseOperations</FieldName>
            <FieldType>LinkedList[]</FieldType>
        </Field>
        <Field>
            <FieldName>nameIterator</FieldName>
            <FieldType>Iterator</FieldType>
        </Field>
        <Field>
            <FieldName>nameIterator</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>resolve</FieldName>
            <FieldType>SourceUnitOperation</FieldType>
        </Field>
        <Field>
            <FieldName>staticImport</FieldName>
            <FieldType>PrimaryClassNodeOperation</FieldType>
        </Field>
        <Field>
            <FieldName>convert</FieldName>
            <FieldType>SourceUnitOperation</FieldType>
        </Field>
        <Field>
            <FieldName>output</FieldName>
            <FieldType>GroovyClassOperation</FieldType>
        </Field>
        <Field>
            <FieldName>compileCompleteCheck</FieldName>
            <FieldType>SourceUnitOperation</FieldType>
        </Field>
        <Field>
            <FieldName>classgen</FieldName>
            <FieldType>PrimaryClassNodeOperation</FieldType>
        </Field>
        <Field>
            <FieldName>mark</FieldName>
            <FieldType>SourceUnitOperation</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CompilationUnit</MethodName>
            <MethodComment>/** 
 * Initializes the CompilationUnit with defaults.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CompilationUnit</MethodName>
            <MethodComment>/** 
 * Initializes the CompilationUnit with defaults except for class loader.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>loader</ParamName>
                    <FieldType>GroovyClassLoader</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CompilationUnit</MethodName>
            <MethodComment>/** 
 * Initializes the CompilationUnit with no security considerations.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <FieldType>CompilerConfiguration</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CompilationUnit</MethodName>
            <MethodComment>/** 
 * Initializes the CompilationUnit with a CodeSource for controlling security stuff and a class loader for loading classes.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <FieldType>CompilerConfiguration</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>security</ParamName>
                    <FieldType>CodeSource</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>loader</ParamName>
                    <FieldType>GroovyClassLoader</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CompilationUnit</MethodName>
            <MethodComment>/** 
 * Initializes the CompilationUnit with a CodeSource for controlling security stuff, a class loader for loading classes, and a class loader for loading AST transformations. &lt;b&gt;Note&lt;/b&gt; The transform loader must be able to load compiler classes. That means CompilationUnit.class.classLoader must be at last a parent to transformLoader. The other loader has no such constraint.
 * @param transformLoader - the loader for transforms
 * @param loader          - loader used to resolve classes against during compilation
 * @param security        - security setting for the compilation
 * @param configuration   - compilation configuration
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <FieldType>CompilerConfiguration</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>security</ParamName>
                    <FieldType>CodeSource</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>loader</ParamName>
                    <FieldType>GroovyClassLoader</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>transformLoader</ParamName>
                    <FieldType>GroovyClassLoader</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addPhaseOperation;[new SourceUnitOperation(){
  public void call(  SourceUnit source) throws CompilationFailedException {
    source.parse();
  }
}
, Phases.PARSING]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addPhaseOperation;[convert, Phases.CONVERSION]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addPhaseOperation;[new PrimaryClassNodeOperation(){
  public void call(  SourceUnit source,  GeneratorContext context,  ClassNode classNode) throws CompilationFailedException {
    EnumVisitor ev=new EnumVisitor(CompilationUnit.this,source);
    ev.visitClass(classNode);
  }
}
, Phases.CONVERSION]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addPhaseOperation;[resolve, Phases.SEMANTIC_ANALYSIS]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addPhaseOperation;[staticImport, Phases.SEMANTIC_ANALYSIS]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addPhaseOperation;[new PrimaryClassNodeOperation(){
  @Override public void call(  SourceUnit source,  GeneratorContext context,  ClassNode classNode) throws CompilationFailedException {
    InnerClassVisitor iv=new InnerClassVisitor(CompilationUnit.this,source);
    iv.visitClass(classNode);
  }
}
, Phases.SEMANTIC_ANALYSIS]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addPhaseOperation;[new PrimaryClassNodeOperation(){
  public void call(  SourceUnit source,  GeneratorContext context,  ClassNode classNode) throws CompilationFailedException {
    TraitComposer.doExtendTraits(classNode,source,CompilationUnit.this);
  }
}
, Phases.CANONICALIZATION]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addPhaseOperation;[compileCompleteCheck, Phases.CANONICALIZATION]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addPhaseOperation;[classgen, Phases.CLASS_GENERATION]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addPhaseOperation;[output]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addPhaseOperation;[new PrimaryClassNodeOperation(){
  @Override public void call(  SourceUnit source,  GeneratorContext context,  ClassNode classNode) throws CompilationFailedException {
    AnnotationCollectorTransform.ClassChanger actt=new AnnotationCollectorTransform.ClassChanger();
    actt.transformClass(classNode);
  }
}
, Phases.SEMANTIC_ANALYSIS]</InnerMethodInvoke>
                <InnerMethodInvoke>ASTTransformationVisitor;addPhaseOperations;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addPhaseOperation;[new PrimaryClassNodeOperation(){
  @Override public void call(  SourceUnit source,  GeneratorContext context,  ClassNode classNode) throws CompilationFailedException {
    StaticVerifier sv=new StaticVerifier();
    sv.visitClass(classNode,source);
  }
}
, Phases.SEMANTIC_ANALYSIS]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addPhaseOperation;[new PrimaryClassNodeOperation(){
  @Override public void call(  SourceUnit source,  GeneratorContext context,  ClassNode classNode) throws CompilationFailedException {
    InnerClassCompletionVisitor iv=new InnerClassCompletionVisitor(CompilationUnit.this,source);
    iv.visitClass(classNode);
  }
}
, Phases.CANONICALIZATION]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addPhaseOperation;[new PrimaryClassNodeOperation(){
  public void call(  SourceUnit source,  GeneratorContext context,  ClassNode classNode) throws CompilationFailedException {
    EnumCompletionVisitor ecv=new EnumCompletionVisitor(CompilationUnit.this,source);
    ecv.visitClass(classNode);
  }
}
, Phases.CANONICALIZATION]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>source;parse;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <FieldType>GeneratorContext</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>EnumVisitor [ev=new EnumVisitor(CompilationUnit.this,source)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ev;visitClass;[classNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <FieldType>GeneratorContext</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InnerClassVisitor [iv=new InnerClassVisitor(CompilationUnit.this,source)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>iv;visitClass;[classNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <FieldType>GeneratorContext</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>TraitComposer;doExtendTraits;[classNode, source, CompilationUnit.this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <FieldType>GeneratorContext</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AnnotationCollectorTransform.ClassChanger [actt=new AnnotationCollectorTransform.ClassChanger()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>actt;transformClass;[classNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <FieldType>GeneratorContext</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StaticVerifier [sv=new StaticVerifier()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sv;visitClass;[classNode, source]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <FieldType>GeneratorContext</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InnerClassCompletionVisitor [iv=new InnerClassCompletionVisitor(CompilationUnit.this,source)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>iv;visitClass;[classNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <FieldType>GeneratorContext</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>EnumCompletionVisitor [ecv=new EnumCompletionVisitor(CompilationUnit.this,source)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ecv;visitClass;[classNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTransformLoader</MethodName>
            <MethodComment>/** 
 * Returns the class loader for loading AST transformations.
 * @return - the transform class loader
 */
</MethodComment>
            <ReturnType>GroovyClassLoader</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addPhaseOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <FieldType>SourceUnitOperation</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>phase</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>phaseOperations[phase];add;[op]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addPhaseOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <FieldType>PrimaryClassNodeOperation</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>phase</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>phaseOperations[phase];add;[op]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addFirstPhaseOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <FieldType>PrimaryClassNodeOperation</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>phase</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>phaseOperations[phase];add;[0, op]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addPhaseOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <FieldType>GroovyClassOperation</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>phaseOperations[Phases.OUTPUT];addFirst;[op]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addNewPhaseOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <FieldType>SourceUnitOperation</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>phase</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>newPhaseOperations[phase];add;[op]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>configure</MethodName>
            <MethodComment>/** 
 * Configures its debugging mode and classloader classpath from a given compiler configuration. This cannot be done more than once due to limitations in  {@link java.net.URLClassLoader URLClassLoader}.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <FieldType>CompilerConfiguration</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>appendCompilerConfigurationClasspathToClassLoader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <FieldType>CompilerConfiguration</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <FieldType>GroovyClassLoader</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAST</MethodName>
            <MethodComment>/** 
 * Returns the CompileUnit that roots our AST.
 */
</MethodComment>
            <ReturnType>CompileUnit</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSummariesBySourceName</MethodName>
            <MethodComment>/** 
 * Get the source summaries
 */
</MethodComment>
            <ReturnType>Map</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSummariesByPublicClassName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Map</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassSourcesByPublicClassName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Map</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isPublicClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClasses</MethodName>
            <MethodComment>/** 
 * Get the GroovyClasses generated by compile().
 */
</MethodComment>
            <ReturnType>List</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFirstClassNode</MethodName>
            <MethodComment>/** 
 * Convenience routine to get the first ClassNode, for when you are sure there is only one.
 */
</MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassNode</MethodName>
            <MethodComment>/** 
 * Convenience routine to get the named ClassNode.
 */
</MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode[] [result=new ClassNode[]{null}]</InnerVar>
                <InnerVar>PrimaryClassNodeOperation [handler=new PrimaryClassNodeOperation(){
  public void call(  SourceUnit source,  GeneratorContext context,  ClassNode classNode){
    if (classNode.getName().equals(name)) {
      result[0]=classNode;
    }
  }
}
]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <FieldType>GeneratorContext</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getASTTransformationsContext</MethodName>
            <MethodComment>/** 
 * @return the AST transformations current context
 */
</MethodComment>
            <ReturnType>ASTTransformationsContext</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addSources</MethodName>
            <MethodComment>/** 
 * Adds a set of file paths to the unit.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>paths</ParamName>
                    <FieldType>String[]</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addSources</MethodName>
            <MethodComment>/** 
 * Adds a set of source files to the unit.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>files</ParamName>
                    <FieldType>File[]</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addSource</MethodName>
            <MethodComment>/** 
 * Adds a source file to the unit.
 */
</MethodComment>
            <ReturnType>SourceUnit</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <FieldType>File</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addSource</MethodName>
            <MethodComment>/** 
 * Adds a source file to the unit.
 */
</MethodComment>
            <ReturnType>SourceUnit</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>url</ParamName>
                    <FieldType>URL</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addSource</MethodName>
            <MethodComment>/** 
 * Adds a InputStream source to the unit.
 */
</MethodComment>
            <ReturnType>SourceUnit</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>stream</ParamName>
                    <FieldType>InputStream</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ReaderSource [source=new InputStreamReaderSource(stream,configuration)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addSource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SourceUnit</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>scriptText</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addSource</MethodName>
            <MethodComment>/** 
 * Adds a SourceUnit to the unit.
 */
</MethodComment>
            <ReturnType>SourceUnit</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=source.getName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>source;setClassLoader;[this.classLoader]</InnerMethodInvoke>
                <InnerMethodInvoke>queuedSources;add;[source]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * Returns an iterator on the unit's SourceUnits.
 */
</MethodComment>
            <ReturnType>SourceUnit</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasNext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SourceUnit</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [name=nameIterator.next()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addClassNode</MethodName>
            <MethodComment>/** 
 * Adds a ClassNode directly to the unit (ie. without source). WARNING: the source is needed for error reporting, using this method without setting a SourceUnit will cause NullPinterExceptions
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ModuleNode [module=new ModuleNode(this.ast)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.ast;addModule;[module]</InnerMethodInvoke>
                <InnerMethodInvoke>module;addClass;[node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>writer</ParamName>
                    <FieldType>ClassVisitor</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setClassgenCallback</MethodName>
            <MethodComment>/** 
 * Sets a ClassgenCallback.  You can have only one, and setting it to null removes any existing setting.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>visitor</ParamName>
                    <FieldType>ClassgenCallback</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <FieldType>ProcessingUnit</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>phase</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setProgressCallback</MethodName>
            <MethodComment>/** 
 * Sets a ProgressCallback.  You can have only one, and setting it to null removes any existing setting.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>callback</ParamName>
                    <FieldType>ProgressCallback</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassgenCallback</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassgenCallback</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProgressCallback</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ProgressCallback</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment>/** 
 * Synonym for compile(Phases.ALL).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;compile;[Phases.ALL]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment>/** 
 * Compiles the compilation unit from sources.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>throughPhase</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;gotoPhase;[Phases.INITIALIZATION]</InnerMethodInvoke>
                <InnerMethodInvoke>errorCollector;failIfErrors;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processPhaseOperations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ph</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LinkedList [ops=phaseOperations[ph]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processNewPhaseOperations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>currPhase</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LinkedList [currentPhaseNewOps=newPhaseOperations[currPhase]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;recordPhaseOpsInAllOtherPhases;[currPhase]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doPhaseOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>recordPhaseOpsInAllOtherPhases</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>currPhase</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sortClasses</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dequeued</MethodName>
            <MethodComment>/** 
 * Dequeues any source units add through addSource and resets the compiler phase to initialization. &lt;p&gt; Note: this does not mean a file is recompiled. If a SourceUnit has already passed a phase it is skipped until a higher phase is reached.
 * @return true if there was a queued source
 * @throws CompilationFailedException
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [dequeue=!queuedSources.isEmpty()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;ClassNode&gt; [classes=source.ast.getClasses()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <FieldType>GeneratorContext</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>staticImportVisitor;visitClass;[classNode, source]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>source;convert;[]</InnerMethodInvoke>
                <InnerMethodInvoke>CompilationUnit.this.ast;addModule;[source.getAST()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gclass</ParamName>
                    <FieldType>GroovyClass</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=gclass.getName().replace('.',File.separatorChar) + ".class"]</InnerVar>
                <InnerVar>File [path=new File(configuration.getTargetDirectory(),name)]</InnerVar>
                <InnerVar>File [directory=path.getParentFile()]</InnerVar>
                <InnerVar>byte[] [bytes=gclass.getBytes()]</InnerVar>
                <InnerVar>FileOutputStream [stream=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;ClassNode&gt; [classes=source.ast.getClasses()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>needSortedInput</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <FieldType>GeneratorContext</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LabelVerifier [lv=new LabelVerifier(source)]</InnerVar>
                <InnerVar>ClassCompletionVerifier [completionVerifier=new ClassCompletionVerifier(source)]</InnerVar>
                <InnerVar>ExtendedVerifier [xverifier=new ExtendedVerifier(source)]</InnerVar>
                <InnerVar>ClassVisitor [visitor=createClassVisitor()]</InnerVar>
                <InnerVar>String [sourceName=(source == null ? classNode.getModule().getDescription() : source.getName())]</InnerVar>
                <InnerVar>AsmClassGenerator [generator=new AsmClassGenerator(source,context,visitor,sourceName)]</InnerVar>
                <InnerVar>byte[] [bytes=((ClassWriter)visitor).toByteArray()]</InnerVar>
                <InnerVar>LinkedList [innerClasses=generator.getInnerClasses()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>optimizer;visitClass;[classNode, source]</InnerMethodInvoke>
                <InnerMethodInvoke>lv;visitClass;[classNode]</InnerMethodInvoke>
                <InnerMethodInvoke>completionVerifier;visitClass;[classNode]</InnerMethodInvoke>
                <InnerMethodInvoke>xverifier;visitClass;[classNode]</InnerMethodInvoke>
                <InnerMethodInvoke>getErrorCollector();failIfErrors;[]</InnerMethodInvoke>
                <InnerMethodInvoke>generator;visitClass;[classNode]</InnerMethodInvoke>
                <InnerMethodInvoke>generatedClasses;add;[new GroovyClass(classNode.getName(),bytes)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createClassVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassVisitor</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CompilerConfiguration [config=getConfiguration()]</InnerVar>
                <InnerVar>int [computeMaxStackAndFrames=ClassWriter.COMPUTE_MAXS]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompileUnit [cu=getAST()]</InnerVar>
                <InnerVar>ClassNode [cn=cu.getClass(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCommonSuperClassNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>d</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCommonSuperClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arg1</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>arg2</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [a=getClassNode(arg1.replace('/','.'))]</InnerVar>
                <InnerVar>ClassNode [b=getClassNode(arg2.replace('/','.'))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mark</MethodName>
            <MethodComment>/** 
 * Updates the phase marker on all sources.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;applyToSourceUnits;[mark]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>applyToSourceUnits</MethodName>
            <MethodComment>/** 
 * A loop driver for applying operations to all SourceUnits. Automatically skips units that have already been processed through the current phase.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>body</ParamName>
                    <FieldType>SourceUnitOperation</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getErrorCollector();failIfErrors;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <FieldType>GeneratorContext</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>needSortedInput</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gclass</ParamName>
                    <FieldType>GroovyClass</FieldType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSuperClassCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>element</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [count=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSuperInterfaceCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>element</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [count=1]</InnerVar>
                <InnerVar>ClassNode[] [interfaces=element.getInterfaces()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPrimaryClassNodes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>List</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sort</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;ClassNode&gt; [unsorted=new ArrayList&lt;ClassNode&gt;()]</InnerVar>
                <InnerVar>int[] [indexClass=new int[unsorted.size()]]</InnerVar>
                <InnerVar>int[] [indexInterface=new int[unsorted.size()]]</InnerVar>
                <InnerVar>List&lt;ClassNode&gt; [sorted=getSorted(indexInterface,unsorted)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sorted;addAll;[getSorted(indexClass,unsorted)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSorted</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <FieldType>int[]</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>unsorted</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;ClassNode&gt; [sorted=new ArrayList&lt;ClassNode&gt;(unsorted.size())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>applyToPrimaryClassNodes</MethodName>
            <MethodComment>/** 
 * A loop driver for applying operations to all primary ClassNodes in our AST.  Automatically skips units that have already been processed through the current phase.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>body</ParamName>
                    <FieldType>PrimaryClassNodeOperation</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Iterator [classNodes=getPrimaryClassNodes(body.needSortedInput()).iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getErrorCollector();failIfErrors;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convertUncaughtExceptionToCompilationError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <FieldType>Throwable</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ErrorCollector [nestedCollector=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>applyToGeneratedGroovyClasses</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>body</ParamName>
                    <FieldType>GroovyClassOperation</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getErrorCollector();failIfErrors;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>changeBugText</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <FieldType>GroovyBugError</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>e;setBugText;["exception in phase '" + getPhaseDescription() + "' in source unit '"+ ((context != null) ? context.getName() : "?")+ "' "+ e.getBugText()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassNodeResolver</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNodeResolver</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setClassNodeResolver</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classNodeResolver</ParamName>
                    <FieldType>ClassNodeResolver</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>