<Class>
    <Id>113</Id>
    <Package>org.codehaus.groovy.vmplugin.v5</Package>
    <ClassName>PluginDefaultGroovyMethods</ClassName>
    <SuperClass>DefaultGroovyMethodsSupport</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PluginDefaultGroovyMethods  /** 
 * This class defines new Java 5 specific groovy methods which extend the normal JDK classes inside the Groovy environment. Static methods are used with the first parameter the destination class.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>NO_ARGS</FieldName>
            <FieldType>Object[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment>/** 
 * This method is called by the ++ operator for enums. It will invoke Groovy's default next behaviour for enums do not have their own next method.
 * @param self an Enum
 * @return the next defined enum from the enum class
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Enum</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Method[] [methods=self.getClass().getMethods()]</InnerVar>
                <InnerVar>Object[] [values=(Object[])InvokerHelper.invokeStaticMethod(self.getClass(),"values",NO_ARGS)]</InnerVar>
                <InnerVar>int [index=Arrays.asList(values).indexOf(self)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>previous</MethodName>
            <MethodComment>/** 
 * This method is called by the -- operator for enums. It will invoke Groovy's default previous behaviour for enums that do not have their own previous method.
 * @param self an Enum
 * @return the previous defined enum from the enum class
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Enum</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Method[] [methods=self.getClass().getMethods()]</InnerVar>
                <InnerVar>Object[] [values=(Object[])InvokerHelper.invokeStaticMethod(self.getClass(),"values",NO_ARGS)]</InnerVar>
                <InnerVar>int [index=Arrays.asList(values).indexOf(self)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Standard Groovy size() method for StringBuilders.
 * @param builder a StringBuilder
 * @return the length of the StringBuilder
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <FieldType>StringBuilder</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to append multiple objects as string representations to a StringBuilder.
 * @param self  a StringBuilder
 * @param value a value to append
 * @return the StringBuilder on which this operation was invoked
 */
</MethodComment>
            <ReturnType>StringBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>StringBuilder</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putAt</MethodName>
            <MethodComment>/** 
 * Support the range subscript operator for StringBuilder. Index values are treated as characters within the builder.
 * @param self  a StringBuilder
 * @param range a Range
 * @param value the object that's toString() will be inserted
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>StringBuilder</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>range</ParamName>
                    <FieldType>IntRange</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RangeInfo [info=subListBorders(self.length(),range)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;replace;[info.from, info.to, value.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putAt</MethodName>
            <MethodComment>/** 
 * Support the range subscript operator for StringBuilder.
 * @param self  a StringBuilder
 * @param range a Range
 * @param value the object that's toString() will be inserted
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>StringBuilder</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>range</ParamName>
                    <FieldType>EmptyRange</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RangeInfo [info=subListBorders(self.length(),range)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;replace;[info.from, info.to, value.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>plus</MethodName>
            <MethodComment>/** 
 * Appends a String to this StringBuilder.
 * @param self  a StringBuilder
 * @param value a String
 * @return a String
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>StringBuilder</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>