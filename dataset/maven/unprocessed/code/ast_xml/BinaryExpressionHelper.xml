<Class>
    <Id>412</Id>
    <Package>org.codehaus.groovy.classgen.asm</Package>
    <ClassName>BinaryExpressionHelper</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>compareEqualMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>compareNotEqualMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>compareToMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>compareLessThanMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>compareLessThanEqualMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>compareGreaterThanMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>compareGreaterThanEqualMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>findRegexMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>matchRegexMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>isCaseMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>controller</FieldName>
            <FieldType>WriterController</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>BinaryExpressionHelper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wc</ParamName>
                    <FieldType>WriterController</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getController</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>WriterController</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eval</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>BinaryExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assignToArray</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>rhsValueLoader</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ArgumentListExpression [ae=new ArgumentListExpression(index,rhsValueLoader)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getInvocationWriter();makeCall;[parent, receiver, new ConstantExpression("putAt"), ae, InvocationWriter.invokeMethod, false, false, false]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();pop;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rhsValueLoader;visit;[controller.getAcg()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNull</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exp</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateEqual</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>BinaryExpression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>defineVariable</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AsmClassGenerator [acg=controller.getAcg()]</InnerVar>
                <InnerVar>CompileStack [compileStack=controller.getCompileStack()]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>Expression [rightExpression=expression.getRightExpression()]</InnerVar>
                <InnerVar>Expression [leftExpression=expression.getLeftExpression()]</InnerVar>
                <InnerVar>ClassNode [lhsType=controller.getTypeChooser().resolveType(leftExpression,controller.getClassNode())]</InnerVar>
                <InnerVar>ClassNode [rhsType]</InnerVar>
                <InnerVar>boolean [directAssignment=defineVariable &amp;&amp; !(leftExpression instanceof TupleExpression)]</InnerVar>
                <InnerVar>int [rhsValueId]</InnerVar>
                <InnerVar>BytecodeExpression [rhsValueLoader=new VariableSlotLoader(rhsType,rhsValueId,operandStack)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>compileStack;pushLHS;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;popLHS;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rhsValueLoader;visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;removeVar;[rhsValueId]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadInitValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getOperandStack();push;[type]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateCompareExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>compareMethod</ParamName>
                    <FieldType>MethodCaller</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>BinaryExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [leftExp=expression.getLeftExpression()]</InnerVar>
                <InnerVar>TypeChooser [typeChooser=controller.getTypeChooser()]</InnerVar>
                <InnerVar>ClassNode [cn=controller.getClassNode()]</InnerVar>
                <InnerVar>ClassNode [leftType=typeChooser.resolveType(leftExp,cn)]</InnerVar>
                <InnerVar>Expression [rightExp=expression.getRightExpression()]</InnerVar>
                <InnerVar>ClassNode [rightType=typeChooser.resolveType(rightExp,cn)]</InnerVar>
                <InnerVar>boolean [done=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateCompareTo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>BinaryExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [leftExpression=expression.getLeftExpression()]</InnerVar>
                <InnerVar>AsmClassGenerator [acg=controller.getAcg()]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>Expression [rightExpression=expression.getRightExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>leftExpression;visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;box;[]</InnerMethodInvoke>
                <InnerMethodInvoke>rightExpression;visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;box;[]</InnerMethodInvoke>
                <InnerMethodInvoke>compareToMethod;call;[controller.getMethodVisitor()]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;replace;[ClassHelper.Integer_TYPE, 2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateLogicalAndExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>BinaryExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>AsmClassGenerator [acg=controller.getAcg()]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>Label [falseCase=operandStack.jump(IFEQ)]</InnerVar>
                <InnerVar>Label [trueCase=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>expression.getLeftExpression();visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;doGroovyCast;[ClassHelper.boolean_TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>expression.getRightExpression();visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;doGroovyCast;[ClassHelper.boolean_TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;jump;[IFEQ, falseCase]</InnerMethodInvoke>
                <InnerMethodInvoke>ConstantExpression.PRIM_TRUE;visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, trueCase]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[falseCase]</InnerMethodInvoke>
                <InnerMethodInvoke>ConstantExpression.PRIM_FALSE;visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[trueCase]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;remove;[1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateLogicalOrExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>BinaryExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>AsmClassGenerator [acg=controller.getAcg()]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>Label [end=new Label()]</InnerVar>
                <InnerVar>Label [trueCase=operandStack.jump(IFNE)]</InnerVar>
                <InnerVar>Label [falseCase=operandStack.jump(IFEQ)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>expression.getLeftExpression();visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;doGroovyCast;[ClassHelper.boolean_TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>expression.getRightExpression();visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;doGroovyCast;[ClassHelper.boolean_TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[trueCase]</InnerMethodInvoke>
                <InnerMethodInvoke>ConstantExpression.PRIM_TRUE;visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;jump;[GOTO, end]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[falseCase]</InnerMethodInvoke>
                <InnerMethodInvoke>ConstantExpression.PRIM_FALSE;visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[end]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateBinaryExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>binExp</ParamName>
                    <FieldType>BinaryExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompileStack [compileStack=controller.getCompileStack()]</InnerVar>
                <InnerVar>Expression [receiver=binExp.getLeftExpression()]</InnerVar>
                <InnerVar>Expression [arguments=binExp.getRightExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>compileStack;pushLHS;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getInvocationWriter();makeSingleArgumentCall;[receiver, message, arguments]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;popLHS;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateArrayAssignmentWithOperator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>BinaryExpression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>leftBinExpr</ParamName>
                    <FieldType>BinaryExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompileStack [compileStack=getController().getCompileStack()]</InnerVar>
                <InnerVar>AsmClassGenerator [acg=getController().getAcg()]</InnerVar>
                <InnerVar>OperandStack [os=getController().getOperandStack()]</InnerVar>
                <InnerVar>ExpressionAsVariableSlot [subscript=new ExpressionAsVariableSlot(controller,leftBinExpr.getRightExpression(),"subscript")]</InnerVar>
                <InnerVar>ExpressionAsVariableSlot [receiver=new ExpressionAsVariableSlot(controller,leftBinExpr.getLeftExpression(),"receiver")]</InnerVar>
                <InnerVar>MethodCallExpression [getAt=new MethodCallExpression(receiver,"getAt",new ArgumentListExpression(subscript))]</InnerVar>
                <InnerVar>MethodCallExpression [operation=new MethodCallExpression(getAt,method,expression.getRightExpression())]</InnerVar>
                <InnerVar>ExpressionAsVariableSlot [ret=new ExpressionAsVariableSlot(controller,operation,"ret")]</InnerVar>
                <InnerVar>MethodCallExpression [putAt=new MethodCallExpression(receiver,"putAt",new ArgumentListExpression(subscript,ret))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>putAt;visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>os;pop;[]</InnerMethodInvoke>
                <InnerMethodInvoke>os;load;[ret.getType(), ret.getIndex()]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;removeVar;[ret.getIndex()]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;removeVar;[subscript.getIndex()]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;removeVar;[receiver.getIndex()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateBinaryExpressionWithAssignment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>BinaryExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [leftExpression=expression.getLeftExpression()]</InnerVar>
                <InnerVar>AsmClassGenerator [acg=controller.getAcg()]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;evaluateBinaryExpression;[method, expression]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;dup;[]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();pushLHS;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>leftExpression;visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();popLHS;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateInstanceof</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>BinaryExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>Expression [rightExp=expression.getRightExpression()]</InnerVar>
                <InnerVar>ClassNode [classType]</InnerVar>
                <InnerVar>String [classInternalName=BytecodeHelper.getClassInternalName(classType)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>expression.getLeftExpression();visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;box;[]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getMethodVisitor();visitTypeInsn;[INSTANCEOF, classInternalName]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;replace;[ClassHelper.boolean_TYPE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getIsCaseMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodCaller</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluatePostfixMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>method</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>orig</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompileStack [compileStack=controller.getCompileStack()]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>VariableSlotLoader [usesSubscript=loadWithSubscript(expression)]</InnerVar>
                <InnerVar>ClassNode [expressionType=operandStack.getTopOperand()]</InnerVar>
                <InnerVar>int [tempIdx=compileStack.defineTemporaryVariable("postfix_" + method,expressionType,true)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>operandStack;dup;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;execMethodAndStoreForSubscriptOperator;[op, method, expression, usesSubscript, orig]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;pop;[]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;load;[expressionType, tempIdx]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;removeVar;[tempIdx]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluatePostfixMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>PostfixExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [op=expression.getOperation().getType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluatePrefixMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>PrefixExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [type=expression.getOperation().getType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluatePrefixMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>method</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>orig</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>VariableSlotLoader [usesSubscript=loadWithSubscript(expression)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;execMethodAndStoreForSubscriptOperator;[op, method, expression, usesSubscript, orig]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadWithSubscript</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>VariableSlotLoader</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>expression;visit;[controller.getAcg()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>execMethodAndStoreForSubscriptOperator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>method</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>usesSubscript</ParamName>
                    <FieldType>VariableSlotLoader</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>orig</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writePostOrPrefixMethod;[op, method, expression, orig]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writePostOrPrefixMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>method</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>orig</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>ClassNode [BEType=controller.getTypeChooser().resolveType(expression,controller.getClassNode())]</InnerVar>
                <InnerVar>Expression [callSiteReceiverSwap=new BytecodeExpression(BEType){
  @Override public void visit(  MethodVisitor mv){
    operandStack.push(ClassHelper.OBJECT_TYPE);
    operandStack.swap();
    setType(operandStack.getTopOperand());
    operandStack.remove(2);
  }
}
]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getCallSiteWriter();makeCallSite;[callSiteReceiverSwap, method, MethodCallExpression.NO_ARGUMENTS, false, false, false, false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <FieldType>MethodVisitor</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>operandStack;push;[ClassHelper.OBJECT_TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;swap;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setType;[operandStack.getTopOperand()]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;remove;[2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateElvisOperatorExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>ElvisOperatorExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>CompileStack [compileStack=controller.getCompileStack()]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>TypeChooser [typeChooser=controller.getTypeChooser()]</InnerVar>
                <InnerVar>Expression [boolPart=expression.getBooleanExpression().getExpression()]</InnerVar>
                <InnerVar>Expression [falsePart=expression.getFalseExpression()]</InnerVar>
                <InnerVar>ClassNode [truePartType=typeChooser.resolveType(boolPart,controller.getClassNode())]</InnerVar>
                <InnerVar>ClassNode [falsePartType=typeChooser.resolveType(falsePart,controller.getClassNode())]</InnerVar>
                <InnerVar>ClassNode [common=WideningCategories.lowestUpperBound(truePartType,falsePartType)]</InnerVar>
                <InnerVar>int [mark=operandStack.getStackLength()]</InnerVar>
                <InnerVar>int [retValueId=compileStack.defineTemporaryVariable("$t",truePartType,true)]</InnerVar>
                <InnerVar>Label [l0=operandStack.jump(IFEQ)]</InnerVar>
                <InnerVar>Label [l1=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>boolPart;visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;dup;[]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;castToBool;[mark, true]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;load;[truePartType, retValueId]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;doGroovyCast;[common]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, l1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[l0]</InnerMethodInvoke>
                <InnerMethodInvoke>falsePart;visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;doGroovyCast;[common]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[l1]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;removeVar;[retValueId]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();replace;[common, 2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNullConstant</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateNormalTernary</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>TernaryExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>TypeChooser [typeChooser=controller.getTypeChooser()]</InnerVar>
                <InnerVar>Expression [boolPart=expression.getBooleanExpression()]</InnerVar>
                <InnerVar>Expression [truePart=expression.getTrueExpression()]</InnerVar>
                <InnerVar>Expression [falsePart=expression.getFalseExpression()]</InnerVar>
                <InnerVar>ClassNode [truePartType=typeChooser.resolveType(truePart,controller.getClassNode())]</InnerVar>
                <InnerVar>ClassNode [falsePartType=typeChooser.resolveType(falsePart,controller.getClassNode())]</InnerVar>
                <InnerVar>ClassNode [common=WideningCategories.lowestUpperBound(truePartType,falsePartType)]</InnerVar>
                <InnerVar>int [mark=operandStack.getStackLength()]</InnerVar>
                <InnerVar>Label [l0=operandStack.jump(IFEQ)]</InnerVar>
                <InnerVar>Label [l1=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>boolPart;visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;castToBool;[mark, true]</InnerMethodInvoke>
                <InnerMethodInvoke>truePart;visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;doGroovyCast;[common]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, l1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[l0]</InnerMethodInvoke>
                <InnerMethodInvoke>falsePart;visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;doGroovyCast;[common]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[l1]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();replace;[common, 2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateTernary</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>TernaryExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>