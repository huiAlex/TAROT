<Class>
    <Id>57</Id>
    <Package>groovy.transform.builder</Package>
    <ClassName>SimpleStrategy</ClassName>
    <SuperClass>BuilderASTTransformation.AbstractBuilderStrategy</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SimpleStrategy  /** 
 * This strategy is used with the  {@link Builder} AST transform to modify your Groovy objects so that thesetter methods for properties return the original object, thus allowing chained usage of the setters. You use it as follows: &lt;pre&gt; import groovy.transform.builder. {@code @Builder}(builderStrategy=SimpleStrategy) class Person { String firstName String lastName int age } def person = new Person().setFirstName("Robert").setLastName("Lewandowski").setAge(21) assert person.firstName == "Robert" assert person.lastName == "Lewandowski" assert person.age == 21 &lt;/pre&gt; The  {@code prefix} annotation attribute can be used to create setters with a different naming convention, e.g. with the prefix set to the empty String, you would use your setters as follows:&lt;pre&gt; def p1 = new Person().firstName("Robert").lastName("Lewandowski").age(21) &lt;/pre&gt; or using a prefix of 'with': &lt;pre&gt; def p2 = new Person().withFirstName("Robert").withLastName("Lewandowski").withAge(21) &lt;/pre&gt; When using the default prefix of "set", Groovy's normal setters will be replaced by the chained versions. When using a custom prefix, Groovy's unchained setters will still be available for use in the normal unchained fashion. The 'useSetters' annotation attribute can be used for writable properties as per the  {@code Builder} transform documentation.The other annotation attributes for the  {@code @Builder} transform for configuring the building process aren't applicable for this strategy.
 * @author Paul King
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>build</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transform</ParamName>
                    <FieldType>BuilderASTTransformation</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>annotatedNode</ParamName>
                    <FieldType>AnnotatedNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>anno</ParamName>
                    <FieldType>AnnotationNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [buildee=(ClassNode)annotatedNode]</InnerVar>
                <InnerVar>boolean [useSetters=transform.memberHasValue(anno,"useSetters",true)]</InnerVar>
                <InnerVar>List&lt;String&gt; [excludes=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>List&lt;String&gt; [includes=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>String [prefix=getMemberStringValue(anno,"prefix","set")]</InnerVar>
                <InnerVar>List&lt;FieldNode&gt; [fields=getInstancePropertyFields(buildee)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>