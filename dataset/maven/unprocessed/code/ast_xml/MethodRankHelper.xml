<Class>
    <Id>144</Id>
    <Package>org.codehaus.groovy.runtime</Package>
    <ClassName>MethodRankHelper</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MethodRankHelper  /** 
 * Utility class for MissingMethodException, MissingPropertyException etc. This class contains methods assisting in ranking and listing probable intended methods/fields when a exception is thrown.
 * @author Hjalmar Ekengren
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DL_SUBSTITUTION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DL_DELETE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DL_TRANSPOSITION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DL_CASE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_RECOMENDATIONS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_METHOD_SCORE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_CONSTRUCTOR_SCORE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_FIELD_SCORE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>EMPTY_OBJECT_ARRAY</FieldName>
            <FieldType>Object[]</FieldType>
        </Field>
        <Field>
            <FieldName>u</FieldName>
            <FieldType>U</FieldType>
        </Field>
        <Field>
            <FieldName>v</FieldName>
            <FieldType>V</FieldType>
        </Field>
        <Field>
            <FieldName>m</FieldName>
            <FieldType>MetaMethod</FieldType>
        </Field>
        <Field>
            <FieldName>score</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>c</FieldName>
            <FieldType>Constructor</FieldType>
        </Field>
        <Field>
            <FieldName>score</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>f</FieldName>
            <FieldType>MetaProperty</FieldType>
        </Field>
        <Field>
            <FieldName>score</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>Pair</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>u</ParamName>
                    <FieldType>U</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>v</ParamName>
                    <FieldType>V</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMethodSuggestionString</MethodName>
            <MethodComment>/** 
 * Returns a string detailing possible solutions to a missing method if no good solutions can be found a empty string is returned.
 * @param methodName the name of the method that doesn't exist
 * @param type the class on which the method is invoked
 * @param arguments the arguments passed to the method
 * @return a string with probable solutions to the exception
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <FieldType>Class</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <FieldType>Object[]</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassInfo [ci=ClassInfo.getClassInfo(type)]</InnerVar>
                <InnerVar>List&lt;MetaMethod&gt; [methods=new ArrayList&lt;MetaMethod&gt;(ci.getMetaClass().getMethods())]</InnerVar>
                <InnerVar>List&lt;MetaMethod&gt; [sugg=rankMethods(methodName,arguments,methods)]</InnerVar>
                <InnerVar>StringBuilder [sb=new StringBuilder()]</InnerVar>
                <InnerVar>Class[] [argumentClasses=getArgumentClasses(arguments)]</InnerVar>
                <InnerVar>List&lt;Pair&lt;Class,Class&gt;&gt; [conflictClasses=getConflictClasses(sugg,argumentClasses)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>methods;addAll;[ci.getMetaClass().getMetaMethods()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConflictClasses</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Pair&lt;Class,Class&gt;</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sugg</ParamName>
                    <FieldType>MetaMethod</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>argumentClasses</ParamName>
                    <FieldType>Class[]</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Pair&lt;Class,Class&gt;&gt; [ret=new LinkedList&lt;Pair&lt;Class,Class&gt;&gt;()]</InnerVar>
                <InnerVar>Set&lt;Class&gt; [recordedClasses=new HashSet&lt;Class&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getArgumentClasses</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Class[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <FieldType>Object[]</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class[] [argumentClasses=new Class[arguments.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConstructorSuggestionString</MethodName>
            <MethodComment>/** 
 * Returns a string detailing possible solutions to a missing constructor if no good solutions can be found a empty string is returned.
 * @param arguments the arguments passed to the constructor
 * @param type the class on which the constructor is invoked
 * @return a string with probable solutions to the exception
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <FieldType>Class</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <FieldType>Object[]</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Constructor[] [sugg=rankConstructors(arguments,type.getConstructors())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPropertySuggestionString</MethodName>
            <MethodComment>/** 
 * Returns a string detailing possible solutions to a missing field or property if no good solutions can be found a empty string is returned.
 * @param fieldName the missing field
 * @param type the class on which the field is sought
 * @return a string with probable solutions to the exception
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fieldName</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <FieldType>Class</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassInfo [ci=ClassInfo.getClassInfo(type)]</InnerVar>
                <InnerVar>List&lt;MetaProperty&gt; [fi=ci.getMetaClass().getProperties()]</InnerVar>
                <InnerVar>List&lt;RankableField&gt; [rf=new ArrayList&lt;RankableField&gt;(fi.size())]</InnerVar>
                <InnerVar>StringBuilder [sb=new StringBuilder()]</InnerVar>
                <InnerVar>int [i=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sb;append;["\nPossible solutions: "]</InnerMethodInvoke>
                <InnerMethodInvoke>Collections;sort;[rf]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>listParameterNames</MethodName>
            <MethodComment>/** 
 * creates a comma separated list of each of the class names.
 * @param cachedClasses the array of Classes
 * @return the Class names
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cachedClasses</ParamName>
                    <FieldType>Class[]</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [sb=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>listParameterNames</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cachedClasses</ParamName>
                    <FieldType>CachedClass[]</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [sb=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rankMethods</MethodName>
            <MethodComment>/** 
 * Returns a sorted(ranked) list of a selection of the methods among candidates which most closely resembles original.
 * @param name
 * @param original
 * @param methods
 * @return a sorted lists of Methods
 */
</MethodComment>
            <ReturnType>MetaMethod</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>original</ParamName>
                    <FieldType>Object[]</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>methods</ParamName>
                    <FieldType>MetaMethod</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;RankableMethod&gt; [rm=new ArrayList&lt;RankableMethod&gt;(methods.size())]</InnerVar>
                <InnerVar>Class[] [ta=new Class[original.length]]</InnerVar>
                <InnerVar>Class [nullC=NullObject.class]</InnerVar>
                <InnerVar>List&lt;MetaMethod&gt; [l=new ArrayList&lt;MetaMethod&gt;(rm.size())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Collections;sort;[rm]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>RankableMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>argumentTypes</ParamName>
                    <FieldType>Class[]</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>m2</ParamName>
                    <FieldType>MetaMethod</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [nameDist=delDistance(name,m2.getName())]</InnerVar>
                <InnerVar>Class[] [mArgs=new Class[m2.getParameterTypes().length]]</InnerVar>
                <InnerVar>int [argDist=damerauLevenshteinDistance(argumentTypes,mArgs)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compareTo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RankableMethod [mo=(RankableMethod)o]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rankConstructors</MethodName>
            <MethodComment>/** 
 * Returns a sorted(ranked) list of a selection of the constructors among candidates which most closely resembles original.
 * @param original
 * @param candidates
 * @return a sorted lists of Methods
 */
</MethodComment>
            <ReturnType>Constructor[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>original</ParamName>
                    <FieldType>Object[]</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>candidates</ParamName>
                    <FieldType>Constructor[]</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RankableConstructor[] [rc=new RankableConstructor[candidates.length]]</InnerVar>
                <InnerVar>Class[] [ta=new Class[original.length]]</InnerVar>
                <InnerVar>Class [nullC=NullObject.class]</InnerVar>
                <InnerVar>List&lt;Constructor&gt; [l=new ArrayList&lt;Constructor&gt;()]</InnerVar>
                <InnerVar>int [index=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Arrays;sort;[rc]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>RankableConstructor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>argumentTypes</ParamName>
                    <FieldType>Class[]</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>c</ParamName>
                    <FieldType>Constructor</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class[] [cArgs=new Class[c.getParameterTypes().length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compareTo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RankableConstructor [co=(RankableConstructor)o]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>RankableField</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>mp</ParamName>
                    <FieldType>MetaProperty</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compareTo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RankableField [co=(RankableField)o]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>boxVar</MethodName>
            <MethodComment>/** 
 * If c is a primitive class this method returns a boxed version otherwise c is returned. In java 1.5 this can be simplified thanks to the Type class.
 * @param c
 * @return a boxed version of c if c can be boxed, else c
 */
</MethodComment>
            <ReturnType>Class</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <FieldType>Class</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>delDistance</MethodName>
            <MethodComment>/** 
 * This is a slightly modified version of the Damerau Levenshtein distance algorithm. It has a additional test to see if a character has switched case, in the original algorithm this counts as a substitution. The "cost" for a substitution is given as 10 instead of 1 in this version, this enables transpositions and case modifications to have a lower cost than substitutions. Currently the lowercase versions of t_j and s_i isn't cached, its probable that some speed could be gained from this. This version is based on Chas Emerick's implementation of Levenshtein Distance for jakarta commons.
 * @param s a CharSequence
 * @param t the CharSequence to be compared to s
 * @return a value representing the edit distance between s and t
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <FieldType>CharSequence</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>t</ParamName>
                    <FieldType>CharSequence</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [n=s.length()]</InnerVar>
                <InnerVar>int [m=t.length()]</InnerVar>
                <InnerVar>int[][] [vals=new int[3][n + 1]]</InnerVar>
                <InnerVar>int [_d[]]</InnerVar>
                <InnerVar>int [i]</InnerVar>
                <InnerVar>int [j]</InnerVar>
                <InnerVar>char [t_j]</InnerVar>
                <InnerVar>char [s_i]</InnerVar>
                <InnerVar>int [cost]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>caselessCompare</MethodName>
            <MethodComment>/** 
 * Compares two characters whilst ignoring case.
 * @param a the first character
 * @param b the second character
 * @return true if the characters are equal
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>a</ParamName>
                    <FieldType>char</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>b</ParamName>
                    <FieldType>char</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>damerauLevenshteinDistance</MethodName>
            <MethodComment>/** 
 * This is a implementation of DL distance between two Object arrays instead of character streams. The objects are compared using their equals method. No objects may be null. This implementation is based on Chas Emerick's implementation of Levenshtein Distance for jakarta commons.
 * @param s a Object array
 * @param t this array is compared to s
 * @return the edit distance between the two arrays
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <FieldType>Object[]</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>t</ParamName>
                    <FieldType>Object[]</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [n=s.length]</InnerVar>
                <InnerVar>int [m=t.length]</InnerVar>
                <InnerVar>int[][] [vals=new int[3][n + 1]]</InnerVar>
                <InnerVar>int [_d[]]</InnerVar>
                <InnerVar>int [i]</InnerVar>
                <InnerVar>int [j]</InnerVar>
                <InnerVar>Object [t_j]</InnerVar>
                <InnerVar>int [cost]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>