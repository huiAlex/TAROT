<Class>
    <Id>356</Id>
    <Package>org.codehaus.groovy.syntax</Package>
    <ClassName>Numbers</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Numbers  /** 
 * Helper class for processing Groovy numeric literals.
 * @author Brian Larson
 * @author &lt;a href="mailto:cpoirier@dreaming.org"&gt;Chris Poirier&lt;/a&gt;
 * @version $Id$
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MAX_LONG</FieldName>
            <FieldType>BigInteger</FieldType>
        </Field>
        <Field>
            <FieldName>MIN_LONG</FieldName>
            <FieldType>BigInteger</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_INTEGER</FieldName>
            <FieldType>BigInteger</FieldType>
        </Field>
        <Field>
            <FieldName>MIN_INTEGER</FieldName>
            <FieldType>BigInteger</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_DOUBLE</FieldName>
            <FieldType>BigDecimal</FieldType>
        </Field>
        <Field>
            <FieldName>MIN_DOUBLE</FieldName>
            <FieldType>BigDecimal</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_FLOAT</FieldName>
            <FieldType>BigDecimal</FieldType>
        </Field>
        <Field>
            <FieldName>MIN_FLOAT</FieldName>
            <FieldType>BigDecimal</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>isDigit</MethodName>
            <MethodComment>/** 
 * Returns true if the specified character is a base-10 digit.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <FieldType>char</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isOctalDigit</MethodName>
            <MethodComment>/** 
 * Returns true if the specific character is a base-8 digit.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <FieldType>char</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isHexDigit</MethodName>
            <MethodComment>/** 
 * Returns true if the specified character is a base-16 digit.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <FieldType>char</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNumericTypeSpecifier</MethodName>
            <MethodComment>/** 
 * Returns true if the specified character is a valid type specifier for a numeric value.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <FieldType>char</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>isDecimal</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseInteger</MethodName>
            <MethodComment>/** 
 * Builds a Number from the given integer descriptor.  Creates the narrowest type possible, or a specific type, if specified.
 * @param text literal text to parse
 * @return instantiated Number object
 * @throws NumberFormatException if the number does not fit within the typerequested by the type specifier suffix (invalid numbers don't make it here)
 */
</MethodComment>
            <ReturnType>Number</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char [c=' ']</InnerVar>
                <InnerVar>int [length=text.length()]</InnerVar>
                <InnerVar>boolean [negative=false]</InnerVar>
                <InnerVar>int [radix=10]</InnerVar>
                <InnerVar>char [type='x']</InnerVar>
                <InnerVar>BigInteger [value=new BigInteger(text,radix)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseDecimal</MethodName>
            <MethodComment>/** 
 * Builds a Number from the given decimal descriptor.  Uses BigDecimal, unless, Double or Float is requested.
 * @param text literal text to parse
 * @return instantiated Number object
 * @throws NumberFormatException if the number does not fit within the typerequested by the type specifier suffix (invalid numbers don't make it here)
 */
</MethodComment>
            <ReturnType>Number</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [length=text.length()]</InnerVar>
                <InnerVar>char [type='x']</InnerVar>
                <InnerVar>BigDecimal [value=new BigDecimal(text)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>