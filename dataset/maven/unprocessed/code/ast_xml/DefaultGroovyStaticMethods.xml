<Class>
    <Id>422</Id>
    <Package>org.codehaus.groovy.runtime</Package>
    <ClassName>DefaultGroovyStaticMethods</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DefaultGroovyStaticMethods  /** 
 * This class defines all the new static groovy methods which appear on normal JDK classes inside the Groovy environment. Static methods are used with the first parameter as the destination class.
 * @author Guillaume Laforge
 * @author Dierk Koenig
 * @author Joachim Baumann
 * @author Paul King
 * @author Kent Inge Fagerland Simonsen
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment>/** 
 * Start a Thread with the given closure as a Runnable instance.
 * @param self    placeholder variable used by Groovy categories; ignored for default static methods
 * @param closure the Runnable closure
 * @return the started thread
 * @since 1.0
 */
</MethodComment>
            <ReturnType>Thread</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Thread</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <FieldType>Closure</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment>/** 
 * Start a Thread with a given name and the given closure as a Runnable instance.
 * @param self    placeholder variable used by Groovy categories; ignored for default static methods
 * @param name    the name to give the thread
 * @param closure the Runnable closure
 * @return the started thread
 * @since 1.6
 */
</MethodComment>
            <ReturnType>Thread</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Thread</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <FieldType>Closure</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startDaemon</MethodName>
            <MethodComment>/** 
 * Start a daemon Thread with the given closure as a Runnable instance.
 * @param self    placeholder variable used by Groovy categories; ignored for default static methods
 * @param closure the Runnable closure
 * @return the started thread
 * @since 1.0
 */
</MethodComment>
            <ReturnType>Thread</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Thread</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <FieldType>Closure</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startDaemon</MethodName>
            <MethodComment>/** 
 * Start a daemon Thread with a given name and the given closure as a Runnable instance.
 * @param self    placeholder variable used by Groovy categories; ignored for default static methods
 * @param name    the name to give the thread
 * @param closure the Runnable closure
 * @return the started thread
 * @since 1.6
 */
</MethodComment>
            <ReturnType>Thread</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Thread</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <FieldType>Closure</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createThread</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Thread</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>daemon</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <FieldType>Closure</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Thread [thread=name != null ? new Thread(closure,name) : new Thread(closure)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>thread;start;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLastMatcher</MethodName>
            <MethodComment>/** 
 * Get the last hidden matcher that the system used to do a match.
 * @param self placeholder variable used by Groovy categories; ignored for default static methods
 * @return the last regex matcher
 * @since 1.0
 */
</MethodComment>
            <ReturnType>Matcher</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Matcher</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sleepImpl</MethodName>
            <MethodComment>/** 
 * This method is used by both sleep() methods to implement sleeping for the given time even if interrupted
 * @param millis  the number of milliseconds to sleep
 * @param closure optional closure called when interruptedas long as the closure returns false the sleep continues
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>millis</ParamName>
                    <FieldType>long</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <FieldType>Closure</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [start=System.currentTimeMillis()]</InnerVar>
                <InnerVar>long [rest=millis]</InnerVar>
                <InnerVar>long [current]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sleep</MethodName>
            <MethodComment>/** 
 * Sleep for so many milliseconds, even if interrupted.
 * @param self         placeholder variable used by Groovy categories; ignored for default static methods
 * @param milliseconds the number of milliseconds to sleep
 * @since 1.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>milliseconds</ParamName>
                    <FieldType>long</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;sleepImpl;[milliseconds, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sleep</MethodName>
            <MethodComment>/** 
 * Sleep for so many milliseconds, using a given closure for interrupt processing.
 * @param self         placeholder variable used by Groovy categories; ignored for default static methods
 * @param milliseconds the number of milliseconds to sleep
 * @param onInterrupt  interrupt handler, InterruptedException is passed to the Closureas long as it returns false, the sleep continues
 * @since 1.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>milliseconds</ParamName>
                    <FieldType>long</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>onInterrupt</ParamName>
                    <FieldType>Closure</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;sleepImpl;[milliseconds, onInterrupt]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parse</MethodName>
            <MethodComment>/** 
 * Parse a String into a Date instance using the given pattern. This convenience method acts as a wrapper for  {@link java.text.SimpleDateFormat}. &lt;p&gt; Note that a new SimpleDateFormat instance is created for every invocation of this method (for thread safety).
 * @param self   placeholder variable used by Groovy categories; ignored for default static methods
 * @param format pattern used to parse the input string.
 * @param input  String to be parsed to create the date instance
 * @return a new Date instance representing the parsed input string
 * @throws ParseException if there is a parse error
 * @see java.text.SimpleDateFormat#parse(java.lang.String)
 * @since 1.5.7
 */
</MethodComment>
            <ReturnType>Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>format</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>input</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParseException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parse</MethodName>
            <MethodComment>/** 
 * Parse a String into a Date instance using the given pattern and TimeZone. This convenience method acts as a wrapper for  {@link java.text.SimpleDateFormat}. &lt;p&gt; Note that a new SimpleDateFormat instance is created for every invocation of this method (for thread safety).
 * @param self   placeholder variable used by Groovy categories; ignored for default static methods
 * @param format pattern used to parse the input string.
 * @param input  String to be parsed to create the date instance
 * @param zone   TimeZone to use when parsing
 * @return a new Date instance representing the parsed input string
 * @throws ParseException if there is a parse error
 * @see java.text.SimpleDateFormat#parse(java.lang.String)
 * @since 2.4.1
 */
</MethodComment>
            <ReturnType>Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>format</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>input</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>zone</ParamName>
                    <FieldType>TimeZone</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SimpleDateFormat [sdf=new SimpleDateFormat(format)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sdf;setTimeZone;[zone]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParseException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseToStringDate</MethodName>
            <MethodComment>/** 
 * Parse a String matching the pattern EEE MMM dd HH:mm:ss zzz yyyy containing US-locale-constants only (e.g. Sat for Saturdays). Such a string is generated by the toString method of  {@link java.util.Date}&lt;p&gt; Note that a new SimpleDateFormat instance is created for every invocation of this method (for thread safety).
 * @param self          placeholder variable used by Groovy categories; ignored for default static methods
 * @param dateToString  String to be parsed to create the date instance. Must match the pattern EEE MMM dd HH:mm:ss zzz yyyy with US-locale symbols
 * @return a new Date instance representing the parsed input string
 * @throws ParseException if there is a parse error
 */
</MethodComment>
            <ReturnType>Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>dateToString</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParseException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBundle</MethodName>
            <MethodComment>/** 
 * Works exactly like ResourceBundle.getBundle(String).  This is needed because the java method depends on a particular stack configuration that is not guaranteed in Groovy when calling the Java method.
 * @param self       placeholder variable used by Groovy categories; ignored for default static methods
 * @param bundleName the name of the bundle.
 * @return the resource bundle
 * @see java.util.ResourceBundle#getBundle(java.lang.String)
 * @since 1.6.0
 */
</MethodComment>
            <ReturnType>ResourceBundle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>ResourceBundle</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>bundleName</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBundle</MethodName>
            <MethodComment>/** 
 * Works exactly like ResourceBundle.getBundle(String, Locale).  This is needed because the java method depends on a particular stack configuration that is not guaranteed in Groovy when calling the Java method.
 * @param self       placeholder variable used by Groovy categories; ignored for default static methods
 * @param bundleName the name of the bundle.
 * @param locale     the specific locale
 * @return the resource bundle
 * @see java.util.ResourceBundle#getBundle(java.lang.String,java.util.Locale)
 * @since 1.6.0
 */
</MethodComment>
            <ReturnType>ResourceBundle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>ResourceBundle</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>bundleName</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>locale</ParamName>
                    <FieldType>Locale</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class [c=ReflectionUtils.getCallingClass()]</InnerVar>
                <InnerVar>ClassLoader [targetCL=c != null ? c.getClassLoader() : null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createTempDir</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>File</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>File</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createTempDir</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>File</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>File</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>prefix</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>suffix</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [MAXTRIES=3]</InnerVar>
                <InnerVar>int [accessDeniedCounter=0]</InnerVar>
                <InnerVar>File [tempFile=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>currentTimeSeconds</MethodName>
            <MethodComment>/** 
 * Get the current time in seconds
 * @param self   placeholder variable used by Groovy categories; ignored for default static methods
 * @return  the difference, measured in seconds, betweenthe current time and midnight, January 1, 1970 UTC.
 * @see System#currentTimeMillis()
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>System</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>