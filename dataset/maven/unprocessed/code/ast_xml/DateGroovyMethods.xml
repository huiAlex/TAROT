<Class>
    <Id>24</Id>
    <Package>org.codehaus.groovy.runtime</Package>
    <ClassName>DateGroovyMethods</ClassName>
    <SuperClass>DefaultGroovyMethodsSupport</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DateGroovyMethods  /** 
 * This class defines new groovy methods which appear on normal JDK Date and Calendar classes inside the Groovy environment.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>CAL_MAP</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>CAL_MAP</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getAt</MethodName>
            <MethodComment>/** 
 * Support the subscript operator for a Date.
 * @param self  a Date
 * @param field a Calendar field, e.g. MONTH
 * @return the value for the given field, e.g. FEBRUARY
 * @see java.util.Calendar
 * @since 1.5.5
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>field</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [cal=Calendar.getInstance()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cal;setTime;[self]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toCalendar</MethodName>
            <MethodComment>/** 
 * Convert a Date to a Calendar.
 * @param self a Date
 * @return a Calendar corresponding to the given Date
 * @since 1.7.6
 */
</MethodComment>
            <ReturnType>Calendar</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [cal=Calendar.getInstance()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cal;setTime;[self]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAt</MethodName>
            <MethodComment>/** 
 * Support the subscript operator for a Calendar.
 * @param self  a Calendar
 * @param field a Calendar field, e.g. MONTH
 * @return the value for the given field, e.g. FEBRUARY
 * @see java.util.Calendar
 * @since 1.7.3
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Calendar</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>field</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putAt</MethodName>
            <MethodComment>/** 
 * Support the subscript operator for mutating a Calendar. Example usage: &lt;pre&gt; import static java.util.Calendar. def cal = Calendar.instance cal[DAY_OF_WEEK] = MONDAY cal[MONTH] = MARCH println cal.time // A Monday in March &lt;/pre&gt;
 * @param self  A Calendar
 * @param field A Calendar field, e.g. MONTH
 * @param value The value for the given field, e.g. FEBRUARY
 * @see java.util.Calendar#set(int,int)
 * @since 1.7.3
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Calendar</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>field</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;set;[field, value]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putAt</MethodName>
            <MethodComment>/** 
 * Support the subscript operator for mutating a Date.
 * @param self  A Date
 * @param field A Calendar field, e.g. MONTH
 * @param value The value for the given field, e.g. FEBRUARY
 * @see #putAt(java.util.Calendar,int,int)
 * @see java.util.Calendar#set(int,int)
 * @since 1.7.3
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>field</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [cal=Calendar.getInstance()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cal;setTime;[self]</InnerMethodInvoke>
                <InnerMethodInvoke>null;putAt;[cal, field, value]</InnerMethodInvoke>
                <InnerMethodInvoke>self;setTime;[cal.getTimeInMillis()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>set</MethodName>
            <MethodComment>/** 
 * Support mutating a Calendar with a Map. &lt;p&gt; The map values are the normal values provided as the second parameter to &lt;code&gt;java.util.Calendar#set(int, int)&lt;/code&gt;. The keys can either be the normal fields values provided as the first parameter to that method or one of the following Strings: &lt;table border="1" cellpadding="4"&gt; &lt;caption&gt;Calendar index values&lt;/caption&gt; &lt;tr&gt;&lt;td&gt;year&lt;/td&gt;&lt;td&gt;Calendar.YEAR&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;month&lt;/td&gt;&lt;td&gt;Calendar.MONTH&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;date&lt;/td&gt;&lt;td&gt;Calendar.DATE&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;dayOfMonth&lt;/td&gt;&lt;td&gt;Calendar.DATE&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;hourOfDay&lt;/td&gt;&lt;td&gt;Calendar.HOUR_OF_DAY&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;minute&lt;/td&gt;&lt;td&gt;Calendar.MINUTE&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;second&lt;/td&gt;&lt;td&gt;Calendar.SECOND&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; Example usage: &lt;pre&gt; import static java.util.Calendar. def cal = Calendar.instance def m = [:] m[YEAR] = 2010 m[MONTH] = DECEMBER m[DATE] = 25 cal.set(m) println cal.time // Christmas 2010 cal.set(year:2011, month:DECEMBER, date:25) println cal.time // Christmas 2010 &lt;/pre&gt;
 * @param self    A Calendar
 * @param updates A Map of Calendar keys and values
 * @see java.util.Calendar#set(int,int)
 * @see java.util.Calendar#set(int,int,int,int,int,int)
 * @since 1.7.3
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Calendar</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>updates</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updated</MethodName>
            <MethodComment>/** 
 * Legacy alias for copyWith. Will be deprecated and removed in future versions of Groovy.
 * @see #copyWith(java.util.Calendar,java.util.Map)
 * @since 1.7.3
 */
</MethodComment>
            <ReturnType>Calendar</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Calendar</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>updates</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [result=(Calendar)self.clone()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;set;[result, updates]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copyWith</MethodName>
            <MethodComment>/** 
 * Support creating a new Date having similar properties to an existing Date (which remains unaltered) but with some fields updated according to a Map of changes. &lt;p&gt; Example usage: &lt;pre&gt; import static java.util.Calendar.YEAR def now = Calendar.instance def nextYear = now[YEAR] + 1 def oneYearFromNow = now.copyWith(year: nextYear) println now.time println oneYearFromNow.time &lt;/pre&gt;
 * @param self    A Calendar
 * @param updates A Map of Calendar keys and values
 * @return The newly created Calendar
 * @see java.util.Calendar#set(int,int)
 * @see java.util.Calendar#set(int,int,int,int,int,int)
 * @see #set(java.util.Calendar,java.util.Map)
 * @since 2.2.0
 */
</MethodComment>
            <ReturnType>Calendar</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Calendar</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>updates</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [result=(Calendar)self.clone()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;set;[result, updates]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>set</MethodName>
            <MethodComment>/** 
 * Support mutating a Date with a Map. &lt;p&gt; The map values are the normal values provided as the second parameter to &lt;code&gt;java.util.Calendar#set(int, int)&lt;/code&gt;. The keys can either be the normal fields values provided as the first parameter to that method or one of the following Strings: &lt;table border="1" cellpadding="4"&gt; &lt;caption&gt;Calendar index values&lt;/caption&gt; &lt;tr&gt;&lt;td&gt;year&lt;/td&gt;&lt;td&gt;Calendar.YEAR&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;month&lt;/td&gt;&lt;td&gt;Calendar.MONTH&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;date&lt;/td&gt;&lt;td&gt;Calendar.DATE&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;dayOfMonth&lt;/td&gt;&lt;td&gt;Calendar.DATE&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;hourOfDay&lt;/td&gt;&lt;td&gt;Calendar.HOUR_OF_DAY&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;minute&lt;/td&gt;&lt;td&gt;Calendar.MINUTE&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;second&lt;/td&gt;&lt;td&gt;Calendar.SECOND&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; Example usage: &lt;pre&gt; import static java.util.Calendar.YEAR def date = new Date() def nextYear = date[YEAR] + 1 date.set(year: nextYear) println date &lt;/pre&gt;
 * @param self    A Date
 * @param updates A Map of Calendar keys and values
 * @see java.util.Calendar#set(int,int)
 * @see #set(java.util.Calendar,java.util.Map)
 * @since 1.7.3
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>updates</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [cal=Calendar.getInstance()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cal;setTime;[self]</InnerMethodInvoke>
                <InnerMethodInvoke>null;set;[cal, updates]</InnerMethodInvoke>
                <InnerMethodInvoke>self;setTime;[cal.getTimeInMillis()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updated</MethodName>
            <MethodComment>/** 
 * Legacy alias for copyWith. Will be deprecated and removed in future versions of Groovy.
 * @see #copyWith(java.util.Date,java.util.Map)
 * @since 1.7.3
 */
</MethodComment>
            <ReturnType>Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>updates</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [cal=Calendar.getInstance()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cal;setTime;[self]</InnerMethodInvoke>
                <InnerMethodInvoke>null;set;[cal, updates]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copyWith</MethodName>
            <MethodComment>/** 
 * Support creating a new Date having similar properties to an existing Date (which remains unaltered) but with some fields updated according to a Map of changes. &lt;p&gt; Example usage: &lt;pre&gt; import static java.util.Calendar.YEAR def today = new Date() def nextYear = today[YEAR] + 1 def oneYearFromNow = today.copyWith(year: nextYear) println today println oneYearFromNow &lt;/pre&gt;
 * @param self    A Date
 * @param updates A Map of Calendar keys and values
 * @return The newly created Date
 * @see java.util.Calendar#set(int,int)
 * @see #set(java.util.Date,java.util.Map)
 * @see #copyWith(java.util.Calendar,java.util.Map)
 * @since 2.2.0
 */
</MethodComment>
            <ReturnType>Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>updates</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [cal=Calendar.getInstance()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cal;setTime;[self]</InnerMethodInvoke>
                <InnerMethodInvoke>null;set;[cal, updates]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment>/** 
 * Increment a Date by one day.
 * @param self a Date
 * @return the next days date
 * @since 1.0
 */
</MethodComment>
            <ReturnType>Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment>/** 
 * Increment a Calendar by one day.
 * @param self a Calendar
 * @return a new Calendar set to the next day
 * @since 1.8.7
 */
</MethodComment>
            <ReturnType>Calendar</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Calendar</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [result=(Calendar)self.clone()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>result;add;[Calendar.DAY_OF_YEAR, 1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>previous</MethodName>
            <MethodComment>/** 
 * Decrement a Calendar by one day.
 * @param self a Calendar
 * @return a new Calendar set to the previous day
 * @since 1.8.7
 */
</MethodComment>
            <ReturnType>Calendar</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Calendar</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [result=(Calendar)self.clone()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>result;add;[Calendar.DAY_OF_YEAR, -1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment>/** 
 * Increment a java.sql.Date by one day.
 * @param self a java.sql.Date
 * @return the next days date
 * @since 1.0
 */
</MethodComment>
            <ReturnType>java.sql.Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>java.sql.Date</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>previous</MethodName>
            <MethodComment>/** 
 * Decrement a Date by one day.
 * @param self a Date
 * @return the previous days date
 * @since 1.0
 */
</MethodComment>
            <ReturnType>Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>previous</MethodName>
            <MethodComment>/** 
 * Decrement a java.sql.Date by one day.
 * @param self a java.sql.Date
 * @return the previous days date
 * @since 1.0
 */
</MethodComment>
            <ReturnType>java.sql.Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>java.sql.Date</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>plus</MethodName>
            <MethodComment>/** 
 * Add a number of days to this date and returns the new date.
 * @param self a Date
 * @param days the number of days to increase
 * @return the new date
 * @since 1.0
 */
</MethodComment>
            <ReturnType>Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>days</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [calendar=(Calendar)Calendar.getInstance().clone()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>calendar;setTime;[self]</InnerMethodInvoke>
                <InnerMethodInvoke>calendar;add;[Calendar.DAY_OF_YEAR, days]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>plus</MethodName>
            <MethodComment>/** 
 * Add a number of days to this date and returns the new date.
 * @param self a java.sql.Date
 * @param days the number of days to increase
 * @return the new date
 * @since 1.0
 */
</MethodComment>
            <ReturnType>java.sql.Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>java.sql.Date</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>days</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>plus</MethodName>
            <MethodComment>/** 
 * Add number of days to this Timestamp and returns the new Timestamp object.
 * @param self a Timestamp
 * @param days the number of days to increase
 * @return the new Timestamp
 */
</MethodComment>
            <ReturnType>Timestamp</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Timestamp</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>days</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [calendar=(Calendar)Calendar.getInstance().clone()]</InnerVar>
                <InnerVar>Timestamp [ts=new Timestamp(calendar.getTime().getTime())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>calendar;setTime;[self]</InnerMethodInvoke>
                <InnerMethodInvoke>calendar;add;[Calendar.DAY_OF_YEAR, days]</InnerMethodInvoke>
                <InnerMethodInvoke>ts;setNanos;[self.getNanos()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>minus</MethodName>
            <MethodComment>/** 
 * Subtract a number of days from this date and returns the new date.
 * @param self a Date
 * @param days the number of days to subtract
 * @return the new date
 * @since 1.0
 */
</MethodComment>
            <ReturnType>Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>days</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>minus</MethodName>
            <MethodComment>/** 
 * Subtract a number of days from this date and returns the new date.
 * @param self a java.sql.Date
 * @param days the number of days to subtract
 * @return the new date
 * @since 1.0
 */
</MethodComment>
            <ReturnType>java.sql.Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>java.sql.Date</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>days</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>minus</MethodName>
            <MethodComment>/** 
 * Subtract a number of days from this Timestamp and returns the new Timestamp object.
 * @param self a Timestamp
 * @param days the number of days to subtract
 * @return the new Timestamp
 */
</MethodComment>
            <ReturnType>Timestamp</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Timestamp</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>days</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>minus</MethodName>
            <MethodComment>/** 
 * Subtract another date from this one and return the number of days of the difference. &lt;p&gt; Date self = Date then + (Date self - Date then) &lt;p&gt; IOW, if self is before then the result is a negative value.
 * @param self a Calendar
 * @param then another Calendar
 * @return number of days
 * @since 1.6.0
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Calendar</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>then</ParamName>
                    <FieldType>Calendar</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [a=self]</InnerVar>
                <InnerVar>Calendar [b=then]</InnerVar>
                <InnerVar>boolean [swap=a.before(b)]</InnerVar>
                <InnerVar>int [days=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>minus</MethodName>
            <MethodComment>/** 
 * Subtract another Date from this one and return the number of days of the difference. &lt;p&gt; Date self = Date then + (Date self - Date then) &lt;p&gt; IOW, if self is before then the result is a negative value.
 * @param self a Date
 * @param then another Date
 * @return number of days
 * @since 1.6.0
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>then</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [a=(Calendar)Calendar.getInstance().clone()]</InnerVar>
                <InnerVar>Calendar [b=(Calendar)Calendar.getInstance().clone()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>a;setTime;[self]</InnerMethodInvoke>
                <InnerMethodInvoke>b;setTime;[then]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>format</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Create a String representation of this date according to the given format pattern. &lt;p&gt; &lt;p&gt;For example, if the system timezone is GMT, &lt;code&gt;new Date(0).format('MM/dd/yy')&lt;/code&gt; would return the string &lt;code&gt;"01/01/70"&lt;/code&gt;. See documentation for  {@link java.text.SimpleDateFormat}for format pattern use. &lt;p&gt; &lt;p&gt;Note that a new DateFormat instance is created for every invocation of this method (for thread safety).
 * @param self   a Date
 * @param format the format pattern to use according to {@link java.text.SimpleDateFormat}
 * @return a string representation of this date.
 * @see java.text.SimpleDateFormat
 * @since 1.5.7
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>format</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>format</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Create a String representation of this date according to the given format pattern and timezone. &lt;p&gt; &lt;p&gt;For example: &lt;code&gt; def d = new Date(0) def tz = TimeZone.getTimeZone('GMT') println d.format('dd/MMM/yyyy', tz) &lt;/code&gt; would return the string &lt;code&gt;"01/Jan/1970"&lt;/code&gt;. See documentation for  {@link java.text.SimpleDateFormat}for format pattern use. &lt;p&gt; &lt;p&gt;Note that a new DateFormat instance is created for every invocation of this method (for thread safety).
 * @param self   a Date
 * @param format the format pattern to use according to {@link java.text.SimpleDateFormat}
 * @param tz     the TimeZone to use
 * @return a string representation of this date.
 * @see java.text.SimpleDateFormat
 * @since 1.8.3
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>format</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>tz</ParamName>
                    <FieldType>TimeZone</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SimpleDateFormat [sdf=new SimpleDateFormat(format)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sdf;setTimeZone;[tz]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDateString</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Return a string representation of the 'day' portion of this date according to the locale-specific  {@link java.text.DateFormat#SHORT} default format.For an "en_UK" system locale, this would be &lt;code&gt;dd/MM/yy&lt;/code&gt;. &lt;p&gt; &lt;p&gt;Note that a new DateFormat instance is created for every invocation of this method (for thread safety).
 * @param self a Date
 * @return a string representation of this date
 * @see java.text.DateFormat#getDateInstance(int)
 * @see java.text.DateFormat#SHORT
 * @since 1.5.7
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTimeString</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Return a string representation of the time portion of this date according to the locale-specific  {@link java.text.DateFormat#MEDIUM} default format.For an "en_UK" system locale, this would be &lt;code&gt;HH:MM:ss&lt;/code&gt;. &lt;p&gt; &lt;p&gt;Note that a new DateFormat instance is created for every invocation of this method (for thread safety).
 * @param self a Date
 * @return a string representing the time portion of this date
 * @see java.text.DateFormat#getTimeInstance(int)
 * @see java.text.DateFormat#MEDIUM
 * @since 1.5.7
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDateTimeString</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Return a string representation of the date and time time portion of this Date instance, according to the locale-specific format used by {@link java.text.DateFormat}.  This method uses the  {@link java.text.DateFormat#SHORT}preset for the day portion and  {@link java.text.DateFormat#MEDIUM} for the timeportion of the output string. &lt;p&gt; &lt;p&gt;Note that a new DateFormat instance is created for every invocation of this method (for thread safety).
 * @param self a Date
 * @return a string representation of this date and time
 * @see java.text.DateFormat#getDateTimeInstance(int,int)
 * @since 1.5.7
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearTimeCommon</MethodName>
            <MethodComment>/** 
 * Common code for  {@link #clearTime(java.util.Calendar)} and {@link #clearTime(java.util.Date)}and  {@link #clearTime(java.sql.Date)}
 * @param self a Calendar to adjust
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Calendar</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;set;[Calendar.HOUR_OF_DAY, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>self;clear;[Calendar.MINUTE]</InnerMethodInvoke>
                <InnerMethodInvoke>self;clear;[Calendar.SECOND]</InnerMethodInvoke>
                <InnerMethodInvoke>self;clear;[Calendar.MILLISECOND]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearTime</MethodName>
            <MethodComment>/** 
 * Clears the time portion of this Date instance; useful utility where it makes sense to compare month/day/year only portions of a Date.
 * @param self a Date
 * @return the Date but with the time portion cleared
 * @since 1.6.7
 */
</MethodComment>
            <ReturnType>Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [calendar=Calendar.getInstance()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>calendar;setTime;[self]</InnerMethodInvoke>
                <InnerMethodInvoke>null;clearTimeCommon;[calendar]</InnerMethodInvoke>
                <InnerMethodInvoke>self;setTime;[calendar.getTime().getTime()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearTime</MethodName>
            <MethodComment>/** 
 * Clears the time portion of this java.sql.Date instance; useful utility where it makes sense to compare month/day/year only portions of a Date.
 * @param self a java.sql.Date
 * @return the java.sql.Date but with the time portion cleared
 * @since 1.6.7
 */
</MethodComment>
            <ReturnType>java.sql.Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>java.sql.Date</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [calendar=Calendar.getInstance()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>calendar;setTime;[self]</InnerMethodInvoke>
                <InnerMethodInvoke>null;clearTimeCommon;[calendar]</InnerMethodInvoke>
                <InnerMethodInvoke>self;setTime;[calendar.getTime().getTime()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearTime</MethodName>
            <MethodComment>/** 
 * Clears the time portion of this Calendar instance; useful utility where it makes sense to compare month/day/year only portions of a Calendar.
 * @param self a Calendar
 * @return the Calendar but with the time portion cleared
 * @since 1.6.7
 */
</MethodComment>
            <ReturnType>Calendar</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Calendar</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;clearTimeCommon;[self]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>format</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Shortcut for  {@link java.text.SimpleDateFormat} to output a String representationof this calendar instance.  This method respects the Calendar's assigned {@link java.util.TimeZone}, whereas calling &lt;code&gt;cal.time.format('HH:mm:ss')&lt;/code&gt; would use the system timezone. &lt;p&gt;Note that Calendar equivalents of &lt;code&gt;date.getDateString()&lt;/code&gt; and variants do not exist because those methods are Locale-dependent. Although a Calendar may be assigned a  {@link java.util.Locale}, that information is lost and therefore cannot be used to control the default date/time formats provided by these methods.  Instead, the system Locale would always be used.  The alternative is to simply call {@link java.text.DateFormat#getDateInstance(int,java.util.Locale)} and pass the same Localethat was used for the Calendar.
 * @param self    this calendar
 * @param pattern format pattern
 * @return String representation of this calendar with the given format.
 * @see java.text.DateFormat#setTimeZone(java.util.TimeZone)
 * @see java.text.SimpleDateFormat#format(java.util.Date)
 * @see #format(java.util.Date,String)
 * @since 1.6.0
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Calendar</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SimpleDateFormat [sdf=new SimpleDateFormat(pattern)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sdf;setTimeZone;[self.getTimeZone()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>upto</MethodName>
            <MethodComment>/** 
 * Iterates from this date up to the given date, inclusive, incrementing by one day each time.
 * @param self    a Date
 * @param to      another Date to go up to
 * @param closure the closure to call
 * @since 2.2
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>to</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <FieldType>Closure</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>upto</MethodName>
            <MethodComment>/** 
 * Iterates from the date represented by this calendar up to the date represented by the given calendar, inclusive, incrementing by one day each time.
 * @param self    a Calendar
 * @param to      another Calendar to go up to
 * @param closure the closure to call
 * @since 2.2
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Calendar</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>to</ParamName>
                    <FieldType>Calendar</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <FieldType>Closure</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>downto</MethodName>
            <MethodComment>/** 
 * Iterates from this date down to the given date, inclusive, decrementing by one day each time.
 * @param self    a Date
 * @param to      another Date to go down to
 * @param closure the closure to call
 * @since 2.2
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>to</ParamName>
                    <FieldType>Date</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <FieldType>Closure</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>downto</MethodName>
            <MethodComment>/** 
 * Iterates from the date represented by this calendar up to the date represented by the given calendar, inclusive, incrementing by one day each time.
 * @param self    a Calendar
 * @param to      another Calendar to go down to
 * @param closure the closure to call
 * @since 2.2
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Calendar</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>to</ParamName>
                    <FieldType>Calendar</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <FieldType>Closure</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>