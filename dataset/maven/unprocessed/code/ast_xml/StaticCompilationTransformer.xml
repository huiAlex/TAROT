<Class>
    <Id>672</Id>
    <Package>org.codehaus.groovy.transform.sc.transformers</Package>
    <ClassName>StaticCompilationTransformer</ClassName>
    <SuperClass>ClassCodeExpressionTransformer</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StaticCompilationTransformer  /** 
 * Some expressions use symbols as aliases to method calls (&lt;&lt;, +=, ...). In static compilation, if such a method call is found, we transform the original binary expression into a method call expression so that the call gets statically compiled.
 * @author Cedric Champeau
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>BYTECODE_ADAPTER_CLASS</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>BYTECODE_BINARY_ADAPTERS</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>BYTECODE_BINARY_ADAPTERS</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>classNode</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>unit</FieldName>
            <FieldType>SourceUnit</FieldType>
        </Field>
        <Field>
            <FieldName>typeChooser</FieldName>
            <FieldType>StaticTypesTypeChooser</FieldType>
        </Field>
        <Field>
            <FieldName>staticCompilationVisitor</FieldName>
            <FieldType>StaticTypeCheckingVisitor</FieldType>
        </Field>
        <Field>
            <FieldName>staticMethodCallExpressionTransformer</FieldName>
            <FieldType>StaticMethodCallExpressionTransformer</FieldType>
        </Field>
        <Field>
            <FieldName>constructorCallTransformer</FieldName>
            <FieldType>ConstructorCallTransformer</FieldType>
        </Field>
        <Field>
            <FieldName>methodCallExpressionTransformer</FieldName>
            <FieldType>MethodCallExpressionTransformer</FieldType>
        </Field>
        <Field>
            <FieldName>binaryExpressionTransformer</FieldName>
            <FieldType>BinaryExpressionTransformer</FieldType>
        </Field>
        <Field>
            <FieldName>closureExpressionTransformer</FieldName>
            <FieldType>ClosureExpressionTransformer</FieldType>
        </Field>
        <Field>
            <FieldName>booleanExpressionTransformer</FieldName>
            <FieldType>BooleanExpressionTransformer</FieldType>
        </Field>
        <Field>
            <FieldName>variableExpressionTransformer</FieldName>
            <FieldType>VariableExpressionTransformer</FieldType>
        </Field>
        <Field>
            <FieldName>rangeExpressionTransformer</FieldName>
            <FieldType>RangeExpressionTransformer</FieldType>
        </Field>
        <Field>
            <FieldName>listExpressionTransformer</FieldName>
            <FieldType>ListExpressionTransformer</FieldType>
        </Field>
        <Field>
            <FieldName>castExpressionTransformer</FieldName>
            <FieldType>CastExpressionOptimizer</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>StaticCompilationTransformer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>visitor</ParamName>
                    <FieldType>StaticTypeCheckingVisitor</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSourceUnit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SourceUnit</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeChooser</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>StaticTypesTypeChooser</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitClassCodeContainer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>code</ParamName>
                    <FieldType>Statement</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transform</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>superTransform</MethodName>
            <MethodComment>/** 
 * Called by helpers when super.transform() is needed.
 */
</MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [prec=classNode]</InnerVar>
                <InnerVar>Iterator&lt;InnerClassNode&gt; [innerClasses=classNode.getInnerClasses()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitConstructorOrMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>MethodNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>isConstructor</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>