<Class>
    <Id>130</Id>
    <Package>org.codehaus.groovy.antlr.treewalker</Package>
    <ClassName>SourceCodeTraversal</ClassName>
    <SuperClass>TraversalHelper</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SourceCodeTraversal  /** 
 * A treewalker for the antlr generated AST that attempts to visit the AST nodes in the order needed to generate valid groovy source code.
 * @author &lt;a href="mailto:groovy@ross-rayner.com"&gt;Jeremy Rayner&lt;/a&gt;
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>SourceCodeTraversal</MethodName>
            <MethodComment>/** 
 * Constructs a treewalker for the antlr generated AST that attempts to visit the AST nodes in the order needed to generate valid groovy source code.
 * @param visitor the visitor implementation to call for each AST node.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>visitor</ParamName>
                    <FieldType>Visitor</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setUp</MethodName>
            <MethodComment>/** 
 * gather, sort and process all unvisited nodes
 * @param t the AST to process
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <FieldType>GroovySourceAST</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;traverse;[t]</InnerMethodInvoke>
                <InnerMethodInvoke>Collections;sort;[unvisitedNodes]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>traverse</MethodName>
            <MethodComment>/** 
 * traverse an AST node
 * @param t the AST node to traverse
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <FieldType>GroovySourceAST</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GroovySourceAST [child=(GroovySourceAST)t.getFirstChild()]</InnerVar>
                <InnerVar>GroovySourceAST [sibling=(GroovySourceAST)t.getNextSibling()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>accept</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>currentNode</ParamName>
                    <FieldType>GroovySourceAST</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>