<Class>
    <Id>604</Id>
    <Package>org.codehaus.groovy.runtime.powerassert</Package>
    <ClassName>SourceText</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SourceText  /** 
 * Provides the source text for an assertion statement and translates coordinates in the original source text to coordinates relative to the assertion's (normalized) source text.
 * @author Peter Niederwieser
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>firstLine</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>normalizedText</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>lineOffsets</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>lineOffsets</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>textOffsets</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>textOffsets</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SourceText</MethodName>
            <MethodComment>/** 
 * Constructs a &lt;tt&gt;SourceText&lt;/tt&gt; by reading the given assertion's source text from the given source unit.
 * @param stat       an assertion statement
 * @param sourceUnit the source unit containing the assertion statement
 * @param janitor    a &lt;tt&gt;Janitor&lt;/tt&gt; for cleaning up reader sources
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stat</ParamName>
                    <FieldType>AssertStatement</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>sourceUnit</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>janitor</ParamName>
                    <FieldType>Janitor</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>textOffsets;add;[0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNormalizedText</MethodName>
            <MethodComment>/** 
 * Returns the assertion's source text after removing line breaks. &lt;p&gt;Limitation: Line comments within the assertion's source text are not handled.
 * @return the assertion's source text after removing line breaks.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNormalizedColumn</MethodName>
            <MethodComment>/** 
 * Returns the column in &lt;tt&gt;getNormalizedText()&lt;/tt&gt; corresponding to the given line and column in the original source text. The first character in the normalized text has column 1.
 * @param line   a line number
 * @param column a column number
 * @return the column in getNormalizedText() corresponding to the given lineand column in the original source text
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>line</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [deltaLine=line - firstLine]</InnerVar>
                <InnerVar>int [deltaColumn=column - lineOffsets.get(deltaLine)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasPlausibleSourcePosition</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>ASTNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>countLeadingWhitespace</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lineText</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [result=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>