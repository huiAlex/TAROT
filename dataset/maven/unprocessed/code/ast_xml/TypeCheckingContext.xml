<Class>
    <Id>522</Id>
    <Package>org.codehaus.groovy.transform.stc</Package>
    <ClassName>TypeCheckingContext</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>source</FieldName>
            <FieldType>SourceUnit</FieldType>
        </Field>
        <Field>
            <FieldName>methodsToBeVisited</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>methodsToBeVisited</FieldName>
            <FieldType>MethodNode</FieldType>
        </Field>
        <Field>
            <FieldName>isInStaticContext</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>errorCollectors</FieldName>
            <FieldType>LinkedList</FieldType>
        </Field>
        <Field>
            <FieldName>errorCollectors</FieldName>
            <FieldType>ErrorCollector</FieldType>
        </Field>
        <Field>
            <FieldName>enclosingClassNodes</FieldName>
            <FieldType>LinkedList</FieldType>
        </Field>
        <Field>
            <FieldName>enclosingClassNodes</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>enclosingMethods</FieldName>
            <FieldType>LinkedList</FieldType>
        </Field>
        <Field>
            <FieldName>enclosingMethods</FieldName>
            <FieldType>MethodNode</FieldType>
        </Field>
        <Field>
            <FieldName>enclosingMethodCalls</FieldName>
            <FieldType>LinkedList</FieldType>
        </Field>
        <Field>
            <FieldName>enclosingMethodCalls</FieldName>
            <FieldType>Expression</FieldType>
        </Field>
        <Field>
            <FieldName>enclosingClosures</FieldName>
            <FieldType>LinkedList</FieldType>
        </Field>
        <Field>
            <FieldName>enclosingClosures</FieldName>
            <FieldType>EnclosingClosure</FieldType>
        </Field>
        <Field>
            <FieldName>delegationMetadata</FieldName>
            <FieldType>DelegationMetadata</FieldType>
        </Field>
        <Field>
            <FieldName>lastImplicitItType</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>ifElseForWhileAssignmentTracker</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>ifElseForWhileAssignmentTracker</FieldName>
            <FieldType>VariableExpression</FieldType>
        </Field>
        <Field>
            <FieldName>temporaryIfBranchTypeInformation</FieldName>
            <FieldType>Stack</FieldType>
        </Field>
        <Field>
            <FieldName>temporaryIfBranchTypeInformation</FieldName>
            <FieldType>Map&lt;Object,List&lt;ClassNode&gt;&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>alreadyVisitedMethods</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>alreadyVisitedMethods</FieldName>
            <FieldType>MethodNode</FieldType>
        </Field>
        <Field>
            <FieldName>secondPassExpressions</FieldName>
            <FieldType>LinkedHashSet</FieldType>
        </Field>
        <Field>
            <FieldName>secondPassExpressions</FieldName>
            <FieldType>SecondPassExpression</FieldType>
        </Field>
        <Field>
            <FieldName>closureSharedVariablesAssignmentTypes</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>closureSharedVariablesAssignmentTypes</FieldName>
            <FieldType>VariableExpression</FieldType>
        </Field>
        <Field>
            <FieldName>controlStructureVariables</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>controlStructureVariables</FieldName>
            <FieldType>Parameter</FieldType>
        </Field>
        <Field>
            <FieldName>reportedErrors</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>reportedErrors</FieldName>
            <FieldType>Long</FieldType>
        </Field>
        <Field>
            <FieldName>enclosingBinaryExpressions</FieldName>
            <FieldType>LinkedList</FieldType>
        </Field>
        <Field>
            <FieldName>enclosingBinaryExpressions</FieldName>
            <FieldType>BinaryExpression</FieldType>
        </Field>
        <Field>
            <FieldName>visitor</FieldName>
            <FieldType>StaticTypeCheckingVisitor</FieldType>
        </Field>
        <Field>
            <FieldName>compilationUnit</FieldName>
            <FieldType>CompilationUnit</FieldType>
        </Field>
        <Field>
            <FieldName>closureExpression</FieldName>
            <FieldType>ClosureExpression</FieldType>
        </Field>
        <Field>
            <FieldName>returnTypes</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>returnTypes</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>TypeCheckingContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>staticTypeCheckingVisitor</ParamName>
                    <FieldType>StaticTypeCheckingVisitor</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushEnclosingBinaryExpression</MethodName>
            <MethodComment>/** 
 * Pushes a binary expression into the binary expression stack.
 * @param binaryExpression the binary expression to be pushed
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>binaryExpression</ParamName>
                    <FieldType>BinaryExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>enclosingBinaryExpressions;addFirst;[binaryExpression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>popEnclosingBinaryExpression</MethodName>
            <MethodComment>/** 
 * Pops a binary expression from the binary expression stack.
 * @return the popped binary expression
 */
</MethodComment>
            <ReturnType>BinaryExpression</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEnclosingBinaryExpression</MethodName>
            <MethodComment>/** 
 * Returns the binary expression which is on the top of the stack, or null if there's no such element.
 * @return the binary expression on top of the stack, or null if no such element.
 */
</MethodComment>
            <ReturnType>BinaryExpression</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEnclosingBinaryExpressionStack</MethodName>
            <MethodComment>/** 
 * Returns the current stack of enclosing binary expressions. The first element is the top of the stack.
 * @return an immutable list of binary expressions.
 */
</MethodComment>
            <ReturnType>BinaryExpression</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushEnclosingClosureExpression</MethodName>
            <MethodComment>/** 
 * Pushes a closure expression into the closure expression stack.
 * @param closureExpression the binary expression to be pushed
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>closureExpression</ParamName>
                    <FieldType>ClosureExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>enclosingClosures;addFirst;[new EnclosingClosure(closureExpression)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>popEnclosingClosure</MethodName>
            <MethodComment>/** 
 * Pops a closure expression from the closure expression stack.
 * @return the popped closure expression
 */
</MethodComment>
            <ReturnType>EnclosingClosure</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEnclosingClosure</MethodName>
            <MethodComment>/** 
 * Returns the closure expression which is on the top of the stack, or null if there's no such element.
 * @return the closure expression on top of the stack, or null if no such element.
 */
</MethodComment>
            <ReturnType>EnclosingClosure</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEnclosingClosureStack</MethodName>
            <MethodComment>/** 
 * Returns the current stack of enclosing closure expressions. The first element is the top of the stack.
 * @return an immutable list of closure expressions.
 */
</MethodComment>
            <ReturnType>EnclosingClosure</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushEnclosingMethod</MethodName>
            <MethodComment>/** 
 * Pushes a method into the method stack.
 * @param methodNode the binary expression to be pushed
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methodNode</ParamName>
                    <FieldType>MethodNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>enclosingMethods;addFirst;[methodNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>popEnclosingMethod</MethodName>
            <MethodComment>/** 
 * Pops a method from the enclosing methods stack.
 * @return the popped method
 */
</MethodComment>
            <ReturnType>MethodNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEnclosingMethod</MethodName>
            <MethodComment>/** 
 * Returns the method node which is on the top of the stack, or null if there's no such element.
 * @return the enclosing method on top of the stack, or null if no such element.
 */
</MethodComment>
            <ReturnType>MethodNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEnclosingMethods</MethodName>
            <MethodComment>/** 
 * Returns the current stack of enclosing methods. The first element is the top of the stack, that is to say the last visited method.
 * @return an immutable list of method nodes.
 */
</MethodComment>
            <ReturnType>MethodNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushEnclosingClassNode</MethodName>
            <MethodComment>/** 
 * Pushes a method into the method stack.
 * @param classNode the binary expression to be pushed
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>enclosingClassNodes;addFirst;[classNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>popEnclosingClassNode</MethodName>
            <MethodComment>/** 
 * Pops a class from the enclosing classes stack.
 * @return the popped class
 */
</MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEnclosingClassNode</MethodName>
            <MethodComment>/** 
 * Returns the method node which is on the top of the stack, or null if there's no such element.
 * @return the enclosing method on top of the stack, or null if no such element.
 */
</MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEnclosingClassNodes</MethodName>
            <MethodComment>/** 
 * Returns the current stack of enclosing classes. The first element is the top of the stack, that is to say the currently visited class.
 * @return an immutable list of class nodes.
 */
</MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushTemporaryTypeInfo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Map&lt;Object,List&lt;ClassNode&gt;&gt; [potentialTypes=new HashMap&lt;Object,List&lt;ClassNode&gt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>temporaryIfBranchTypeInformation;push;[potentialTypes]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>popTemporaryTypeInfo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>temporaryIfBranchTypeInformation;pop;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushEnclosingMethodCall</MethodName>
            <MethodComment>/** 
 * Pushes a method call into the method call stack.
 * @param call the call expression to be pushed, either a {@link MethodCallExpression} or a {@link StaticMethodCallExpression}
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>popEnclosingMethodCall</MethodName>
            <MethodComment>/** 
 * Pops a method call from the enclosing method call stack.
 * @return the popped call
 */
</MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEnclosingMethodCall</MethodName>
            <MethodComment>/** 
 * Returns the method call which is on the top of the stack, or null if there's no such element.
 * @return the enclosing method call on top of the stack, or null if no such element.
 */
</MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEnclosingMethodCalls</MethodName>
            <MethodComment>/** 
 * Returns the current stack of enclosing classes. The first element is the top of the stack, that is to say the currently visited class.
 * @return an immutable list of class nodes.
 */
</MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getErrorCollectors</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ErrorCollector</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getErrorCollector</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ErrorCollector</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushErrorCollector</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>collector</ParamName>
                    <FieldType>ErrorCollector</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>errorCollectors;add;[0, collector]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pushErrorCollector</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ErrorCollector</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ErrorCollector [current=getErrorCollector()]</InnerVar>
                <InnerVar>ErrorCollector [collector=new ErrorCollector(current.getConfiguration())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>errorCollectors;add;[0, collector]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>popErrorCollector</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ErrorCollector</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCompilationUnit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CompilationUnit</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCompilationUnit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>compilationUnit</ParamName>
                    <FieldType>CompilationUnit</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SourceUnit</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>EnclosingClosure</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>closureExpression</ParamName>
                    <FieldType>ClosureExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClosureExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClosureExpression</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReturnTypes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addReturnType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>returnTypes;add;[type]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>StringBuilder [sb=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sb;append;["EnclosingClosure"]</InnerMethodInvoke>
                <InnerMethodInvoke>sb.append("{closureExpression=");append;[closureExpression.getText()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb.append(", returnTypes=");append;[returnTypes]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;['}']</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>