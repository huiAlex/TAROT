<Class>
    <Id>729</Id>
    <Package>org.codehaus.groovy.ast.expr</Package>
    <ClassName>DeclarationExpression</ClassName>
    <SuperClass>BinaryExpression</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DeclarationExpression  /** 
 * Represents one or more local variables. Typically it is a single local variable declared by name with an expression like "def foo" or with type "String foo". However,  the multiple assignment feature allows you to create two or more variables using an expression like: &lt;code&gt;def (x, y) = [1, 2]&lt;/code&gt;. &lt;p&gt; You can access the left hand side of a declaration using the "&lt;code&gt;Expression getLeftExpression()&lt;/code&gt;" method. In which case you might then use &lt;code&gt;instanceof&lt;/code&gt; and casting to perform operations specific to a single local variable (&lt;code&gt;VariableExpression&lt;/code&gt;) or for the multiple assignment case (&lt;code&gt;TupleExpression&lt;/code&gt;). &lt;p&gt; Alternatively, if &lt;code&gt;isMultipleAssignmentDeclaration()&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; you can use the method "&lt;code&gt;VariableExpression getVariableExpression()&lt;/code&gt;" method. Similarly, if &lt;code&gt;isMultipleAssignmentDeclaration()&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; you can use the method "&lt;code&gt;TupleExpression getTupleExpression()&lt;/code&gt;" method. Calling either of these expression getters when the "isMultipleAssignment" condition is not appropriate is unsafe and will result in a &lt;code&gt;ClassCastException&lt;/code&gt;.
 * @author Jochen Theodorou
 * @author Hamlet D'Arcy
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>DeclarationExpression</MethodName>
            <MethodComment>/** 
 * Creates a DeclarationExpression for VariableExpressions like "def x" or "String y = 'foo'". 
 * @param left the left hand side of a variable declaration
 * @param operation the operation, typically an assignment operator
 * @param right the right hand side of a declaration
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>left</ParamName>
                    <FieldType>VariableExpression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <FieldType>Token</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>right</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DeclarationExpression</MethodName>
            <MethodComment>/** 
 * Creates a DeclarationExpression for Expressions like "def (x, y) = [1, 2]"
 * @param left the left hand side of a declaration. Must be either a VariableExpression or  a TupleExpression with at least one element.  
 * @param operation the operation, typically an assignment operator
 * @param right the right hand side of a declaration
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>left</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <FieldType>Token</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>right</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;check;[left]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>check</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>left</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>visitor</ParamName>
                    <FieldType>GroovyCodeVisitor</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>visitor;visitDeclarationExpression;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getVariableExpression</MethodName>
            <MethodComment>/** 
 * This method returns the left hand side of the declaration cast to the VariableExpression type. This is an unsafe method to call. In a multiple assignment statement, the left hand side will be a TupleExpression and a ClassCastException will occur. If you invoke this method then be sure to invoke isMultipleAssignmentDeclaration() first to check that it is safe to do so.  If that method returns true then this method is safe to call.
 * @return left hand side of normal variable declarations
 * @throws ClassCastException if the left hand side is not a VariableExpression (and is probably a multiple assignment statement).
 */
</MethodComment>
            <ReturnType>VariableExpression</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTupleExpression</MethodName>
            <MethodComment>/** 
 * This method returns the left hand side of the declaration cast to the TupleExpression type. This is an unsafe method to call. In a single assignment statement, the left hand side will be a VariableExpression and a ClassCastException will occur. If you invoke this method then be sure to invoke isMultipleAssignmentDeclaration() first to check that it is safe to do so.  If that method returns true then this method is safe to call. 
 * @return left hand side of multiple assignment declarations
 * @throws ClassCastException if the left hand side is not a TupleExpression (and is probably a VariableExpression).
 */
</MethodComment>
            <ReturnType>TupleExpression</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLeftExpression</MethodName>
            <MethodComment>/** 
 * This method sets the leftExpression for this BinaryExpression. The parameter must be either a VariableExpression or a TupleExpression with one or more elements. 
 * @param leftExpression either a VariableExpression or a TupleExpression with one or more elements. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leftExpression</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;check;[leftExpression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setRightExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rightExpression</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transformer</ParamName>
                    <FieldType>ExpressionTransformer</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [ret=new DeclarationExpression(transformer.transform(getLeftExpression()),getOperation(),transformer.transform(getRightExpression()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ret;setSourcePosition;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;addAnnotations;[getAnnotations()]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;setDeclaringClass;[getDeclaringClass()]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;copyNodeMetaData;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isMultipleAssignmentDeclaration</MethodName>
            <MethodComment>/** 
 * This method tells you if this declaration is a multiple assignment declaration, which  has the form "def (x, y) = ..." in Groovy. If this method returns true, then the left hand side is an ArgumentListExpression. Do not call "getVariableExpression()" on this  object if this method returns true, instead use "getLeftExpression()". 
 * @return true if this declaration is a multiple assignment declaration, which means the left hand side is an ArgumentListExpression. 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>