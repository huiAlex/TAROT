<Class>
    <Id>185</Id>
    <Package>groovy.grape</Package>
    <ClassName>GrabAnnotationTransformation</ClassName>
    <SuperClass>ClassCodeVisitorSupport</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ASTTransformation</SuperInterface>
        <SuperInterface>CompilationUnitAware</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GrabAnnotationTransformation  /** 
 * Transformation for declarative dependency management.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>GRAB_CLASS_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRAB_DOT_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRAB_SHORT_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRABEXCLUDE_CLASS_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRABEXCLUDE_DOT_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRABEXCLUDE_SHORT_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRABCONFIG_CLASS_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRABCONFIG_DOT_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRABCONFIG_SHORT_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRAPES_CLASS_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRAPES_DOT_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRAPES_SHORT_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRABRESOLVER_CLASS_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRABRESOLVER_DOT_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRABRESOLVER_SHORT_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>THREAD_CLASSNODE</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>GRABEXCLUDE_REQUIRED</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>GRABEXCLUDE_REQUIRED</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRABRESOLVER_REQUIRED</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>GRABRESOLVER_REQUIRED</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRAB_REQUIRED</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>GRAB_REQUIRED</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRAB_OPTIONAL</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>GRAB_OPTIONAL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRAB_BOOLEAN</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>GRAB_BOOLEAN</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRAB_ALL</FieldName>
            <FieldType>Collection</FieldType>
        </Field>
        <Field>
            <FieldName>GRAB_ALL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>IVY_PATTERN</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>ATTRIBUTES_PATTERN</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>AUTO_DOWNLOAD_SETTING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DISABLE_CHECKSUMS_SETTING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>allowShortGrab</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>grabAliases</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>grabAliases</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>grabAnnotations</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>grabAnnotations</FieldName>
            <FieldType>AnnotationNode</FieldType>
        </Field>
        <Field>
            <FieldName>allowShortGrabExcludes</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>grabExcludeAliases</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>grabExcludeAliases</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>grabExcludeAnnotations</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>grabExcludeAnnotations</FieldName>
            <FieldType>AnnotationNode</FieldType>
        </Field>
        <Field>
            <FieldName>allowShortGrabConfig</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>grabConfigAliases</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>grabConfigAliases</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>grabConfigAnnotations</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>grabConfigAnnotations</FieldName>
            <FieldType>AnnotationNode</FieldType>
        </Field>
        <Field>
            <FieldName>allowShortGrapes</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>grapesAliases</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>grapesAliases</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>grapesAnnotations</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>grapesAnnotations</FieldName>
            <FieldType>AnnotationNode</FieldType>
        </Field>
        <Field>
            <FieldName>allowShortGrabResolver</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>grabResolverAliases</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>grabResolverAliases</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>grabResolverAnnotations</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>grabResolverAnnotations</FieldName>
            <FieldType>AnnotationNode</FieldType>
        </Field>
        <Field>
            <FieldName>compilationUnit</FieldName>
            <FieldType>CompilationUnit</FieldType>
        </Field>
        <Field>
            <FieldName>sourceUnit</FieldName>
            <FieldType>SourceUnit</FieldType>
        </Field>
        <Field>
            <FieldName>loader</FieldName>
            <FieldType>ClassLoader</FieldType>
        </Field>
        <Field>
            <FieldName>initContextClassLoader</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>autoDownload</FieldName>
            <FieldType>Boolean</FieldType>
        </Field>
        <Field>
            <FieldName>disableChecksums</FieldName>
            <FieldType>Boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>dotName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shortName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSourceUnit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SourceUnit</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCompilationUnit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>compilationUnit</ParamName>
                    <FieldType>CompilationUnit</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nodes</ParamName>
                    <FieldType>ASTNode[]</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ModuleNode [mn=(ModuleNode)nodes[0]]</InnerVar>
                <InnerVar>List&lt;Map&lt;String,Object&gt;&gt; [grabMaps=new ArrayList&lt;Map&lt;String,Object&gt;&gt;()]</InnerVar>
                <InnerVar>List&lt;Map&lt;String,Object&gt;&gt; [grabMapsInit=new ArrayList&lt;Map&lt;String,Object&gt;&gt;()]</InnerVar>
                <InnerVar>List&lt;Map&lt;String,Object&gt;&gt; [grabExcludeMaps=new ArrayList&lt;Map&lt;String,Object&gt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>callGrabAsStaticInitIfNeeded</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>grapeClassNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>grabMapsInit</ParamName>
                    <FieldType>Map&lt;String,Object&gt;</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>grabExcludeMaps</ParamName>
                    <FieldType>Map&lt;String,Object&gt;</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Statement&gt; [grabInitializers=new ArrayList&lt;Statement&gt;()]</InnerVar>
                <InnerVar>MapExpression [basicArgs=new MapExpression()]</InnerVar>
                <InnerVar>List&lt;Expression&gt; [argList=new ArrayList&lt;Expression&gt;()]</InnerVar>
                <InnerVar>ArgumentListExpression [grabArgs=new ArgumentListExpression(argList)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>argList;add;[basicArgs]</InnerMethodInvoke>
                <InnerMethodInvoke>grabInitializers;add;[new ExpressionStatement(new StaticMethodCallExpression(grapeClassNode,"grab",grabArgs))]</InnerMethodInvoke>
                <InnerMethodInvoke>classNode;addStaticInitializerStatements;[grabInitializers, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addGrabResolverAsStaticInitIfNeeded</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>grapeClassNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>AnnotationNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>grabResolverInitializers</ParamName>
                    <FieldType>Statement</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>grabResolverMap</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addInitContextClassLoaderIfNeeded</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkForClassLoader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>AnnotationNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [val=node.getMember("systemClassLoader")]</InnerVar>
                <InnerVar>Object [systemClassLoaderObject=((ConstantExpression)val).getValue()]</InnerVar>
                <InnerVar>Boolean [systemClassLoader=(Boolean)systemClassLoaderObject]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkForInitContextClassLoader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>AnnotationNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [val=node.getMember("initContextClassLoader")]</InnerVar>
                <InnerVar>Object [initContextClassLoaderObject=((ConstantExpression)val).getValue()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkForAutoDownload</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>AnnotationNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [val=node.getMember(AUTO_DOWNLOAD_SETTING)]</InnerVar>
                <InnerVar>Object [autoDownloadValue=((ConstantExpression)val).getValue()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkForDisableChecksums</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>AnnotationNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [val=node.getMember(DISABLE_CHECKSUMS_SETTING)]</InnerVar>
                <InnerVar>Object [disableChecksumsValue=((ConstantExpression)val).getValue()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkForConvenienceForm</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>AnnotationNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>exclude</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [val=node.getMember("value")]</InnerVar>
                <InnerVar>Object [allParts=((ConstantExpression)val).getValue()]</InnerVar>
                <InnerVar>String [allstr=(String)allParts]</InnerVar>
                <InnerVar>boolean [done=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>extractGrab</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>init</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>ce</ParamName>
                    <FieldType>ConstantExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitAnnotations</MethodName>
            <MethodComment>/** 
 * Adds the annotation to the internal target list if a match is found.
 * @param node the AST node we are processing
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>AnnotatedNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>