<Class>
    <Id>570</Id>
    <Package>groovy.xml</Package>
    <ClassName>QName</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Serializable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>QName  /** 
 * &lt;code&gt;QName&lt;/code&gt; class represents the value of a qualified name as specified in &lt;a href="http://www.w3.org/TR/xmlschema-2/#QName"&gt;XML Schema Part2: Datatypes specification&lt;/a&gt;. &lt;p&gt; The value of a QName contains a &lt;b&gt;namespaceURI&lt;/b&gt;, a &lt;b&gt;localPart&lt;/b&gt; and a &lt;b&gt;prefix&lt;/b&gt;. The localPart provides the local part of the qualified name. The namespaceURI is a URI reference identifying the namespace.
 * @version 1.1
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>EMPTY_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>namespaceURI</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>localPart</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>prefix</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>QName</MethodName>
            <MethodComment>/** 
 * Constructor for the QName.
 * @param localPart Local part of the QName
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>localPart</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>QName</MethodName>
            <MethodComment>/** 
 * Constructor for the QName.
 * @param namespaceURI Namespace URI for the QName
 * @param localPart Local part of the QName.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>namespaceURI</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>localPart</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>QName</MethodName>
            <MethodComment>/** 
 * Constructor for the QName.
 * @param namespaceURI Namespace URI for the QName
 * @param localPart Local part of the QName.
 * @param prefix Prefix of the QName.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>namespaceURI</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>localPart</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>prefix</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNamespaceURI</MethodName>
            <MethodComment>/** 
 * Gets the Namespace URI for this QName
 * @return Namespace URI
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLocalPart</MethodName>
            <MethodComment>/** 
 * Gets the Local part for this QName
 * @return Local part
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPrefix</MethodName>
            <MethodComment>/** 
 * Gets the Prefix for this QName
 * @return Prefix
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQualifiedName</MethodName>
            <MethodComment>/** 
 * Returns the fully qualified name of this QName
 * @return  a string representation of the QName
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * Returns a string representation of this QName
 * @return  a string representation of the QName
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment>/** 
 * Tests this QName for equality with another object. &lt;p&gt; If the given object is not a QName or String equivalent or is null then this method returns &lt;tt&gt;false&lt;/tt&gt;. &lt;p&gt; For two QNames to be considered equal requires that both localPart and namespaceURI must be equal. This method uses &lt;code&gt;String.equals&lt;/code&gt; to check equality of localPart and namespaceURI. Any class that extends QName is required to satisfy this equality contract. If the supplied object is a String, then it is split in two on the last colon and the first half is compared against the prefix || namespaceURI and the second half is compared against the localPart i.e.&amp;#160;assert new QName("namespace","localPart").equals("namespace:localPart") Intended Usage: for gpath accessors, e.g.&amp;#160;root.'urn:mynamespace:node' Warning: this equivalence is not commutative, i.e.&amp;#160;qname.equals(string) may be true/false  but string.equals(qname) is always false &lt;p&gt; This method satisfies the general contract of the &lt;code&gt;Object.equals&lt;/code&gt; method.
 * @param o the reference object with which to compare
 * @return &lt;code&gt;true&lt;/code&gt; if the given object is identical to thisQName: &lt;code&gt;false&lt;/code&gt; otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>matches</MethodName>
            <MethodComment>/** 
 * Tests if this QName matches another object. &lt;p&gt; If the given object is not a QName or String equivalent or is null then this method returns &lt;tt&gt;false&lt;/tt&gt;. &lt;p&gt; For two QNames to be considered matching requires that both localPart and namespaceURI must be equal or one of them is a wildcard. If the supplied object is a String, then it is split in two on the last colon and the first half is matched against the prefix || namespaceURI and the second half is matched against the localPart
 * @param o the reference object with which to compare
 * @return &lt;code&gt;true&lt;/code&gt; if the given object matchesthis QName: &lt;code&gt;false&lt;/code&gt; otherwise.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>valueOf</MethodName>
            <MethodComment>/** 
 * Returns a QName holding the value of the specified String. &lt;p&gt; The string must be in the form returned by the QName.toString() method, i.e. "{namespaceURI}localPart", with the "{namespaceURI}" part being optional. &lt;p&gt; This method doesn't do a full validation of the resulting QName. In particular, it doesn't check that the resulting namespace URI is a legal URI (per RFC 2396 and RFC 2732), nor that the resulting local part is a legal NCName per the XML Namespaces specification.
 * @param s the string to be parsed
 * @throws java.lang.IllegalArgumentException If the specified String cannot be parsed as a QName
 * @return QName corresponding to the given String
 */
</MethodComment>
            <ReturnType>QName</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment>/** 
 * Returns a hash code value for this QName object. The hash code is based on both the localPart and namespaceURI parts of the QName. This method satisfies the  general contract of the &lt;code&gt;Object.hashCode&lt;/code&gt; method.
 * @return a hash code value for this Qname object
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [result]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>