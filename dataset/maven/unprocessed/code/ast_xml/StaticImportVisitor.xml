<Class>
    <Id>109</Id>
    <Package>org.codehaus.groovy.control</Package>
    <ClassName>StaticImportVisitor</ClassName>
    <SuperClass>ClassCodeExpressionTransformer</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StaticImportVisitor  /** 
 * Visitor to resolve constants and method calls from static Imports
 * @author Jochen Theodorou
 * @author Paul King
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>currentClass</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>currentMethod</FieldName>
            <FieldType>MethodNode</FieldType>
        </Field>
        <Field>
            <FieldName>source</FieldName>
            <FieldType>SourceUnit</FieldType>
        </Field>
        <Field>
            <FieldName>inSpecialConstructorCall</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>inClosure</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>inPropertyExpression</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>foundConstant</FieldName>
            <FieldType>Expression</FieldType>
        </Field>
        <Field>
            <FieldName>foundArgs</FieldName>
            <FieldType>Expression</FieldType>
        </Field>
        <Field>
            <FieldName>inAnnotation</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>inLeftExpression</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>visitClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitConstructorOrMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>MethodNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>isConstructor</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitAnnotations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>AnnotatedNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [oldInAnnotation=inAnnotation]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transform</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exp</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformMapEntryExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>me</ParamName>
                    <FieldType>MapEntryExpression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>constructorCallType</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [key=me.getKeyExpression()]</InnerVar>
                <InnerVar>Expression [value=me.getValueExpression()]</InnerVar>
                <InnerVar>ModuleNode [module=currentClass.getModule()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformBinaryExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>be</ParamName>
                    <FieldType>BinaryExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [type=be.getOperation().getType()]</InnerVar>
                <InnerVar>boolean [oldInLeftExpression]</InnerVar>
                <InnerVar>Expression [right=transform(be.getRightExpression())]</InnerVar>
                <InnerVar>Expression [left]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>be;setRightExpression;[right]</InnerMethodInvoke>
                <InnerMethodInvoke>be;setLeftExpression;[left]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformVariableExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ve</ParamName>
                    <FieldType>VariableExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Variable [v=ve.getAccessedVariable()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSourcePosition</MethodName>
            <MethodComment>/** 
 * Set the source position of toSet including its property expression if it has one.
 * @param toSet resulting node
 * @param origNode original node
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>toSet</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>origNode</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>toSet;setSourcePosition;[origNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformInlineConstants</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exp</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findConstant</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fn</ParamName>
                    <FieldType>FieldNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformMethodCallExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mce</ParamName>
                    <FieldType>MethodCallExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [args=transform(mce.getArguments())]</InnerVar>
                <InnerVar>Expression [method=transform(mce.getMethod())]</InnerVar>
                <InnerVar>Expression [object=transform(mce.getObjectExpression())]</InnerVar>
                <InnerVar>boolean [isExplicitThisOrSuper=false]</InnerVar>
                <InnerVar>boolean [isExplicitSuper=false]</InnerVar>
                <InnerVar>MethodCallExpression [result=new MethodCallExpression(object,method,args)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>result;setSafe;[mce.isSafe()]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setImplicitThis;[mce.isImplicitThis()]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setSpreadSafe;[mce.isSpreadSafe()]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setMethodTarget;[mce.getMethodTarget()]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setGenericsTypes;[mce.getGenericsTypes()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setSourcePosition;[result, mce]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformConstructorCallExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cce</ParamName>
                    <FieldType>ConstructorCallExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [expression=cce.getArguments()]</InnerVar>
                <InnerVar>Expression [ret=cce.transformExpression(this)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformClosureExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ce</ParamName>
                    <FieldType>ClosureExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [oldInClosure=inClosure]</InnerVar>
                <InnerVar>Statement [code=ce.getCode()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformPropertyExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pe</ParamName>
                    <FieldType>PropertyExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [oldInPropertyExpression=inPropertyExpression]</InnerVar>
                <InnerVar>Expression [oldFoundArgs=foundArgs]</InnerVar>
                <InnerVar>Expression [oldFoundConstant=foundConstant]</InnerVar>
                <InnerVar>Expression [objectExpression=transform(pe.getObjectExpression())]</InnerVar>
                <InnerVar>boolean [candidate=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>pe;setObjectExpression;[objectExpression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findStaticFieldOrPropAccessorImportFromModule</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ModuleNode [module=currentClass.getModule()]</InnerVar>
                <InnerVar>Map&lt;String,ImportNode&gt; [importNodes=module.getStaticImports()]</InnerVar>
                <InnerVar>Expression [expression]</InnerVar>
                <InnerVar>String [accessorName=getAccessorName(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findStaticMethodImportFromModule</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ModuleNode [module=currentClass.getModule()]</InnerVar>
                <InnerVar>Map&lt;String,ImportNode&gt; [importNodes=module.getStaticImports()]</InnerVar>
                <InnerVar>ConstantExpression [ce=(ConstantExpression)method]</InnerVar>
                <InnerVar>Expression [expression]</InnerVar>
                <InnerVar>Object [value=ce.getValue()]</InnerVar>
                <InnerVar>String [name=(String)value]</InnerVar>
                <InnerVar>Map&lt;String,ImportNode&gt; [starImports=module.getStaticStarImports()]</InnerVar>
                <InnerVar>ClassNode [starImportType]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prefix</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPropNameForAccessor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fieldName</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [prefixLength=fieldName.startsWith("is") ? 2 : 3]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validPropName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>propName</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAccessorName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findStaticPropertyAccessorGivenArgs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>staticImportType</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>propName</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findStaticPropertyAccessor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>staticImportType</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>propName</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [accessorName=getAccessorName(propName)]</InnerVar>
                <InnerVar>Expression [accessor=findStaticPropertyAccessorByFullName(staticImportType,accessorName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasStaticProperty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>staticImportType</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>propName</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [classNode=staticImportType]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findStaticPropertyAccessorByFullName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>staticImportType</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>accessorMethodName</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ArgumentListExpression [dummyArgs=new ArgumentListExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>dummyArgs;addExpression;[new EmptyExpression()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findStaticField</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>staticImportType</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldName</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findStaticMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>staticImportType</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSourceUnit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SourceUnit</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>