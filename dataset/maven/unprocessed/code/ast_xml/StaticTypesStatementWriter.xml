<Class>
    <Id>567</Id>
    <Package>org.codehaus.groovy.classgen.asm.sc</Package>
    <ClassName>StaticTypesStatementWriter</ClassName>
    <SuperClass>StatementWriter</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StaticTypesStatementWriter  /** 
 * A class to write out the optimized statements
 * @author &lt;a href="mailto:blackdrag@gmx.org"&gt;Jochen "blackdrag" Theodorou&lt;/a&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>ITERABLE_CLASSNODE</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>ENUMERATION_CLASSNODE</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>ENUMERATION_NEXT_METHOD</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>ENUMERATION_HASMORE_METHOD</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>controller</FieldName>
            <FieldType>StaticTypesWriterController</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>StaticTypesStatementWriter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>controller</ParamName>
                    <FieldType>StaticTypesWriterController</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeBlockStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <FieldType>BlockStatement</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller;switchToFastPath;[]</InnerMethodInvoke>
                <InnerMethodInvoke>controller;switchToSlowPath;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeForInLoop</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>loop</ParamName>
                    <FieldType>ForStatement</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompileStack [compileStack=controller.getCompileStack()]</InnerVar>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>TypeChooser [typeChooser=controller.getTypeChooser()]</InnerVar>
                <InnerVar>Expression [collectionExpression=loop.getCollectionExpression()]</InnerVar>
                <InnerVar>ClassNode [collectionType=typeChooser.resolveType(collectionExpression,controller.getClassNode())]</InnerVar>
                <InnerVar>Parameter [loopVariable=loop.getVariable()]</InnerVar>
                <InnerVar>int [size=operandStack.getStackLength()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getAcg();onLineNumber;[loop, "visitForLoop"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeStatementLabel;[loop]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;pushLoop;[loop.getVariableScope(), loop.getStatementLabels()]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;popDownTo;[size]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;pop;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeOptimizedForEachLoop</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>compileStack</ParamName>
                    <FieldType>CompileStack</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>operandStack</ParamName>
                    <FieldType>OperandStack</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <FieldType>MethodVisitor</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>loop</ParamName>
                    <FieldType>ForStatement</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>collectionExpression</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>collectionType</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>loopVariable</ParamName>
                    <FieldType>Parameter</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BytecodeVariable [variable=compileStack.defineVariable(loopVariable,false)]</InnerVar>
                <InnerVar>Label [continueLabel=compileStack.getContinueLabel()]</InnerVar>
                <InnerVar>Label [breakLabel=compileStack.getBreakLabel()]</InnerVar>
                <InnerVar>AsmClassGenerator [acg=controller.getAcg()]</InnerVar>
                <InnerVar>int [array=compileStack.defineTemporaryVariable("$arr",collectionType,true)]</InnerVar>
                <InnerVar>int [arrayLen=compileStack.defineTemporaryVariable("$len",ClassHelper.int_TYPE,true)]</InnerVar>
                <InnerVar>int [loopIdx=compileStack.defineTemporaryVariable("$idx",ClassHelper.int_TYPE,true)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>collectionExpression;visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[DUP]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFNULL, breakLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, array]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARRAYLENGTH]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;push;[ClassHelper.int_TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ICONST_0]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;push;[ClassHelper.int_TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[continueLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ILOAD, loopIdx]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ILOAD, arrayLen]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IF_ICMPGE, breakLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>null;loadFromArray;[mv, variable, array, loopIdx]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitIincInsn;[loopIdx, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>loop.getLoopBlock();visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, continueLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[breakLabel]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadFromArray</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <FieldType>MethodVisitor</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>variable</ParamName>
                    <FieldType>BytecodeVariable</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>array</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>iteratorIdx</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>OperandStack [os=controller.getOperandStack()]</InnerVar>
                <InnerVar>ClassNode [varType=variable.getType()]</InnerVar>
                <InnerVar>boolean [primitiveType=ClassHelper.isPrimitiveType(varType)]</InnerVar>
                <InnerVar>boolean [isByte=ClassHelper.byte_TYPE.equals(varType)]</InnerVar>
                <InnerVar>boolean [isShort=ClassHelper.short_TYPE.equals(varType)]</InnerVar>
                <InnerVar>boolean [isInt=ClassHelper.int_TYPE.equals(varType)]</InnerVar>
                <InnerVar>boolean [isLong=ClassHelper.long_TYPE.equals(varType)]</InnerVar>
                <InnerVar>boolean [isFloat=ClassHelper.float_TYPE.equals(varType)]</InnerVar>
                <InnerVar>boolean [isDouble=ClassHelper.double_TYPE.equals(varType)]</InnerVar>
                <InnerVar>boolean [isChar=ClassHelper.char_TYPE.equals(varType)]</InnerVar>
                <InnerVar>boolean [isBoolean=ClassHelper.boolean_TYPE.equals(varType)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, array]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ILOAD, iteratorIdx]</InnerMethodInvoke>
                <InnerMethodInvoke>os;push;[varType]</InnerMethodInvoke>
                <InnerMethodInvoke>os;storeVar;[variable]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeIteratorBasedForEachLoop</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>compileStack</ParamName>
                    <FieldType>CompileStack</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>operandStack</ParamName>
                    <FieldType>OperandStack</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <FieldType>MethodVisitor</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>loop</ParamName>
                    <FieldType>ForStatement</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>collectionExpression</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>collectionType</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>loopVariable</ParamName>
                    <FieldType>Parameter</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BytecodeVariable [variable=compileStack.defineVariable(loopVariable,false)]</InnerVar>
                <InnerVar>int [iteratorIdx=compileStack.defineTemporaryVariable("iterator",ClassHelper.Iterator_TYPE,true)]</InnerVar>
                <InnerVar>Label [continueLabel=compileStack.getContinueLabel()]</InnerVar>
                <InnerVar>Label [breakLabel=compileStack.getBreakLabel()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitLabel;[continueLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, iteratorIdx]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeIteratorHasNext;[mv]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFEQ, breakLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, iteratorIdx]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeIteratorNext;[mv]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;push;[ClassHelper.OBJECT_TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;storeVar;[variable]</InnerMethodInvoke>
                <InnerMethodInvoke>loop.getLoopBlock();visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, continueLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[breakLabel]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeEnumerationBasedForEachLoop</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>compileStack</ParamName>
                    <FieldType>CompileStack</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>operandStack</ParamName>
                    <FieldType>OperandStack</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <FieldType>MethodVisitor</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>loop</ParamName>
                    <FieldType>ForStatement</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>collectionExpression</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>collectionType</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>loopVariable</ParamName>
                    <FieldType>Parameter</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BytecodeVariable [variable=compileStack.defineVariable(loopVariable,false)]</InnerVar>
                <InnerVar>int [enumIdx=compileStack.defineTemporaryVariable("$enum",ENUMERATION_CLASSNODE,true)]</InnerVar>
                <InnerVar>Label [continueLabel=compileStack.getContinueLabel()]</InnerVar>
                <InnerVar>Label [breakLabel=compileStack.getBreakLabel()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>collectionExpression;visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[continueLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, enumIdx]</InnerMethodInvoke>
                <InnerMethodInvoke>ENUMERATION_HASMORE_METHOD;call;[mv]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFEQ, breakLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, enumIdx]</InnerMethodInvoke>
                <InnerMethodInvoke>ENUMERATION_NEXT_METHOD;call;[mv]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;push;[ClassHelper.OBJECT_TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;storeVar;[variable]</InnerMethodInvoke>
                <InnerMethodInvoke>loop.getLoopBlock();visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, continueLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[breakLabel]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>