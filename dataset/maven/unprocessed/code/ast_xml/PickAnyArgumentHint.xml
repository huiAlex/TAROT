<Class>
    <Id>615</Id>
    <Package>groovy.transform.stc</Package>
    <ClassName>PickAnyArgumentHint</ClassName>
    <SuperClass>SingleSignatureClosureHint</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PickAnyArgumentHint  /** 
 * &lt;p&gt;Base class for hints which use the type of a parameter of the annotated method as the signature. This can optionally use a generic type of the selected parameter as the hint. For example, imagine the following method:&lt;/p&gt; &lt;code&gt;void foo(A firstArg, B secondArg, Closure c) {...}&lt;/code&gt; &lt;p&gt;If the &lt;i&gt;c&lt;/i&gt; closure should be &lt;code&gt;{ B it -&gt; ...}&lt;/code&gt;, then we can see that the parameter type should be picked from the second parameter of the foo method, which is what  {@link groovy.transform.stc.PickAnyArgumentHint}lets you do.&lt;/p&gt; &lt;p&gt;Alternatively, the method may look like this:&lt;/p&gt; &lt;code&gt;void &amp;lt;T&amp;gt; foo(A&amp;lt;T&amp;gt; firstArg, B secondArg, Closure c) {...}&lt;/code&gt; &lt;p&gt;in which case if you want to express the fact that &lt;i&gt;c&lt;/i&gt; should accept a &amp;lt;T&amp;gt; then you can use the {@link #genericTypeIndex} value.&lt;/p&gt;&lt;p&gt;&lt;/p&gt; &lt;p&gt;This class is extended by several hint providers that make it easier to use as annotation values.&lt;/p&gt;
 * @author CÃ©dric Champeau
 * @since 2.3.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>parameterIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>genericTypeIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PickAnyArgumentHint</MethodName>
            <MethodComment>/** 
 * Creates the an argument picker which extracts the type of the first parameter.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PickAnyArgumentHint</MethodName>
            <MethodComment>/** 
 * Creates a picker which will extract the parameterIndex-th parameter type, or its genericTypeIndex-th generic type genericTypeIndex is &amp;gt;=0.
 * @param parameterIndex the index of the parameter from which to extract the type
 * @param genericTypeIndex if &amp;gt;=0, then returns the corresponding generic type instead of the parameter type.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parameterIndex</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>genericTypeIndex</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParameterTypes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>MethodNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>options</ParamName>
                    <FieldType>String[]</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>sourceUnit</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <FieldType>CompilationUnit</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>usage</ParamName>
                    <FieldType>ASTNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [type=node.getParameters()[parameterIndex].getOriginType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>