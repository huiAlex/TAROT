<Class>
    <Id>348</Id>
    <Package>org.codehaus.groovy.classgen.asm</Package>
    <ClassName>MopWriter</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>FACTORY</FieldName>
            <FieldType>Factory</FieldType>
        </Field>
        <Field>
            <FieldName>hash</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>name</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>params</FieldName>
            <FieldType>Parameter[]</FieldType>
        </Field>
        <Field>
            <FieldName>controller</FieldName>
            <FieldType>WriterController</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MopWriter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>controller</ParamName>
                    <FieldType>WriterController</FieldType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MopWriter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>controller</ParamName>
                    <FieldType>WriterController</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>MopKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <FieldType>Parameter[]</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hashCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MopKey [other=(MopKey)obj]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>MopWriter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wc</ParamName>
                    <FieldType>WriterController</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createMopMethods</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ClassNode [classNode=controller.getClassNode()]</InnerVar>
                <InnerVar>Set&lt;MopKey&gt; [currentClassSignatures=buildCurrentClassSignatureSet(classNode.getMethods())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;visitMopMethodList;[classNode.getMethods(), true, Collections.EMPTY_SET]</InnerMethodInvoke>
                <InnerMethodInvoke>null;visitMopMethodList;[classNode.getSuperClass().getAllDeclaredMethods(), false, currentClassSignatures]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildCurrentClassSignatureSet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MopKey</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methods</ParamName>
                    <FieldType>MethodNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>HashSet&lt;MopKey&gt; [result=new HashSet&lt;MopKey&gt;(methods.size())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitMopMethodList</MethodName>
            <MethodComment>/** 
 * filters a list of method for MOP methods. For all methods that are no MOP methods a MOP method is created if the method is not public and the call would be a call on "this" (isThis == true). If the call is not on "this", then the call is a call on "super" and all methods are used, unless they are already a MOP method
 * @param methods unfiltered list of methods for MOP
 * @param isThis  if true, then we are creating a MOP method on "this", "super" else
 * @see #generateMopCalls(LinkedList,boolean)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methods</ParamName>
                    <FieldType>MethodNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>isThis</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>useOnlyIfDeclaredHereToo</ParamName>
                    <FieldType>MopKey</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>HashMap&lt;MopKey,MethodNode&gt; [mops=new HashMap&lt;MopKey,MethodNode&gt;()]</InnerVar>
                <InnerVar>LinkedList&lt;MethodNode&gt; [mopCalls=new LinkedList&lt;MethodNode&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;generateMopCalls;[mopCalls, isThis]</InnerMethodInvoke>
                <InnerMethodInvoke>mopCalls;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mops;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMopMethodName</MethodName>
            <MethodComment>/** 
 * creates a MOP method name from a method
 * @param method  the method to be called by the mop method
 * @param useThis if true, then it is a call on "this", "super" else
 * @return the mop method name
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <FieldType>MethodNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>useThis</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [declaringNode=method.getDeclaringClass()]</InnerVar>
                <InnerVar>int [distance=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isMopMethod</MethodName>
            <MethodComment>/** 
 * method to determine if a method is a MOP method. This is done by the method name. If the name starts with "this$" or "super$" but does not  contain "$dist$", then it is an MOP method
 * @param methodName name of the method to test
 * @return true if the method is a MOP method
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateMopCalls</MethodName>
            <MethodComment>/** 
 * generates a Meta Object Protocol method, that is used to call a non public method, or to make a call to super.
 * @param mopCalls list of methods a mop call method should be generated for
 * @param useThis  true if "this" should be used for the naming
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mopCalls</ParamName>
                    <FieldType>MethodNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>useThis</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>equalParameterTypes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p1</ParamName>
                    <FieldType>Parameter[]</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>p2</ParamName>
                    <FieldType>Parameter[]</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>