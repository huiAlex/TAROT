<Class>
    <Id>211</Id>
    <Package>org.codehaus.groovy.transform</Package>
    <ClassName>EqualsAndHashCodeASTTransformation</ClassName>
    <SuperClass>AbstractASTTransformation</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>MY_CLASS</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>MY_TYPE</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>MY_TYPE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HASHUTIL_TYPE</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>OBJECT_TYPE</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nodes</ParamName>
                    <FieldType>ASTNode[]</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AnnotatedNode [parent=(AnnotatedNode)nodes[1]]</InnerVar>
                <InnerVar>AnnotationNode [anno=(AnnotationNode)nodes[0]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;init;[nodes, source]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createHashCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>cacheResult</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>includeFields</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>callSuper</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>excludes</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>includes</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [hasExistingHashCode=hasDeclaredMethod(cNode,"hashCode",0)]</InnerVar>
                <InnerVar>BlockStatement [body=new BlockStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cNode;addMethod;[new MethodNode(hasExistingHashCode ? "_hashCode" : "hashCode",hasExistingHashCode ? ACC_PRIVATE : ACC_PUBLIC,ClassHelper.int_TYPE,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,body)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>calculateHashStatements</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>hash</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>includeFields</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>callSuper</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>excludes</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>includes</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;PropertyNode&gt; [pList=getInstanceProperties(cNode)]</InnerVar>
                <InnerVar>List&lt;FieldNode&gt; [fList=new ArrayList&lt;FieldNode&gt;()]</InnerVar>
                <InnerVar>BlockStatement [body=new BlockStatement()]</InnerVar>
                <InnerVar>Expression [result=varX("_result")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>body;addStatement;[declS(result,callX(HASHUTIL_TYPE,"initHash"))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createCanEqual</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [hasExistingCanEqual=hasDeclaredMethod(cNode,"canEqual",1)]</InnerVar>
                <InnerVar>BlockStatement [body=new BlockStatement()]</InnerVar>
                <InnerVar>VariableExpression [other=varX("other")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>body;addStatement;[returnS(isInstanceOfX(other,GenericsUtils.nonGeneric(cNode)))]</InnerMethodInvoke>
                <InnerMethodInvoke>cNode;addMethod;[new MethodNode(hasExistingCanEqual ? "_canEqual" : "canEqual",hasExistingCanEqual ? ACC_PRIVATE : ACC_PUBLIC,ClassHelper.boolean_TYPE,params(param(OBJECT_TYPE,other.getName())),ClassNode.EMPTY_ARRAY,body)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createEquals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>includeFields</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>callSuper</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>useCanEqual</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>excludes</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>includes</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [hasExistingEquals=hasDeclaredMethod(cNode,"equals",1)]</InnerVar>
                <InnerVar>BlockStatement [body=new BlockStatement()]</InnerVar>
                <InnerVar>VariableExpression [other=varX("other")]</InnerVar>
                <InnerVar>VariableExpression [otherTyped=varX("otherTyped",GenericsUtils.nonGeneric(cNode))]</InnerVar>
                <InnerVar>CastExpression [castExpression=new CastExpression(GenericsUtils.nonGeneric(cNode),other)]</InnerVar>
                <InnerVar>List&lt;PropertyNode&gt; [pList=getInstanceProperties(cNode)]</InnerVar>
                <InnerVar>List&lt;FieldNode&gt; [fList=new ArrayList&lt;FieldNode&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>body;addStatement;[ifS(equalsNullX(other),returnS(constX(Boolean.FALSE,true)))]</InnerMethodInvoke>
                <InnerMethodInvoke>body;addStatement;[ifS(sameX(varX("this"),other),returnS(constX(Boolean.TRUE,true)))]</InnerMethodInvoke>
                <InnerMethodInvoke>castExpression;setStrict;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>body;addStatement;[declS(otherTyped,castExpression)]</InnerMethodInvoke>
                <InnerMethodInvoke>body;addStatement;[returnS(constX(Boolean.TRUE,true))]</InnerMethodInvoke>
                <InnerMethodInvoke>cNode;addMethod;[new MethodNode(hasExistingEquals ? "_equals" : "equals",hasExistingEquals ? ACC_PRIVATE : ACC_PUBLIC,ClassHelper.boolean_TYPE,params(param(OBJECT_TYPE,other.getName())),ClassNode.EMPTY_ARRAY,body)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>differentSelfRecursivePropertyX</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BinaryExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pNode</ParamName>
                    <FieldType>PropertyNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>other</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [getterName=getGetterName(pNode)]</InnerVar>
                <InnerVar>Expression [selfGetter=callThisX(getterName)]</InnerVar>
                <InnerVar>Expression [otherGetter=callX(other,getterName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bothSelfRecursivePropertyX</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BinaryExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pNode</ParamName>
                    <FieldType>PropertyNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>other</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [getterName=getGetterName(pNode)]</InnerVar>
                <InnerVar>Expression [selfGetter=callThisX(getterName)]</InnerVar>
                <InnerVar>Expression [otherGetter=callX(other,getterName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>differentSelfRecursiveFieldX</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BinaryExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fNode</ParamName>
                    <FieldType>FieldNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>other</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [fieldExpr=varX(fNode)]</InnerVar>
                <InnerVar>Expression [otherExpr=propX(other,fNode.getName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bothSelfRecursiveFieldX</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BinaryExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fNode</ParamName>
                    <FieldType>FieldNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>other</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [fieldExpr=varX(fNode)]</InnerVar>
                <InnerVar>Expression [otherExpr=propX(other,fNode.getName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>