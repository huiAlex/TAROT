<Class>
    <Id>571</Id>
    <Package>org.codehaus.groovy.ast</Package>
    <ClassName>CompileUnit</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CompileUnit  /** 
 * Represents the entire contents of a compilation step which consists of one or more {@link ModuleNode} instances. There's one instance of this that's shared by all modules andclasses compiled during a single invocation of the compiler. &lt;p&gt; It's attached to MethodNodes and ClassNodes and is used to find fully qualified names of classes, resolve imports, and that sort of thing.
 * @author &lt;a href="mailto:james@coredevelopers.net"&gt;James Strachan &lt;/a&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>modules</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>modules</FieldName>
            <FieldType>ModuleNode</FieldType>
        </Field>
        <Field>
            <FieldName>classes</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>classes</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>config</FieldName>
            <FieldType>CompilerConfiguration</FieldType>
        </Field>
        <Field>
            <FieldName>classLoader</FieldName>
            <FieldType>GroovyClassLoader</FieldType>
        </Field>
        <Field>
            <FieldName>codeSource</FieldName>
            <FieldType>CodeSource</FieldType>
        </Field>
        <Field>
            <FieldName>classesToCompile</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>classesToCompile</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>classNameToSource</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>classNameToSource</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>generatedInnerClasses</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>generatedInnerClasses</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CompileUnit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <FieldType>GroovyClassLoader</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>config</ParamName>
                    <FieldType>CompilerConfiguration</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CompileUnit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <FieldType>GroovyClassLoader</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>codeSource</ParamName>
                    <FieldType>CodeSource</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>config</ParamName>
                    <FieldType>CompilerConfiguration</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getModules</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ModuleNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addModule</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>ModuleNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>modules;add;[node]</InnerMethodInvoke>
                <InnerMethodInvoke>node;setUnit;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addClasses;[node.getClasses()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClass</MethodName>
            <MethodComment>/** 
 * @return the ClassNode for the given qualified name or returns null ifthe name does not exist in the current compilation unit (ignoring the .class files on the classpath)
 */
</MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [cn=classes.get(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClasses</MethodName>
            <MethodComment>/** 
 * @return a list of all the classes in each module in the compilation unit
 */
</MethodComment>
            <ReturnType>List</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;ClassNode&gt; [answer=new ArrayList&lt;ClassNode&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConfig</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CompilerConfiguration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassLoader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>GroovyClassLoader</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCodeSource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CodeSource</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addClasses</MethodName>
            <MethodComment>/** 
 * Appends all of the fully qualified class names in this module into the given map
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classList</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addClass</MethodName>
            <MethodComment>/** 
 * Adds a class to the unit.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=node.getName()]</InnerVar>
                <InnerVar>ClassNode [stored=classes.get(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>classes;put;[name, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addClassNodeToCompile</MethodName>
            <MethodComment>/** 
 * this method actually does not compile a class. It's only a marker that this type has to be compiled by the CompilationUnit at the end of a parse step no node should be be left.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>location</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>classesToCompile;put;[node.getName(), node]</InnerMethodInvoke>
                <InnerMethodInvoke>classNameToSource;put;[node.getName(), location]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScriptSourceLocation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SourceUnit</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasClassNodeToCompile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterateClassNodeToCompile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGeneratedInnerClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InnerClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addGeneratedInnerClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>icn</ParamName>
                    <FieldType>InnerClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>generatedInnerClasses;put;[icn.getName(), icn]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGeneratedInnerClasses</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>