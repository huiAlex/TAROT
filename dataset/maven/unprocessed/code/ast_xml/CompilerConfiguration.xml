<Class>
    <Id>293</Id>
    <Package>org.codehaus.groovy.control</Package>
    <ClassName>CompilerConfiguration</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CompilerConfiguration  /** 
 * Compilation control flags and coordination stuff.
 * @author &lt;a href="mailto:cpoirier@dreaming.org"&gt;Chris Poirier&lt;/a&gt;
 * @author &lt;a href="mailto:blackdrag@gmx.org"&gt;Jochen Theodorou&lt;/a&gt;
 * @author &lt;a href="mailto:jim@pagesmiths.com"&gt;Jim White&lt;/a&gt;
 * @author &lt;a href="mailto:cedric.champeau@gmail.com"&gt;Cedric Champeau&lt;/a&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>JDK5_CLASSNAME_CHECK</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>JDK4</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>JDK5</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>JDK6</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>JDK7</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>JDK8</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>POST_JDK5</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PRE_JDK5</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ALLOWED_JDKS</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>currentJVMVersion</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT</FieldName>
            <FieldType>CompilerConfiguration</FieldType>
        </Field>
        <Field>
            <FieldName>warningLevel</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>sourceEncoding</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>output</FieldName>
            <FieldType>PrintWriter</FieldType>
        </Field>
        <Field>
            <FieldName>targetDirectory</FieldName>
            <FieldType>File</FieldType>
        </Field>
        <Field>
            <FieldName>classpath</FieldName>
            <FieldType>LinkedList</FieldType>
        </Field>
        <Field>
            <FieldName>classpath</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>verbose</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>debug</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>tolerance</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>scriptBaseClass</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>pluginFactory</FieldName>
            <FieldType>ParserPluginFactory</FieldType>
        </Field>
        <Field>
            <FieldName>defaultScriptExtension</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>scriptExtensions</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>scriptExtensions</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>recompileGroovySource</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>minimumRecompilationInterval</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>targetBytecode</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>jointCompilationOptions</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>jointCompilationOptions</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>optimizationOptions</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>optimizationOptions</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>compilationCustomizers</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>compilationCustomizers</FieldName>
            <FieldType>CompilationCustomizer</FieldType>
        </Field>
        <Field>
            <FieldName>disabledGlobalASTTransformations</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>disabledGlobalASTTransformations</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>bytecodePostprocessor</FieldName>
            <FieldType>BytecodeProcessor</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CompilerConfiguration</MethodName>
            <MethodComment>/** 
 * Sets the Flags to defaults.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [targetByteCode=null]</InnerVar>
                <InnerVar>String [tmpDefaultScriptExtension=null]</InnerVar>
                <InnerVar>String [encoding=null]</InnerVar>
                <InnerVar>boolean [indy=false]</InnerVar>
                <InnerVar>Map [options=new HashMap&lt;String,Boolean&gt;(3)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setWarningLevel;[WarningMessage.LIKELY_ERRORS]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setOutput;[null]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setTargetDirectory;[(File)null]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setClasspath;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setVerbose;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setDebug;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setTolerance;[10]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setScriptBaseClass;[null]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setRecompileGroovySource;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setMinimumRecompilationInterval;[100]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setSourceEncoding;[encoding]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setOptimizationOptions;[options]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CompilerConfiguration</MethodName>
            <MethodComment>/** 
 * Copy constructor.  Use this if you have a mostly correct configuration for your compilation but you want to make a some changes programatically. An important reason to prefer this approach is that your code will most likely be forward compatible with future changes to this configuration API. &lt;p&gt; An example of this copy constructor at work: &lt;pre&gt; // In all likelihood there is already a configuration in your code's context // for you to copy, but for the sake of this example we'll use the global default. CompilerConfiguration myConfiguration = new CompilerConfiguration(CompilerConfiguration.DEFAULT); myConfiguration.setDebug(true); &lt;/pre&gt;
 * @param configuration The configuration to copy.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <FieldType>CompilerConfiguration</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,Object&gt; [jointCompilationOptions=configuration.getJointCompilationOptions()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setWarningLevel;[configuration.getWarningLevel()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setOutput;[configuration.getOutput()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setTargetDirectory;[configuration.getTargetDirectory()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setClasspathList;[new LinkedList&lt;String&gt;(configuration.getClasspath())]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setVerbose;[configuration.getVerbose()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setDebug;[configuration.getDebug()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setTolerance;[configuration.getTolerance()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setScriptBaseClass;[configuration.getScriptBaseClass()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setRecompileGroovySource;[configuration.getRecompileGroovySource()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setMinimumRecompilationInterval;[configuration.getMinimumRecompilationInterval()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setTargetBytecode;[configuration.getTargetBytecode()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setDefaultScriptExtension;[configuration.getDefaultScriptExtension()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setSourceEncoding;[configuration.getSourceEncoding()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setOutput;[configuration.getOutput()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setTargetDirectory;[configuration.getTargetDirectory()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setJointCompilationOptions;[jointCompilationOptions]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setPluginFactory;[configuration.getPluginFactory()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setScriptExtensions;[configuration.getScriptExtensions()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setOptimizationOptions;[new HashMap&lt;String,Boolean&gt;(configuration.getOptimizationOptions())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CompilerConfiguration</MethodName>
            <MethodComment>/** 
 * Sets the Flags to the specified configuration, with defaults for those not supplied. Note that those "defaults" here do &lt;em&gt;not&lt;/em&gt; include checking the settings in  {@link System#getProperties()} in general, only file.encoding, groovy.target.directory and groovy.source.encoding are. &lt;p&gt; If you want to set a few flags but keep Groovy's default configuration behavior then be sure to make your settings in a Properties that is backed by &lt;code&gt;System.getProperties()&lt;/code&gt; (which is done using this constructor). That might be done like this: &lt;pre&gt; Properties myProperties = new Properties(System.getProperties()); myProperties.setProperty("groovy.output.debug", "true"); myConfiguration = new CompilerConfiguration(myProperties); &lt;/pre&gt; And you also have to contend with a possible SecurityException when getting the system properties (See  {@link java.lang.System#getProperties()}). A safer approach would be to copy a default CompilerConfiguration and make your changes there using the setter: &lt;pre&gt; // In all likelihood there is already a configuration for you to copy, // but for the sake of this example we'll use the global default. CompilerConfiguration myConfiguration = new CompilerConfiguration(CompilerConfiguration.DEFAULT); myConfiguration.setDebug(true); &lt;/pre&gt; Another reason to use the copy constructor rather than this one is that you must call  {@link #setOutput}.  Calling &lt;code&gt;setOutput(null)&lt;/code&gt; is valid and will set up a &lt;code&gt;PrintWriter&lt;/code&gt; to a bit bucket.  The copy constructor will of course set the same one as the original. &lt;p&gt; &lt;table summary="Groovy Compiler Configuration Properties"&gt; &lt;tr&gt; &lt;th&gt;Property Key&lt;/th&gt;&lt;th&gt;Get/Set Property Name&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;"groovy.warnings"&lt;/code&gt;&lt;/td&gt;&lt;td&gt; {@link #getWarningLevel}&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;code&gt;"groovy.source.encoding"&lt;/code&gt;&lt;/td&gt;&lt;td&gt; {@link #getSourceEncoding}&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;code&gt;"groovy.target.directory"&lt;/code&gt;&lt;/td&gt;&lt;td&gt; {@link #getTargetDirectory}&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;code&gt;"groovy.target.bytecode"&lt;/code&gt;&lt;/td&gt;&lt;td&gt; {@link #getTargetBytecode}&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;code&gt;"groovy.classpath"&lt;/code&gt;&lt;/td&gt;&lt;td&gt; {@link #getClasspath}&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;code&gt;"groovy.output.verbose"&lt;/code&gt;&lt;/td&gt;&lt;td&gt; {@link #getVerbose}&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;code&gt;"groovy.output.debug"&lt;/code&gt;&lt;/td&gt;&lt;td&gt; {@link #getDebug}&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;code&gt;"groovy.errors.tolerance"&lt;/code&gt;&lt;/td&gt;&lt;td&gt; {@link #getTolerance}&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;code&gt;"groovy.script.extension"&lt;/code&gt;&lt;/td&gt;&lt;td&gt; {@link #getDefaultScriptExtension}&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;code&gt;"groovy.script.base"&lt;/code&gt;&lt;/td&gt;&lt;td&gt; {@link #getScriptBaseClass}&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;code&gt;"groovy.recompile"&lt;/code&gt;&lt;/td&gt;&lt;td&gt; {@link #getRecompileGroovySource}&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;&lt;code&gt;"groovy.recompile.minimumInterval"&lt;/code&gt;&lt;/td&gt;&lt;td&gt; {@link #getMinimumRecompilationInterval}&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt; &lt;/tr&gt; &lt;/table&gt;
 * @param configuration The properties to get flag values from.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <FieldType>Properties</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configure;[configuration]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ConfigurationException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isPostJDK5</MethodName>
            <MethodComment>/** 
 * Checks if the specified bytecode version string represents a JDK 1.5+ compatible bytecode version.
 * @param bytecodeVersion the bytecode version string (1.4, 1.5, 1.6, 1.7 or 1.8)
 * @return true if the bytecode version is JDK 1.5+
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bytecodeVersion</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isPostJDK7</MethodName>
            <MethodComment>/** 
 * Checks if the specified bytecode version string represents a JDK 1.7+ compatible bytecode version.
 * @param bytecodeVersion the bytecode version string (1.4, 1.5, 1.6, 1.7 or 1.8)
 * @return true if the bytecode version is JDK 1.7+
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bytecodeVersion</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>configure</MethodName>
            <MethodComment>/** 
 * Method to configure a this CompilerConfiguration by using Properties. For a list of available properties look at {link  {@link #CompilerConfiguration(Properties)}.
 * @param configuration The properties to get flag values from.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <FieldType>Properties</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [text=null]</InnerVar>
                <InnerVar>int [numeric=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setWarningLevel;[numeric]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setSourceEncoding;[text]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setTolerance;[numeric]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setMinimumRecompilationInterval;[numeric]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ConfigurationException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWarningLevel</MethodName>
            <MethodComment>/** 
 * Gets the currently configured warning level.  See WarningMessage for level details.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setWarningLevel</MethodName>
            <MethodComment>/** 
 * Sets the warning level.  See WarningMessage for level details.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>level</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSourceEncoding</MethodName>
            <MethodComment>/** 
 * Gets the currently configured source file encoding.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSourceEncoding</MethodName>
            <MethodComment>/** 
 * Sets the encoding to be used when reading source files.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>encoding</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOutput</MethodName>
            <MethodComment>/** 
 * Gets the currently configured output writer.
 */
</MethodComment>
            <ReturnType>PrintWriter</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setOutput</MethodName>
            <MethodComment>/** 
 * Sets the output writer.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>output</ParamName>
                    <FieldType>PrintWriter</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTargetDirectory</MethodName>
            <MethodComment>/** 
 * Gets the target directory for writing classes.
 */
</MethodComment>
            <ReturnType>File</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTargetDirectory</MethodName>
            <MethodComment>/** 
 * Sets the target directory.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>directory</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTargetDirectory</MethodName>
            <MethodComment>/** 
 * Sets the target directory.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>directory</ParamName>
                    <FieldType>File</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClasspath</MethodName>
            <MethodComment>/** 
 * @return the classpath
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setClasspath</MethodName>
            <MethodComment>/** 
 * Sets the classpath.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classpath</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringTokenizer [tokenizer=new StringTokenizer(classpath,File.pathSeparator)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setClasspathList</MethodName>
            <MethodComment>/** 
 * sets the classpath using a list of Strings
 * @param parts list of strings containing the classpath parts
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parts</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getVerbose</MethodName>
            <MethodComment>/** 
 * Returns true if verbose operation has been requested.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setVerbose</MethodName>
            <MethodComment>/** 
 * Turns verbose operation on or off.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>verbose</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDebug</MethodName>
            <MethodComment>/** 
 * Returns true if debugging operation has been requested.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setDebug</MethodName>
            <MethodComment>/** 
 * Turns debugging operation on or off.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>debug</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTolerance</MethodName>
            <MethodComment>/** 
 * Returns the requested error tolerance.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTolerance</MethodName>
            <MethodComment>/** 
 * Sets the error tolerance, which is the number of non-fatal errors (per unit) that should be tolerated before compilation is aborted.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tolerance</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScriptBaseClass</MethodName>
            <MethodComment>/** 
 * Gets the name of the base class for scripts.  It must be a subclass of Script.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setScriptBaseClass</MethodName>
            <MethodComment>/** 
 * Sets the name of the base class for scripts.  It must be a subclass of Script.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scriptBaseClass</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPluginFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ParserPluginFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPluginFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pluginFactory</ParamName>
                    <FieldType>ParserPluginFactory</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setScriptExtensions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scriptExtensions</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScriptExtensions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDefaultScriptExtension</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setDefaultScriptExtension</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>defaultScriptExtension</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setRecompileGroovySource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>recompile</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRecompileGroovySource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setMinimumRecompilationInterval</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>time</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMinimumRecompilationInterval</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTargetBytecode</MethodName>
            <MethodComment>/** 
 * Allow setting the bytecode compatibility. The parameter can take one of the values &lt;tt&gt;1.7&lt;/tt&gt;, &lt;tt&gt;1.6&lt;/tt&gt;, &lt;tt&gt;1.5&lt;/tt&gt; or &lt;tt&gt;1.4&lt;/tt&gt;. If wrong parameter then the value will default to VM determined version.
 * @param version the bytecode compatibility mode
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>version</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTargetBytecode</MethodName>
            <MethodComment>/** 
 * Retrieves the compiler bytecode compatibility mode.
 * @return bytecode compatibility mode. Can be either &lt;tt&gt;1.5&lt;/tt&gt; or &lt;tt&gt;1.4&lt;/tt&gt;.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getVMVersion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getJointCompilationOptions</MethodName>
            <MethodComment>/** 
 * Gets the joint compilation options for this configuration.
 * @return the options
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setJointCompilationOptions</MethodName>
            <MethodComment>/** 
 * Sets the joint compilation options for this configuration.  Using null will disable joint compilation.
 * @param options the options
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>options</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOptimizationOptions</MethodName>
            <MethodComment>/** 
 * Gets the optimization options for this configuration.
 * @return the options (always not null)
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setOptimizationOptions</MethodName>
            <MethodComment>/** 
 * Sets the optimization options for this configuration.  No entry or a true for that entry means to enable that optimization,  a false means the optimization is disabled.  Valid keys are "all" and "int".
 * @param options the options.
 * @throws IllegalArgumentException if the options are null
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>options</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addCompilationCustomizers</MethodName>
            <MethodComment>/** 
 * Adds compilation customizers to the compilation process. A compilation customizer is a class node operation which performs various operations going from adding imports to access control.
 * @param customizers the list of customizers to be added
 * @return this configuration instance
 */
</MethodComment>
            <ReturnType>CompilerConfiguration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>customizers</ParamName>
                    <FieldType>CompilationCustomizer</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>compilationCustomizers;addAll;[Arrays.asList(customizers)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCompilationCustomizers</MethodName>
            <MethodComment>/** 
 * Returns the list of compilation customizers.
 * @return the customizers (always not null)
 */
</MethodComment>
            <ReturnType>CompilationCustomizer</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDisabledGlobalASTTransformations</MethodName>
            <MethodComment>/** 
 * Returns the list of disabled global AST transformation class names.
 * @return a list of global AST transformation fully qualified class names
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setDisabledGlobalASTTransformations</MethodName>
            <MethodComment>/** 
 * Disables global AST transformations. In order to avoid class loading side effects, it is not recommended to use MyASTTransformation.class.getName() by directly use the class name as a string. Disabled AST transformations only apply to automatically loaded global AST transformations, that is to say transformations defined in a META-INF/org.codehaus.groovy.transform.ASTTransformation file. If you explicitly add a global AST transformation in your compilation process, for example using the  {@link org.codehaus.groovy.control.customizers.ASTTransformationCustomizer} orusing a  {@link org.codehaus.groovy.control.CompilationUnit.PrimaryClassNodeOperation}, then nothing will prevent the transformation from being loaded.
 * @param disabledGlobalASTTransformations a set of fully qualified class names of global AST transformationswhich should not be loaded.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>disabledGlobalASTTransformations</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBytecodePostprocessor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BytecodeProcessor</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setBytecodePostprocessor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bytecodePostprocessor</ParamName>
                    <FieldType>BytecodeProcessor</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>