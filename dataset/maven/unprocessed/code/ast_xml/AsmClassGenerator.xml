<Class>
    <Id>691</Id>
    <Package>org.codehaus.groovy.classgen</Package>
    <ClassName>AsmClassGenerator</ClassName>
    <SuperClass>ClassGenerator</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AsmClassGenerator  /** 
 * Generates Java class versions of Groovy classes using ASM.
 * @author &lt;a href="mailto:james@coredevelopers.net"&gt;James Strachan&lt;/a&gt;
 * @author &lt;a href="mailto:b55r@sina.com"&gt;Bing Ran&lt;/a&gt;
 * @author &lt;a href="mailto:blackdrag@gmx.org"&gt;Jochen Theodorou&lt;/a&gt;
 * @author &lt;a href='mailto:the[dot]mindstorm[at]gmail[dot]com'&gt;Alex Popescu&lt;/a&gt;
 * @author Alex Tkachman
 * @version $Revision$
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>cv</FieldName>
            <FieldType>ClassVisitor</FieldType>
        </Field>
        <Field>
            <FieldName>context</FieldName>
            <FieldType>GeneratorContext</FieldType>
        </Field>
        <Field>
            <FieldName>sourceFile</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>setField</FieldName>
            <FieldType>MethodCallerMultiAdapter</FieldType>
        </Field>
        <Field>
            <FieldName>getField</FieldName>
            <FieldType>MethodCallerMultiAdapter</FieldType>
        </Field>
        <Field>
            <FieldName>setGroovyObjectField</FieldName>
            <FieldType>MethodCallerMultiAdapter</FieldType>
        </Field>
        <Field>
            <FieldName>getGroovyObjectField</FieldName>
            <FieldType>MethodCallerMultiAdapter</FieldType>
        </Field>
        <Field>
            <FieldName>setFieldOnSuper</FieldName>
            <FieldType>MethodCallerMultiAdapter</FieldType>
        </Field>
        <Field>
            <FieldName>getFieldOnSuper</FieldName>
            <FieldType>MethodCallerMultiAdapter</FieldType>
        </Field>
        <Field>
            <FieldName>setProperty</FieldName>
            <FieldType>MethodCallerMultiAdapter</FieldType>
        </Field>
        <Field>
            <FieldName>getProperty</FieldName>
            <FieldType>MethodCallerMultiAdapter</FieldType>
        </Field>
        <Field>
            <FieldName>setGroovyObjectProperty</FieldName>
            <FieldType>MethodCallerMultiAdapter</FieldType>
        </Field>
        <Field>
            <FieldName>getGroovyObjectProperty</FieldName>
            <FieldType>MethodCallerMultiAdapter</FieldType>
        </Field>
        <Field>
            <FieldName>setPropertyOnSuper</FieldName>
            <FieldType>MethodCallerMultiAdapter</FieldType>
        </Field>
        <Field>
            <FieldName>getPropertyOnSuper</FieldName>
            <FieldType>MethodCallerMultiAdapter</FieldType>
        </Field>
        <Field>
            <FieldName>spreadMap</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>despreadList</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>getMethodPointer</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>createListMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>createMapMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>createRangeMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>createPojoWrapperMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>createGroovyObjectWrapperMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>referencedClasses</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>referencedClasses</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>passingParams</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>CREATE_DEBUG_INFO</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>CREATE_LINE_NUMBER_INFO</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>ASM_DEBUG</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>currentASTNode</FieldName>
            <FieldType>ASTNode</FieldType>
        </Field>
        <Field>
            <FieldName>genericParameterNames</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>source</FieldName>
            <FieldType>SourceUnit</FieldType>
        </Field>
        <Field>
            <FieldName>controller</FieldName>
            <FieldType>WriterController</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>AsmClassGenerator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <FieldType>GeneratorContext</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>classVisitor</ParamName>
                    <FieldType>ClassVisitor</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>sourceFile</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSourceUnit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SourceUnit</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getController</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>WriterController</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>WriterControllerFactory [factory=(WriterControllerFactory)classNode.getNodeMetaData(WriterControllerFactory.class)]</InnerVar>
                <InnerVar>WriterController [normalController=new WriterController()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>referencedClasses;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>this.controller;init;[this, context, cv, classNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeInnerClassEntry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cn</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InnerClassNode [innerClass=(InnerClassNode)cn]</InnerVar>
                <InnerVar>String [innerClassName=innerClass.getName()]</InnerVar>
                <InnerVar>String [innerClassInternalName=BytecodeHelper.getClassInternalName(innerClassName)]</InnerVar>
                <InnerVar>String [outerClassName=BytecodeHelper.getClassInternalName(innerClass.getOuterClass().getName())]</InnerVar>
                <InnerVar>MethodNode [enclosingMethod=innerClass.getEnclosingMethod()]</InnerVar>
                <InnerVar>int [mods=adjustedClassModifiersForInnerClassTable(cn)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cv;visitInnerClass;[innerClassInternalName, outerClassName, innerClassName, mods]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>adjustedClassModifiersForInnerClassTable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [modifiers=classNode.getModifiers()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fixInnerClassModifiers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>modifiers</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>adjustedClassModifiersForClassWriting</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [modifiers=classNode.getModifiers()]</InnerVar>
                <InnerVar>boolean [needsSuper=!classNode.isInterface()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitGenericType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>genericsType</ParamName>
                    <FieldType>GenericsType</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [type=genericsType.getType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>genericParameterNames;put;[type.getName(), genericsType]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildExceptions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exceptions</ParamName>
                    <FieldType>ClassNode[]</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [ret=new String[exceptions.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitConstructorOrMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>MethodNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>isConstructor</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Parameter[] [parameters=node.getParameters()]</InnerVar>
                <InnerVar>String [methodType=BytecodeHelper.getMethodDescriptor(node.getReturnType(),parameters)]</InnerVar>
                <InnerVar>String [signature=BytecodeHelper.getGenericsMethodSignature(node)]</InnerVar>
                <InnerVar>int [modifiers=node.getModifiers()]</InnerVar>
                <InnerVar>MethodVisitor [mv=cv.visitMethod(modifiers,node.getName(),methodType,signature,buildExceptions(node.getExceptions()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller;resetLineNumber;[]</InnerMethodInvoke>
                <InnerMethodInvoke>controller;setMethodVisitor;[mv]</InnerMethodInvoke>
                <InnerMethodInvoke>null;visitAnnotations;[node, mv]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitStdMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>MethodNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>isConstructor</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <FieldType>Parameter[]</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>code</ParamName>
                    <FieldType>Statement</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>ClassNode [superClass=controller.getClassNode().getSuperClass()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getCompileStack();init;[node.getVariableScope(), parameters]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCallSiteWriter();makeSiteEntry;[]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitAnnotationDefaultExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>av</ParamName>
                    <FieldType>AnnotationVisitor</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>exp</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>av;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitAnnotationDefault</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>MethodNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <FieldType>MethodVisitor</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [exp=((ReturnStatement)node.getCode()).getExpression()]</InnerVar>
                <InnerVar>AnnotationVisitor [av=mv.visitAnnotationDefault()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;visitAnnotationDefaultExpression;[av, node.getReturnType(), exp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isVargs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <FieldType>Parameter[]</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [clazz=p[p.length - 1].getType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitConstructor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>ConstructorNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller;setConstructorNode;[node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>MethodNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller;setMethodNode;[node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitField</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fieldNode</ParamName>
                    <FieldType>FieldNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [t=fieldNode.getType()]</InnerVar>
                <InnerVar>String [signature=BytecodeHelper.getGenericsBounds(t)]</InnerVar>
                <InnerVar>Expression [initialValueExpression=fieldNode.getInitialValueExpression()]</InnerVar>
                <InnerVar>ConstantExpression [cexp=initialValueExpression instanceof ConstantExpression ? (ConstantExpression)initialValueExpression : null]</InnerVar>
                <InnerVar>Object [value=cexp != null &amp;&amp; ClassHelper.isStaticConstantInitializerType(cexp.getType()) &amp;&amp; cexp.getType().equals(t) &amp;&amp; fieldNode.isStatic() &amp;&amp; fieldNode.isFinal() ? cexp.getValue() : null]</InnerVar>
                <InnerVar>FieldVisitor [fv=cv.visitField(fieldNode.getModifiers(),fieldNode.getName(),BytecodeHelper.getTypeDescription(t),signature,value)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;onLineNumber;[fieldNode, "visitField: " + fieldNode.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;visitAnnotations;[fieldNode, fv]</InnerMethodInvoke>
                <InnerMethodInvoke>fv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitProperty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <FieldType>PropertyNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;onLineNumber;[statement, "visitProperty:" + statement.getField().getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller;setMethodNode;[null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <FieldType>Statement</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitCatchStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <FieldType>CatchStatement</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>statement.getCode();visit;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitBlockStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>block</ParamName>
                    <FieldType>BlockStatement</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getStatementWriter();writeBlockStatement;[block]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitForLoop</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>loop</ParamName>
                    <FieldType>ForStatement</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getStatementWriter();writeForStatement;[loop]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitWhileLoop</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>loop</ParamName>
                    <FieldType>WhileStatement</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getStatementWriter();writeWhileLoop;[loop]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitDoWhileLoop</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>loop</ParamName>
                    <FieldType>DoWhileStatement</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getStatementWriter();writeDoWhileLoop;[loop]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitIfElse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ifElse</ParamName>
                    <FieldType>IfStatement</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getStatementWriter();writeIfElse;[ifElse]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitAssertStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <FieldType>AssertStatement</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getStatementWriter();writeAssert;[statement]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitTryCatchFinally</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <FieldType>TryCatchStatement</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getStatementWriter();writeTryCatchFinally;[statement]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitSwitch</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <FieldType>SwitchStatement</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getStatementWriter();writeSwitch;[statement]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitCaseStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <FieldType>CaseStatement</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitBreakStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <FieldType>BreakStatement</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getStatementWriter();writeBreak;[statement]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitContinueStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <FieldType>ContinueStatement</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getStatementWriter();writeContinue;[statement]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitSynchronizedStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <FieldType>SynchronizedStatement</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getStatementWriter();writeSynchronized;[statement]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitThrowStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <FieldType>ThrowStatement</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getStatementWriter();writeThrow;[statement]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitReturnStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <FieldType>ReturnStatement</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getStatementWriter();writeReturn;[statement]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitExpressionStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <FieldType>ExpressionStatement</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getStatementWriter();writeExpressionStatement;[statement]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitTernaryExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>TernaryExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;onLineNumber;[expression, "visitTernaryExpression"]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getBinaryExpressionHelper();evaluateTernary;[expression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitDeclarationExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>DeclarationExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;onLineNumber;[expression, "visitDeclarationExpression: \"" + expression.getText() + "\""]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getBinaryExpressionHelper();evaluateEqual;[expression, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitBinaryExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>BinaryExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;onLineNumber;[expression, "visitBinaryExpression: \"" + expression.getOperation().getText() + "\" "]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getBinaryExpressionHelper();eval;[expression]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getAssertionWriter();record;[expression.getOperation()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitPostfixExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>PostfixExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getBinaryExpressionHelper();evaluatePostfixMethod;[expression]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getAssertionWriter();record;[expression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>throwException</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitPrefixExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>PrefixExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getBinaryExpressionHelper();evaluatePrefixMethod;[expression]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getAssertionWriter();record;[expression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitClosureExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>ClosureExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getClosureWriter();writeClosure;[expression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadThisOrOwner</MethodName>
            <MethodComment>/** 
 * Loads either this object or if we're inside a closure then load the top level owner
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitConstantExpression</MethodName>
            <MethodComment>/** 
 * Generate byte code for constants
 * @see &lt;a href="http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#14152"&gt;Class field types&lt;/a&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>ConstantExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [constantName=expression.getConstantName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitSpreadExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>SpreadExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitSpreadMapExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>SpreadMapExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [subExpression=expression.getExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getAssertionWriter();disableTracker;[]</InnerMethodInvoke>
                <InnerMethodInvoke>subExpression;visit;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();box;[]</InnerMethodInvoke>
                <InnerMethodInvoke>spreadMap;call;[controller.getMethodVisitor()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getAssertionWriter();reenableTracker;[]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();replace;[ClassHelper.OBJECT_TYPE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitMethodPointerExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>MethodPointerExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [subExpression=expression.getExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>subExpression;visit;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();box;[]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();pushDynamicName;[expression.getMethodName()]</InnerMethodInvoke>
                <InnerMethodInvoke>getMethodPointer;call;[controller.getMethodVisitor()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();replace;[ClassHelper.CLOSURE_TYPE, 2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitUnaryMinusExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>UnaryMinusExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getUnaryExpressionHelper();writeUnaryMinus;[expression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitUnaryPlusExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>UnaryPlusExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getUnaryExpressionHelper();writeUnaryPlus;[expression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitBitwiseNegationExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>BitwiseNegationExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getUnaryExpressionHelper();writeBitwiseNegate;[expression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitCastExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>castExpression</ParamName>
                    <FieldType>CastExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [type=castExpression.getType()]</InnerVar>
                <InnerVar>Expression [subExpression=castExpression.getExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>subExpression;visit;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitNotExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>NotExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getUnaryExpressionHelper();writeNotExpression;[expression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitBooleanExpression</MethodName>
            <MethodComment>/** 
 * return a primitive boolean value of the BooleanExpression.
 * @param expression
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>BooleanExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [mark=controller.getOperandStack().getStackLength()]</InnerVar>
                <InnerVar>Expression [inner=expression.getExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getCompileStack();pushBooleanExpression;[]</InnerMethodInvoke>
                <InnerMethodInvoke>inner;visit;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();castToBool;[mark, true]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();pop;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitMethodCallExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>MethodCallExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;onLineNumber;[call, "visitMethodCallExpression: \"" + call.getMethod() + "\":"]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getInvocationWriter();writeInvokeMethod;[call]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getAssertionWriter();record;[call.getMethod()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>emptyArguments</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>containsSpreadExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List [args=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>argumentSize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitStaticMethodCallExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>StaticMethodCallExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;onLineNumber;[call, "visitStaticMethodCallExpression: \"" + call.getMethod() + "\":"]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getInvocationWriter();writeInvokeStaticMethod;[call]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getAssertionWriter();record;[call]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNullConstant</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitConstructorCallExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>ConstructorCallExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;onLineNumber;[call, "visitConstructorCallExpression: \"" + call.getType().getName() + "\":"]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getInvocationWriter();writeInvokeConstructor;[call]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getAssertionWriter();record;[call]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeFieldClassName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [internalName=BytecodeHelper.getClassInternalName(type)]</InnerVar>
                <InnerVar>StringBuilder [ret=new StringBuilder(internalName.length())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStaticFieldName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [componentType=type]</InnerVar>
                <InnerVar>String [prefix=""]</InnerVar>
                <InnerVar>String [name=prefix + "$class$" + makeFieldClassName(componentType)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitAttributeOrProperty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>PropertyExpression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>adapter</ParamName>
                    <FieldType>MethodCallerMultiAdapter</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>Expression [objectExpression=expression.getObjectExpression()]</InnerVar>
                <InnerVar>ClassNode [classNode=controller.getClassNode()]</InnerVar>
                <InnerVar>String [propName=expression.getPropertyAsString()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isThisOrSuperInStaticContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>objectExpression</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitPropertyExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>PropertyExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [objectExpression=expression.getObjectExpression()]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>int [mark=operandStack.getStackLength() - 1]</InnerVar>
                <InnerVar>MethodCallerMultiAdapter [adapter]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;visitAttributeOrProperty;[expression, adapter]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitAttributeExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>AttributeExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [objectExpression=expression.getObjectExpression()]</InnerVar>
                <InnerVar>MethodCallerMultiAdapter [adapter]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>int [mark=operandStack.getStackLength() - 1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;visitAttributeOrProperty;[expression, adapter]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>usesSuper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pe</ParamName>
                    <FieldType>PropertyExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [expression=pe.getObjectExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isGroovyObject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>objectExpression</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitFieldExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>FieldExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FieldNode [field=expression.getField()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadStaticField</MethodName>
            <MethodComment>/** 
 * @param fldExp
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fldExp</ParamName>
                    <FieldType>FieldExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>FieldNode [field=fldExp.getField()]</InnerVar>
                <InnerVar>boolean [holder=field.isHolder() &amp;&amp; !controller.isInClosureConstructor()]</InnerVar>
                <InnerVar>ClassNode [type=field.getType()]</InnerVar>
                <InnerVar>String [ownerName=(field.getOwner().equals(controller.getClassNode())) ? controller.getInternalClassName() : BytecodeHelper.getClassInternalName(field.getOwner())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadInstanceField</MethodName>
            <MethodComment>/** 
 * RHS instance field. should move most of the code in the BytecodeHelper
 * @param fldExp
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fldExp</ParamName>
                    <FieldType>FieldExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>FieldNode [field=fldExp.getField()]</InnerVar>
                <InnerVar>boolean [holder=field.isHolder() &amp;&amp; !controller.isInClosureConstructor()]</InnerVar>
                <InnerVar>ClassNode [type=field.getType()]</InnerVar>
                <InnerVar>String [ownerName=(field.getOwner().equals(controller.getClassNode())) ? controller.getInternalClassName() : BytecodeHelper.getClassInternalName(field.getOwner())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, ownerName, fldExp.getFieldName(), BytecodeHelper.getTypeDescription(type)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>storeThisInstanceField</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>FieldExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>FieldNode [field=expression.getField()]</InnerVar>
                <InnerVar>boolean [setReferenceFromReference=field.isHolder() &amp;&amp; expression.isUseReferenceDirectly()]</InnerVar>
                <InnerVar>String [ownerName=(field.getOwner().equals(controller.getClassNode())) ? controller.getInternalClassName() : BytecodeHelper.getClassInternalName(field.getOwner())]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>storeStaticField</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>FieldExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>FieldNode [field=expression.getField()]</InnerVar>
                <InnerVar>boolean [holder=field.isHolder() &amp;&amp; !controller.isInClosureConstructor()]</InnerVar>
                <InnerVar>String [ownerName=(field.getOwner().equals(controller.getClassNode())) ? controller.getInternalClassName() : BytecodeHelper.getClassInternalName(field.getOwner())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getOperandStack();doGroovyCast;[field]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();remove;[1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitVariableExpression</MethodName>
            <MethodComment>/** 
 * Visits a bare (unqualified) variable expression.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>VariableExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [variableName=expression.getName()]</InnerVar>
                <InnerVar>ClassNode [classNode=controller.getClassNode()]</InnerVar>
                <InnerVar>BytecodeVariable [variable=controller.getCompileStack().getVariable(variableName,false)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadThis</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>thisExpression</ParamName>
                    <FieldType>VariableExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processClassVariable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createInterfaceSyntheticStaticFields</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ClassNode [icl=controller.getInterfaceClassLoadingClass()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addInnerClass;[icl]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createSyntheticStaticFields</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv]</InnerVar>
                <InnerVar>Label [l0=new Label()]</InnerVar>
                <InnerVar>Label [l1=new Label()]</InnerVar>
                <InnerVar>Label [l2=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitLabel;[l0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESTATIC, "java/lang/Class", "forName", "(Ljava/lang/String;)Ljava/lang/Class;", false]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[l1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[l2]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[NEW, "java/lang/NoClassDefFoundError"]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[DUP]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, "java/lang/ClassNotFoundException", "getMessage", "()Ljava/lang/String;", false]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESPECIAL, "java/lang/NoClassDefFoundError", "&lt;init&gt;", "(Ljava/lang/String;)V", false]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ATHROW]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTryCatchBlock;[l0, l2, l2, "java/lang/ClassNotFoundException"]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[3, 2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitClassExpression</MethodName>
            <MethodComment>/** 
 * load class object on stack
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>ClassExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [type=expression.getType()]</InnerVar>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>String [staticFieldName=getStaticFieldName(type)]</InnerVar>
                <InnerVar>String [internalClassName=controller.getInternalClassName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>referencedClasses;put;[staticFieldName, type]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();push;[ClassHelper.CLASS_Type]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitRangeExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>RangeExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>expression.getFrom();visit;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;box;[]</InnerMethodInvoke>
                <InnerMethodInvoke>expression.getTo();visit;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;box;[]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;pushBool;[expression.isInclusive()]</InnerMethodInvoke>
                <InnerMethodInvoke>createRangeMethod;call;[controller.getMethodVisitor()]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;replace;[ClassHelper.RANGE_TYPE, 3]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitMapEntryExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>MapEntryExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitMapExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>MapExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>List [entries=expression.getMapEntryExpressions()]</InnerVar>
                <InnerVar>int [size=entries.size()]</InnerVar>
                <InnerVar>int [i=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>BytecodeHelper;pushConstant;[mv, size * 2]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[ANEWARRAY, "java/lang/Object"]</InnerMethodInvoke>
                <InnerMethodInvoke>createMapMethod;call;[mv]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();push;[ClassHelper.MAP_TYPE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitArgumentlistExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ale</ParamName>
                    <FieldType>ArgumentListExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>despreadList</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expressions</ParamName>
                    <FieldType>List</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>wrap</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ArrayList [spreadIndexes=new ArrayList()]</InnerVar>
                <InnerVar>ArrayList [spreadExpressions=new ArrayList()]</InnerVar>
                <InnerVar>ArrayList [normalArguments=new ArrayList()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;visitTupleExpression;[new ArgumentListExpression(normalArguments), wrap]</InnerMethodInvoke>
                <InnerMethodInvoke>(new TupleExpression(spreadExpressions));visit;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>(new ArrayExpression(ClassHelper.int_TYPE,spreadIndexes,null));visit;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();remove;[1]</InnerMethodInvoke>
                <InnerMethodInvoke>despreadList;call;[controller.getMethodVisitor()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitTupleExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>TupleExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;visitTupleExpression;[expression, false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitTupleExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>TupleExpression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>useWrapper</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>int [size=expression.getExpressions().size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>BytecodeHelper;pushConstant;[mv, size]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[ANEWARRAY, "java/lang/Object"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadWrapper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>argument</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>ClassNode [goalClass=argument.getType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;visitClassExpression;[new ClassExpression(goalClass)]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();remove;[1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitArrayExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>ArrayExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>ClassNode [elementType=expression.getElementType()]</InnerVar>
                <InnerVar>String [arrayTypeName=BytecodeHelper.getClassInternalName(elementType)]</InnerVar>
                <InnerVar>List [sizeExpression=expression.getSizeExpression()]</InnerVar>
                <InnerVar>int [size=0]</InnerVar>
                <InnerVar>int [dimensions=0]</InnerVar>
                <InnerVar>int [storeIns=AASTORE]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getOperandStack();push;[expression.getType()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitClosureListExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>ClosureListExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>List&lt;Expression&gt; [expressions=expression.getExpressions()]</InnerVar>
                <InnerVar>int [size=expressions.size()]</InnerVar>
                <InnerVar>LinkedList&lt;DeclarationExpression&gt; [declarations=new LinkedList&lt;DeclarationExpression&gt;()]</InnerVar>
                <InnerVar>LinkedList [instructions=new LinkedList()]</InnerVar>
                <InnerVar>BytecodeSequence [seq=new BytecodeSequence(instructions)]</InnerVar>
                <InnerVar>BlockStatement [bs=new BlockStatement()]</InnerVar>
                <InnerVar>Parameter [closureIndex=new Parameter(ClassHelper.int_TYPE,"__closureIndex")]</InnerVar>
                <InnerVar>ClosureExpression [ce=new ClosureExpression(new Parameter[]{closureIndex},bs)]</InnerVar>
                <InnerVar>Label [dflt=new Label()]</InnerVar>
                <InnerVar>Label [tableEnd=new Label()]</InnerVar>
                <InnerVar>Label[] [labels=new Label[size]]</InnerVar>
                <InnerVar>int [listArrayVar=controller.getCompileStack().defineTemporaryVariable("_listOfClosures",true)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getCompileStack();pushVariableScope;[expression.getVariableScope()]</InnerMethodInvoke>
                <InnerMethodInvoke>bs;addStatement;[seq]</InnerMethodInvoke>
                <InnerMethodInvoke>ce;setVariableScope;[expression.getVariableScope()]</InnerMethodInvoke>
                <InnerMethodInvoke>instructions;add;[ConstantExpression.NULL]</InnerMethodInvoke>
                <InnerMethodInvoke>instructions;add;[new BytecodeInstruction(){
  public void visit(  MethodVisitor mv){
    mv.visitVarInsn(ILOAD,1);
    mv.visitTableSwitchInsn(0,size - 1,dflt,labels);
  }
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>instructions;add;[new BytecodeInstruction(){
  public void visit(  MethodVisitor mv){
    mv.visitLabel(tableEnd);
    mv.visitInsn(ARETURN);
  }
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>null;visitClosureExpression;[ce]</InnerMethodInvoke>
                <InnerMethodInvoke>BytecodeHelper;pushConstant;[mv, size]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[ANEWARRAY, "java/lang/Object"]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[POP]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, listArrayVar]</InnerMethodInvoke>
                <InnerMethodInvoke>createListMethod;call;[mv]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();removeVar;[listArrayVar]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();pop;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <FieldType>MethodVisitor</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ILOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTableSwitchInsn;[0, size - 1, dflt, labels]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <FieldType>MethodVisitor</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitLabel;[label]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <FieldType>MethodVisitor</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, tableEnd]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <FieldType>MethodVisitor</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitLabel;[dflt]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <FieldType>MethodVisitor</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitLabel;[tableEnd]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitBytecodeSequence</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bytecodeSequence</ParamName>
                    <FieldType>BytecodeSequence</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>List [instructions=bytecodeSequence.getInstructions()]</InnerVar>
                <InnerVar>int [mark=controller.getOperandStack().getStackLength()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getOperandStack();remove;[mark - controller.getOperandStack().getStackLength()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitListExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>ListExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [size=expression.getExpressions().size()]</InnerVar>
                <InnerVar>boolean [containsSpreadExpression=containsSpreadExpression(expression)]</InnerVar>
                <InnerVar>boolean [containsOnlyConstants=!containsSpreadExpression &amp;&amp; containsOnlyConstants(expression)]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;onLineNumber;[expression, "ListExpression"]</InnerMethodInvoke>
                <InnerMethodInvoke>createListMethod;call;[controller.getMethodVisitor()]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;push;[ClassHelper.LIST_TYPE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>containsOnlyConstants</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>list</ParamName>
                    <FieldType>ListExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitGStringExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>GStringExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>int [size=expression.getValues().size()]</InnerVar>
                <InnerVar>List [strings=expression.getStrings()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitTypeInsn;[NEW, "org/codehaus/groovy/runtime/GStringImpl"]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[DUP]</InnerMethodInvoke>
                <InnerMethodInvoke>BytecodeHelper;pushConstant;[mv, size]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[ANEWARRAY, "java/lang/Object"]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();remove;[size]</InnerMethodInvoke>
                <InnerMethodInvoke>BytecodeHelper;pushConstant;[mv, size]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[ANEWARRAY, "java/lang/String"]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();remove;[size]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESPECIAL, "org/codehaus/groovy/runtime/GStringImpl", "&lt;init&gt;", "([Ljava/lang/Object;[Ljava/lang/String;)V", false]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();push;[ClassHelper.GSTRING_TYPE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitAnnotations</MethodName>
            <MethodComment>/** 
 * Note: ignore it. Annotation generation needs the current visitor.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>AnnotatedNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitAnnotations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>targetNode</ParamName>
                    <FieldType>AnnotatedNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>visitor</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitParameterAnnotations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parameter</ParamName>
                    <FieldType>Parameter</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>paramNumber</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <FieldType>MethodVisitor</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAnnotationVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AnnotationVisitor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>targetNode</ParamName>
                    <FieldType>AnnotatedNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>an</ParamName>
                    <FieldType>AnnotationNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>visitor</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [annotationDescriptor=BytecodeHelper.getTypeDescription(an.getClassNode())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;throwException;["Cannot create an AnnotationVisitor. Please report Groovy bug"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitAnnotationAttributes</MethodName>
            <MethodComment>/** 
 * Generate the annotation attributes.
 * @param an the node with an annotation
 * @param av the visitor to use
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>an</ParamName>
                    <FieldType>AnnotationNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>av</ParamName>
                    <FieldType>AnnotationVisitor</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,Object&gt; [constantAttrs=new HashMap&lt;String,Object&gt;()]</InnerVar>
                <InnerVar>Map&lt;String,PropertyExpression&gt; [enumAttrs=new HashMap&lt;String,PropertyExpression&gt;()]</InnerVar>
                <InnerVar>Map&lt;String,Object&gt; [atAttrs=new HashMap&lt;String,Object&gt;()]</InnerVar>
                <InnerVar>Map&lt;String,ListExpression&gt; [arrayAttrs=new HashMap&lt;String,ListExpression&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;visitArrayAttributes;[an, arrayAttrs, av]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitArrayAttributes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>an</ParamName>
                    <FieldType>AnnotationNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>arrayAttr</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>av</ParamName>
                    <FieldType>AnnotationVisitor</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>determineCommonArrayType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>values</ParamName>
                    <FieldType>List</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [expr=(Expression)values.get(0)]</InnerVar>
                <InnerVar>int [arrayElementType=-1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitAnnotationArrayElement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>arrayElementType</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>av</ParamName>
                    <FieldType>AnnotationVisitor</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitBytecodeExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cle</ParamName>
                    <FieldType>BytecodeExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cle;visit;[controller.getMethodVisitor()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();push;[cle.getType()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isThisExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSuperExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isThisOrSuper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <FieldType>Expression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onLineNumber</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <FieldType>ASTNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>int [line=statement.getLineNumber()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller;setLineNumber;[line]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isInnerClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCompileUnit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CompileUnit</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CompileUnit [answer=controller.getClassNode().getCompileUnit()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addInnerClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>innerClass</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ModuleNode [mn=controller.getClassNode().getModule()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>innerClass;setModule;[mn]</InnerMethodInvoke>
                <InnerMethodInvoke>mn.getUnit();addGeneratedInnerClass;[(InnerClassNode)innerClass]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>