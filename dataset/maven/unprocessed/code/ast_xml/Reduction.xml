<Class>
    <Id>485</Id>
    <Package>org.codehaus.groovy.syntax</Package>
    <ClassName>Reduction</ClassName>
    <SuperClass>CSTNode</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Reduction  /** 
 * A syntax reduction, produced by the &lt;code&gt;Parser&lt;/code&gt;.
 * @see antlr.Parser
 * @see Token
 * @see CSTNode
 * @see Types
 * @author &lt;a href="mailto:bob@werken.com"&gt;bob mcwhirter&lt;/a&gt;
 * @author &lt;a href="mailto:cpoirier@dreaming.org"&gt;Chris Poirier&lt;/a&gt;
 * @version $Id$
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>EMPTY</FieldName>
            <FieldType>Reduction</FieldType>
        </Field>
        <Field>
            <FieldName>elements</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>marked</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>Reduction</MethodName>
            <MethodComment>/** 
 * Initializes the &lt;code&gt;Reduction&lt;/code&gt; with the specified root.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>root</ParamName>
                    <FieldType>Token</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;set;[0, root]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Reduction</MethodName>
            <MethodComment>/** 
 * Initializes the &lt;code&gt;Reduction&lt;/code&gt; to empty.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newContainer</MethodName>
            <MethodComment>/** 
 * Creates a new &lt;code&gt;Reduction&lt;/code&gt; with &lt;code&gt;Token.NULL&lt;/code&gt; as it's root.
 */
</MethodComment>
            <ReturnType>Reduction</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isEmpty</MethodName>
            <MethodComment>/** 
 * Returns true if the node is completely empty (no root, even).
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Returns the number of elements in the node.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment>/** 
 * Returns the specified element, or null.
 */
</MethodComment>
            <ReturnType>CSTNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CSTNode [element=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRoot</MethodName>
            <MethodComment>/** 
 * Returns the root of the node, the Token that indicates it's type.  Returns null if there is no root (usually only if the node is a placeholder of some kind -- see isEmpty()).
 */
</MethodComment>
            <ReturnType>Token</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>markAsExpression</MethodName>
            <MethodComment>/** 
 * Marks the node a complete expression.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAnExpression</MethodName>
            <MethodComment>/** 
 * Returns true if the node is a complete expression.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>add</MethodName>
            <MethodComment>/** 
 * Adds an element to the node.
 */
</MethodComment>
            <ReturnType>CSTNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>element</ParamName>
                    <FieldType>CSTNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>set</MethodName>
            <MethodComment>/** 
 * Sets an element in at the specified index.
 */
</MethodComment>
            <ReturnType>CSTNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>element</ParamName>
                    <FieldType>CSTNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [count=elements.size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>elements;set;[index, element]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment>/** 
 * Removes a node from the &lt;code&gt;Reduction&lt;/code&gt;.  You cannot remove  the root node (index 0).
 */
</MethodComment>
            <ReturnType>CSTNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asReduction</MethodName>
            <MethodComment>/** 
 * Creates a &lt;code&gt;Reduction&lt;/code&gt; from this node.  Returns self if the node is already a &lt;code&gt;Reduction&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType>Reduction</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>