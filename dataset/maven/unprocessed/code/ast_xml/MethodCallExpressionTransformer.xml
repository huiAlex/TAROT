<Class>
    <Id>245</Id>
    <Package>org.codehaus.groovy.transform.sc.transformers</Package>
    <ClassName>MethodCallExpressionTransformer</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>DGM_CLASSNODE</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>staticCompilationTransformer</FieldName>
            <FieldType>StaticCompilationTransformer</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>MethodCallExpressionTransformer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>staticCompilationTransformer</ParamName>
                    <FieldType>StaticCompilationTransformer</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformMethodCallExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <FieldType>MethodCallExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [trn=tryTransformIsToCompareIdentity(expr)]</InnerVar>
                <InnerVar>ClassNode [superCallReceiver=expr.getNodeMetaData(StaticTypesMarker.SUPER_MOP_METHOD_REQUIRED)]</InnerVar>
                <InnerVar>Expression [objectExpression=expr.getObjectExpression()]</InnerVar>
                <InnerVar>ClassNode [type=staticCompilationTransformer.getTypeChooser().resolveType(objectExpression,staticCompilationTransformer.getClassNode())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformToMopSuperCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodCallExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>superCallReceiver</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <FieldType>MethodCallExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodNode [mn=expr.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET)]</InnerVar>
                <InnerVar>String [mopName=MopWriter.getMopMethodName(mn,false)]</InnerVar>
                <InnerVar>MethodNode [direct=new MethodNode(mopName,ACC_PUBLIC | ACC_SYNTHETIC,mn.getReturnType(),mn.getParameters(),mn.getExceptions(),EmptyStatement.INSTANCE)]</InnerVar>
                <InnerVar>MethodCallExpression [result=new MethodCallExpression(new VariableExpression("this"),mopName,expr.getArguments())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>direct;setDeclaringClass;[superCallReceiver]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setImplicitThis;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setSpreadSafe;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setSafe;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setSourcePosition;[expr]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setMethodTarget;[direct]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isCallOnClosure</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <FieldType>MethodCallExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tryTransformIsToCompareIdentity</MethodName>
            <MethodComment>/** 
 * Identifies a method call expression on  {@link DefaultGroovyMethods#is(Object,Object)} and if recognized, transforms it into a {@link CompareIdentityExpression}.
 * @param call a method call to be transformed
 * @return null if the method call is not DGM#is, or {@link CompareIdentityExpression}
 */
</MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>MethodCallExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodNode [methodTarget=call.getMethodTarget()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>