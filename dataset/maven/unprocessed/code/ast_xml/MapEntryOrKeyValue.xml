<Class>
    <Id>563</Id>
    <Package>groovy.transform.stc</Package>
    <ClassName>MapEntryOrKeyValue</ClassName>
    <SuperClass>ClosureSignatureHint</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MapEntryOrKeyValue  /** 
 * &lt;p&gt;A special hint which handles a common use case in the Groovy methods that work on maps. In case of an iteration on a list of map entries, you often want the user to be able to work either on a  {@link java.util.Map.Entry} map entryor on a key,value pair.&lt;/p&gt; &lt;p&gt;The result is a closure which can have the following forms:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;{ key, value -&gt; ...}&lt;/code&gt; where key is the key of a map entry, and value the corresponding value&lt;/li&gt; &lt;li&gt;&lt;code&gt;{ entry -&gt; ... }&lt;/code&gt; where entry is a  {@link java.util.Map.Entry} map entry&lt;/li&gt;&lt;li&gt;&lt;code&gt;{ ...}&lt;/code&gt; where &lt;i&gt;it&lt;/i&gt; is an implicit  {@link java.util.Map.Entry} map entry&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;This hint handles all those cases by picking the generics from the first argument of the method (by default).&lt;/p&gt; &lt;p&gt;The options array is used to modify the behavior of this hint. Each string in the option array consists of a key=value pair.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;i&gt;argNum=index&lt;/i&gt; of the parameter representing the map (by default, 0)&lt;/li&gt; &lt;li&gt;&lt;i&gt;index=true or false&lt;/i&gt;, by default false. If true, then an additional "int" parameter is added, for "withIndex" variants&lt;/li&gt; &lt;/ul&gt; &lt;code&gt;void doSomething(String str, Map&amp;lt;K,&amp;gt;V map, @ClosureParams(value=MapEntryOrKeyValue.class,options="argNum=1") Closure c) { ... }&lt;/code&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MAPENTRY_TYPE</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>parameterIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>generateIndex</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getClosureSignatures</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <FieldType>MethodNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>sourceUnit</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>compilationUnit</ParamName>
                    <FieldType>CompilationUnit</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>options</ParamName>
                    <FieldType>String[]</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>usage</ParamName>
                    <FieldType>ASTNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Options [opt]</InnerVar>
                <InnerVar>GenericsType[] [genericsTypes=node.getParameters()[opt.parameterIndex].getOriginType().getGenericsTypes()]</InnerVar>
                <InnerVar>ClassNode[] [firstSig]</InnerVar>
                <InnerVar>ClassNode[] [secondSig]</InnerVar>
                <InnerVar>ClassNode [mapEntry=MAPENTRY_TYPE.getPlainNodeReference()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mapEntry;setGenericsTypes;[genericsTypes]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Options</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parameterIndex</ParamName>
                    <FieldType>int</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>generateIndex</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Options</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mn</ParamName>
                    <FieldType>MethodNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>ASTNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>options</ParamName>
                    <FieldType>String[]</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [pIndex=0]</InnerVar>
                <InnerVar>boolean [generateIndex=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IncorrectTypeHintException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>