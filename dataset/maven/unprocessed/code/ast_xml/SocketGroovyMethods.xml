<Class>
    <Id>389</Id>
    <Package>org.codehaus.groovy.runtime</Package>
    <ClassName>SocketGroovyMethods</ClassName>
    <SuperClass>DefaultGroovyMethodsSupport</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SocketGroovyMethods  /** 
 * This class defines new groovy methods for Sockets which enhance JDK classes inside the Groovy environment. &lt;p&gt; NOTE: While this class contains many 'public' static methods, it is primarily regarded as an internal class (its internal package name suggests this also). We value backwards compatibility of these methods when used within Groovy but value less backwards compatibility at the Java method call level. I.e. future versions of Groovy may remove or move a method call in this file but would normally aim to keep the method available from within Groovy.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>LOG</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>withStreams</MethodName>
            <MethodComment>/** 
 * Passes the Socket's InputStream and OutputStream to the closure.  The streams will be closed after the closure returns, even if an exception is thrown.
 * @param socket  a Socket
 * @param closure a Closure
 * @return the value returned by the closure
 * @throws IOException if an IOException occurs.
 * @since 1.5.2
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>socket</ParamName>
                    <FieldType>Socket</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <FieldType>T</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InputStream [input=socket.getInputStream()]</InnerVar>
                <InnerVar>OutputStream [output=socket.getOutputStream()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>withObjectStreams</MethodName>
            <MethodComment>/** 
 * Creates an InputObjectStream and an OutputObjectStream from a Socket, and passes them to the closure.  The streams will be closed after the closure returns, even if an exception is thrown.
 * @param socket  this Socket
 * @param closure a Closure
 * @return the value returned by the closure
 * @throws IOException if an IOException occurs.
 * @since 1.5.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>socket</ParamName>
                    <FieldType>Socket</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <FieldType>T</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InputStream [input=socket.getInputStream()]</InnerVar>
                <InnerVar>OutputStream [output=socket.getOutputStream()]</InnerVar>
                <InnerVar>ObjectOutputStream [oos=new ObjectOutputStream(output)]</InnerVar>
                <InnerVar>ObjectInputStream [ois=new ObjectInputStream(input)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an append mechanism to add things to the output stream of a socket
 * @param self  a Socket
 * @param value a value to append
 * @return a Writer
 * @throws IOException if an IOException occurs.
 * @since 1.0
 */
</MethodComment>
            <ReturnType>Writer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Socket</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <FieldType>Object</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an append mechanism to add bytes to the output stream of a socket
 * @param self  a Socket
 * @param value a value to append
 * @return an OutputStream
 * @throws IOException if an IOException occurs.
 * @since 1.0
 */
</MethodComment>
            <ReturnType>OutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <FieldType>Socket</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <FieldType>byte[]</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>accept</MethodName>
            <MethodComment>/** 
 * Accepts a connection and passes the resulting Socket to the closure which runs in a new Thread.
 * @param serverSocket a ServerSocket
 * @param closure      a Closure
 * @return a Socket
 * @throws IOException if an IOException occurs.
 * @see java.net.ServerSocket#accept()
 * @since 1.0
 */
</MethodComment>
            <ReturnType>Socket</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>serverSocket</ParamName>
                    <FieldType>ServerSocket</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <FieldType>Closure</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>accept</MethodName>
            <MethodComment>/** 
 * Accepts a connection and passes the resulting Socket to the closure which runs in a new Thread or the calling thread, as needed.
 * @param serverSocket    a ServerSocket
 * @param runInANewThread This flag should be true, if the closure should be invoked in a new thread, else false.
 * @param closure         a Closure
 * @return a Socket
 * @throws IOException if an IOException occurs.
 * @see java.net.ServerSocket#accept()
 * @since 1.7.6
 */
</MethodComment>
            <ReturnType>Socket</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>serverSocket</ParamName>
                    <FieldType>ServerSocket</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>runInANewThread</ParamName>
                    <FieldType>boolean</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <FieldType>Closure</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Socket [socket=serverSocket.accept()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;invokeClosureWithSocket;[socket, closure]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invokeClosureWithSocket</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>socket</ParamName>
                    <FieldType>Socket</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <FieldType>Closure</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>