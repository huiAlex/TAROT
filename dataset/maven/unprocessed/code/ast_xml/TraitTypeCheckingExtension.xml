<Class>
    <Id>49</Id>
    <Package>org.codehaus.groovy.transform.stc</Package>
    <ClassName>TraitTypeCheckingExtension</ClassName>
    <SuperClass>AbstractTypeCheckingExtension</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TraitTypeCheckingExtension  /** 
 * A type checking extension that will take care of handling errors which are specific to traits. In particular, it will hanldle the "super" method calls within a trait.
 * @author CÃ©dric Champeau
 * @since 2.3.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>NOTFOUND</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>NOTFOUND</FieldName>
            <FieldType>MethodNode</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>TraitTypeCheckingExtension</MethodName>
            <MethodComment>/** 
 * Builds a type checking extension relying on a Groovy script (type checking DSL).
 * @param typeCheckingVisitor the type checking visitor
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeCheckingVisitor</ParamName>
                    <FieldType>StaticTypeCheckingVisitor</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setup</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleMissingMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>argumentList</ParamName>
                    <FieldType>ArgumentListExpression</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>argumentTypes</ParamName>
                    <FieldType>ClassNode[]</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>MethodCall</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [decomposed=Traits.decomposeSuperCallName(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isStaticTraitReceiver</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>var</ParamName>
                    <FieldType>VariableExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isThisTraitReceiver</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>var</ParamName>
                    <FieldType>VariableExpression</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convertToDynamicCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <FieldType>MethodCall</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>decomposed</ParamName>
                    <FieldType>String[]</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>argumentTypes</ParamName>
                    <FieldType>ClassNode[]</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [traitName=decomposed[0]]</InnerVar>
                <InnerVar>String [name=decomposed[1]]</InnerVar>
                <InnerVar>LinkedHashSet&lt;ClassNode&gt; [traitsAsList=Traits.collectAllInterfacesReverseOrder(receiver,new LinkedHashSet&lt;ClassNode&gt;())]</InnerVar>
                <InnerVar>ClassNode[] [implementedTraits=traitsAsList.toArray(new ClassNode[traitsAsList.size()])]</InnerVar>
                <InnerVar>ClassNode [nextTrait=null]</InnerVar>
                <InnerVar>ClassNode[] [newArgs=new ClassNode[argumentTypes.length]]</InnerVar>
                <InnerVar>ClassNode [inferredReturnType=inferTraitMethodReturnType(nextTrait,name,newArgs)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;arraycopy;[argumentTypes, 0, newArgs, 0, newArgs.length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inferTraitMethodReturnType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nextTrait</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>paramTypes</ParamName>
                    <FieldType>ClassNode[]</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [result=ClassHelper.OBJECT_TYPE]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>