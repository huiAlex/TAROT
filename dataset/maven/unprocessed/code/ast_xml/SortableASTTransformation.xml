<Class>
    <Id>685</Id>
    <Package>org.codehaus.groovy.transform</Package>
    <ClassName>SortableASTTransformation</ClassName>
    <SuperClass>AbstractASTTransformation</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SortableASTTransformation  /** 
 * Injects a set of Comparators and sort methods.
 * @author Andres Almiray
 * @author Paul King
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MY_TYPE</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>MY_TYPE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>COMPARABLE_TYPE</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>COMPARATOR_TYPE</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>VALUE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>OTHER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>THIS_HASH</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>OTHER_HASH</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ARG0</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ARG1</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nodes</ParamName>
                    <FieldType>ASTNode[]</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <FieldType>SourceUnit</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AnnotationNode [annotation=(AnnotationNode)nodes[0]]</InnerVar>
                <InnerVar>AnnotatedNode [parent=(AnnotatedNode)nodes[1]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;init;[nodes, source]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createSortable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotation</ParamName>
                    <FieldType>AnnotationNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;String&gt; [includes=getMemberList(annotation,"includes")]</InnerVar>
                <InnerVar>List&lt;String&gt; [excludes=getMemberList(annotation,"excludes")]</InnerVar>
                <InnerVar>List&lt;PropertyNode&gt; [properties=findProperties(annotation,classNode,includes,excludes)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;implementComparable;[classNode]</InnerMethodInvoke>
                <InnerMethodInvoke>classNode;addMethod;[new MethodNode("compareTo",ACC_PUBLIC,ClassHelper.int_TYPE,params(param(newClass(classNode),OTHER)),ClassNode.EMPTY_ARRAY,createCompareToMethodBody(properties))]</InnerMethodInvoke>
                <InnerMethodInvoke>new VariableScopeVisitor(sourceUnit,true);visitClass;[classNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>implementComparable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createCompareToMethodBody</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <FieldType>PropertyNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Statement&gt; [statements=new ArrayList&lt;Statement&gt;()]</InnerVar>
                <InnerVar>BlockStatement [body=new BlockStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>statements;add;[ifS(callThisX("is",args(OTHER)),returnS(constX(0)))]</InnerMethodInvoke>
                <InnerMethodInvoke>body;addStatements;[statements]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createCompareMethodBody</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>property</ParamName>
                    <FieldType>PropertyNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [propName=property.getName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createComparatorFor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>property</ParamName>
                    <FieldType>PropertyNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [propName=property.getName()]</InnerVar>
                <InnerVar>String [className=classNode.getName() + "$" + StringGroovyMethods.capitalize(propName)+ "Comparator"]</InnerVar>
                <InnerVar>ClassNode [superClass=makeClassSafeWithGenerics(AbstractComparator.class,classNode)]</InnerVar>
                <InnerVar>InnerClassNode [cmpClass=new InnerClassNode(classNode,className,ACC_PRIVATE | ACC_STATIC,superClass)]</InnerVar>
                <InnerVar>String [fieldName="this$" + StringGroovyMethods.capitalize(propName) + "Comparator"]</InnerVar>
                <InnerVar>FieldNode [cmpField=classNode.addField(fieldName,ACC_STATIC | ACC_FINAL | ACC_PRIVATE| ACC_SYNTHETIC,COMPARATOR_TYPE,ctorX(cmpClass))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>classNode.getModule();addClass;[cmpClass]</InnerMethodInvoke>
                <InnerMethodInvoke>cmpClass;addMethod;[new MethodNode("compare",ACC_PUBLIC,ClassHelper.int_TYPE,params(param(newClass(classNode),ARG0),param(newClass(classNode),ARG1)),ClassNode.EMPTY_ARRAY,createCompareMethodBody(property))]</InnerMethodInvoke>
                <InnerMethodInvoke>classNode;addMethod;[new MethodNode("comparatorBy" + StringGroovyMethods.capitalize(propName),ACC_PUBLIC | ACC_STATIC,COMPARATOR_TYPE,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,returnS(fieldX(cmpField)))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findProperties</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PropertyNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotation</ParamName>
                    <FieldType>AnnotationNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <FieldType>ClassNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>includes</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>excludes</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;PropertyNode&gt; [properties=new ArrayList&lt;PropertyNode&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o1</ParamName>
                    <FieldType>PropertyNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>o2</ParamName>
                    <FieldType>PropertyNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkComparable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pNode</ParamName>
                    <FieldType>PropertyNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addError;["Error during " + MY_TYPE_NAME + " processing: property '"+ pNode.getName()+ "' must be Comparable", pNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkKnownProperty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotation</ParamName>
                    <FieldType>AnnotationNode</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <FieldType>String</FieldType>
                </Parameter>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <FieldType>PropertyNode</FieldType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addError;["Error during " + MY_TYPE_NAME + " processing: tried to include unknown property '"+ name+ "'", annotation]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>