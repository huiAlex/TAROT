/**
 * Base class for components which provide persistence
 * operations to a managed entity instance. This class 
 * may be reused by either configuration or extension, 
 * and may be bound directly to a view, or accessed by 
 * some intermediate Seam component.
 * 
 *  *
 */

/**
    * Add a {@link javax.faces.application.FacesMessage} and log a message when 
    * the entity instance is updated.
    * 
    * Utility method to add a {@link javax.faces.application.FacesMessage} from
    * the Seam managed resource bundle or, if not specified in the resource 
    * bundle, from {@link #getUpdatedMessage()} and log the entity when the 
    * managed entity is updated.
    * 
    *     *     */

/**
    * Add a {@link javax.faces.application.FacesMessage} and log a message when
    * the entity instance is deleted.
    * 
    * Utility method to add a {@link javax.faces.application.FacesMessage} from
    * the Seam managed resource bundle or, if not specified in the resource
    * bundle, from {@link #getDeletedMessage()} and log the entity when the 
    * managed entity is deleted.
    * 
    *     *     */

/**
    * Add a {@link javax.faces.application.FacesMessage} and log a message when
    * the entity instance is created.
    * 
    * Utility method to add a {@link javax.faces.application.FacesMessage} from
    * the Seam managed resource bundle or, if not specified in the resource 
    * bundle, from {@link #getUpdatedMessage()} and log the entity when the 
    * managed entity is updated.
    * 
    *     *     */

/**
    * Run on {@link Home} instantiation to check the Home component is in a 
    * valid state.
    * 
    * Validates that the class of the entity to be managed has been specified.
    */

/**
    * Get the managed entity, using the id from {@link #getId()} to load it from
    * the Persistence Context or creating a new instance if the id is not 
    * defined.
    * 
    *     */

/**
    * Clear the managed entity (and id), allowing the {@link EntityHome} to be
    * reused.
    */

/**
    * Load the instance if the id is defined otherwise create a new instance
    * 
    * Utility method called by {@link #getInstance()} to load the instance from 
    * the Persistence Context if the id is defined. Otherwise a new instance is 
    * created.
    * 
    *     *     */

/**
    * Hook method called to allow the implementation to join the current 
    * transaction when necessary.
    */

/**
    * Hook method called by {@link #initInstance()} to allow the implementation 
    * to load the entity from the Persistence Context.
    */

/**
    * Utility method called by the framework when no entity is found in the
    * Persistence Context.
    */

/**
    * Create a new instance of the entity.
    * 
    * Utility method called by {@link #initInstance()} to create a new instance 
    * of the entity.
    */

/**
    * Get the class of the entity being managed.
    * 
    * If not explicitly specified, the generic type of implementation is used.
    */

/**
    * Set the class of the entity being managed. 
    * 
    * Useful for configuring {@link Home} components from 
    * components.xml.
    */

/**
    * Get the id of the object being managed.
    */

/**
    * Set/change the entity being managed by id.
    * 
    *     */

/**
    * Set the id of entity being managed.
    * 
    * Does not alter the instance so used if the id of the managed object is 
    * changed.
    * 
    *     */

/**
    * Returns true if the id of the object managed is known.
    */

/**
    * Set/change the entity being managed.
    */

/**
    * {@link javax.el.ValueExpression} to execute to load a new instance.
    * 
    * Mainly used when configuring the {@link Home} components in 
    * components.xml.
    */

/**
    * {@link javax.el.ValueExpression} to execute to load a new instance.
    * 
    * Mainly used when configuring the {@link Home} components in 
    * components.xml.
    */

/**
    * Message displayed to user when the managed entity is created.
    */

/**
    * Message displayed to user when the managed entity is created.
    */

/**
    * Message displayed to user when the managed entity is deleted.
    */

/**
    * Message displayed to user when the managed entity is deleted.
    */

/**
    * Message displayed to user when the managed entity is updated.
    */

/**
    * Message displayed to user when the managed entity is updated.
    */

/**
    * The prefix of the key to look up messages in the Seam managed resource 
    * bundle.
    * 
    * By default the simple name of the class suffixed with an underscore.
    */

/**
    * The key to look up in the Seam managed resource bundle the message
    * displayed when the managed entity is created. 
    * 
    * By default the {@link #getMessageKeyPrefix()} suffixed with created.
    */

/**
    * The key to look up in the Seam managed resource bundle the message
    * displayed when the managed entity is updated. 
    * 
    * By default the {@link #getMessageKeyPrefix()} suffixed with updated.
    */

/**
    * The key to look up in the Seam managed resource bundle the message
    * displayed when the managed entity is deleted. 
    * 
    * By default the {@link #getMessageKeyPrefix()} suffixed with deleted.
    */

/**
    * Raise events when a CRUD operation succeeds.
    * 
    * Utility method to raise two events: an event of type 
    * org.jboss.seam.afterTransactionSuccess is raised, along with 
    * an event of type 
    * org.jboss.seam.afterTransactionSuccess.&lt;entityName&gt;.
    */

/**
    * The simple name of the managed entity
    */

/**
    * Hook method to get the name of the managed entity
    */

