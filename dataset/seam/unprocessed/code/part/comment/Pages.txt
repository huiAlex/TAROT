/**
 * Holds metadata for pages defined in pages.xml, including
 * page actions and page descriptions.
 * 
 *  */

/**
    * Run any navigation rule defined in pages.xml
    * 
    * @param actionExpression the action method binding expression
    * @param actionOutcomeValue the outcome of the action method
    * @return true if a navigation rule was found
    */

/**
    * Get the Page object for the given view id.
    * 
    * @param viewId a JSF view id
    */

/**
    * Create a new default Page object for a JSF view id
    */

/**
    * Get the stack of Page objects, from least specific to 
    * most specific, that match the given view id.
    * 
    * @param viewId a JSF view id
    */

/**
    * Create the stack of pages that match a JSF view id
    */

/**
    * Call page actions, check permissions and validate the existence 
    * of a conversation for pages which require a long-running 
    * conversation, starting with the most general view id, ending at 
    * the most specific. Also perform redirection to the required
    * scheme if necessary.
    */

/**
    * Look for a DataModel row selection in the request parameters,
    * and apply it to the DataModel.
    */

/**
    * Check permissions and validate the existence of a conversation
    * for pages which require a long-running conversation, starting
    * with the most general view id, ending at the most specific.
    * Finally apply page parameters to the model.
    */

/**
    * Check if a login redirect is required for the current FacesContext
    * 
    * @param facesContext The faces context containing the view ID
    * @return boolean Returns true if a login redirect is required
    */

/**
    * Call the JSF navigation handler
    */

/**
    * Call the action requested by s:link or s:button.
    */

/**
    * Build a list of page-scoped resource bundles, from most
    * specific view id, to most general.
    */

/**
    * Get the values of any page parameters by evaluating the value bindings
    * against the model and converting to String.
    * 
    * @param viewId the JSF view id
    * @param overridden excluded parameters
    * @return a map of page parameter name to String value
    */

/**
    * Convert and validate page parameters passed as view root attributes or request parameters
    */

/**
    * Apply page parameters passed as view root attributes or request parameters to the model
    */

/**
    * Get the page parameter values that were passed in the original request from
    * the PAGE context
    */

/**
    * Update the page parameter values stored in the PAGE context with the current
    * values of the mapped attributes of the model
    */

/**
    * Encode page parameters into a URL
    * 
    * @param url the base URL
    * @param viewId the JSF view id of the page
    * @return the URL with parameters appended
    */

/**
    * Encode page parameters into a URL
    * 
    * @param url the base URL
    * @param viewId the JSF view id of the page
    * @param overridden excluded parameters
    * @return the URL with parameters appended
    */

/**
    * Search for a defined no-conversation-view-id, beginning with
    * the most specific view id, then wildcarded view ids, and 
    * finally the global setting
    */

/**
    * Search for a defined conversation timeout, beginning with
    * the most specific view id, then wildcarded view ids, and 
    * finally the global setting from Manager
    */

/**
    * Search for a defined concurrent request timeout, beginning with
    * the most specific view id, then wildcarded view ids, and 
    * finally the global setting from Manager
    */

/**
    * Parse a pages.xml file
    */

/**
    * Parse a viewId.page.xml file
    */

/**
    * Get the root element of the document
    */

/**
    * Parse a page element and add a Page to the map
    */

/**
    * Parse the attributes of page
    */

/**
    * Parse end-conversation (and end-task) and begin-conversation (start-task and begin-task) 
    *
    */

/**
    * Parse begin-task, start-task and end-task
    */

/**
    * Parse create-process and end-process
    */

/**
    * Parse navigation
    */

/**
    * Parse param
    */

/**
    * Parse rule
    */

/**
    * The global setting for no-conversation-viewid.
    * 
    * @return a JSF view id
    */

/**
    * The global setting for login-viewid.
    * 
    * @return a JSF view id
    */

