/**
 * API for authorization and authentication via Seam security. This base 
 * implementation supports role-based authorization only. Subclasses may add 
 * more sophisticated permissioning mechanisms.
 * 
 *  */

/**
    * Flag that indicates we are in the process of authenticating
    */

/**
    * Simple check that returns true if the user is logged in, without attempting to authenticate
    * 
    * @return true if the user is logged in
    */

/**
    * Will attempt to authenticate quietly if the user's credentials are set and they haven't
    * authenticated already.  A quiet authentication doesn't throw any exceptions if authentication
    * fails.
    * 
    * @return true if the user is logged in, false otherwise
    */

/**
    * Performs an authorization check, based on the specified security expression.
    * 
    * @param expr The security expression to evaluate
    *     * the user is not authenticated
    *     * the user is authenticated
    */

/**
    * Attempts to authenticate the user.  This method is distinct to the 
    * authenticate() method in that it raises events in response to whether
    * authentication is successful or not.  The following events may be raised
    * by calling login():
    * 
    * org.jboss.seam.security.loginSuccessful - raised when authentication is successful
    * org.jboss.seam.security.loginFailed - raised when authentication fails
    * org.jboss.seam.security.alreadyLoggedIn - raised if the user is already authenticated
    * 
    * @return String returns "loggedIn" if user is authenticated, or null if not.
    */

/**
    * Attempts a quiet login, suppressing any login exceptions and not creating
    * any faces messages. This method is intended to be used primarily as an 
    * internal API call, however has been made public for convenience.
    */

/**
    * 
    *     */

/**
    * Clears any roles added by calling addRole() while not authenticated.  
    * This method may be overridden by a subclass if different 
    * pre-authentication logic should occur.
    */

/**
    * Extracts the principal from the subject, and populates the roles of the
    * authenticated user.  This method may be overridden by a subclass if
    * different post-authentication logic should occur.
    */

/**
    * Resets all security state and credentials
    */

/**
    * Checks if the authenticated user is a member of the specified role.
    * 
    * @param role String The name of the role to check
    * @return boolean True if the user is a member of the specified role
    */

/**
    * Adds a role to the authenticated user.  If the user is not logged in,
    * the role will be added to a list of roles that will be granted to the
    * user upon successful authentication, but only during the authentication
    * process.
    * 
    * @param role The name of the role to add
    */

/**
    * Removes a role from the authenticated user
    * 
    * @param role The name of the role to remove
    */

/**
    * Checks that the current authenticated user is a member of
    * the specified role.
    * 
    * @param role String The name of the role to check
    *     */

/**
    * Checks that the current authenticated user has permission for
    * the specified name and action
    * 
    * @param name String The permission name
    * @param action String The permission action
    * @param arg Object Optional object parameter used to make a permission decision
    *     */

/**
    * Performs a permission check for the specified name and action
    * 
    * @param name String The permission name
    * @param action String The permission action
    * @param arg Object Optional object parameter used to make a permission decision
    * @return boolean True if the user has the specified permission
    */

/**
    * Evaluates the specified security expression, which must return a boolean
    * value.
    * 
    * @param expr String The expression to evaluate
    * @return boolean The result of the expression evaluation
    */

/**
    *     */

/**
    *     */

/**
    *     */

/**
    *     */

/**
    *     */

/**
    *     */

