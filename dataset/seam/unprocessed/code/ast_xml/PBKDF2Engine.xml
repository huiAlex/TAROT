<Class>
    <Id>1023</Id>
    <Package>org.jboss.seam.security.crypto</Package>
    <ClassName>PBKDF2Engine</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>PBKDF2</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PBKDF2Engine  /** 
 * Copied from Matthias Gartner's PKCS#5 implementation - see http://rtner.de/software/PBKDF2.html &lt;p&gt; Request for Comments: 2898 PKCS #5: Password-Based Cryptography Specification &lt;p&gt; Version 2.0 &lt;p&gt; PBKDF2 (P, S, c, dkLen) &lt;p&gt; Options: &lt;ul&gt; &lt;li&gt;PRF underlying pseudorandom function (hLen denotes the length in octets of the pseudorandom function output). PRF is pluggable.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt; Input: &lt;ul&gt; &lt;li&gt;P password, an octet string&lt;/li&gt; &lt;li&gt;S salt, an octet string&lt;/li&gt; &lt;li&gt;c iteration count, a positive integer&lt;/li&gt; &lt;li&gt;dkLen intended length in octets of the derived key, a positive integer, at most (2^32 - 1) * hLen&lt;/li&gt; &lt;/ul&gt; &lt;p&gt; Output: &lt;ul&gt; &lt;li&gt;DK derived key, a dkLen-octet string&lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; &lt;p&gt; A free Java implementation of Password Based Key Derivation Function 2 as defined by RFC 2898. Copyright (c) 2007 Matthias G&amp;auml;rtner &lt;/p&gt; &lt;p&gt; This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version. &lt;/p&gt; &lt;p&gt; This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. &lt;/p&gt; &lt;p&gt; You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA &lt;/p&gt; &lt;p&gt; For Details, see &lt;a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" &gt;http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html&lt;/a&gt;. &lt;/p&gt;
 * @see &lt;a href="http://tools.ietf.org/html/rfc2898"&gt;RFC 2898&lt;/a&gt;
 * @author Matthias G&amp;auml;rtner
 * @version 1.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>parameters</FieldName>
            <FieldType>PBKDF2Parameters</FieldType>
        </Field>
        <Field>
            <FieldName>prf</FieldName>
            <FieldType>PRF</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PBKDF2Engine</MethodName>
            <MethodComment>/** 
 * Constructor for PBKDF2 implementation object. PBKDF2 parameters must be passed later.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PBKDF2Engine</MethodName>
            <MethodComment>/** 
 * Constructor for PBKDF2 implementation object. PBKDF2 parameters are passed so that this implementation knows iteration count, method to use and String encoding.
 * @param parameters Data holder for iteration count, method to use et cetera.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>PBKDF2Parameters</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PBKDF2Engine</MethodName>
            <MethodComment>/** 
 * Constructor for PBKDF2 implementation object. PBKDF2 parameters are passed so that this implementation knows iteration count, method to use and String encoding.
 * @param parameters Data holder for iteration count, method to use et cetera.
 * @param prf Supply customer Pseudo Random Function.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>PBKDF2Parameters</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>prf</ParamName>
                    <ParamType>PRF</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deriveKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputPassword</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deriveKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputPassword</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dkLen</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [r=null]</InnerVar>
                <InnerVar>byte [P[]=null]</InnerVar>
                <InnerVar>String [charset=parameters.getHashCharset()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertPRF;[P]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>verifyKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputPassword</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>byte[] [referenceKey=getParameters().getDerivedKey()]</InnerVar>
                <InnerVar>byte[] [inputKey=deriveKey(inputPassword,referenceKey.length)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertPRF</MethodName>
            <MethodComment>/** 
 * Factory method. Default implementation is (H)MAC-based. To be overridden in derived classes.
 * @param P User-supplied candidate password as array of bytes.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>P</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>prf;init;[P]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPseudoRandomFunction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PRF</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PBKDF2</MethodName>
            <MethodComment>/** 
 * Core Password Based Key Derivation Function 2.
 * @see &lt;a href="http://tools.ietf.org/html/rfc2898"&gt;RFC 2898 5.2&lt;/a&gt;
 * @param prf Pseudo Random Function (i.e. HmacSHA1)
 * @param S Salt as array of bytes. &lt;code&gt;null&lt;/code&gt; means no salt.
 * @param c Iteration count (see RFC 2898 4.2)
 * @param dkLen desired length of derived key.
 * @return internal byte array
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prf</ParamName>
                    <ParamType>PRF</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>S</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dkLen</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [hLen=prf.getHLen()]</InnerVar>
                <InnerVar>int [l=ceil(dkLen,hLen)]</InnerVar>
                <InnerVar>int [r=dkLen - (l - 1) * hLen]</InnerVar>
                <InnerVar>byte [T[]=new byte[l * hLen]]</InnerVar>
                <InnerVar>int [ti_offset=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ceil</MethodName>
            <MethodComment>/** 
 * Integer division with ceiling function.
 * @see &lt;a href="http://tools.ietf.org/html/rfc2898"&gt;RFC 2898 5.2 Step 2.&lt;/a&gt;
 * @param a
 * @param b
 * @return ceil(a/b)
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>a</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [m=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>_F</MethodName>
            <MethodComment>/** 
 * Function F.
 * @see &lt;a href="http://tools.ietf.org/html/rfc2898"&gt;RFC 2898 5.2 Step 3.&lt;/a&gt;
 * @param dest Destination byte buffer
 * @param offset Offset into destination byte buffer
 * @param prf Pseudo Random Function
 * @param S Salt as array of bytes
 * @param c Iteration count
 * @param blockIndex
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dest</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>prf</ParamName>
                    <ParamType>PRF</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>S</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>blockIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [hLen=prf.getHLen()]</InnerVar>
                <InnerVar>byte [U_r[]=new byte[hLen]]</InnerVar>
                <InnerVar>byte [U_i[]=new byte[S.length + 4]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;arraycopy;[S, 0, U_i, 0, S.length]</InnerMethodInvoke>
                <InnerMethodInvoke>null;INT;[U_i, S.length, blockIndex]</InnerMethodInvoke>
                <InnerMethodInvoke>System;arraycopy;[U_r, 0, dest, offset, hLen]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>xor</MethodName>
            <MethodComment>/** 
 * Block-Xor. Xor source bytes into destination byte buffer. Destination buffer must be same length or less than source buffer.
 * @param dest
 * @param src
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dest</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>src</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>INT</MethodName>
            <MethodComment>/** 
 * Four-octet encoding of the integer i, most significant octet first.
 * @see &lt;a href="http://tools.ietf.org/html/rfc2898"&gt;RFC 2898 5.2 Step 3.&lt;/a&gt;
 * @param dest
 * @param offset
 * @param i
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dest</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>i</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParameters</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PBKDF2Parameters</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setParameters</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>PBKDF2Parameters</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPseudoRandomFunction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prf</ParamName>
                    <ParamType>PRF</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>