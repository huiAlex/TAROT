<Class>
    <Id>863</Id>
    <Package>org.jboss.seam.mock</Package>
    <ClassName>MockApplicationFactory</ClassName>
    <SuperClass>ApplicationFactory</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MockApplicationFactory  /** 
 * An mock implementation of the JSF ApplicationFactory which returns a mock Application wrapped in a SeamApplication. This class can be registered with JSF to allow JSF to be used formally in a test environment as follows: &lt;code&gt; FactoryFinder.setFactory(FactoryFinder.APPLICATION_FACTORY, "org.jboss.seam.mock.MockApplicationFactory"); Application application = ((ApplicationFactory) FactoryFinder .getFactory(FactoryFinder.APPLICATION_FACTORY)).getApplication();     &lt;/code&gt;
 * @author Dan Allen
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>application</FieldName>
            <FieldType>Application</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getApplication</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Application</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setApplication</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>application</ParamName>
                    <ParamType>Application</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>