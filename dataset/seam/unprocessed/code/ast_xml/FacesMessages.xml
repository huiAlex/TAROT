<Class>
    <Id>3</Id>
    <Package>org.jboss.seam.faces</Package>
    <ClassName>FacesMessages</ClassName>
    <SuperClass>StatusMessages</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>FacesMessages  /** 
 * A Seam component that propagates FacesMessages across redirects and interpolates EL expressions in the message string.
 * @author Gavin King
 * @author Pete Muir
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>beforeRenderResponse</MethodName>
            <MethodComment>/** 
 * Called by Seam to transfer messages from FacesMessages to JSF
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>afterPhase</MethodName>
            <MethodComment>/** 
 * Called by Seam to transfer any messages added in the phase just processed to the FacesMessages component. A task runner is used to allow the messages access to outjected values.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;runTasks;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toFacesMessage</MethodName>
            <MethodComment>/** 
 * Convert a StatusMessage to a FacesMessage
 */
</MethodComment>
            <ReturnType>FacesMessage</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statusMessage</ParamName>
                    <ParamType>StatusMessage</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toSeverity</MethodName>
            <MethodComment>/** 
 * Convert a StatusMessage.Severity to a FacesMessage.Severity
 */
</MethodComment>
            <ReturnType>javax.faces.application.FacesMessage.Severity</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>severity</ParamName>
                    <ParamType>org.jboss.seam.international.StatusMessage.Severity</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toSeverity</MethodName>
            <MethodComment>/** 
 * Convert a FacesMessage.Severity to a StatusMessage.Severity
 */
</MethodComment>
            <ReturnType>org.jboss.seam.international.StatusMessage.Severity</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>severity</ParamName>
                    <ParamType>javax.faces.application.FacesMessage.Severity</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClientId</MethodName>
            <MethodComment>/** 
 * Calculate the JSF client ID from the provided widget ID
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FacesContext [facesContext=FacesContext.getCurrentInstance()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClientId</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>component</ParamName>
                    <ParamType>UIComponent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>facesContext</ParamName>
                    <ParamType>FacesContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [componentId=component.getId()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentMessages</MethodName>
            <MethodComment>/** 
 * Get all faces messages that have already been added to the context.
 */
</MethodComment>
            <ReturnType>FacesMessage</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;FacesMessage&gt; [result=new ArrayList&lt;FacesMessage&gt;()]</InnerVar>
                <InnerVar>Iterator&lt;FacesMessage&gt; [iter=FacesContext.getCurrentInstance().getMessages()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentGlobalMessages</MethodName>
            <MethodComment>/** 
 * Get all faces global messages that have already been added to the context.
 */
</MethodComment>
            <ReturnType>FacesMessage</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;FacesMessage&gt; [result=new ArrayList&lt;FacesMessage&gt;()]</InnerVar>
                <InnerVar>Iterator&lt;FacesMessage&gt; [iter=FacesContext.getCurrentInstance().getMessages(null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentMessagesForControl</MethodName>
            <MethodComment>/** 
 * Get all faces messages that have already been added to the control.
 */
</MethodComment>
            <ReturnType>FacesMessage</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [clientId=getClientId(id)]</InnerVar>
                <InnerVar>List&lt;FacesMessage&gt; [result=new ArrayList&lt;FacesMessage&gt;()]</InnerVar>
                <InnerVar>Iterator&lt;FacesMessage&gt; [iter=FacesContext.getCurrentInstance().getMessages(clientId)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createFacesMessage</MethodName>
            <MethodComment>/** 
 * Utility method to create a FacesMessage from a Severity, messageTemplate  and params. This method interpolates the parameters provided
 */
</MethodComment>
            <ReturnType>FacesMessage</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>severity</ParamName>
                    <ParamType>javax.faces.application.FacesMessage.Severity</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>messageTemplate</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createFacesMessage</MethodName>
            <MethodComment>/** 
 * Utility method to create a FacesMessage from a Severity, key,  defaultMessageTemplate and params. This method interpolates the parameters provided
 */
</MethodComment>
            <ReturnType>FacesMessage</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>severity</ParamName>
                    <ParamType>javax.faces.application.FacesMessage.Severity</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defaultMessageTemplate</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StatusMessage [message=new StatusMessage(toSeverity(severity),key,null,defaultMessageTemplate,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>message;interpolate;[params]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>add</MethodName>
            <MethodComment>/** 
 * Add a FacesMessage that will be used the next time a page is rendered. Deprecated, use a method in  {@link StatusMessages} instead
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>facesMessage</ParamName>
                    <ParamType>FacesMessage</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>add</MethodName>
            <MethodComment>/** 
 * Create a new status message, with the messageTemplate is as the message. You can also specify the severity, and parameters to be interpolated Deprecated, use  {@link #add(org.jboss.seam.international.StatusMessage.Severity,String,Object...)} instead
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>severity</ParamName>
                    <ParamType>javax.faces.application.FacesMessage.Severity</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>messageTemplate</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;add;[toSeverity(severity), messageTemplate, params]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addToControl</MethodName>
            <MethodComment>/** 
 * Create a new status message, with the messageTemplate is as the message. A severity of INFO will be used, and you can specify paramters to be interpolated Deprecated, use  {@link #addToControl(String,org.jboss.seam.international.StatusMessage.Severity,String,Object...)}instead
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>severity</ParamName>
                    <ParamType>javax.faces.application.FacesMessage.Severity</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>messageTemplate</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addToControl;[id, toSeverity(severity), messageTemplate, params]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addFromResourceBundle</MethodName>
            <MethodComment>/** 
 * Add a status message, looking up the message in the resource bundle using the provided key. You can also specify the severity, and parameters to be interpolated Deprecated, use  {@link #addFromResourceBundle(org.jboss.seam.international.StatusMessage.Severity,String,Object...)}instead
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>severity</ParamName>
                    <ParamType>javax.faces.application.FacesMessage.Severity</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addFromResourceBundle;[toSeverity(severity), key, params]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addFromResourceBundleOrDefault</MethodName>
            <MethodComment>/** 
 * Add a status message, looking up the message in the resource bundle using the provided key. You can also specify the severity, and parameters to be interpolated Deprecated, use  {@link #addFromResourceBundleOrDefault(javax.faces.application.FacesMessage.Severity,String,String,Object...)}instead
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>severity</ParamName>
                    <ParamType>javax.faces.application.FacesMessage.Severity</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defaultMessageTemplate</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addFromResourceBundleOrDefault;[toSeverity(severity), key, defaultMessageTemplate, params]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addToControlFromResourceBundle</MethodName>
            <MethodComment>/** 
 * Create a new status message, looking up the message in the resource bundle using the provided key. The message will be added to the widget specified by the ID. The algorithm used determine which widget the id refers to is determined by the view  layer implementation in use. You can also specify the severity, and parameters to be interpolated Deprecated, use  {@link #addToControlFromResourceBundle(String,org.jboss.seam.international.StatusMessage.Severity,String,Object...)}instead
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>severity</ParamName>
                    <ParamType>javax.faces.application.FacesMessage.Severity</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addToControlFromResourceBundle;[id, toSeverity(severity), key, params]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addToControlFromResourceBundleOrDefault</MethodName>
            <MethodComment>/** 
 * Add a status message, looking up the message in the resource bundle using the provided key. If the message is found, it is used, otherwise,  the defaultMessageTemplate will be used. The message will be added to the widget specified by the ID. The algorithm used determine which widget the id refers to is determined by the view  layer implementation in use. You can also specify the severity, and parameters to be interpolated Deprecated, use  {@link #addToControlFromResourceBundleOrDefault(String,org.jboss.seam.international.StatusMessage.Severity,String,String,Object...)}instead
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>severity</ParamName>
                    <ParamType>javax.faces.application.FacesMessage.Severity</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defaultMessageTemplate</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addToControlFromResourceBundleOrDefault;[id, toSeverity(severity), key, defaultMessageTemplate, params]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>instance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FacesMessages</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Component [component=Component.forName(StatusMessages.COMPONENT_NAME)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>