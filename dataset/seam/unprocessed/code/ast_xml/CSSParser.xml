<Class>
    <Id>275</Id>
    <Package>org.jboss.seam.excel.css</Package>
    <ClassName>CSSParser</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CSSParser  /** 
 * CSS parser for the XLS-CSS
 * @author Nicklas Karlsson (nickarls@gmail.com)
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>STYLE_ATTRIBUTE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>STYLE_CLASS_ATTRIBUTE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>STYLE_SHORTHAND_SEPARATOR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>LEFT_BRACE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>RIGHT_BRACE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>definedStyleClasses</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>definedStyleClasses</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>propertyBuilders</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>propertyBuilders</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>cellStyleCache</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>cellStyleCache</FieldName>
            <FieldType>UIComponent</FieldType>
        </Field>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CSSParser</MethodName>
            <MethodComment>/** 
 * Constructor, initializes the property builders
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;initPropertyBuilders;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CSSParser</MethodName>
            <MethodComment>/** 
 * Constructor with stylesheets
 * @param stylesheets The list of referenced stylesheets in UILink elements
 * @throws MalformedURLException If the URL was bad
 * @throws IOException If the URL could not be read
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stylesheets</ParamName>
                    <ParamType>UILink</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;initPropertyBuilders;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;loadStylesheets;[stylesheets]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>MalformedURLException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadStylesheets</MethodName>
            <MethodComment>/** 
 * Loads stylesheets (merging by class name)
 * @param stylesheets The stylesheets to read/merge
 * @throws MalformedURLException If the URL was bad
 * @throws IOException If the URL could not be read
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stylesheets</ParamName>
                    <ParamType>UILink</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>MalformedURLException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initPropertyBuilders</MethodName>
            <MethodComment>/** 
 * Registers the property builders
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.FONT_FAMILY, new PropertyBuilders.FontFamily()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.FONT_SIZE, new PropertyBuilders.FontSize()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.FONT_COLOR, new PropertyBuilders.FontColor()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.FONT_ITALIC, new PropertyBuilders.FontItalic()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.FONT_SCRIPT_STYLE, new PropertyBuilders.FontScriptStyle()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.FONT_STRUCK_OUT, new PropertyBuilders.FontStruckOut()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.FONT_UNDERLINE_STYLE, new PropertyBuilders.FontUnderlineStyle()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.FONT_BOLD, new PropertyBuilders.FontBold()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.FONT, new PropertyBuilders.FontShorthand()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.BACKGROUND_PATTERN, new PropertyBuilders.BackgroundPattern()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.BACKGROUND_COLOR, new PropertyBuilders.BackgroundColor()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.BACKGROUND, new PropertyBuilders.BackgroundShorthand()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.BORDER_LEFT_COLOR, new PropertyBuilders.BorderLeftColor()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.BORDER_LEFT_LINE_STYLE, new PropertyBuilders.BorderLeftLineStyle()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.BORDER_LEFT, new PropertyBuilders.BorderLeftShorthand()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.BORDER_TOP_COLOR, new PropertyBuilders.BorderTopColor()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.BORDER_TOP_LINE_STYLE, new PropertyBuilders.BorderTopLineStyle()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.BORDER_TOP, new PropertyBuilders.BorderTopShorthand()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.BORDER_RIGHT_COLOR, new PropertyBuilders.BorderRightColor()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.BORDER_RIGHT_LINE_STYLE, new PropertyBuilders.BorderRightLineStyle()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.BORDER_RIGHT, new PropertyBuilders.BorderRightShorthand()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.BORDER_BOTTOM_COLOR, new PropertyBuilders.BorderBottomColor()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.BORDER_BOTTOM_LINE_STYLE, new PropertyBuilders.BorderBottomLineStyle()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.BORDER_BOTTOM, new PropertyBuilders.BorderBottomShorthand()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.BORDER, new PropertyBuilders.BorderShorthand()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.FORMAT_MASK, new PropertyBuilders.FormatMask()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.ALIGNMENT, new PropertyBuilders.Alignment()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.INDENTATION, new PropertyBuilders.Indentation()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.ORIENTATION, new PropertyBuilders.Orientation()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.LOCKED, new PropertyBuilders.Locked()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.SHRINK_TO_FIT, new PropertyBuilders.ShrinkToFit()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.WRAP, new PropertyBuilders.Wrap()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.VERICAL_ALIGNMENT, new PropertyBuilders.VericalAlignment()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.COLUMN_WIDTH, new PropertyBuilders.ColumnWidth()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.COLUMN_AUTO_SIZE, new PropertyBuilders.ColumnAutoSize()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.COLUMN_HIDDEN, new PropertyBuilders.ColumnHidden()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.COLUMN_EXPORT, new PropertyBuilders.ColumnExport()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.COLUMN_WIDTHS, new PropertyBuilders.ColumnWidths()]</InnerMethodInvoke>
                <InnerMethodInvoke>propertyBuilders;put;[CSSNames.FORCE_TYPE, new PropertyBuilders.ForceType()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readCSS</MethodName>
            <MethodComment>/** 
 * Reads data from an URL to a String
 * @param url The URL to read
 * @return The read data as a String
 * @throws IOException If the stream could not be read
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BufferedReader [reader=new BufferedReader(new InputStreamReader(in))]</InnerVar>
                <InnerVar>StringBuffer [buffer=new StringBuffer()]</InnerVar>
                <InnerVar>String [line]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>reader;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseStylesheet</MethodName>
            <MethodComment>/** 
 * Parses a style sheet. Really crude. Assumes data is nicely formatted on one line per entry
 * @param urlString The URL to read
 * @return A map of style class names mapped to StyleMaps
 * @throws MalformedURLException
 * @throws IOException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>urlString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,StyleMap&gt; [styleClasses=new HashMap&lt;String,StyleMap&gt;()]</InnerVar>
                <InnerVar>InputStream [cssStream=null]</InnerVar>
                <InnerVar>String [css=readCSS(cssStream).toLowerCase()]</InnerVar>
                <InnerVar>int [firstBrace=-1]</InnerVar>
                <InnerVar>int [secondBrace=-1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>MalformedURLException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStyle</MethodName>
            <MethodComment>/** 
 * Gets style from a component
 * @param component The component to examine
 * @return null if not found, otherwise style string
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>component</ParamName>
                    <ParamType>UIComponent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStyleClass</MethodName>
            <MethodComment>/** 
 * Gets style class from a component
 * @param component The component to examine
 * @return null if not found, otherwise style class(es) string
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>component</ParamName>
                    <ParamType>UIComponent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStyleProperty</MethodName>
            <MethodComment>/** 
 * Reads a property from a component
 * @param component The component to examine
 * @param field The field to read
 * @return The value from the field
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>component</ParamName>
                    <ParamType>UIComponent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cascadeStyleMap</MethodName>
            <MethodComment>/** 
 * Cascades on parents, collecting them into list
 * @param component The component to examine
 * @param styleMaps The list of collected style maps
 * @return The list of style maps
 */
</MethodComment>
            <ReturnType>StyleMap</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>component</ParamName>
                    <ParamType>UIComponent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>styleMaps</ParamName>
                    <ParamType>StyleMap</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>styleMaps;add;[getStyleMap(component)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCascadedStyleMap</MethodName>
            <MethodComment>/** 
 * Gets the cascaded style map for a component. Recurses on parents, collecting style maps. The reverses the list and merges the styles
 * @param component The component to examine
 * @return The merged style map
 */
</MethodComment>
            <ReturnType>StyleMap</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>component</ParamName>
                    <ParamType>UIComponent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;StyleMap&gt; [styleMaps=cascadeStyleMap(component,new ArrayList&lt;StyleMap&gt;())]</InnerVar>
                <InnerVar>StyleMap [cascadedStyleMap=new StyleMap()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Collections;reverse;[styleMaps]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStyleMap</MethodName>
            <MethodComment>/** 
 * Gets a style map for a component (from cache if available)
 * @param component The component to examine
 * @return The style map of the component
 */
</MethodComment>
            <ReturnType>StyleMap</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>component</ParamName>
                    <ParamType>UIComponent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StyleMap [styleMap=new StyleMap()]</InnerVar>
                <InnerVar>String [componentStyleClass=getStyleProperty(component,STYLE_CLASS_ATTRIBUTE)]</InnerVar>
                <InnerVar>String [componentStyle=getStyleProperty(component,STYLE_ATTRIBUTE)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cellStyleCache;put;[component, styleMap]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setStylesheets</MethodName>
            <MethodComment>/** 
 * Setter for stylesheets. Loads them also.
 * @param stylesheets The stylesheets to load
 * @throws MalformedURLException If the URL is bad
 * @throws IOException If the URL cannot be read
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stylesheets</ParamName>
                    <ParamType>UILink</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;loadStylesheets;[stylesheets]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>MalformedURLException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>