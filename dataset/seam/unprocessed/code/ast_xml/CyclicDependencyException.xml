<Class>
    <Id>186</Id>
    <Package>org.jboss.seam</Package>
    <ClassName>CyclicDependencyException</ClassName>
    <SuperClass>IllegalStateException</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CyclicDependencyException  /** 
 * An exception that is thrown when  {@link BijectionInterceptor} detects that acomponent's dependencies cannot be injected due to a cyclic dependency. As the exception is passed up the stack, the call sequence is recorded so that a useful exception message can be constructed.
 * @author Matt Drees
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>invocations</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>invocations</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>tailComponentName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>cycleComplete</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>addInvocation</MethodName>
            <MethodComment>/** 
 * Records this invocation's component name and method to be displayed in {@link #getMessage()}, unless this invocation is not part of the detected cycle. This method will be successively called as the exception is propagated up the stack.
 * @param componentName
 * @param method
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>componentName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>invocations;add;[createInvocationLabel(componentName,method)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createInvocationLabel</MethodName>
            <MethodComment>/** 
 * returns e.g. "foo.doSomething()"
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>componentName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [invocationLabel=componentName + "." + method.getName()+ "("]</InnerVar>
                <InnerVar>int [i=1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMessage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>