<Class>
    <Id>1030</Id>
    <Package>org.jboss.seam.excel.jxl</Package>
    <ClassName>JXLHelper</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>JXLHelper  /** 
 * A helper class for the JXLExcelWorkbook, caches cell info and holds CSS parser
 * @author Nicklas Karlsson (nickarls@gmail.com)
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
        <Field>
            <FieldName>parser</FieldName>
            <FieldType>CSSParser</FieldType>
        </Field>
        <Field>
            <FieldName>cellInfoCache</FieldName>
            <FieldType>CellInfoCache</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getGenericDisplayFormat</MethodName>
            <MethodComment>/** 
 * Tries to get a general display format (number first, then date)
 * @param formatMask The format mask to attempt
 * @return The format mask (or null if not possible)
 */
</MethodComment>
            <ReturnType>DisplayFormat</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>formatMask</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DisplayFormat [displayFormat=JXLFactory.createNumberFormat(formatMask)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createCellFormat</MethodName>
            <MethodComment>/** 
 * Creates a cell format
 * @param uiCell The cell to model
 * @return The cell format
 * @throws WriteException if the creation failed
 */
</MethodComment>
            <ReturnType>WritableCellFormat</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uiCell</ParamName>
                    <ParamType>UICell</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cellType</ParamName>
                    <ParamType>CellType</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>WritableCellFormat [cellFormat=null]</InnerVar>
                <InnerVar>CellStyle [cellStyle=new CellStyle(parser.getCascadedStyleMap(uiCell))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>WriteException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setStylesheets</MethodName>
            <MethodComment>/** 
 * Sets the stylesheets for the parser
 * @param stylesheets The stylesheets to set
 * @throws MalformedURLException If the URL was bad
 * @throws IOException If the URL could not be read
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stylesheets</ParamName>
                    <ParamType>UILink</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>parser;setStylesheets;[stylesheets]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>MalformedURLException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>applyWorksheetSettings</MethodName>
            <MethodComment>/** 
 * Applied worksheet settings
 * @param worksheet The worksheet to apply the settings to
 * @param uiWorksheet The settings to set
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>worksheet</ParamName>
                    <ParamType>WritableSheet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>uiWorksheet</ParamName>
                    <ParamType>UIWorksheet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SheetSettings [settings=worksheet.getSettings()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCellInfo</MethodName>
            <MethodComment>/** 
 * Gets cell info needed for cell creation
 * @param uiCell The cell to get info for
 * @return The cell info
 */
</MethodComment>
            <ReturnType>CellInfo</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uiCell</ParamName>
                    <ParamType>UICell</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CellInfo [cellInfo=new CellInfo()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cellInfo;setCellFeatures;[createCellFeatures(uiCell)]</InnerMethodInvoke>
                <InnerMethodInvoke>cellInfo;setCellType;[getCellDataType(uiCell)]</InnerMethodInvoke>
                <InnerMethodInvoke>cellInfo;setCellFormat;[getCellFormat(uiCell,cellInfo.getCellType())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createCellFeatures</MethodName>
            <MethodComment>/** 
 * Creates cell features from a template
 * @param uiCellFormat The cell format to apply
 * @return The cell features
 */
</MethodComment>
            <ReturnType>WritableCellFeatures</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uiCellFormat</ParamName>
                    <ParamType>UICellBase</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>WritableCellFeatures [cellFeatures=new WritableCellFeatures()]</InnerVar>
                <InnerVar>List&lt;Validation&gt; [validations=ExcelComponent.getChildrenOfType(uiCellFormat.getChildren(),Validation.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCellDataType</MethodName>
            <MethodComment>/** 
 * Gets the cell type for a cell. Tries to look it up in a cache based on the component id of the cell. If it's not found, it's created and cached.
 * @param uiCell The cell to look up
 * @return The data type of a cell
 */
</MethodComment>
            <ReturnType>CellType</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uiCell</ParamName>
                    <ParamType>UICell</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CellType [cellDataType=cellInfoCache.getCachedCellType(uiCell.getId())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCellFormat</MethodName>
            <MethodComment>/** 
 * Gets a cell format for a cell. Tries to look it up in a cache based on the component id of the cell. If it's not found, it's created and cached.
 * @param uiCell The cell to format
 * @return The cell format
 */
</MethodComment>
            <ReturnType>WritableCellFormat</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uiCell</ParamName>
                    <ParamType>UICell</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cellType</ParamName>
                    <ParamType>CellType</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>WritableCellFormat [cellFormat=cellInfoCache.getCachedCellFormat(uiCell.getId())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addListValidation</MethodName>
            <MethodComment>/** 
 * Adds list validation to a cell
 * @param cellFeatures The cell features to add validation to
 * @param validation The validation to parse
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cellFeatures</ParamName>
                    <ParamType>WritableCellFeatures</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>validation</ParamName>
                    <ParamType>UIListValidation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;UIListValidationItem&gt; [items=ExcelComponent.getChildrenOfType(validation.getChildren(),UIListValidationItem.class)]</InnerVar>
                <InnerVar>List&lt;String&gt; [validations=new ArrayList&lt;String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cellFeatures;setDataValidationList;[validations]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addRangeValidation</MethodName>
            <MethodComment>/** 
 * Adds range validation to a cell
 * @param cellFeatures The cell features to apply the validation to
 * @param validation The validation to add
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cellFeatures</ParamName>
                    <ParamType>WritableCellFeatures</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>validation</ParamName>
                    <ParamType>UIRangeValidation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cellFeatures;setDataValidationRange;[validation.getStartColumn(), validation.getStartRow(), validation.getEndColumn(), validation.getEndRow()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addNumericValidation</MethodName>
            <MethodComment>/** 
 * Adds numeric validation to a cell
 * @param cellFeatures Features to add validation to
 * @param validation Validation to add
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cellFeatures</ParamName>
                    <ParamType>WritableCellFeatures</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>validation</ParamName>
                    <ParamType>UINumericValidation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createCell</MethodName>
            <MethodComment>/** 
 * Creates a JExcelAPI cell representation from the given input
 * @param column The row (0-based) to place the cell at
 * @param row The column (0-based) to place the cell at
 * @param type The type of cell
 * @param data The contents of the cell
 * @param cellFormat The cell format settings of the cell
 * @return The prepared cell representation
 * @see &lt;a href="http://jexcelapi.sourceforge.net/resources/javadocs/2_6/docs/jxl/write/WritableCell.html"&gt;WritableCell&lt;/a&gt;
 */
</MethodComment>
            <ReturnType>WritableCell</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>CellType</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cellFormat</ParamName>
                    <ParamType>WritableCellFormat</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createWorkbookSettings</MethodName>
            <MethodComment>/** 
 * Creates a JExcelAPI Workbook settings object from the UI counterpart. Starts with an empty object and adds the setting only if it is non-null
 * @param uiWorkbook The UI element to interpret
 * @return The created workbook settings
 */
</MethodComment>
            <ReturnType>WorkbookSettings</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uiWorkbook</ParamName>
                    <ParamType>UIWorkbook</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>WorkbookSettings [workbookSettings=new WorkbookSettings()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>applyColumnSettings</MethodName>
            <MethodComment>/** 
 * Applies column settings to a column
 * @param uiColumn The settings to apply
 * @param worksheet The worksheet to apply the column to
 * @param columnIndex The column index to the column
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uiColumn</ParamName>
                    <ParamType>UIColumn</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>worksheet</ParamName>
                    <ParamType>WritableSheet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ColumnStyle [columnStyle=new ColumnStyle(parser.getCascadedStyleMap(uiColumn))]</InnerVar>
                <InnerVar>CellView [cellView=worksheet.getColumnView(columnIndex)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>worksheet;setColumnView;[columnIndex, cellView]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>