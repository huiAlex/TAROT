<Class>
    <Id>256</Id>
    <Package>org.jboss.seam.init</Package>
    <ClassName>Initialization</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Initialization  /** 
 * Builds configuration metadata when Seam first initialized.
 * @author Gavin King
 * @author &lt;a href="mailto:theute@jboss.org"&gt;Thomas Heute&lt;/a&gt;
 * @author Pete Muir
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>COMPONENT_NAMESPACE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>COMPONENT_SUFFIX</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DUPLICATE_JARS_PATTERNS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>LogProvider</FieldType>
        </Field>
        <Field>
            <FieldName>servletContext</FieldName>
            <FieldType>ServletContext</FieldType>
        </Field>
        <Field>
            <FieldName>properties</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>properties</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>componentDescriptors</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>componentDescriptors</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>factoryDescriptors</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>factoryDescriptors</FieldName>
            <FieldType>FactoryDescriptor</FieldType>
        </Field>
        <Field>
            <FieldName>installedComponentClasses</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>installedComponentClasses</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>namespaceMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>namespaceMap</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>namespacePackageResolver</FieldName>
            <FieldType>NamespacePackageResolver</FieldType>
        </Field>
        <Field>
            <FieldName>eventListenerDescriptors</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>eventListenerDescriptors</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>globalImports</FieldName>
            <FieldType>Collection</FieldType>
        </Field>
        <Field>
            <FieldName>globalImports</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>standardDeploymentStrategy</FieldName>
            <FieldType>StandardDeploymentStrategy</FieldType>
        </Field>
        <Field>
            <FieldName>hotDeploymentStrategy</FieldName>
            <FieldType>HotDeploymentStrategy</FieldType>
        </Field>
        <Field>
            <FieldName>warRootDeploymentStrategy</FieldName>
            <FieldType>WarRootDeploymentStrategy</FieldType>
        </Field>
        <Field>
            <FieldName>warClassesDirectory</FieldName>
            <FieldType>File</FieldType>
        </Field>
        <Field>
            <FieldName>warLibDirectory</FieldName>
            <FieldType>File</FieldType>
        </Field>
        <Field>
            <FieldName>hotDeployDirectory</FieldName>
            <FieldType>File</FieldType>
        </Field>
        <Field>
            <FieldName>warRoot</FieldName>
            <FieldType>File</FieldType>
        </Field>
        <Field>
            <FieldName>nonPropertyAttributes</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>nonPropertyAttributes</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>type</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>listenerMethodBindings</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>listenerMethodBindings</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>Initialization</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>servletContext</ParamName>
                    <ParamType>ServletContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Initialization</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>standardDeploymentStrategy;scan;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addNamespaces;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;initComponentsFromXmlDocument;["/WEB-INF/components.xml"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;initComponentsFromXmlDocument;["/WEB-INF/events.xml"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;initComponentsFromXmlDocuments;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;initPropertiesFromServletContext;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;initPropertiesFromResource;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;initJndiProperties;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;initPropertiesFromSystem;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initComponentsFromXmlDocuments</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Enumeration&lt;URL&gt; [resources]</InnerVar>
                <InnerVar>List&lt;String&gt; [seenDocuments=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>Properties [replacements=getReplacements()]</InnerVar>
                <InnerVar>Set&lt;Pattern&gt; [duplicateJarPatterns=new HashSet&lt;Pattern&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initComponentsFromXmlDocument</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InputStream [stream=Resources.getResourceAsStream(resource,servletContext)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReplacements</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>InputStream [replaceStream=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>elements</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Element</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rootElement</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>installComponentsFromXmlElements</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rootElement</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>replacements</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DocumentException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resolveNamespace</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>NamespaceDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>namespace</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NamespaceDescriptor [descriptor=namespaceMap.get(namespace)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>installEventListenerFromXmlElement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>event</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [type=event.attributeValue("type")]</InnerVar>
                <InnerVar>EventListenerDescriptor [eventListener=eventListenerDescriptors.get(type)]</InnerVar>
                <InnerVar>List&lt;Element&gt; [actions=event.elements("action")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>installFactoryFromXmlElement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>factory</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [scopeName=factory.attributeValue("scope")]</InnerVar>
                <InnerVar>String [name=factory.attributeValue("name")]</InnerVar>
                <InnerVar>String [method=factory.attributeValue("method")]</InnerVar>
                <InnerVar>String [value=factory.attributeValue("value")]</InnerVar>
                <InnerVar>ScopeType [scope=scopeName == null ? ScopeType.UNSPECIFIED : ScopeType.valueOf(scopeName.toUpperCase())]</InnerVar>
                <InnerVar>boolean [autoCreate=Boolean.parseBoolean(factory.attributeValue("auto-create"))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>factoryDescriptors;add;[new FactoryDescriptor(name,scope,method,value,autoCreate)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replace</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>replacements</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>installComponentFromXmlElement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>component</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>replacements</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [installText=component.attributeValue("installed")]</InnerVar>
                <InnerVar>boolean [installed=false]</InnerVar>
                <InnerVar>String [scopeName=component.attributeValue("scope")]</InnerVar>
                <InnerVar>String [jndiName=component.attributeValue("jndi-name")]</InnerVar>
                <InnerVar>String [precedenceString=component.attributeValue("precedence")]</InnerVar>
                <InnerVar>int [precedence=precedenceString == null ? Install.APPLICATION : Integer.valueOf(precedenceString)]</InnerVar>
                <InnerVar>ScopeType [scope=scopeName == null ? null : ScopeType.valueOf(scopeName.toUpperCase())]</InnerVar>
                <InnerVar>String [autocreateAttribute=component.attributeValue("auto-create")]</InnerVar>
                <InnerVar>Boolean [autoCreate=autocreateAttribute == null ? null : Boolean.parseBoolean(autocreateAttribute)]</InnerVar>
                <InnerVar>String [startupAttribute=component.attributeValue("startup")]</InnerVar>
                <InnerVar>Boolean [startup=startupAttribute == null ? null : Boolean.parseBoolean(startupAttribute)]</InnerVar>
                <InnerVar>String [startupDependsAttribute=component.attributeValue("startupDepends")]</InnerVar>
                <InnerVar>String[] [startupDepends=startupDependsAttribute == null ? new String[0] : startupDependsAttribute.split(" ")]</InnerVar>
                <InnerVar>ComponentDescriptor [highestPriorityComponent=getHighestPriorityDescriptor(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getHighestPriorityDescriptor</MethodName>
            <MethodComment>/** 
 * Get the highest priority component for the component name
 * @param componentName
 * @return
 */
</MethodComment>
            <ReturnType>ComponentDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>componentName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TreeSet&lt;ComponentDescriptor&gt; [currentSet=(TreeSet&lt;ComponentDescriptor&gt;)componentDescriptors.get(componentName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSetProperties</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>precedence</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ComponentDescriptor [highestPriorityDescriptor=getHighestPriorityDescriptor(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isProperty</MethodName>
            <MethodComment>/** 
 * component properties are non-namespaced and not in the reserved attribute list
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>namespaceURI</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attributeName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassUsingImports</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [clazz=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addComponentDescriptor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descriptor</ParamName>
                    <ParamType>ComponentDescriptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=descriptor.getName()]</InnerVar>
                <InnerVar>Set&lt;ComponentDescriptor&gt; [set=componentDescriptors.get(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPropertyValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Conversions.PropertyValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prop</ParamName>
                    <ParamType>Attribute</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>replacements</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPropertyValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Conversions.PropertyValue</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prop</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>replacements</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [typeName=prop.attributeValue("type")]</InnerVar>
                <InnerVar>Class [type=null]</InnerVar>
                <InnerVar>List&lt;Element&gt; [keyElements=prop.elements("key")]</InnerVar>
                <InnerVar>List&lt;Element&gt; [valueElements=prop.elements("value")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>trimmedText</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>element</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>replacements</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [text=element.getTextTrim()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>trimmedText</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>attribute</ParamName>
                    <ParamType>Attribute</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>replacements</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setProperty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Initialization</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Conversions.PropertyValue</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>properties;put;[name, value]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Initialization</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Init [init=(Init)Component.getInstance(Init.class,ScopeType.APPLICATION)]</InnerVar>
                <InnerVar>ComponentDescriptor [desc=findDescriptor(Jbpm.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;debug;["initializing Seam"]</InnerMethodInvoke>
                <InnerMethodInvoke>ServletLifecycle;beginInitialization;[]</InnerMethodInvoke>
                <InnerMethodInvoke>Contexts.getApplicationContext();set;[Component.PROPERTIES, properties]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addComponent;[new ComponentDescriptor(Init.class), Contexts.getApplicationContext()]</InnerMethodInvoke>
                <InnerMethodInvoke>Contexts.getEventContext();set;[StandardDeploymentStrategy.NAME, standardDeploymentStrategy]</InnerMethodInvoke>
                <InnerMethodInvoke>null;scanForComponents;[]</InnerMethodInvoke>
                <InnerMethodInvoke>init;checkDefaultInterceptors;[]</InnerMethodInvoke>
                <InnerMethodInvoke>init;setTimestamp;[System.currentTimeMillis()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addSpecialComponents;[init]</InnerMethodInvoke>
                <InnerMethodInvoke>Contexts.getEventContext();set;[WarRootDeploymentStrategy.NAME, warRootDeploymentStrategy]</InnerMethodInvoke>
                <InnerMethodInvoke>warRootDeploymentStrategy;scan;[]</InnerMethodInvoke>
                <InnerMethodInvoke>init;setWarTimestamp;[System.currentTimeMillis()]</InnerMethodInvoke>
                <InnerMethodInvoke>Contexts.getEventContext();set;[HotDeploymentStrategy.NAME, hotDeploymentStrategy]</InnerMethodInvoke>
                <InnerMethodInvoke>init;setHotDeployPaths;[hotDeploymentStrategy.getHotDeploymentPaths()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;installComponents;[init]</InnerMethodInvoke>
                <InnerMethodInvoke>ServletLifecycle;endInitialization;[]</InnerMethodInvoke>
                <InnerMethodInvoke>log;debug;["done initializing Seam"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>redeploy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>request</ParamName>
                    <ParamType>HttpServletRequest</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;redeploy;[request, (Init)servletContext.getAttribute(Seam.getComponentName(Init.class))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>redeploy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>request</ParamName>
                    <ParamType>HttpServletRequest</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>init</ParamName>
                    <ParamType>Init</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>delegate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DeploymentStrategy</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>delegate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DeploymentStrategy</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>installHotDeployableComponents</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createHotDeployment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>HotDeploymentStrategy</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hotDeployEnabled</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isHotDeployEnabled</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>init</ParamName>
                    <ParamType>Init</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isGroovyPresent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>scanForComponents</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>classFilenameFromDescriptor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descriptor</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [pos=descriptor.lastIndexOf(".component.xml")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>installComponentsFromDescriptor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileDescriptor</ParamName>
                    <ParamType>FileDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>loader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InputStream [stream=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>installScannedComponentAndRoles</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scannedClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>installRole</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scannedClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>role</ParamName>
                    <ParamType>Role</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ScopeType [scope=Seam.getComponentRoleScope(scannedClass,role)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addComponentDescriptor;[new ComponentDescriptor(role.name(),scannedClass,scope)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addNamespace</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pkg</ParamName>
                    <ParamType>Package</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addNamespaces</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initPropertiesFromServletContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Enumeration [params=servletContext.getInitParameterNames()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initPropertiesFromSystem</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Properties [filtered=new Properties()]</InnerVar>
                <InnerVar>String [prefix=Component.PROPERTIES + "."]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;initPropertiesFromMap;[filtered]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initPropertiesFromResource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;initPropertiesFromMap;[loadFromResource("/seam.properties")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initPropertiesFromMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>props</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initJndiProperties</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Properties [jndiProperties=new Properties()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>jndiProperties;putAll;[loadFromResource("/jndi.properties")]</InnerMethodInvoke>
                <InnerMethodInvoke>jndiProperties;putAll;[loadFromResource("/seam-jndi.properties")]</InnerMethodInvoke>
                <InnerMethodInvoke>Naming;setInitialContextProperties;[jndiProperties]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadFromResource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [props=new Properties()]</InnerVar>
                <InnerVar>InputStream [stream=Resources.getResourceAsStream(resource,servletContext)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findDescriptor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ComponentDescriptor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>componentClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addSpecialComponents</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>init</ParamName>
                    <ParamType>Init</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>installComponents</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>init</ParamName>
                    <ParamType>Init</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Context [context=Contexts.getApplicationContext()]</InnerVar>
                <InnerVar>DependencyManager [manager=new DependencyManager(componentDescriptors)]</InnerVar>
                <InnerVar>Set&lt;ComponentDescriptor&gt; [installable=manager.installedSet()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;debug;["Installing components..."]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addComponent</MethodName>
            <MethodComment>/** 
 * This actually creates a real Component and should only be called when we want to install a component
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descriptor</ParamName>
                    <ParamType>ComponentDescriptor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>Context</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=descriptor.getName()]</InnerVar>
                <InnerVar>String [componentName=name + COMPONENT_SUFFIX]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toCamelCase</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>hyphenated</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>initialUpper</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringTokenizer [tokens=new StringTokenizer(hyphenated,"-")]</InnerVar>
                <InnerVar>StringBuilder [result=new StringBuilder(hyphenated.length())]</InnerVar>
                <InnerVar>String [firstToken=tokens.nextToken()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>EventListenerDescriptor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getListenerMethodBindings</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>