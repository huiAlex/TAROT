<Class>
    <Id>878</Id>
    <Package>org.jboss.seam.async</Package>
    <ClassName>Dispatcher</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Dispatcher  /** 
 * Interface to be implemented by any strategy for dispatching asynchronous method calls and asynchronous events.
 * @author Gavin King
 * @param &lt; T &gt; the type of the timer object
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>scheduleInvocation</MethodName>
            <MethodComment>/** 
 * Schedule an asynchronous method call, examining annotations upon the method to determine the schedule
 * @return some kind of timer object, or null
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>invocation</ParamName>
                    <ParamType>InvocationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>component</ParamName>
                    <ParamType>Component</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>scheduleTimedEvent</MethodName>
            <MethodComment>/** 
 * Schedule a timed (delayed and/or periodic) event
 * @param type the event type
 * @param schedule the schedule
 * @param parameters parameters to pass to the event listener method
 * @return some kind of timer object, or null
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schedule</ParamName>
                    <ParamType>S</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>scheduleAsynchronousEvent</MethodName>
            <MethodComment>/** 
 * Schedule an immediate asynchronous event
 * @param type the event type
 * @param parameters parameters to pass to the event listener method
 * @return some kind of timer object, or null
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>scheduleTransactionSuccessEvent</MethodName>
            <MethodComment>/** 
 * Schedule an event to be processed if and when the current transaction  completes successfully
 * @param type the event type
 * @param parameters parameters to pass to the event listener method
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>scheduleTransactionCompletionEvent</MethodName>
            <MethodComment>/** 
 * Schedule an event to be processed when the current transaction ends
 * @param type the event type
 * @param parameters parameters to pass to the event listener method
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>