<Class>
    <Id>93</Id>
    <Package>org.jboss.seam.faces</Package>
    <ClassName>Redirect</ClassName>
    <SuperClass>AbstractMutable</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Serializable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Redirect  /** 
 * Convenient API for performing browser redirects with parameters.
 * @author Gavin King
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>viewId</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>parameters</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>parameters</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>conversationPropagationEnabled</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>conversationBegun</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getViewId</MethodName>
            <MethodComment>/** 
 * Get the JSF view id to redirect to
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setViewId</MethodName>
            <MethodComment>/** 
 * Set the JSF view id to redirect to
 * @param viewId any JSF view id
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>viewId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setDirty;[this.viewId, viewId]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParameters</MethodName>
            <MethodComment>/** 
 * Get all the request parameters that have been set
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setParameter</MethodName>
            <MethodComment>/** 
 * Set a request parameter value (to set a multi-valued request parameter, pass an array or collection as the value)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [old=parameters.put(name,value)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setDirty;[old, value]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>captureCurrentRequest</MethodName>
            <MethodComment>/** 
 * Capture the view id and request parameters from the current request and squirrel them away so we can return here later in the conversation.
 * @deprecated use captureCurrentView()
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>FacesContext [context=FacesContext.getCurrentInstance()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>parameters;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>parameters;putAll;[context.getExternalContext().getRequestParameterMap()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setDirty;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>captureCurrentView</MethodName>
            <MethodComment>/** 
 * Capture the view id, request parameters and page parameters (which take precedence) from the current request and squirrel them away so we can return here later in the conversation. If no conversation is active, begin a conversation. The conversation is terminated by  {@link Redirect#returnToCapturedView()} if begun by this method.
 * @see Redirect#returnToCapturedView()
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>FacesContext [context=FacesContext.getCurrentInstance()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>parameters;putAll;[context.getExternalContext().getRequestParameterMap()]</InnerMethodInvoke>
                <InnerMethodInvoke>parameters;putAll;[Pages.instance().getStringValuesFromPageContext(context)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setDirty;[]</InnerMethodInvoke>
                <InnerMethodInvoke>Contexts.getConversationContext();flush;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isConversationPropagationEnabled</MethodName>
            <MethodComment>/** 
 * Should the conversation be propagated across the redirect?
 * @return true by default
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setConversationPropagationEnabled</MethodName>
            <MethodComment>/** 
 * Note that conversations are propagated by default
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conversationPropagationEnabled</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>execute</MethodName>
            <MethodComment>/** 
 * Perform the redirect
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>FacesManager.instance();redirect;[viewId, parameters, conversationPropagationEnabled, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>returnToCapturedView</MethodName>
            <MethodComment>/** 
 * Redirect to the captured view, and end any conversation that began in captureCurrentView(). 
 * @see Redirect#captureCurrentView()
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>instance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Redirect</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>