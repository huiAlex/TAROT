<Class>
    <Id>394</Id>
    <Package>org.jboss.seam.util</Package>
    <ClassName>Hex</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Hex  /** 
 * Hex encoder and decoder, ripped off from commons-codec.  DecoderException and EncoderException have been replaced by RuntimeException
 * @author Apache Software Foundation
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DIGITS</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>decodeHex</MethodName>
            <MethodComment>/** 
 * Converts an array of characters representing hexidecimal values into an array of bytes of those same values. The returned array will be half the length of the passed array, as it takes two characters to represent any given byte. An exception is thrown if the passed char array has an odd number of elements.
 * @param data An array of characters containing hexidecimal digits
 * @return A byte array containing binary data decoded fromthe supplied char array.
 * @throws RuntimeException Thrown if an odd number or illegal of characters is supplied
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [len=data.length]</InnerVar>
                <InnerVar>byte[] [out=new byte[len &gt;&gt; 1]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RuntimeException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toDigit</MethodName>
            <MethodComment>/** 
 * Converts a hexadecimal character to an integer.
 * @param ch A character to convert to an integer digit
 * @param index The index of the character in the source
 * @return An integer
 * @throws RuntimeException Thrown if ch is an illegal hex character
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ch</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [digit=Character.digit(ch,16)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RuntimeException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>encodeHex</MethodName>
            <MethodComment>/** 
 * Converts an array of bytes into an array of characters representing the hexidecimal values of each byte in order. The returned array will be double the length of the passed array, as it takes two characters to represent any given byte.
 * @param data a byte[] to convert to Hex characters
 * @return A char[] containing hexidecimal characters
 */
</MethodComment>
            <ReturnType>char[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [l=data.length]</InnerVar>
                <InnerVar>char[] [out=new char[l &lt;&lt; 1]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>decode</MethodName>
            <MethodComment>/** 
 * Converts an array of character bytes representing hexidecimal values into an array of bytes of those same values. The returned array will be half the length of the passed array, as it takes two characters to represent any given byte. An exception is thrown if the passed char array has an odd number of elements.
 * @param array An array of character bytes containing hexidecimal digits
 * @return A byte array containing binary data decoded fromthe supplied byte array (representing characters).
 * @throws RuntimeException Thrown if an odd number of characters is suppliedto this function
 * @see #decodeHex(char[])
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>array</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RuntimeException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>decode</MethodName>
            <MethodComment>/** 
 * Converts a String or an array of character bytes representing hexidecimal values into an array of bytes of those same values. The returned array will be half the length of the passed String or array, as it takes two characters to represent any given byte. An exception is thrown if the passed char array has an odd number of elements.
 * @param object A String or, an array of character bytes containing hexidecimal digits
 * @return A byte array containing binary data decoded fromthe supplied byte array (representing characters).
 * @throws RuntimeException Thrown if an odd number of characters is suppliedto this function or the object is not a String or char[]
 * @see #decodeHex(char[])
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RuntimeException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>encode</MethodName>
            <MethodComment>/** 
 * Converts an array of bytes into an array of bytes for the characters representing the hexidecimal values of each byte in order. The returned array will be double the length of the passed array, as it takes two characters to represent any given byte.
 * @param array a byte[] to convert to Hex characters
 * @return A byte[] containing the bytes of the hexidecimal characters
 * @see #encodeHex(byte[])
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>array</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>encode</MethodName>
            <MethodComment>/** 
 * Converts a String or an array of bytes into an array of characters representing the hexidecimal values of each byte in order. The returned array will be double the length of the passed String or array, as it takes two characters to represent any given byte.
 * @param object a String, or byte[] to convert to Hex characters
 * @return A char[] containing hexidecimal characters
 * @throws RuntimeException Thrown if the given object is not a String or byte[]
 * @see #encodeHex(byte[])
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RuntimeException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>