<Class>
    <Id>611</Id>
    <Package>org.jboss.seam.remoting</Package>
    <ClassName>Call</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Call  /** 
 * @author Shane Bryzak
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>id</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>componentName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>methodName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>exception</FieldName>
            <FieldType>Throwable</FieldType>
        </Field>
        <Field>
            <FieldName>params</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>params</FieldName>
            <FieldType>Wrapper</FieldType>
        </Field>
        <Field>
            <FieldName>result</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>context</FieldName>
            <FieldType>CallContext</FieldType>
        </Field>
        <Field>
            <FieldName>constraints</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>constraints</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>Call</MethodName>
            <MethodComment>/** 
 * Constructor.
 * @param componentName String
 * @param methodName String
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>componentName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContext</MethodName>
            <MethodComment>/** 
 * Return the call context.
 * @return CallContext
 */
</MethodComment>
            <ReturnType>CallContext</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getException</MethodName>
            <MethodComment>/** 
 * Returns the exception thrown by the invoked method.  If no exception was thrown, will return null.
 */
</MethodComment>
            <ReturnType>Throwable</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addParameter</MethodName>
            <MethodComment>/** 
 * Add a parameter to this call.
 * @param param
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>param</ParamName>
                    <ParamType>Wrapper</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>params;add;[param]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResult</MethodName>
            <MethodComment>/** 
 * Returns the result of this call.
 * @return Wrapper
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setResult</MethodName>
            <MethodComment>/** 
 * Required for unit tests
 * @param result
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getId</MethodName>
            <MethodComment>/** 
 * Returns the id of this call.
 * @return String
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConstraints</MethodName>
            <MethodComment>/** 
 * Returns the object graph constraints annotated on the method that is called.
 * @return List The constraints
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setConstraints</MethodName>
            <MethodComment>/** 
 * Required for unit tests
 * @param constraints
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constraints</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>execute</MethodName>
            <MethodComment>/** 
 * Execute this call
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processInvocation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Component [component=Component.forName(componentName)]</InnerVar>
                <InnerVar>Object [instance=Component.getInstance(componentName,true)]</InnerVar>
                <InnerVar>Class [type=null]</InnerVar>
                <InnerVar>Method [m=findMethod(methodName,type)]</InnerVar>
                <InnerVar>Object[] [params=convertParams(m.getGenericParameterTypes())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convertParams</MethodName>
            <MethodComment>/** 
 * Convert our parameter values to an Object array of the specified target types.
 * @param targetTypes Class[] An array containing the target class types.
 * @return Object[] The converted parameter values.
 */
</MethodComment>
            <ReturnType>Object[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>targetTypes</ParamName>
                    <ParamType>Type[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object[] [paramValues=new Object[targetTypes.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ConversionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findMethod</MethodName>
            <MethodComment>/** 
 * Find the best matching method within the specified class according to the parameter types that were provided to the Call.
 * @param name String The name of the method.
 * @param cls Class The Class to search in.
 * @return Method The best matching method.
 */
</MethodComment>
            <ReturnType>Method</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cls</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;Method,Integer&gt; [candidates=new HashMap&lt;Method,Integer&gt;()]</InnerVar>
                <InnerVar>Method [bestMethod=null]</InnerVar>
                <InnerVar>int [bestScore=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>