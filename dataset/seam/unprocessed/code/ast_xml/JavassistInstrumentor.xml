<Class>
    <Id>948</Id>
    <Package>org.jboss.seam.wicket.ioc</Package>
    <ClassName>JavassistInstrumentor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ClassFileTransformer</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>JavassistInstrumentor  /** 
 * This class is responsible for instrumenting wicket component classes so that they can be seam-enabled. The exact notion of what "seam-enabled" means is left to the implementation in WicketComponent and WicketHandler and their delegate classes, in particular the interceptor chains they create. The instrumentations that take place are: &lt;ul&gt; &lt;li&gt; Add a to add a synthetic WicketHandler field similar to: &lt;pre&gt; WicketHandler handler = WicketHandler.create(this); &lt;/pre&gt; as well as a synthetic getter for this field &lt;/li&gt; &lt;li&gt; Add a static reference to WicketComponent is created, to ensure that the instrumented class is registered with WicketComponent: &lt;pre&gt; static WicketComponent component = new org.jboss.seam.wicket.WicketComponent(ThisClassName.class); &lt;/pre&gt; &lt;/li&gt; &lt;li&gt; Make the instrumented class implement org.jboss.seam.wicket.ioc.InstrumentedComponent, which includes  adding this method:  &lt;pre&gt; public InstrumentedComponent getEnclosingInstance()  {  return handler == null ? null : handler.getEnclosingInstance(this);  }&lt;/pre&gt;&lt;/li&gt; &lt;li&gt;For each non-abstract non-synthetic, non-static method (not constructor) named foobar() in this class, create a synthetic private instance method, call it foobar$100, which contains the original code from foobar().  Then instrument foobar to do the following: &lt;pre&gt; SomeReturnType foobar(arguments)  { Method method = OurClass.class.getDeclaredMethod("foobar",argumentSignature); if (this.handler != null) this.handler.beforeInvoke(this,method); SomeReturnType result;  try { result = foobar$100(arguments); } catch (Exception e) {  throw new RuntimeException(this.handler == null ? e : this.handler.handleException(this, method, e));  } if (this.handler != null) this.handler.affterInvoke(this,method,result); return SomeReturnType; } &lt;/pre&gt;&lt;/li&gt; &lt;li&gt;A similar instrumentation occurs for constructors, with the except that a super() or this() call must precede the invocation of the handler.&lt;/li&gt; &lt;/ul&gt; This instrumentor can be activated in several ways: &lt;ul&gt; &lt;li&gt;The WicketClassLoader will use it to instrument any class in WEB-INF/wicket&lt;/li&gt; &lt;li&gt;The WicketInstrumentationTask (an ant task) will use it to instrument classes specified in ant&lt;/li&gt; &lt;li&gt;The seam-wicket maven plugin will use it to instrument classes specified by maven configuration properties&lt;/li&gt; &lt;li&gt;This class implements the ClassFileTransformer interface from the java.lang.instrument package, which means it can be specified with -javaagent:path/to/jboss-seam-wicket.jar.  In this case, the system property "org.jboss.seam.wicket.instrumented-packages" should specify a comma-separated list of package names to instrument&lt;/li&gt;&lt;/ul&gt;
 * @see java.lang.instrument.ClassFileTransformer
 * @see org.jboss.seam.wicket.ioc.WicketClassLoader
 * @see org.jboss.seam.wicket.ioc.WicketInstrumentationTask
 * @author pmuir, cpopetz
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>LogProvider</FieldType>
        </Field>
        <Field>
            <FieldName>classPool</FieldName>
            <FieldType>ClassPool</FieldType>
        </Field>
        <Field>
            <FieldName>packagesToInstrument</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>packagesToInstrument</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>instrumentedComponent</FieldName>
            <FieldType>CtClass</FieldType>
        </Field>
        <Field>
            <FieldName>scanAnnotations</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>onlyTheseClasses</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>onlyTheseClasses</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>JavassistInstrumentor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classPool</ParamName>
                    <ParamType>ClassPool</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>JavassistInstrumentor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classPool</ParamName>
                    <ParamType>ClassPool</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scanAnnotations</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>JavassistInstrumentor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classPool</ParamName>
                    <ParamType>ClassPool</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packagesToInstrument</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scanAnnotations</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>instrumentClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CtClass</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CtClass [implementation=classPool.get(className)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;debug;["Examining " + className]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>NotFoundException</ExceptionType>
                <ExceptionType>CannotCompileException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>instrumentClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CtClass</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bytes</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CtClass [clazz=classPool.makeClass(new ByteArrayInputStream(bytes))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>RuntimeException</ExceptionType>
                <ExceptionType>NotFoundException</ExceptionType>
                <ExceptionType>CannotCompileException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>instrumentClass</MethodName>
            <MethodComment>/** 
 * The main entry point for instrumenting a given class.  Note that this will not check if the class is instrumentable, but will assume that you have.
 * @param implementation The CtClass representing the class to instrument.
 * @throws NotFoundException
 * @throws CannotCompileException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>implementation</ParamName>
                    <ParamType>CtClass</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [className=implementation.getName()]</InnerVar>
                <InnerVar>CtClass [handlerClass=classPool.get(WicketHandler.class.getName())]</InnerVar>
                <InnerVar>CtClass [componentClass=classPool.get(WicketComponent.class.getName())]</InnerVar>
                <InnerVar>CtClass [superclass=implementation.getSuperclass()]</InnerVar>
                <InnerVar>CtField [wicketComponentField=new CtField(componentClass,"component",implementation)]</InnerVar>
                <InnerVar>Initializer [componentInit=Initializer.byExpr("new org.jboss.seam.wicket.WicketComponent(" + className + ".class)")]</InnerVar>
                <InnerVar>CtClass [exception=classPool.get(Exception.class.getName())]</InnerVar>
                <InnerVar>CtMethod [getEnclosingInstance=CtNewMethod.make("public " + InstrumentedComponent.class.getName() + " getEnclosingInstance() { return getHandler() == null ? null : getHandler().getEnclosingInstance(this); }",implementation)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>wicketComponentField;setModifiers;[Modifier.STATIC]</InnerMethodInvoke>
                <InnerMethodInvoke>implementation;addField;[wicketComponentField, componentInit]</InnerMethodInvoke>
                <InnerMethodInvoke>implementation;addInterface;[getInstrumentedComponentInterface()]</InnerMethodInvoke>
                <InnerMethodInvoke>implementation;addMethod;[getEnclosingInstance]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>NotFoundException</ExceptionType>
                <ExceptionType>CannotCompileException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createBody</MethodName>
            <MethodComment>/** 
 * Create the body of the synthetic method
 * @param clazz in this class
 * @param method for this method
 * @param newMethod the synthetic method
 * @return the string of code for the body
 * @throws NotFoundException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>CtClass</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>CtMethod</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newMethod</ParamName>
                    <ParamType>CtMethod</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [src="{" + createMethodObject(clazz,method) + "if (getHandler() != null) getHandler().beforeInvoke(this, method);"+ createMethodDelegation(newMethod)+ "if (this.handler != null) result = ($r) this.handler.afterInvoke(this, method, ($w) result); return ($r) result;}"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;trace;["Creating method " + clazz.getName() + "."+ newMethod.getName()+ "("+ newMethod.getSignature()+ ")"+ src]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>NotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createMethodDelegation</MethodName>
            <MethodComment>/** 
 * Create the code for delegating to a given method, including handling exceptions
 * @param method The method to which we are delegating
 * @return the string of code for the delegation
 * @throws NotFoundException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>CtMethod</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CtClass [returnType=method.getReturnType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>NotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>wrapInExceptionHandler</MethodName>
            <MethodComment>/** 
 * Wrap some code in an exception handler that uses the WicketHandler to handle the exception
 * @param src The code to wrap
 * @return The wrapped code
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>src</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createParameterTypesArray</MethodName>
            <MethodComment>/** 
 * Create an arrray of parameter types for a given method or constructor.
 * @param behavior The method or constructor
 * @return The source string representing the declaration and initialization of the parameterTypes array
 * @throws NotFoundException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>behavior</ParamName>
                    <ParamType>CtBehavior</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [src="Class[] parameterTypes = new Class[" + behavior.getParameterTypes().length + "];"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>NotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createMethodObject</MethodName>
            <MethodComment>/** 
 * Create the code for initializing a Method object for a given method
 * @param clazz The class in which the method can be looked up
 * @param method The method in question
 * @return Source for looking up the method and declaring/initializing the "method" local variable
 * @throws NotFoundException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>CtClass</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>CtMethod</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [src=createParameterTypesArray(method)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>NotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createConstructorObject</MethodName>
            <MethodComment>/** 
 * Create the code for initializing a Constructor object for a given constructor
 * @param className The name of the class in which the constructor can be looked up
 * @param constructor The constructor to look up
 * @return Source for looking up the constructor and declaring/initializing the "consturctor" local variable
 * @throws NotFoundException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constructor</ParamName>
                    <ParamType>CtConstructor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [src=createParameterTypesArray(constructor)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>NotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasWicketAnnotation</MethodName>
            <MethodComment>/** 
 * Does this class alone have the SeamWicketAnnotation?
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>CtClass</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>markedInstrumentable</MethodName>
            <MethodComment>/** 
 * Does this class, or any of its nonstatic enclosing classes, or any of its superclasses contain the SeamWicketComponent marker annotation?
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>CtClass</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isInstrumentable</MethodName>
            <MethodComment>/** 
 * Returns true if the given class can be instrumented.  This will return false if: &lt;ul&gt; &lt;li&gt; The class is an interface or an enum &lt;li&gt; The class is annotated with Seam's @Name annotation or is a non-static inner class of a @Named class &lt;li&gt; The class is already instrumented.  We check this by checking if it already implements the InstrumentedComponent interface &lt;/ul&gt;
 * @param clazz The class to check
 * @return boolean value if the class can be instrumented or not
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>CtClass</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [modifiers=clazz.getModifiers()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isInstrumented</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>CtClass</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInstrumentedComponentInterface</MethodName>
            <MethodComment>/** 
 * We have to look this up lazily because when our constructor is called we may not have the appropriate paths added to our ClassPool, particularly if we are doing runtime instrumentation using WEB-INF/wicket
 */
</MethodComment>
            <ReturnType>CtClass</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transform</MethodName>
            <MethodComment>/** 
 * This is the implementation of the ClassFileTransformer interface.  
 * @see java.lang.instrument.ClassFileTransformer
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>loader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classBeingRedefined</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>protectionDomain</ParamName>
                    <ParamType>ProtectionDomain</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classfileBuffer</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [index=className.lastIndexOf("/")]</InnerVar>
                <InnerVar>String [packageName=className.substring(0,index)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IllegalClassFormatException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>premain</MethodName>
            <MethodComment>/** 
 * This premain will be called if the vm is started with -javaagent:/path/to/jar/with/this/class
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>instrumentation</ParamName>
                    <ParamType>Instrumentation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;initAgent;[instrumentation]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>agentmain</MethodName>
            <MethodComment>/** 
 * This premain will be called if the vm is told to use this agent after startup, which is done in a vm-dependent way
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>instrumentation</ParamName>
                    <ParamType>Instrumentation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;initAgent;[instrumentation]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initAgent</MethodName>
            <MethodComment>/** 
 * Set up instrumentation.  This adds ourselves as a transformer to the instrumentation, and loads the set of packages to transform from the "org.jboss.seam.wicket.instrumented-packages" System property.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>instrumentation</ParamName>
                    <ParamType>Instrumentation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;String&gt; [packagesToInstrument=new HashSet&lt;String&gt;()]</InnerVar>
                <InnerVar>String [list=System.getProperty("org.jboss.seam.wicket.instrumented-packages")]</InnerVar>
                <InnerVar>String [scanAnnotationsProperty=System.getProperty("org.jboss.seam.wicket.scanAnnotations")]</InnerVar>
                <InnerVar>boolean [scanAnnotations=scanAnnotationsProperty == null ? false : scanAnnotationsProperty.equals("true")]</InnerVar>
                <InnerVar>ClassPool [classPool=new ClassPool()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>classPool;appendSystemPath;[]</InnerMethodInvoke>
                <InnerMethodInvoke>instrumentation;addTransformer;[new JavassistInstrumentor(classPool,packagesToInstrument,scanAnnotations)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>instrumentClassSet</MethodName>
            <MethodComment>/** 
 * This instruments a specific set of classes and writes their classes to the specified directory, if that directory is non-null
 * @param toInstrument the set of class names to instrument
 * @param path where to write the modified classes, or null to not write anything
 * @throws CannotCompileException 
 * @throws NotFoundException 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>toInstrument</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CannotCompileException</ExceptionType>
                <ExceptionType>NotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>