<Class>
    <Id>510</Id>
    <Package>org.jboss.seam.captcha</Package>
    <ClassName>Captcha</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Serializable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Captcha  /** 
 * Default CAPTCHA algorithm, a simple addition problem. May be extended and customized.
 * @author Gavin King
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>random</FieldName>
            <FieldType>Random</FieldType>
        </Field>
        <Field>
            <FieldName>correctResponse</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>challenge</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>response</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment>/** 
 * Initialize the challenge and correct response. May be overridden and customized by a subclass.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [x=random.nextInt(50)]</InnerVar>
                <InnerVar>int [y=random.nextInt(50)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setCorrectResponse;[Integer.toString(x + y)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setChallenge;[Integer.toString(x) + " + " + Integer.toString(y)+ " ="]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setChallenge</MethodName>
            <MethodComment>/** 
 * Set the challenge question
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>challenge</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getChallenge</MethodName>
            <MethodComment>/** 
 * Get the challenge question
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCorrectResponse</MethodName>
            <MethodComment>/** 
 * Set the correct response
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>correctResponse</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validateResponse</MethodName>
            <MethodComment>/** 
 * Validate that the entered response is the correct response
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>response</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [valid=response != null &amp;&amp; correctResponse != null &amp;&amp; response.trim().equals(correctResponse)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResponse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setResponse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>renderChallenge</MethodName>
            <MethodComment>/** 
 * Render the challenge question as an image. May be overridden by subclasses to achieve a stronger CAPTCHA.
 */
</MethodComment>
            <ReturnType>BufferedImage</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>BufferedImage [challenge=new BufferedImage(70,20,BufferedImage.TYPE_BYTE_GRAY)]</InnerVar>
                <InnerVar>Graphics [graphics=challenge.getGraphics()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>graphics;setColor;[getChallengeBackgroundColor()]</InnerMethodInvoke>
                <InnerMethodInvoke>graphics;fillRect;[0, 0, getChallengeImageWidth(), 20]</InnerMethodInvoke>
                <InnerMethodInvoke>graphics;setColor;[getChallengeTextColor()]</InnerMethodInvoke>
                <InnerMethodInvoke>graphics;drawString;[getChallenge(), 5, 15]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getChallengeImageWidth</MethodName>
            <MethodComment>/** 
 * May be overridden by subclasses
 * @return the width, in pixels, of the challenge question
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getChallengeBackgroundColor</MethodName>
            <MethodComment>/** 
 * May be overridden by subclasses
 * @return the background color of the challenge image
 */
</MethodComment>
            <ReturnType>Color</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getChallengeTextColor</MethodName>
            <MethodComment>/** 
 * May be overridden by subclasses
 * @return @return the foreground color of the challenge image
 */
</MethodComment>
            <ReturnType>Color</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>instance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Captcha</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>