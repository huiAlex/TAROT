<Class>
    <Id>138</Id>
    <Package>org.jboss.seam.ui.graphicImage</Package>
    <ClassName>Image</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Serializable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Image  /** 
 * Image manipulation and interrogation
 * @author pmuir
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>mimeType</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>extension</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>imageFormatName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>alternativeMimeTypes</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>alternativeMimeTypes</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PNG_IMAGE_TYPE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_IMAGE_TYPE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_CONTENT_TYPE</FieldName>
            <FieldType>Type</FieldType>
        </Field>
        <Field>
            <FieldName>input</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>output</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>dirty</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>contentType</FieldName>
            <FieldType>Type</FieldType>
        </Field>
        <Field>
            <FieldName>bufferedImage</FieldName>
            <FieldType>BufferedImage</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>Type</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mimeType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>extension</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>imageFormatName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>alternativeMimeTypes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMimeType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExtension</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAlternativeMimeTypes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getImageFormatName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeByMimeType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Type</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mimeType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeByFormatName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Type</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>formatName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Image</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setInput</MethodName>
            <MethodComment>/** 
 * Set the image. This can be one of String (loaded from the classpath), a URL, a File, an InputStream or a byte[]
 * @param value
 * @throws IOException
 */
</MethodComment>
            <ReturnType>Image</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;readImage;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getImage</MethodName>
            <MethodComment>/** 
 * Get the image as a byte[], any conversions having been applied. Returns null if the image could not be read
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContentType</MethodName>
            <MethodComment>/** 
 * The content type of the output image, by default DEFAULT_CONTENT_TYPE
 */
</MethodComment>
            <ReturnType>Type</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setContentType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>contentType</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBufferedImage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BufferedImage</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setBufferedImage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bufferedImage</ParamName>
                    <ParamType>BufferedImage</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRatio</MethodName>
            <MethodComment>/** 
 * The aspect ratio of the image
 */
</MethodComment>
            <ReturnType>Double</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Double [ratio=(double)bufferedImage.getWidth() / (double)bufferedImage.getHeight()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isRatio</MethodName>
            <MethodComment>/** 
 * Check whether the image is of a given ratio to within a given precision
 */
</MethodComment>
            <ReturnType>Boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ratio</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>precision</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>double [error=ratio * precision]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWidth</MethodName>
            <MethodComment>/** 
 * The width of the image
 */
</MethodComment>
            <ReturnType>Integer</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getHeight</MethodName>
            <MethodComment>/** 
 * The height of the image
 */
</MethodComment>
            <ReturnType>Integer</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>adjustRatio</MethodName>
            <MethodComment>/** 
 * Alter the ratio of the output image &lt;b&gt;without&lt;/b&gt; altering the ratio of the input by adding transparent strips. If the image is already of the correct ratio (to within the given precision) nothing happens
 */
</MethodComment>
            <ReturnType>Image</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>desiredRatio</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>precision</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>blur</MethodName>
            <MethodComment>/** 
 * Blur the output image using a convolution
 */
</MethodComment>
            <ReturnType>Image</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>radius</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BufferedImage [newImage=new BufferedImage(getWidth(),getHeight(),getImageType())]</InnerVar>
                <InnerVar>int [blurWidth=((radius - 1) * 2 + 1)]</InnerVar>
                <InnerVar>int [pixels=blurWidth * blurWidth]</InnerVar>
                <InnerVar>float [weight=1.0f / pixels]</InnerVar>
                <InnerVar>float[] [elements=new float[pixels]]</InnerVar>
                <InnerVar>Kernel [kernel=new Kernel(blurWidth,blurWidth,elements)]</InnerVar>
                <InnerVar>ConvolveOp [simpleBlur=new ConvolveOp(kernel)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>simpleBlur;filter;[bufferedImage, newImage]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>scaleToWidth</MethodName>
            <MethodComment>/** 
 * Scale the image to the given width
 */
</MethodComment>
            <ReturnType>Image</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>width</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [height=width * getHeight() / getWidth()]</InnerVar>
                <InnerVar>BufferedImage [newImage=new BufferedImage(width,height,getImageType())]</InnerVar>
                <InnerVar>Graphics2D [graphics2D=createGraphics(newImage)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>graphics2D;drawImage;[bufferedImage, 0, 0, width, height, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>scaleToFit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Image</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>height</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>width</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>float [hratio=(float)height / getHeight()]</InnerVar>
                <InnerVar>float [wratio=(float)width / getWidth()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>scaleToHeight</MethodName>
            <MethodComment>/** 
 * Scale the image to the given height
 */
</MethodComment>
            <ReturnType>Image</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>height</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [width=height * getWidth() / getHeight()]</InnerVar>
                <InnerVar>BufferedImage [newImage=new BufferedImage(width,height,getImageType())]</InnerVar>
                <InnerVar>Graphics2D [graphics2D=createGraphics(newImage)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>graphics2D;drawImage;[bufferedImage, 0, 0, width, height, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>scale</MethodName>
            <MethodComment>/** 
 * Scale the image by the given factor
 */
</MethodComment>
            <ReturnType>Image</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>factor</ParamName>
                    <ParamType>double</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [width=(int)(getWidth() * factor)]</InnerVar>
                <InnerVar>int [height=(int)(getHeight() * factor)]</InnerVar>
                <InnerVar>BufferedImage [newImage=new BufferedImage(width,height,getImageType())]</InnerVar>
                <InnerVar>Graphics2D [graphics2D=createGraphics(newImage)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>graphics2D;drawImage;[bufferedImage, 0, 0, width, height, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resize</MethodName>
            <MethodComment>/** 
 * Resize the image to the given width and height, changing the ratio if necessary
 */
</MethodComment>
            <ReturnType>Image</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>width</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>height</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BufferedImage [newImage=new BufferedImage(width,height,getImageType())]</InnerVar>
                <InnerVar>Graphics2D [graphics2D=createGraphics(newImage)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>graphics2D;drawImage;[bufferedImage, 0, 0, width, height, null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readImage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createGraphics</MethodName>
            <MethodComment>/** 
 * Create Canvas, set some defaults (bg colour, rendering hints)
 * @param image
 */
</MethodComment>
            <ReturnType>Graphics2D</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>image</ParamName>
                    <ParamType>BufferedImage</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Graphics2D [graphics2D=image.createGraphics()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>graphics2D;setBackground;[new Color(255,255,255)]</InnerMethodInvoke>
                <InnerMethodInvoke>graphics2D;clearRect;[0, 0, image.getWidth(), image.getHeight()]</InnerMethodInvoke>
                <InnerMethodInvoke>graphics2D;setRenderingHint;[RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>instance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Image</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readImage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputStream</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ImageInputStream [stream=ImageIO.createImageInputStream(inputStream)]</InnerVar>
                <InnerVar>Iterator [iter=ImageIO.getImageReaders(stream)]</InnerVar>
                <InnerVar>ImageReader [reader=(ImageReader)iter.next()]</InnerVar>
                <InnerVar>ImageReadParam [param=reader.getDefaultReadParam()]</InnerVar>
                <InnerVar>String [type=reader.getFormatName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>reader;setInput;[stream, true, true]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setContentType;[Type.getTypeByFormatName(type)]</InnerMethodInvoke>
                <InnerMethodInvoke>stream;close;[]</InnerMethodInvoke>
                <InnerMethodInvoke>reader;dispose;[]</InnerMethodInvoke>
                <InnerMethodInvoke>inputStream;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getImageType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>