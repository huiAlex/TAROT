<Class>
    <Id>609</Id>
    <Package>org.jboss.seam.resteasy</Package>
    <ClassName>ResourceHome</ClassName>
    <SuperClass>AbstractResource</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ResourceHome  /** 
 * This component exposes EntityHome and HibernateEntityHome components as a REST resource.
 * @author Jozef Hartinger
 * @param &lt; T &gt; Entity class
 * @param &lt; T2 &gt; Entity id class
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>entityHome</FieldName>
            <FieldType>EntityHomeWrapper</FieldType>
        </Field>
        <Field>
            <FieldName>entityHome</FieldName>
            <FieldType>T</FieldType>
        </Field>
        <Field>
            <FieldName>uriInfo</FieldName>
            <FieldType>UriInfo</FieldType>
        </Field>
        <Field>
            <FieldName>headers</FieldName>
            <FieldType>HttpHeaders</FieldType>
        </Field>
        <Field>
            <FieldName>requestContentType</FieldName>
            <FieldType>MediaType</FieldType>
        </Field>
        <Field>
            <FieldName>entityIdClass</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>readonly</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>pathParamAnnotation</FieldName>
            <FieldType>PathParamAnnotation</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment>/** 
 * Called at component instantiation. EntityHome component must be set in order for component to be created.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setEntityHome;[getEntityHome()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResource</MethodName>
            <MethodComment>/** 
 * Called by RESTEasy when HTTP GET request is received. String form of entity identifier is passed as a parameter. Returns a response containing database entity.
 * @param rawId String form of entity identifier
 * @return response
 * @see #getEntity
 */
</MethodComment>
            <ReturnType>Response</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MediaType [selectedMediaType=selectResponseMediaType()]</InnerVar>
                <InnerVar>T2 [id=unmarshallId(rawId)]</InnerVar>
                <InnerVar>T [entity=getEntity(id)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEntity</MethodName>
            <MethodComment>/** 
 * Retrieve an entity identified by id parameter.
 * @param id entity identifier
 * @return entity database entity
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>T2</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>entityHome;setId;[id]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createResource</MethodName>
            <MethodComment>/** 
 * Called by RESTEasy when HTTP POST request is received. Persists received entity and returns 201 HTTP status code with location header set to new URI if operation succeeds.
 * @param messageBody HTTP request body
 * @return response
 * @see #createEntity
 */
</MethodComment>
            <ReturnType>Response</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>messageBody</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T [entity=unmarshallEntity(messageBody)]</InnerVar>
                <InnerVar>T2 [id=createEntity(entity)]</InnerVar>
                <InnerVar>URI [uri=uriInfo.getAbsolutePathBuilder().path(id.toString()).build()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createEntity</MethodName>
            <MethodComment>/** 
 * Store entity passed as a parameter in the database.
 * @param entity Object to be persisted
 * @return id identifier assigned to the entity
 */
</MethodComment>
            <ReturnType>T2</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entity</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>entityHome;setInstance;[entity]</InnerMethodInvoke>
                <InnerMethodInvoke>entityHome;persist;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateResource</MethodName>
            <MethodComment>/** 
 * Called by RESTEasy when HTTP PUT request is received. Merges the state of the database entity with the received representation.
 * @param rawId       String form of entity identifier
 * @param messageBody HTTP request body
 * @return response
 * @see #updateEntity
 */
</MethodComment>
            <ReturnType>Response</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>messageBody</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T [entity=unmarshallEntity(messageBody)]</InnerVar>
                <InnerVar>T2 [id=unmarshallId(rawId)]</InnerVar>
                <InnerVar>Object [storedId=Entity.forBean(entity).getIdentifier(entity)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;updateEntity;[entity, id]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateEntity</MethodName>
            <MethodComment>/** 
 * Merge the state of the database entity with the entity passed as a parameter. Override to customize the update strategy - for instance to update specific fields only instead of a full merge.
 * @param entity
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entity</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>T2</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>entityHome;merge;[entity]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deleteResource</MethodName>
            <MethodComment>/** 
 * Called by RESTEasy when HTTP DELETE request is received. Deletes a database entity.
 * @param rawId String form of entity identifier
 * @return response
 * @see #deleteEntity
 */
</MethodComment>
            <ReturnType>Response</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T2 [id=unmarshallId(rawId)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;deleteEntity;[id]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deleteEntity</MethodName>
            <MethodComment>/** 
 * Delete database entity.
 * @param id entity identifier
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>T2</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;getEntity;[id]</InnerMethodInvoke>
                <InnerMethodInvoke>entityHome;remove;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unmarshallEntity</MethodName>
            <MethodComment>/** 
 * Convert HTTP request body into entity class instance.
 * @param is HTTP request body
 * @return entity
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>is</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;T&gt; [entityClass=getEntityClass()]</InnerVar>
                <InnerVar>MessageBodyReader&lt;T&gt; [reader=SeamResteasyProviderFactory.getInstance().getMessageBodyReader(entityClass,entityClass,entityClass.getAnnotations(),requestContentType)]</InnerVar>
                <InnerVar>T [entity]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unmarshallId</MethodName>
            <MethodComment>/** 
 * Converts String form of entity identifier to it's natural type.
 * @param id String form of entity identifier
 * @return entity identifier
 */
</MethodComment>
            <ReturnType>T2</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringParameterInjector [injector=new StringParameterInjector(getEntityIdClass(),getEntityIdClass(),"id",PathParam.class,null,null,new Annotation[]{pathParamAnnotation},SeamResteasyProviderFactory.getInstance())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEntityHome</MethodName>
            <MethodComment>/** 
 * EntityHome component getter. Override this method to set the EntityHome this resource will operate on. You can use either EntityHome or HibernateEntityHome instance.
 * @return entity home
 */
</MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setEntityHome</MethodName>
            <MethodComment>/** 
 * EntityHome component setter
 * @param entityHome
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entityHome</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEntityClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isReadonly</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setReadonly</MethodName>
            <MethodComment>/** 
 * If set to read-only mode, this resource will only response to GET requests. HTTP 415 status code (method not allowed) will returned in all other cases.
 * @param readonly
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>readonly</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEntityIdClass</MethodName>
            <MethodComment>/** 
 * Retrieve entity identifier's class. If not set, type parameters of a superclass are examined.
 * @return class of entity identifier
 */
</MethodComment>
            <ReturnType>Class</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setEntityIdClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entityIdClass</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>value</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>annotationType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>? extends Annotation</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>