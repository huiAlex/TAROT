<Class>
    <Id>592</Id>
    <Package>org.jboss.seam.example.remoting.gwt.client</Package>
    <ClassName>AskQuestionWidget</ClassName>
    <SuperClass>Composite</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AskQuestionWidget  /** 
 * This shows how to do a a "composite" widget in GWT, as well as how to call back to the server.
 * @author Michael Neale
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>panel</FieldName>
            <FieldType>AbsolutePanel</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>AskQuestionWidget</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Label [lbl=new Label("OK, what do you want to know?")]</InnerVar>
                <InnerVar>TextBox [box=new TextBox()]</InnerVar>
                <InnerVar>Button [ok=new Button("Ask")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>panel;add;[lbl]</InnerMethodInvoke>
                <InnerMethodInvoke>box;setText;["What is the meaning of life?"]</InnerMethodInvoke>
                <InnerMethodInvoke>panel;add;[box]</InnerMethodInvoke>
                <InnerMethodInvoke>ok;addClickListener;[new ClickListener(){
  public void onClick(  Widget w){
    ValidationUtility valid=new ValidationUtility();
    if (!valid.isValid(box.getText())) {
      Window.alert("A question has to end with a '?'");
    }
 else {
      askServer(box.getText());
    }
  }
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>panel;add;[ok]</InnerMethodInvoke>
                <InnerMethodInvoke>null;initWidget;[panel]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onClick</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>w</ParamName>
                    <ParamType>Widget</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ValidationUtility [valid=new ValidationUtility()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>askServer</MethodName>
            <MethodComment>/** 
 * Now lets actually go to the server, using a callback - its called Ajax for a reason ! 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getService();askIt;[text, new AsyncCallback(){
  public void onFailure(  Throwable t){
    Window.alert(t.getMessage());
  }
  public void onSuccess(  Object data){
    Window.alert((String)data);
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onFailure</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Window;alert;[t.getMessage()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onSuccess</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Window;alert;[(String)data]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getService</MethodName>
            <MethodComment>/** 
 * This gets the async service client stub. 
 */
</MethodComment>
            <ReturnType>MyServiceAsync</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [endpointURL=GWT.getModuleBaseURL() + "seam/resource/gwt"]</InnerVar>
                <InnerVar>MyServiceAsync [svc=(MyServiceAsync)GWT.create(MyService.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((ServiceDefTarget)svc);setServiceEntryPoint;[endpointURL]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>