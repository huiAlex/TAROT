<Class>
    <Id>495</Id>
    <Package>org.jboss.seam.util</Package>
    <ClassName>RandomStringUtils</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RandomStringUtils  /** 
 * &lt;p&gt;Operations for random &lt;code&gt;String&lt;/code&gt;s.&lt;/p&gt; &lt;p&gt;Currently &lt;em&gt;private high surrogate&lt;/em&gt; characters are ignored.  These are unicode characters that fall between the values 56192 (db80) and 56319 (dbff) as we don't know how to handle them.  High and low surrogates are correctly dealt with - that is if a  high surrogate is randomly chosen, 55296 (d800) to 56191 (db7f)  then it is followed by a low surrogate. If a low surrogate is chosen,  56320 (dc00) to 57343 (dfff) then it is placed after a randomly  chosen high surrogate. &lt;/p&gt;
 * @author &lt;a href="mailto:steven@caswell.name"&gt;Steven Caswell&lt;/a&gt;
 * @author Stephen Colebourne
 * @author Gary Gregory
 * @author Phil Steitz
 * @since 1.0
 * @version $Id: RandomStringUtils.java 6103 2007-09-01 21:39:01Z pmuir $
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>RANDOM</FieldName>
            <FieldType>Random</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>RandomStringUtils</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;&lt;code&gt;RandomStringUtils&lt;/code&gt; instances should NOT be constructed in standard programming. Instead, the class should be used as &lt;code&gt;RandomStringUtils.random(5);&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This constructor is public to permit tools that require a JavaBean instance to operate.&lt;/p&gt;
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>random</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Creates a random string whose length is the number of characters specified.&lt;/p&gt; &lt;p&gt;Characters will be chosen from the set of all characters.&lt;/p&gt;
 * @param count  the length of random string to create
 * @return the random string
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>count</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>randomAscii</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Creates a random string whose length is the number of characters specified.&lt;/p&gt; &lt;p&gt;Characters will be chosen from the set of characters whose ASCII value is between &lt;code&gt;32&lt;/code&gt; and &lt;code&gt;126&lt;/code&gt; (inclusive).&lt;/p&gt;
 * @param count  the length of random string to create
 * @return the random string
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>count</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>randomAlphabetic</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Creates a random string whose length is the number of characters specified.&lt;/p&gt; &lt;p&gt;Characters will be chosen from the set of alphabetic characters.&lt;/p&gt;
 * @param count  the length of random string to create
 * @return the random string
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>count</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>randomAlphanumeric</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Creates a random string whose length is the number of characters specified.&lt;/p&gt; &lt;p&gt;Characters will be chosen from the set of alpha-numeric characters.&lt;/p&gt;
 * @param count  the length of random string to create
 * @return the random string
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>count</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>randomNumeric</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Creates a random string whose length is the number of characters specified.&lt;/p&gt; &lt;p&gt;Characters will be chosen from the set of numeric characters.&lt;/p&gt;
 * @param count  the length of random string to create
 * @return the random string
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>count</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>random</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Creates a random string whose length is the number of characters specified.&lt;/p&gt; &lt;p&gt;Characters will be chosen from the set of alpha-numeric characters as indicated by the arguments.&lt;/p&gt;
 * @param count  the length of random string to create
 * @param letters  if &lt;code&gt;true&lt;/code&gt;, generated string will includealphabetic characters
 * @param numbers  if &lt;code&gt;true&lt;/code&gt;, generated string will includenumeric characters
 * @return the random string
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>count</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>letters</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numbers</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>random</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Creates a random string whose length is the number of characters specified.&lt;/p&gt; &lt;p&gt;Characters will be chosen from the set of alpha-numeric characters as indicated by the arguments.&lt;/p&gt;
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  if &lt;code&gt;true&lt;/code&gt;, generated string will includealphabetic characters
 * @param numbers  if &lt;code&gt;true&lt;/code&gt;, generated string will includenumeric characters
 * @return the random string
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>count</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>start</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>end</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>letters</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numbers</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>random</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Creates a random string based on a variety of options, using default source of randomness.&lt;/p&gt; &lt;p&gt;This method has exactly the same semantics as {@link #random(int,int,int,boolean,boolean,char[],Random)}, but instead of using an externally supplied source of randomness, it uses the internal static  {@link Random} instance.&lt;/p&gt;
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  only allow letters?
 * @param numbers  only allow numbers?
 * @param chars  the set of chars to choose randoms from.If &lt;code&gt;null&lt;/code&gt;, then it will use the set of all chars.
 * @return the random string
 * @throws ArrayIndexOutOfBoundsException if there are not&lt;code&gt;(end - start) + 1&lt;/code&gt; characters in the set array.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>count</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>start</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>end</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>letters</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numbers</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>chars</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>random</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Creates a random string based on a variety of options, using supplied source of randomness.&lt;/p&gt; &lt;p&gt;If start and end are both &lt;code&gt;0&lt;/code&gt;, start and end are set to &lt;code&gt;' '&lt;/code&gt; and &lt;code&gt;'z'&lt;/code&gt;, the ASCII printable characters, will be used, unless letters and numbers are both &lt;code&gt;false&lt;/code&gt;, in which case, start and end are set to &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;. &lt;p&gt;If set is not &lt;code&gt;null&lt;/code&gt;, characters between start and end are chosen.&lt;/p&gt; &lt;p&gt;This method accepts a user-supplied  {@link Random}instance to use as a source of randomness. By seeding a single  {@link Random} instance with a fixed seed and using it for each call,the same random sequence of strings can be generated repeatedly and predictably.&lt;/p&gt;
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  only allow letters?
 * @param numbers  only allow numbers?
 * @param chars  the set of chars to choose randoms from.If &lt;code&gt;null&lt;/code&gt;, then it will use the set of all chars.
 * @param random  a source of randomness.
 * @return the random string
 * @throws ArrayIndexOutOfBoundsException if there are not&lt;code&gt;(end - start) + 1&lt;/code&gt; characters in the set array.
 * @throws IllegalArgumentException if &lt;code&gt;count&lt;/code&gt; &amp;lt; 0.
 * @since 2.0
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>count</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>start</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>end</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>letters</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numbers</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>chars</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>random</ParamName>
                    <ParamType>Random</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char[] [buffer=new char[count]]</InnerVar>
                <InnerVar>int [gap=end - start]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>random</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Creates a random string whose length is the number of characters specified.&lt;/p&gt; &lt;p&gt;Characters will be chosen from the set of characters specified.&lt;/p&gt;
 * @param count  the length of random string to create
 * @param chars  the String containing the set of characters to use,may be null
 * @return the random string
 * @throws IllegalArgumentException if &lt;code&gt;count&lt;/code&gt; &amp;lt; 0.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>count</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>chars</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>random</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Creates a random string whose length is the number of characters specified.&lt;/p&gt; &lt;p&gt;Characters will be chosen from the set of characters specified.&lt;/p&gt;
 * @param count  the length of random string to create
 * @param chars  the character array containing the set of characters to use,may be null
 * @return the random string
 * @throws IllegalArgumentException if &lt;code&gt;count&lt;/code&gt; &amp;lt; 0.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>count</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>chars</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>