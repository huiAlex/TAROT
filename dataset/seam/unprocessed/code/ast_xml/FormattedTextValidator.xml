<Class>
    <Id>781</Id>
    <Package>org.jboss.seam.ui.validator</Package>
    <ClassName>FormattedTextValidator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>javax.faces.validator.Validator</SuperInterface>
        <SuperInterface>Serializable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>FormattedTextValidator  /** 
 * Formatted Text validator Use as a JSF validator on an input control that allows entering Seam Text markup. &lt;p&gt; The Seam Text parser has a disabled default error handler, catch exceptions as appropriate if you display Seam Text (see &lt;a href="http://www.doc.ic.ac.uk/lab/secondyear/Antlr/err.html"&gt;http://www.doc.ic.ac.uk/lab/secondyear/Antlr/err.html&lt;/a&gt;) and call the static convenience method &lt;tt&gt;FormattedTextValidator.getErrorMessage(originalText, recognitionException)&lt;/tt&gt; if you want to display or log a nice error message. &lt;/p&gt; &lt;p&gt; Uses an instance of &lt;tt&gt;SeamTextParser&lt;/tt&gt; by default, override if you require validation with your customized instance of &lt;tt&gt;SeamTextParser&lt;/tt&gt;. &lt;/p&gt;
 * @author matthew.drees
 * @author Christian Bauer
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>NUMBER_OF_CONTEXT_CHARS_AFTER</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>NUMBER_OF_CONTEXT_CHARS_BEFORE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>END_OF_TEXT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>firstError</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>firstErrorDetail</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>validate</MethodName>
            <MethodComment>/** 
 * Validate the given value as well-formed Seam Text. If there are parse errors, throw a ValidatorException including the first parse error.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>FacesContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>component</ParamName>
                    <ParamType>UIComponent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [text=(String)value]</InnerVar>
                <InnerVar>SeamTextParser [parser=getSeamTextParser(text)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ValidatorException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSeamTextParser</MethodName>
            <MethodComment>/** 
 * Override to instantiate a custom &lt;tt&gt;SeamTextLexer&lt;/tt&gt; and &lt;tt&gt;SeamTextParser&lt;/tt&gt;.
 * @param text the raw markup text
 * @return an instance of &lt;tt&gt;SeamTextParser&lt;/tt&gt;
 */
</MethodComment>
            <ReturnType>SeamTextParser</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Reader [r=new StringReader(text)]</InnerVar>
                <InnerVar>SeamTextLexer [lexer=new SeamTextLexer(r)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParserErrorMessage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>originalText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>re</ParamName>
                    <ParamType>RecognitionException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [parserErrorMsg]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNumberOfCharsBeforeErrorLocation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNumberOfCharsAfterErrorLocation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNoViableAltErrorMessage</MethodName>
            <MethodComment>/** 
 * Override (e.g. for i18n) ANTLR parser error messages.
 * @param originalMessage the ANTLR parser error message of the RecognitionException
 * @param location a snippet that indicates the location in the original markup, might be null
 * @return a message that is thrown by this validator
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>originalMessage</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMismatchedTokenErrorMessage</MethodName>
            <MethodComment>/** 
 * Override (e.g. for i18n) ANTLR parser error messages.
 * @param originalMessage the ANTLR parser error message of the RecognitionException
 * @param location a snippet that indicates the location in the original markup, might be null
 * @return a message that is thrown by this validator
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>originalMessage</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>location</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSemanticErrorMessage</MethodName>
            <MethodComment>/** 
 * Override (e.g. for i18n) ANTLR parser error messages.
 * @param originalMessage the ANTLR parser error message of the RecognitionException
 * @return a message that is thrown by this validator
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>originalMessage</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getErrorLocation</MethodName>
            <MethodComment>/** 
 * Extracts the error from the &lt;tt&gt;RecognitionException&lt;/tt&gt; and generates a location of the error by extracting the original text at the exceptions line and column.
 * @param originalText the original Seam Text markup as fed into the parser
 * @param re an ANTLR &lt;tt&gt;RecognitionException&lt;/tt&gt; thrown by the parser
 * @param charsBefore characters before error location included in message
 * @param charsAfter characters after error location included in message
 * @return an error message with some helpful context about where the erroroccured
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>originalText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>re</ParamName>
                    <ParamType>RecognitionException</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charsBefore</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charsAfter</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [beginIndex=Math.max(re.getColumn() - 1 - charsBefore,0)]</InnerVar>
                <InnerVar>int [endIndex=Math.min(re.getColumn() + charsAfter,originalText.length())]</InnerVar>
                <InnerVar>String [location=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getErrorMessage</MethodName>
            <MethodComment>/** 
 * Extracts the error from the &lt;tt&gt;RecognitionException&lt;/tt&gt; and generates a message including the location of the error.
 * @param originalText the original Seam Text markup as fed into the parser
 * @param re an ANTLR &lt;tt&gt;RecognitionException&lt;/tt&gt; thrown by the parser
 * @return an error message with some helpful context about where the erroroccured
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>originalText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>re</ParamName>
                    <ParamType>RecognitionException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>