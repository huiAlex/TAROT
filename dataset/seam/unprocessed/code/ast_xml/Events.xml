<Class>
    <Id>928</Id>
    <Package>org.jboss.seam.core</Package>
    <ClassName>Events</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Events  /** 
 * Support for Seam component-driven events
 * @author Gavin King
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>LogProvider</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>addListener</MethodName>
            <MethodComment>/** 
 * Add a new listener for a given event type
 * @param type the event type
 * @param methodBindingExpression a method binding, expressed in EL
 * @param argTypes the argument types of the method binding
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodBindingExpression</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>argTypes</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodExpression [methodBinding=Expressions.instance().createMethodExpression(methodBindingExpression,Object.class,argTypes)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Init.instance();addObserverMethodExpression;[type, methodBinding]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>raiseEvent</MethodName>
            <MethodComment>/** 
 * Raise an event that is to be processed synchronously
 * @param type the event type
 * @param parameters parameters to be passes to the listener method
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Init.ObserverMethodExpression&gt; [list=Init.instance().getObserverMethodExpressions(type)]</InnerVar>
                <InnerVar>List&lt;Init.ObserverMethod&gt; [observers=Init.instance().getObserverMethods(type)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;trace;["Processing event:" + type]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>raiseAsynchronousEvent</MethodName>
            <MethodComment>/** 
 * Raise an event that is to be processed asynchronously
 * @param type the event type
 * @param parameters parameters to be passes to the listener method
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getDispatcher();scheduleAsynchronousEvent;[type, parameters]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>raiseTimedEvent</MethodName>
            <MethodComment>/** 
 * Raise an event that is to be processed according to a "schedule"
 * @see TimerSchedule (EJB, quartz or JDK timer service)
 * @see CronSchedule (quartz timer service only)
 * @param type the event type
 * @param schedule the schedule object, specific to the dispatcher strategy
 * @param parameters parameters to be passes to the listener method
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schedule</ParamName>
                    <ParamType>Schedule</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getDispatcher();scheduleTimedEvent;[type, schedule, parameters]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>raiseTransactionSuccessEvent</MethodName>
            <MethodComment>/** 
 * Raise an event that is to be processed after successful completion of  the current transaction
 * @param type the event type
 * @param parameters parameters to be passes to the listener method
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getDispatcher();scheduleTransactionSuccessEvent;[type, parameters]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>raiseTransactionCompletionEvent</MethodName>
            <MethodComment>/** 
 * Raise an event that is to be processed after the current transaction ends
 * @param type the event type
 * @param parameters parameters to be passes to the listener method
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getDispatcher();scheduleTransactionCompletionEvent;[type, parameters]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDispatcher</MethodName>
            <MethodComment>/** 
 * @return the Dispatcher object to use for dispatching asynchronousand timed events
 */
</MethodComment>
            <ReturnType>Dispatcher</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exists</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>instance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Events</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>