<Class>
    <Id>621</Id>
    <Package>org.jboss.seam.excel.jxl</Package>
    <ClassName>JXLFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>JXLFactory  /** 
 * Factory for creating JExcelAPI objects
 * @author karlsnic
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DATEFORMATS_CLASSNAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>NUMBERFORMATS_CLASSNAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ALIGNMENT_CLASS_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ORIENTATION_CLASS_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>VERTICAL_ALIGNMENT_CLASS_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>COLOR_CLASS_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BORDER_CLASS_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BORDER_LINE_STYLE_CLASS_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PATTERN_CLASS_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PAGE_ORIENTATION_CLASS_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PAPER_SIZE_CLASS_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SCRIPT_STYLE_CLASS_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>UNDERLINE_STYLE_CLASS_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HEADERFOOTER_COMMAND_MARKER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HEADERFOOTER_PAIR_DELIMITER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HF_CMD_FONT_SIZE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HF_CMD_FONT_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HF_CMD_UNDERLINE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HF_CMD_SUPERSCRIPT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HF_CMD_SUBSCRIPT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HF_CMD_STRIKETHROUGH</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HF_CMD_SHADOW</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HF_CMD_OUTLINE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HF_CMD_ITALICS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HF_CMD_DOUBLE_UNDERLINE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HF_CMD_BOLD</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HF_CMD_WORKSHEET_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HF_CMD_WORKBOOK_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HF_CMD_TOTAL_PAGES</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HF_CMD_TIME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HF_CMD_PAGE_NUMBER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Log</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>isBorderLineStyle</MethodName>
            <MethodComment>/** 
 * Checks if text is a border line style
 * @param text The text to check
 * @return True if border line style, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isPattern</MethodName>
            <MethodComment>/** 
 * Checks if text is a pattern
 * @param text The text to check
 * @return True if pattern, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isColor</MethodName>
            <MethodComment>/** 
 * Checks if text is a color
 * @param text The text to check
 * @return True if color, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAlignment</MethodName>
            <MethodComment>/** 
 * Checks if text is an alignment
 * @param text The text to check
 * @return True if alignment, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isOrientation</MethodName>
            <MethodComment>/** 
 * Checks if text is an orientation
 * @param text The text to check
 * @return True if orientation, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isVerticalAlignment</MethodName>
            <MethodComment>/** 
 * Checks if text is an vertical alignment
 * @param text The text to check
 * @return True if vertical alignment, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isUnderlineStyle</MethodName>
            <MethodComment>/** 
 * Checks if text is an underline style
 * @param text The text to check
 * @return True if underline style, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isScriptStyle</MethodName>
            <MethodComment>/** 
 * Checks if text is a script style
 * @param text The text to check
 * @return True if script style, false otherwise
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getValidContants</MethodName>
            <MethodComment>/** 
 * Gets a list of constants from a class
 * @param className The class to examine
 * @return A list of constants
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;String&gt; [constants=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>Class [clazz=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getValidConstantsSuggestion</MethodName>
            <MethodComment>/** 
 * Gets a suggestion string of available constants from a class.
 * @param className The class to examine
 * @return The suggestion string
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;String&gt; [constants=getValidContants(className)]</InnerVar>
                <InnerVar>StringBuffer [buffer=new StringBuffer()]</InnerVar>
                <InnerVar>int [i=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConstant</MethodName>
            <MethodComment>/** 
 * Gets a constant from a class
 * @param className The class name to examine
 * @param fieldName The field to read
 * @return The constant
 * @throws NoSuchFieldException If the field is not available
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>NoSuchFieldException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createAlignment</MethodName>
            <MethodComment>/** 
 * Creates a JExcelAPI representation of an alignment
 * @param alignment The requested alignment
 * @return The alignment representation
 * @see &lt;a&#13;
    *      href="http://jexcelapi.sourceforge.net/resources/javadocs/2_6/docs/jxl/format/Alignment.html"&gt;Alignment&lt;/a&gt;
 */
</MethodComment>
            <ReturnType>Alignment</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>alignment</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createScriptStyle</MethodName>
            <MethodComment>/** 
 * Creates a JExcelAPI representation of an script style
 * @param mask The requested script style
 * @return The script style representation
 * @see &lt;a&#13;
    *      href="http://jexcelapi.sourceforge.net/resources/javadocs/2_6/docs/jxl/format/ScriptStyle.html"&gt;ScriptStyle&lt;/a&gt;
 */
</MethodComment>
            <ReturnType>ScriptStyle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scriptStyle</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createUnderlineStyle</MethodName>
            <MethodComment>/** 
 * Creates a JExcelAPI representation of an underline style
 * @param mask The requested underline style
 * @return The underline style representation
 * @see &lt;a&#13;
    *      href="http://jexcelapi.sourceforge.net/resources/javadocs/2_6/docs/jxl/format/UnderlineStyle.html"&gt;UnderlineStyle&lt;/a&gt;
 */
</MethodComment>
            <ReturnType>UnderlineStyle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>underlineStyle</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createFont</MethodName>
            <MethodComment>/** 
 * Creates a JExcelAPI representation of a font
 * @param fontspecs The font specifications
 * @return The font
 * @see &lt;a&#13;
    *      href="http://jexcelapi.sourceforge.net/resources/javadocs/2_6/docs/jxl/write/WritableFont.html"&gt;WritableFont&lt;/a&gt;
 */
</MethodComment>
            <ReturnType>FontRecord</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fontspecs</ParamName>
                    <ParamType>CellStyle.Font</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>WritableFont [font=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>WriteException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createNumberFormat</MethodName>
            <MethodComment>/** 
 * Creates a JExcelAPI number display format
 * @param formatMask The format mask
 * @return The display format
 * @see &lt;a&#13;
    *      href="http://jexcelapi.sourceforge.net/resources/javadocs/2_6/docs/jxl/write/NumberFormat.html"&gt;NumberFormat&lt;/a&gt;
 */
</MethodComment>
            <ReturnType>DisplayFormat</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>formatMask</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createDateFormat</MethodName>
            <MethodComment>/** 
 * Creates a JExcelAPI date display format
 * @param mask The format mask
 * @return The display format
 * @see &lt;a&#13;
    *      href="http://jexcelapi.sourceforge.net/resources/javadocs/2_6/docs/jxl/write/DateFormat.html"&gt;DateFormat&lt;/a&gt;
 */
</MethodComment>
            <ReturnType>DisplayFormat</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mask</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createColor</MethodName>
            <MethodComment>/** 
 * Creates a JExcelAPI representation of an color
 * @param color The requested color
 * @return The color representation
 * @see &lt;a&#13;
    *      href="http://jexcelapi.sourceforge.net/resources/javadocs/2_6/docs/jxl/format/Color.html"&gt;Color&lt;/a&gt;
 */
</MethodComment>
            <ReturnType>Colour</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>color</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createOrientation</MethodName>
            <MethodComment>/** 
 * Creates a JExcelAPI representation of an orientation
 * @param orientation The requested orientation
 * @return The orientation representation
 * @see &lt;a&#13;
    *      href="http://jexcelapi.sourceforge.net/resources/javadocs/2_6/docs/jxl/format/Orientation.html"&gt;Orientation&lt;/a&gt;
 */
</MethodComment>
            <ReturnType>Orientation</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>orientation</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createVerticalAlignment</MethodName>
            <MethodComment>/** 
 * Creates a JExcelAPI representation of a vertical alignment
 * @param verticalAlignment The requested alignment
 * @return The alignment representation
 * @see &lt;a&#13;
    *      href="http://jexcelapi.sourceforge.net/resources/javadocs/2_6/docs/jxl/format/VerticalAlignment.html"&gt;VerticalAlignment&lt;/a&gt;
 */
</MethodComment>
            <ReturnType>VerticalAlignment</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>verticalAlignment</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createBorder</MethodName>
            <MethodComment>/** 
 * Creates a JExcelAPI representation of a border
 * @param border The requested border
 * @return border representation
 * @see &lt;a&#13;
    *      href="http://jexcelapi.sourceforge.net/resources/javadocs/2_6/docs/jxl/format/Border.html"&gt;Border&lt;/a&gt;
 */
</MethodComment>
            <ReturnType>Border</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>border</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createLineStyle</MethodName>
            <MethodComment>/** 
 * Creates a JExcelAPI representation of a border line style
 * @param borderLineStyle The requested border line style
 * @return The border line style representation
 * @see &lt;a&#13;
    *      href="http://jexcelapi.sourceforge.net/resources/javadocs/2_6/docs/jxl/format/BorderLineStyle.html"&gt;BorderLineStyle&lt;/a&gt;
 */
</MethodComment>
            <ReturnType>BorderLineStyle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>borderLineStyle</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createPattern</MethodName>
            <MethodComment>/** 
 * Creates a JExcelAPI representation of a pattern
 * @param pattern The requested pattern
 * @return The pattern representation
 * @see &lt;a&#13;
    *      href="http://jexcelapi.sourceforge.net/resources/javadocs/2_6/docs/jxl/format/Pattern.html"&gt;Pattern&lt;/a&gt;
 */
</MethodComment>
            <ReturnType>Pattern</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createPageOrientation</MethodName>
            <MethodComment>/** 
 * Creates a JExcelAPI representation of a page orientation
 * @param orientation The type of orientation to create
 * @return The page orientation representation
 */
</MethodComment>
            <ReturnType>PageOrientation</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>orientation</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createPaperSize</MethodName>
            <MethodComment>/** 
 * Creates a JExcelAPI representation of a paper size
 * @param paperSize The type of paper size to create
 * @return The paper size representation
 */
</MethodComment>
            <ReturnType>PaperSize</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>paperSize</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createHeaderFooter</MethodName>
            <MethodComment>/** 
 * Creates a JExcelAPI header or footer representation. Processes the left, center and right facets using a helper method
 * @param uiHeaderFooter The UI header or footer to interpret
 * @param headerFooter The JExcelAPI header or footer representation to addto
 * @return The JExcelAPI header or footer representation
 */
</MethodComment>
            <ReturnType>HeaderFooter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uiHeaderFooter</ParamName>
                    <ParamType>UIComponent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>headerFooter</ParamName>
                    <ParamType>HeaderFooter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;processHeaderFooterFacet;[headerFooter.getLeft(), uiHeaderFooter.getFacet("left")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;processHeaderFooterFacet;[headerFooter.getCentre(), uiHeaderFooter.getFacet("center")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;processHeaderFooterFacet;[headerFooter.getRight(), uiHeaderFooter.getFacet("right")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processHeaderFooterFacet</MethodName>
            <MethodComment>/** 
 * Processes a header or footer facet. A header or footer facet in JExcelAPI is split into three parts, left, center and right and the UI representation has facets with the same namings. Gets the requested facet from the UI component and calls helper methods for processing the header commands in sequence
 * @param headerFooter The JExcelAPI header or footer facet to process
 * @param facetName The name of the facet to process (left, center, right)
 * @param uiHeaderFooter The UI representation to interpret
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>contents</ParamName>
                    <ParamType>HeaderFooter.Contents</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>facet</ParamName>
                    <ParamType>UIComponent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [facetContent=null]</InnerVar>
                <InnerVar>int [firstHash]</InnerVar>
                <InnerVar>int [secondHash]</InnerVar>
                <InnerVar>String [command]</InnerVar>
                <InnerVar>String [pre]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processCommand</MethodName>
            <MethodComment>/** 
 * Processes a header or footer command, adding itself to the contents
 * @param contents The target contents
 * @param command The command to execute
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>contents</ParamName>
                    <ParamType>Contents</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>command</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>