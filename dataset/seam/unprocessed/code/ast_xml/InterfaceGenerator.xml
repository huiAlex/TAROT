<Class>
    <Id>1</Id>
    <Package>org.jboss.seam.remoting</Package>
    <ClassName>InterfaceGenerator</ClassName>
    <SuperClass>BaseRequestHandler</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>RequestHandler</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InterfaceGenerator  /** 
 * Generates JavaScript interface code.
 * @author Shane Bryzak
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>LogProvider</FieldType>
        </Field>
        <Field>
            <FieldName>accessibleProperties</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>accessibleProperties</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>interfaceCache</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>interfaceCache</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>handle</MethodName>
            <MethodComment>/** 
 * @param request HttpServletRequest
 * @param response HttpServletResponse
 * @throws Exception
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>request</ParamName>
                    <ParamType>HttpServletRequest</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>response</ParamName>
                    <ParamType>HttpServletResponse</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>new ContextualHttpServletRequest(request){
  @Override public void process() throws Exception {
    ServletContexts.instance().setRequest(request);
    if (request.getQueryString() == null) {
      throw new ServletException("Invalid request - no component specified");
    }
    Set&lt;Component&gt; components=new HashSet&lt;Component&gt;();
    Set&lt;Type&gt; types=new HashSet&lt;Type&gt;();
    response.setContentType("text/javascript");
    Enumeration e=request.getParameterNames();
    while (e.hasMoreElements()) {
      String componentName=((String)e.nextElement()).trim();
      Component component=Component.forName(componentName);
      if (component == null) {
        log.error(String.format("Component not found: [%s]",componentName));
        throw new ServletException("Invalid request - component not found.");
      }
 else {
        components.add(component);
      }
    }
    generateComponentInterface(components,response.getOutputStream(),types);
  }
}
;run;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>process</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Set&lt;Component&gt; [components=new HashSet&lt;Component&gt;()]</InnerVar>
                <InnerVar>Set&lt;Type&gt; [types=new HashSet&lt;Type&gt;()]</InnerVar>
                <InnerVar>Enumeration [e=request.getParameterNames()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ServletContexts.instance();setRequest;[request]</InnerMethodInvoke>
                <InnerMethodInvoke>response;setContentType;["text/javascript"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;generateComponentInterface;[components, response.getOutputStream(), types]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateComponentInterface</MethodName>
            <MethodComment>/** 
 * Generates the JavaScript code required to invoke the methods of a component/s.
 * @param components Component[] The components to generate javascript for
 * @param out OutputStream The OutputStream to write the generated javascript to
 * @throws IOException Thrown if there is an error writing to the OutputStream
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>components</ParamName>
                    <ParamType>Component</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>types</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAccessibleProperties</MethodName>
            <MethodComment>/** 
 * A helper method, used internally by InterfaceGenerator and also when serializing responses.  Returns a list of the property names for the specified class which should be included in the generated interface for the type.
 * @param cls Class
 * @return List
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cls</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>appendComponentSource</MethodName>
            <MethodComment>/** 
 * Appends component interface code to an outputstream for a specified component.
 * @param out OutputStream The OutputStream to write to
 * @param component Component The component to generate an interface for
 * @param types Set A list of types that have already been generated for thisrequest.  If this component has already been generated (i.e. it is in the list) then it won't be generated again
 * @throws IOException If there is an error writing to the OutputStream.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>component</ParamName>
                    <ParamType>Component</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>types</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [componentSrc=new StringBuilder()]</InnerVar>
                <InnerVar>Set&lt;Class&gt; [componentTypes=new HashSet&lt;Class&gt;()]</InnerVar>
                <InnerVar>boolean [foundNew=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>componentSrc;append;["Seam.Remoting.type."]</InnerMethodInvoke>
                <InnerMethodInvoke>componentSrc;append;[component.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>componentSrc;append;[" = function() {\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>componentSrc;append;["  this.__callback = new Object();\n"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>appendTypeSource</MethodName>
            <MethodComment>/** 
 * Append Javascript interface code for a specified class to a block of code.
 * @param source StringBuilder The code block to append to
 * @param type Class The type to generate a Javascript interface for
 * @param types Set A list of the types already generated (only include each type once).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>types</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>appendClassSource</MethodName>
            <MethodComment>/** 
 * Appends the interface code for a non-component class to an OutputStream.
 * @param out OutputStream
 * @param classType Class
 * @param types Set
 * @throws IOException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classType</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>types</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [typeSource=new StringBuilder()]</InnerVar>
                <InnerVar>String [componentName=Seam.getComponentName(classType)]</InnerVar>
                <InnerVar>String [typeName=componentName.replace('.','$')]</InnerVar>
                <InnerVar>StringBuilder [fields=new StringBuilder()]</InnerVar>
                <InnerVar>StringBuilder [accessors=new StringBuilder()]</InnerVar>
                <InnerVar>StringBuilder [mutators=new StringBuilder()]</InnerVar>
                <InnerVar>Map&lt;String,String&gt; [metadata=new HashMap&lt;String,String&gt;()]</InnerVar>
                <InnerVar>String [getMethodName=null]</InnerVar>
                <InnerVar>String [setMethodName=null]</InnerVar>
                <InnerVar>boolean [first=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>typeSource;append;["Seam.Remoting.type."]</InnerMethodInvoke>
                <InnerMethodInvoke>typeSource;append;[typeName]</InnerMethodInvoke>
                <InnerMethodInvoke>typeSource;append;[" = function() {\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>typeSource;append;[fields]</InnerMethodInvoke>
                <InnerMethodInvoke>typeSource;append;[accessors]</InnerMethodInvoke>
                <InnerMethodInvoke>typeSource;append;[mutators]</InnerMethodInvoke>
                <InnerMethodInvoke>typeSource;append;["}\n\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>typeSource;append;["Seam.Remoting.type."]</InnerMethodInvoke>
                <InnerMethodInvoke>typeSource;append;[typeName]</InnerMethodInvoke>
                <InnerMethodInvoke>typeSource;append;[".__name = \""]</InnerMethodInvoke>
                <InnerMethodInvoke>typeSource;append;[componentName]</InnerMethodInvoke>
                <InnerMethodInvoke>typeSource;append;["\";\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>typeSource;append;["Seam.Remoting.type."]</InnerMethodInvoke>
                <InnerMethodInvoke>typeSource;append;[typeName]</InnerMethodInvoke>
                <InnerMethodInvoke>typeSource;append;[".__metadata = [\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>typeSource;append;["];\n\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>typeSource;append;[typeName]</InnerMethodInvoke>
                <InnerMethodInvoke>typeSource;append;[");\n\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>out;write;[typeSource.toString().getBytes()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFieldType</MethodName>
            <MethodComment>/** 
 * Returns the remoting "type" for a specified class.
 * @param type Class
 * @return String
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>