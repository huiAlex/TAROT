<Class>
    <Id>319</Id>
    <Package>org.jboss.seam.security.crypto</Package>
    <ClassName>PBKDF2</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PBKDF2  /** 
 * Copied from Matthias Gartner's PKCS#5 implementation - see http://rtner.de/software/PBKDF2.html. &lt;p&gt; A free Java implementation of Password Based Key Derivation Function 2 as defined by RFC 2898. Copyright (c) 2007 Matthias G&amp;auml;rtner &lt;/p&gt; &lt;p&gt; This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version. &lt;/p&gt; &lt;p&gt; This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. &lt;/p&gt; &lt;p&gt; You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA &lt;/p&gt; &lt;p&gt; For Details, see &lt;a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" &gt;http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html&lt;/a&gt;. &lt;/p&gt;
 * @author Matthias G&amp;auml;rtner
 * @version 1.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>deriveKey</MethodName>
            <MethodComment>/** 
 * Convert String-based input to internal byte array, then invoke PBKDF2. Desired key length defaults to Pseudo Random Function block size.
 * @param inputPassword Candidate password to compute the derived key for.
 * @return internal byte array
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputPassword</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deriveKey</MethodName>
            <MethodComment>/** 
 * Convert String-based input to internal byte array, then invoke PBKDF2.
 * @param inputPassword Candidate password to compute the derived key for.
 * @param dkLen Specify desired key length
 * @return internal byte array
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputPassword</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dkLen</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>verifyKey</MethodName>
            <MethodComment>/** 
 * Convert String-based input to internal byte arrays, then invoke PBKDF2 and verify result against the reference data that is supplied in the PBKDF2Parameters.
 * @param inputPassword Candidate password to compute the derived key for.
 * @return &lt;code&gt;true&lt;/code&gt; password match; &lt;code&gt;false&lt;/code&gt; incorrectpassword
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputPassword</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParameters</MethodName>
            <MethodComment>/** 
 * Allow reading of configured parameters.
 * @return Currently set parameters.
 */
</MethodComment>
            <ReturnType>PBKDF2Parameters</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setParameters</MethodName>
            <MethodComment>/** 
 * Allow setting of configured parameters.
 * @param parameters
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>PBKDF2Parameters</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPseudoRandomFunction</MethodName>
            <MethodComment>/** 
 * Get currently set Pseudo Random Function.
 * @return Currently set Pseudo Random Function
 */
</MethodComment>
            <ReturnType>PRF</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPseudoRandomFunction</MethodName>
            <MethodComment>/** 
 * Set the Pseudo Random Function to use. Note that deriveKeys/getPRF does init this object using the supplied candidate password. If this is undesired, one has to override getPRF.
 * @param prf Pseudo Random Function to set.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prf</ParamName>
                    <ParamType>PRF</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>