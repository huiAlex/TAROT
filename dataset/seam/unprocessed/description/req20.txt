Imagine a scenario like this.  Some client calls someMethod() on a component called Foo.  BijectionInterceptor tries to inject Foo s @in attributes, one of which requires calling a factory method on Bar.  Bar s factory method in turn calls Foo.someOtherMethod().  Foo is not in a state where it can support method calls, because it is in the process of injecting dependencies, so this sort of cyclic dependency should not be allowed.  Seam should throw an exception in this case.
BijectionInterceptor used to be coded such that someOtherMethod() would run without any complaints, and any @In attributes may or may not be null, depending on which fields were injected first.  Recent changes to BijectionInterceptor (for  ) have changed this behavior, and now an finite loop results.  Neither of these behaviors is desirable. .
