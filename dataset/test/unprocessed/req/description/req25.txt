Part of the attraction of languages such as Groovy, JRuby is flexible method dispatching (which is part of metaprogramming). How about Self or JavaScript style prototype based OOP with Groovy? With the addition of a class like ProtoObject class (attached ProtoObject.java), it is possible to do prototype based OOP with Groovy.
With ProtoObject, it is possible to write Groovy scripts like the one below:
// create a prototype object
def p = new ProtoObject();
// add  method  to it.
p.func =
{ self -&gt; println( hello from   + self) }
// create another object
def d = new ProtoObject();
d.greet =
{ println  hello world  }
// set prototype to be  p
d._ proto _ = p
// prints  hello world
d.greet();
// calls p.func (because of _ proto _)
d.func()
The ProtoObject class is similar to Groovy s Expando. But, Expando sets current ( this ) object as delegate to the Closure &#8211; and therefore will not work property with multithreading. In the ProtoObject class, I m passing  this  as first argument to Closure. Besides, while a closure s delegate is used for method search within closure code, property access is not direct (user has to write delegate.property anyway) - so having explicit  self  as first argument is probably okay. .
