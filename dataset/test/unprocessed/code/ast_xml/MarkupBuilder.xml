<Class>
    <Id>1118</Id>
    <Package>groovy.xml</Package>
    <ClassName>MarkupBuilder</ClassName>
    <SuperClass>BuilderSupport</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MarkupBuilder  /** 
 * A helper class for creating XML or HTML markup. The builder supports various 'pretty printed' formats. &lt;p&gt; Example: &lt;pre&gt;new MarkupBuilder().root { a( a1:'one' ) { b { mkp.yield( '3 &lt; 5' ) } c( a2:'two', 'blah' ) } }&lt;/pre&gt; Will print the following to System.out: &lt;pre&gt;&amp;lt;root&amp;gt; &amp;lt;a a1='one'&amp;gt; &amp;lt;b&amp;gt;3 &amp;amp;lt; 5&amp;lt;/b&amp;gt; &amp;lt;c a2='two'&amp;gt;blah&amp;lt;/c&amp;gt; &amp;lt;/a&amp;gt; &amp;lt;/root&amp;gt;&lt;/pre&gt; Notes: &lt;ul&gt; &lt;li&gt;&lt;code&gt;mkp&lt;/code&gt; is a special namespace used to escape away from the normal building mode of the builder and get access to helper markup methods such as 'yield' and 'yieldUnescaped'. See the javadoc for  {@link #getMkp()} for further details.&lt;/li&gt;&lt;li&gt;Note that tab, newline and carriage return characters are escaped within attributes, i.e. will become &amp;amp;#09;, &amp;amp;#10; and &amp;amp;#13; respectively&lt;/li&gt; &lt;/ul&gt;
 * @author &lt;a href="mailto:james@coredevelopers.net"&gt;James Strachan&lt;/a&gt;
 * @author Stefan Matthias Aust
 * @author &lt;a href="mailto:scottstirling@rcn.com"&gt;Scott Stirling&lt;/a&gt;
 * @author Paul King
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>out</FieldName>
            <FieldType>IndentPrinter</FieldType>
        </Field>
        <Field>
            <FieldName>nospace</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>state</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>nodeIsEmpty</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>useDoubleQuotes</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>omitNullAttributes</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>omitEmptyAttributes</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>expandEmptyElements</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>escapeAttributes</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>isAttrValue</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>useDoubleQuotes</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>isEscapeAttributes</MethodName>
            <MethodComment>/** 
 * Returns the escapeAttributes property value.
 * @return the escapeAttributes property value
 * @see #setEscapeAttributes(boolean)
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setEscapeAttributes</MethodName>
            <MethodComment>/** 
 * Defaults to true.&amp;#160;If set to false then you must escape any special characters within attribute values such as '&amp;amp;', '&amp;lt;', CR/LF, single and double quotes etc.&amp;#160;manually as needed. The builder will not guard against producing invalid XML when in this mode and the output may not be able to be parsed/round-tripped but it does give you full control when producing for instance HTML output.
 * @param escapeAttributes the new value
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>escapeAttributes</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>MarkupBuilder</MethodName>
            <MethodComment>/** 
 * Prints markup to System.out
 * @see IndentPrinter#IndentPrinter()
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>MarkupBuilder</MethodName>
            <MethodComment>/** 
 * Sends markup to the given PrintWriter
 * @param pw the PrintWriter to use
 * @see IndentPrinter#IndentPrinter(Writer)
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pw</ParamName>
                    <ParamType>PrintWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>MarkupBuilder</MethodName>
            <MethodComment>/** 
 * Sends markup to the given Writer but first wrapping it in a PrintWriter
 * @param writer the writer to use
 * @see IndentPrinter#IndentPrinter(Writer)
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>writer</ParamName>
                    <ParamType>Writer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>MarkupBuilder</MethodName>
            <MethodComment>/** 
 * Sends markup to the given IndentPrinter.  Use this option if you want to customize the indent used or provide your own IndentPrinter.
 * @param out the IndentPrinter to use
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>IndentPrinter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDoubleQuotes</MethodName>
            <MethodComment>/** 
 * Returns &lt;code&gt;true&lt;/code&gt; if attribute values are output with double quotes; &lt;code&gt;false&lt;/code&gt; if single quotes are used. By default, single quotes are used.
 * @return true if double quotes are used for attributes
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setDoubleQuotes</MethodName>
            <MethodComment>/** 
 * Sets whether the builder outputs attribute values in double quotes or single quotes.
 * @param useDoubleQuotes If this parameter is &lt;code&gt;true&lt;/code&gt;,double quotes are used; otherwise, single quotes are.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>useDoubleQuotes</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isOmitNullAttributes</MethodName>
            <MethodComment>/** 
 * Determine whether null attributes will appear in the produced markup.
 * @return &lt;code&gt;true&lt;/code&gt;, if null attributes will beremoved from the resulting markup.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setOmitNullAttributes</MethodName>
            <MethodComment>/** 
 * Allows null attributes to be removed from the generated markup.
 * @param omitNullAttributes if &lt;code&gt;true&lt;/code&gt;, nullattributes will not be included in the resulting markup. If &lt;code&gt;false&lt;/code&gt; null attributes will be included in the markup as empty strings regardless of the omitEmptyAttribute setting. Defaults to &lt;code&gt;false&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>omitNullAttributes</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isOmitEmptyAttributes</MethodName>
            <MethodComment>/** 
 * Determine whether empty attributes will appear in the produced markup.
 * @return &lt;code&gt;true&lt;/code&gt;, if empty attributes will beremoved from the resulting markup.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setOmitEmptyAttributes</MethodName>
            <MethodComment>/** 
 * Allows empty attributes to be removed from the generated markup.
 * @param omitEmptyAttributes if &lt;code&gt;true&lt;/code&gt;, emptyattributes will not be included in the resulting markup. Defaults to &lt;code&gt;false&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>omitEmptyAttributes</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isExpandEmptyElements</MethodName>
            <MethodComment>/** 
 * Whether empty elements are expanded from &amp;lt;tagName/&amp;gt; to &amp;lt;tagName&amp;gt;&amp;lt;/tagName&amp;gt;.
 * @return &lt;code&gt;true&lt;/code&gt;, if empty elements will be represented by an opening tagfollowed immediately by a closing tag.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setExpandEmptyElements</MethodName>
            <MethodComment>/** 
 * Whether empty elements are expanded from &lt;tagName/&gt; to &lt;tagName&gt;&lt;/tagName&gt;.
 * @param expandEmptyElements if &lt;code&gt;true&lt;/code&gt;, emptyelements will be represented by an opening tag followed immediately by a closing tag. Defaults to &lt;code&gt;false&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expandEmptyElements</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPrinter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>IndentPrinter</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setParent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>child</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMkp</MethodName>
            <MethodComment>/** 
 * Property that may be called from within your builder closure to access helper methods, namely  {@link MarkupBuilderHelper#yield(String)}, {@link MarkupBuilderHelper#yieldUnescaped(String)}, {@link MarkupBuilderHelper#pi(Map)}, {@link MarkupBuilderHelper#xmlDeclaration(Map)} and{@link MarkupBuilderHelper#comment(String)}.
 * @return this MarkupBuilder
 */
</MethodComment>
            <ReturnType>MarkupBuilderHelper</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pi</MethodName>
            <MethodComment>/** 
 * Produce an XML processing instruction in the output. For example: &lt;pre&gt; mkp.pi("xml-stylesheet":[href:"mystyle.css", type:"text/css"]) &lt;/pre&gt;
 * @param args a map with a single entry whose key is the name of theprocessing instruction and whose value is the attributes for the processing instruction.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Iterator&lt;Map.Entry&lt;String,Map&lt;String,Object&gt;&gt;&gt; [iterator=args.entrySet().iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>yield</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>escaping</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [theName=getName(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;toState;[1, theName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [theName=getName(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attributes</ParamName>
                    <ParamType>Map</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [theName=getName(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;toState;[1, theName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attributes</ParamName>
                    <ParamType>Map</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nodeCompleted</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;toState;[3, node]</InnerMethodInvoke>
                <InnerMethodInvoke>out;flush;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>print</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;print;[node == null ? "null" : node.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>escapeAttributeValue</MethodName>
            <MethodComment>/** 
 * Escapes a string so that it can be used directly as an XML attribute value.
 * @param value The string to escape.
 * @return A new string in which all characters that require escapinghave been replaced with the corresponding XML entities.
 * @see #escapeXmlValue(String,boolean)
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>escapeElementContent</MethodName>
            <MethodComment>/** 
 * Escapes a string so that it can be used directly in XML element content.
 * @param value The string to escape.
 * @return A new string in which all characters that require escapinghave been replaced with the corresponding XML entities.
 * @see #escapeXmlValue(String,boolean)
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>escapeXmlValue</MethodName>
            <MethodComment>/** 
 * Escapes a string so that it can be used in XML text successfully. It replaces the following characters with the corresponding XML entities: &lt;ul&gt; &lt;li&gt;&amp;amp; as &amp;amp;amp;&lt;/li&gt; &lt;li&gt;&amp;lt; as &amp;amp;lt;&lt;/li&gt; &lt;li&gt;&amp;gt; as &amp;amp;gt;&lt;/li&gt; &lt;/ul&gt; If the string is to be added as an attribute value, these characters are also escaped: &lt;ul&gt; &lt;li&gt;' as &amp;amp;apos;&lt;/li&gt; &lt;/ul&gt;
 * @param value       The string to escape.
 * @param isAttrValue &lt;code&gt;true&lt;/code&gt; if the string is to be usedas an attribute value, otherwise &lt;code&gt;false&lt;/code&gt;.
 * @return A new string in which all characters that require escapinghave been replaced with the corresponding XML entities.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isAttrValue</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ReplacingClosure</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isAttrValue</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>useDoubleQuotes</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ch</ParamName>
                    <ParamType>Character</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toState</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>next</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>