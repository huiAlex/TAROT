<Class>
    <Id>486</Id>
    <Package>org.codehaus.groovy.classgen.asm</Package>
    <ClassName>CallSiteWriter</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CallSiteWriter  /** 
 * This class represents non public API used by AsmClassGenerator. Don't use this class in your code
 * @author Jochen Theodorou
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>NAMES</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>NAMES</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BASIC</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>BASIC</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>sig</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>MOD_PRIVSS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MOD_PUBSS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>CALLSITE_ARRAY_NODE</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>GET_CALLSITE_METHOD</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CALLSITE_CLASS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CALLSITE_DESC</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GET_CALLSITE_DESC</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CALLSITE_ARRAY_CLASS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GET_CALLSITEARRAY_DESC</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CALLSITE_FIELD</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REF_CLASS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REF_DESC</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>METHOD_OO_DESC</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CREATE_CSA_METHOD</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CONSTRUCTOR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>callSites</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>callSiteArrayVarIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>controller</FieldName>
            <FieldType>WriterController</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getCreateArraySignature</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numberOfArguments</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CallSiteWriter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wc</ParamName>
                    <ParamType>WriterController</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [node=controller.getClassNode()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeSiteEntry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateCallSiteArray</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateGetCallSiteArray</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [visibility=(controller.getClassNode() instanceof InterfaceHelperClassNode) ? MOD_PUBSS : MOD_PRIVSS]</InnerVar>
                <InnerVar>MethodVisitor [mv=controller.getClassVisitor().visitMethod(visibility,GET_CALLSITE_METHOD,GET_CALLSITE_DESC,null,null)]</InnerVar>
                <InnerVar>Label [l0=new Label()]</InnerVar>
                <InnerVar>Label [l1=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller;setMethodVisitor;[mv]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETSTATIC, controller.getInternalClassName(), "$callSiteArray", "Ljava/lang/ref/SoftReference;"]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFNULL, l0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETSTATIC, controller.getInternalClassName(), "$callSiteArray", "Ljava/lang/ref/SoftReference;"]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, "java/lang/ref/SoftReference", "get", "()Ljava/lang/Object;", false]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[CHECKCAST, "org/codehaus/groovy/runtime/callsite/CallSiteArray"]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[DUP]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFNONNULL, l1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[l0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESTATIC, controller.getInternalClassName(), "$createCallSiteArray", "()Lorg/codehaus/groovy/runtime/callsite/CallSiteArray;", false]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[NEW, "java/lang/ref/SoftReference"]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[DUP]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESPECIAL, "java/lang/ref/SoftReference", "&lt;init&gt;", "(Ljava/lang/Object;)V", false]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[PUTSTATIC, controller.getInternalClassName(), "$callSiteArray", "Ljava/lang/ref/SoftReference;"]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[l1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, "org/codehaus/groovy/runtime/callsite/CallSiteArray", "array", "[Lorg/codehaus/groovy/runtime/callsite/CallSite;"]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateCreateCallSiteArray</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;String&gt; [callSiteInitMethods=new LinkedList&lt;String&gt;()]</InnerVar>
                <InnerVar>int [index=0]</InnerVar>
                <InnerVar>int [methodIndex=0]</InnerVar>
                <InnerVar>int [size=callSites.size()]</InnerVar>
                <InnerVar>int [maxArrayInit=5000]</InnerVar>
                <InnerVar>MethodVisitor [mv=controller.getClassVisitor().visitMethod(MOD_PRIVSS,CREATE_CSA_METHOD,GET_CALLSITEARRAY_DESC,null,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller;setMethodVisitor;[mv]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLdcInsn;[size]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[ANEWARRAY, "java/lang/String"]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[NEW, CALLSITE_ARRAY_CLASS]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[DUP]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getAcg();visitClassExpression;[new ClassExpression(controller.getClassNode())]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESPECIAL, CALLSITE_ARRAY_CLASS, "&lt;init&gt;", "(Ljava/lang/Class;[Ljava/lang/String;)V", false]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>allocateIndex</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>callSites;add;[name]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invokeSafe</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>safe</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unsafeMethod</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>safeMethod</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [method=unsafeMethod]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getMethodVisitor();visitMethodInsn;[INVOKEINTERFACE, CALLSITE_CLASS, method, METHOD_OO_DESC, true]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();replace;[ClassHelper.OBJECT_TYPE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareCallSite</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>int [index=allocateIndex(message)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitLdcInsn;[index]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[AALOAD]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareSiteAndReceiver</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>implicitThis</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;prepareSiteAndReceiver;[receiver, methodName, implicitThis, false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareSiteAndReceiver</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>implicitThis</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lhs</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompileStack [compileStack=controller.getCompileStack()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;prepareCallSite;[methodName]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;pushImplicitThis;[implicitThis]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;pushLHS;[lhs]</InnerMethodInvoke>
                <InnerMethodInvoke>receiver;visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();box;[]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;popLHS;[]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;popImplicitThis;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitBoxedArgument</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exp</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>exp;visit;[controller.getAcg()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeSingleArgumentCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>int [m1=operandStack.getStackLength()]</InnerVar>
                <InnerVar>int [m2=operandStack.getStackLength()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;prepareSiteAndReceiver;[receiver, message, false, controller.getCompileStack().isLHS()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;visitBoxedArgument;[arguments]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getMethodVisitor();visitMethodInsn;[INVOKEINTERFACE, "org/codehaus/groovy/runtime/callsite/CallSite", "call", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;replace;[ClassHelper.OBJECT_TYPE, m2 - m1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeGroovyObjectGetPropertySite</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>safe</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>implicitThis</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;prepareSiteAndReceiver;[receiver, methodName, implicitThis]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeSafe;[safe, "callGroovyObjectGetProperty", "callGroovyObjectGetPropertySafe"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeGetPropertySite</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>safe</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>implicitThis</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;prepareSiteAndReceiver;[receiver, methodName, implicitThis]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeSafe;[safe, "callGetProperty", "callGetPropertySafe"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeCallSite</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>safe</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>implicitThis</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>callCurrent</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>callStatic</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompileStack [compileStack=controller.getCompileStack()]</InnerVar>
                <InnerVar>boolean [constructor=message.equals(CONSTRUCTOR)]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>boolean [containsSpreadExpression=AsmClassGenerator.containsSpreadExpression(arguments)]</InnerVar>
                <InnerVar>int [numberOfArguments=containsSpreadExpression ? -1 : AsmClassGenerator.argumentSize(arguments)]</InnerVar>
                <InnerVar>int [operandsToReplace=1]</InnerVar>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>String [desc=getDescForParamNum(numberOfArguments)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;prepareSiteAndReceiver;[receiver, message, implicitThis]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;pushImplicitThis;[implicitThis]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;pushLHS;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();popLHS;[]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();popImplicitThis;[]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;replace;[ClassHelper.OBJECT_TYPE, operandsToReplace]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDescForParamNum</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numberOfArguments</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCallSites</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeCallSiteArrayInitializer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [classInternalName=BytecodeHelper.getClassInternalName(controller.getClassNode())]</InnerVar>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitInsn;[ACONST_NULL]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[PUTSTATIC, classInternalName, "$callSiteArray", "Ljava/lang/ref/SoftReference;"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasCallSiteUse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>