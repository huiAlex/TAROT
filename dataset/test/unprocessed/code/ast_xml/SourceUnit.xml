<Class>
    <Id>1204</Id>
    <Package>org.codehaus.groovy.control</Package>
    <ClassName>SourceUnit</ClassName>
    <SuperClass>ProcessingUnit</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SourceUnit  /** 
 * Provides an anchor for a single source unit (usually a script file) as it passes through the compiler system.
 * @author &lt;a href="mailto:cpoirier@dreaming.org"&gt;Chris Poirier&lt;/a&gt;
 * @author &lt;a href="mailto:b55r@sina.com"&gt;Bing Ran&lt;/a&gt;
 * @version $Id$
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>parserPlugin</FieldName>
            <FieldType>ParserPlugin</FieldType>
        </Field>
        <Field>
            <FieldName>source</FieldName>
            <FieldType>ReaderSource</FieldType>
        </Field>
        <Field>
            <FieldName>name</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>cst</FieldName>
            <FieldType>Reduction</FieldType>
        </Field>
        <Field>
            <FieldName>ast</FieldName>
            <FieldType>ModuleNode</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SourceUnit</MethodName>
            <MethodComment>/** 
 * Initializes the SourceUnit from existing machinery.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>ReaderSource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>flags</ParamName>
                    <ParamType>CompilerConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>loader</ParamName>
                    <ParamType>GroovyClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>er</ParamName>
                    <ParamType>ErrorCollector</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>SourceUnit</MethodName>
            <MethodComment>/** 
 * Initializes the SourceUnit from the specified file.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>CompilerConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>loader</ParamName>
                    <ParamType>GroovyClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>er</ParamName>
                    <ParamType>ErrorCollector</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>SourceUnit</MethodName>
            <MethodComment>/** 
 * Initializes the SourceUnit from the specified URL.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>URL</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>CompilerConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>loader</ParamName>
                    <ParamType>GroovyClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>er</ParamName>
                    <ParamType>ErrorCollector</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>SourceUnit</MethodName>
            <MethodComment>/** 
 * Initializes the SourceUnit for a string of source.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>CompilerConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>loader</ParamName>
                    <ParamType>GroovyClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>er</ParamName>
                    <ParamType>ErrorCollector</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment>/** 
 * Returns the name for the SourceUnit. This name shouldn't be used for controlling the SourceUnit, it is only for error messages
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCST</MethodName>
            <MethodComment>/** 
 * Returns the Concrete Syntax Tree produced during parse()ing.
 */
</MethodComment>
            <ReturnType>Reduction</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAST</MethodName>
            <MethodComment>/** 
 * Returns the Abstract Syntax Tree produced during convert()ing and expanded during later phases.
 */
</MethodComment>
            <ReturnType>ModuleNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>failedWithUnexpectedEOF</MethodName>
            <MethodComment>/** 
 * Convenience routine, primarily for use by the InteractiveShell, that returns true if parse() failed with an unexpected EOF.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isEofToken</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>token</ParamName>
                    <ParamType>antlr.Token</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment>/** 
 * A convenience routine to create a standalone SourceUnit on a String with defaults for almost everything that is configurable.
 */
</MethodComment>
            <ReturnType>SourceUnit</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompilerConfiguration [configuration=new CompilerConfiguration()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>configuration;setTolerance;[1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>create</MethodName>
            <MethodComment>/** 
 * A convenience routine to create a standalone SourceUnit on a String with defaults for almost everything that is configurable.
 */
</MethodComment>
            <ReturnType>SourceUnit</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tolerance</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompilerConfiguration [configuration=new CompilerConfiguration()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>configuration;setTolerance;[tolerance]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parse</MethodName>
            <MethodComment>/** 
 * Parses the source to a CST.  You can retrieve it with getCST().
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Reader [reader=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convert</MethodName>
            <MethodComment>/** 
 * Generates an AST from the CST.  You can retrieve it with getAST().
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [property=(String)AccessController.doPrivileged(new PrivilegedAction(){
  public Object run(){
    return System.getProperty("groovy.ast");
  }
}
)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>saveAsXML</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ast</ParamName>
                    <ParamType>ModuleNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>XStream [xstream=new XStream()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSample</MethodName>
            <MethodComment>/** 
 * Returns a sampling of the source at the specified line and column, of null if it is unavailable.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>line</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>janitor</ParamName>
                    <ParamType>Janitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [sample=null]</InnerVar>
                <InnerVar>String [text=source.getLine(line,janitor)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addException</MethodName>
            <MethodComment>/** 
 * This method adds an exception to the error collector. The Exception most likely has no line number attached to it. For this reason you should use this method sparingly. Prefer using addError for syntax errors or add an error to the  {@link ErrorCollector} directly by retrieving it with getErrorCollector().
 * @param e the exception that occurred
 * @throws CompilationFailedException on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Exception</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getErrorCollector();addException;[e, this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addError</MethodName>
            <MethodComment>/** 
 * This method adds a SyntaxException to the error collector. The exception should specify the line and column number of the error.  This method should be reserved for real errors in the syntax of the SourceUnit. If your error is not in syntax, and is a semantic error, or more general error, then use addException or use the error collector directly by retrieving it with getErrorCollector().
 * @param se the exception, which should have line and column information
 * @throws CompilationFailedException on error
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>se</ParamName>
                    <ParamType>SyntaxException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getErrorCollector();addError;[se, this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ReaderSource</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>