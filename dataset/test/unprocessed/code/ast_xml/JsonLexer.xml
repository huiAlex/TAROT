<Class>
    <Id>215</Id>
    <Package>groovy.json</Package>
    <ClassName>JsonLexer</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Iterator</SuperInterface>
        <SuperInterface>JsonToken</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>JsonLexer  /** 
 * The lexer reads JSON tokens in a streaming fashion from the underlying reader.
 * @author Guillaume Laforge
 * @since 1.8.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>SPACE</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>DOT</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>MINUS</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>PLUS</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>LOWER_E</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>UPPER_E</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>ZERO</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>NINE</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>p</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>reader</FieldName>
            <FieldType>LineColumnReader</FieldType>
        </Field>
        <Field>
            <FieldName>currentToken</FieldName>
            <FieldType>JsonToken</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getReader</MethodName>
            <MethodComment>/** 
 * Underlying reader from which to read the JSON tokens. This reader is an instance of &lt;code&gt;LineColumnReader&lt;/code&gt;, to keep track of line and column positions.
 */
</MethodComment>
            <ReturnType>LineColumnReader</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>JsonLexer</MethodName>
            <MethodComment>/** 
 * Instanciates a lexer with a reader from which to read JSON tokens. Under the hood, the reader is wrapped in a &lt;code&gt;LineColumnReader&lt;/code&gt;, for line and column information, unless it's already an instance of that class.
 * @param reader underlying reader
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>Reader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextToken</MethodName>
            <MethodComment>/** 
 * @return the next token from the stream
 */
</MethodComment>
            <ReturnType>JsonToken</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>throwJsonException</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>content</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>JsonTokenType</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unescape</MethodName>
            <MethodComment>/** 
 * Replace unicode escape and other control characters with real characters
 * @param input text
 * @return input text without the escaping
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readingConstant</MethodName>
            <MethodComment>/** 
 * When a constant token type is expected, check that the expected constant is read, and update the content of the token accordingly.
 * @param type the token type
 * @param token the token
 * @return the token updated with end column and text updated
 */
</MethodComment>
            <ReturnType>JsonToken</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>JsonTokenType</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>token</ParamName>
                    <ParamType>JsonToken</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>skipWhitespace</MethodName>
            <MethodComment>/** 
 * Skips all the whitespace characters and moves the cursor to the next non-space character.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasNext</MethodName>
            <MethodComment>/** 
 * Iterator method to know if another token follows, or if we've reached the end of the stream.
 * @return true if there are more tokens
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment>/** 
 * Iterator method to get the next token of the stream.
 * @return the next token
 */
</MethodComment>
            <ReturnType>JsonToken</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment>/** 
 * Method not implemented.
 * @throws UnsupportedOperationException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>