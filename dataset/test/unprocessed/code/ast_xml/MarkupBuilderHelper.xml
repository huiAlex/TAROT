<Class>
    <Id>860</Id>
    <Package>groovy.xml</Package>
    <ClassName>MarkupBuilderHelper</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MarkupBuilderHelper  /** 
 * A helper class for MarkupBuilder.
 * @author Paul King
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>builder</FieldName>
            <FieldType>MarkupBuilder</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>MarkupBuilderHelper</MethodName>
            <MethodComment>/** 
 * @param builder the builder to delegate to
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>MarkupBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>yield</MethodName>
            <MethodComment>/** 
 * Prints data in the body of the current tag, escaping XML entities. For example: &lt;code&gt;mkp.yield('5 &amp;lt; 7')&lt;/code&gt;
 * @param value an Object whose toString() representation is to be printed
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;yield;[value.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>yield</MethodName>
            <MethodComment>/** 
 * Prints data in the body of the current tag, escaping XML entities. For example: &lt;code&gt;mkp.yield('5 &amp;lt; 7')&lt;/code&gt;
 * @param value text to print
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder;yield;[value, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>yieldUnescaped</MethodName>
            <MethodComment>/** 
 * Print data in the body of the current tag.  Does not escape XML entities. For example: &lt;code&gt;mkp.yieldUnescaped('I am &amp;lt;i&amp;gt;happy&amp;lt;/i&amp;gt;!')&lt;/code&gt;.
 * @param value an Object whose toString() representation is to be printed
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;yieldUnescaped;[value.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>yieldUnescaped</MethodName>
            <MethodComment>/** 
 * Print data in the body of the current tag.  Does not escape XML entities. For example: &lt;code&gt;mkp.yieldUnescaped('I am &amp;lt;i&amp;gt;happy&amp;lt;/i&amp;gt;!')&lt;/code&gt;.
 * @param value the text or markup to print.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder;yield;[value, false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>comment</MethodName>
            <MethodComment>/** 
 * Produce a comment in the output. &lt;p&gt; &lt;code&gt;mkp.comment 'string'&lt;/code&gt; is equivalent to &lt;code&gt;mkp.yieldUnescaped '&amp;lt;!-- string --&amp;gt;'&lt;/code&gt;. To create an element with the name 'comment', you need to supply empty attributes, e.g.: &lt;pre&gt; comment('hello1') &lt;/pre&gt; or &lt;pre&gt; mkp.comment('hello1') &lt;/pre&gt; will produce: &lt;pre&gt; &amp;lt;!-- hello1 --&amp;gt; &lt;/pre&gt; while: &lt;pre&gt; comment('hello2', [:]) &lt;/pre&gt; will produce: &lt;pre&gt; &amp;lt;comment&amp;gt;hello2&amp;lt;/comment&amp;gt; &lt;/pre&gt;
 * @param value the text within the comment.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;yieldUnescaped;["&lt;!-- " + value + " --&gt;"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>xmlDeclaration</MethodName>
            <MethodComment>/** 
 * Produce an XML declaration in the output. For example: &lt;pre&gt; mkp.xmlDeclaration(version:'1.0') &lt;/pre&gt;
 * @param args the attributes for the declaration
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,Map&lt;String,Object&gt;&gt; [map=new HashMap&lt;String,Map&lt;String,Object&gt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>map;put;["xml", args]</InnerMethodInvoke>
                <InnerMethodInvoke>null;pi;[map]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pi</MethodName>
            <MethodComment>/** 
 * Produce an XML processing instruction in the output. For example: &lt;pre&gt; mkp.pi("xml-stylesheet":[href:"mystyle.css", type:"text/css"]) &lt;/pre&gt;
 * @param args a map with a single entry whose key is the name of theprocessing instruction and whose value is the attributes for the processing instruction.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder;pi;[args]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>