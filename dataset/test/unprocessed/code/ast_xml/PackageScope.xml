<Class>
    <Id>1062</Id>
    <Package>groovy.transform</Package>
    <ClassName>PackageScope</ClassName>
    <ClassComment>PackageScope  /** 
 * Annotation used for turning off Groovy's auto visibility conventions. By default, Groovy automatically turns package protected fields into properties and makes package protected methods, constructors and classes public. This annotation allows this feature to be turned off and revert back to Java behavior if needed. Place it on classes, fields, constructors or methods of interest as follows: &lt;pre&gt; {@code @}PackageScope class Bar {      // package protected {@code @}PackageScope int field    // package protected; not a property {@code @}PackageScope method(){}   // package protected } &lt;/pre&gt; or for greater control, at the class level with one or more &lt;code&gt;PackageScopeTarget&lt;/code&gt; values: &lt;pre&gt; import static groovy.transform.PackageScopeTarget. {@code @}PackageScope([CLASS, FIELDS]) class Foo {              // class will have package protected scope int field1, field2   // both package protected def method(){}       // public } {@code @}PackageScope(METHODS) class Bar {         // public int field       // treated as a property def method1(){} // package protected def method2(){} // package protected } &lt;/pre&gt; This transformation is not frequently needed but can be useful in certain testing scenarios or when using a third-party library or framework which relies upon package scoping.
 * @author Paul King
 * @since 1.8.0
 */
</ClassComment>
    <FieldList/>
    <MethodList/>
</Class>