<Class>
    <Id>1179</Id>
    <Package>org.codehaus.groovy.transform.trait</Package>
    <ClassName>TraitASTTransformation</ClassName>
    <SuperClass>AbstractASTTransformation</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>CompilationUnitAware</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TraitASTTransformation  /** 
 * Handles generation of code for the @Trait annotation. A class annotated with @Trait will generate, instead: &lt;ul&gt; &lt;li&gt;an &lt;i&gt;interface&lt;/i&gt; with the same name&lt;/li&gt; &lt;li&gt;an utility inner class that will be used by the compiler to handle the trait&lt;/li&gt; &lt;/ul&gt;
 * @author Cedric Champeau
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DO_DYNAMIC</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>POST_TYPECHECKING_REPLACEMENT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>INVOKERHELPER_CLASSNODE</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>OVERRIDE_CLASSNODE</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>unit</FieldName>
            <FieldType>SourceUnit</FieldType>
        </Field>
        <Field>
            <FieldName>compilationUnit</FieldName>
            <FieldType>CompilationUnit</FieldType>
        </Field>
        <Field>
            <FieldName>sourceUnit</FieldName>
            <FieldType>SourceUnit</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nodes</ParamName>
                    <ParamType>ASTNode[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AnnotatedNode [parent=(AnnotatedNode)nodes[1]]</InnerVar>
                <InnerVar>AnnotationNode [anno=(AnnotationNode)nodes[0]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;init;[nodes, source]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateMethodsWithDefaultArgs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DefaultArgsMethodsAdder [adder=new DefaultArgsMethodsAdder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>adder;addDefaultParameterMethods;[cNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkExtendsClause</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [superClass=cNode.getSuperClass()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceExtendsByImplements</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [superClass=cNode.getUnresolvedSuperClass()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resolveScope</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>VariableScopeVisitor [scopeVisitor=new VariableScopeVisitor(unit)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>scopeVisitor;visitClass;[cNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkNoConstructor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createHelperClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [helper=new InnerClassNode(cNode,Traits.helperClassName(cNode),ACC_PUBLIC | ACC_STATIC | ACC_ABSTRACT| ACC_SYNTHETIC,ClassHelper.OBJECT_TYPE,ClassNode.EMPTY_ARRAY,null)]</InnerVar>
                <InnerVar>MethodNode [initializer=createInitMethod(false,cNode,helper)]</InnerVar>
                <InnerVar>MethodNode [staticInitializer=createInitMethod(true,cNode,helper)]</InnerVar>
                <InnerVar>List&lt;FieldNode&gt; [fields=new ArrayList&lt;FieldNode&gt;()]</InnerVar>
                <InnerVar>Set&lt;String&gt; [fieldNames=new HashSet&lt;String&gt;()]</InnerVar>
                <InnerVar>ClassNode [fieldHelper=null]</InnerVar>
                <InnerVar>List&lt;MethodNode&gt; [methods=new ArrayList&lt;MethodNode&gt;(cNode.getMethods())]</InnerVar>
                <InnerVar>List&lt;MethodNode&gt; [nonPublicAPIMethods=new LinkedList&lt;MethodNode&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cNode;setModifiers;[ACC_PUBLIC | ACC_INTERFACE | ACC_ABSTRACT]</InnerMethodInvoke>
                <InnerMethodInvoke>null;checkInnerClasses;[cNode]</InnerMethodInvoke>
                <InnerMethodInvoke>null;generatePropertyMethods;[cNode]</InnerMethodInvoke>
                <InnerMethodInvoke>cNode.getProperties();clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;copyClassAnnotations;[cNode, helper]</InnerMethodInvoke>
                <InnerMethodInvoke>null;registerASTTranformations;[helper]</InnerMethodInvoke>
                <InnerMethodInvoke>unit.getAST();addClass;[helper]</InnerMethodInvoke>
                <InnerMethodInvoke>null;resolveScope;[helper]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createInitMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isStatic</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>helper</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodNode [initializer=new MethodNode(isStatic ? Traits.STATIC_INIT_METHOD : Traits.INIT_METHOD,ACC_STATIC | ACC_PUBLIC | ACC_SYNTHETIC,ClassHelper.VOID_TYPE,new Parameter[]{createSelfParameter(cNode,isStatic)},ClassNode.EMPTY_ARRAY,new BlockStatement())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>helper;addMethod;[initializer]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerASTTranformations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>helper</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ASTTransformationCollectorCodeVisitor [collector=new ASTTransformationCollectorCodeVisitor(unit,compilationUnit.getTransformLoader())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>collector;visitClass;[helper]</InnerMethodInvoke>
                <InnerMethodInvoke>compilationUnit;addPhaseOperation;[new CompilationUnit.PrimaryClassNodeOperation(){
  @Override public void call(  final SourceUnit source,  final GeneratorContext context,  final ClassNode classNode) throws CompilationFailedException {
    if (classNode == helper) {
      PostTypeCheckingExpressionReplacer replacer=new PostTypeCheckingExpressionReplacer(source);
      replacer.visitClass(helper);
    }
  }
}
, CompilePhase.INSTRUCTION_SELECTION.getPhaseNumber()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>GeneratorContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copyClassAnnotations</MethodName>
            <MethodComment>/** 
 * Copies annotation from the trait to the helper, excluding the trait annotation itself
 * @param cNode the trait class node
 * @param helper the helper class node
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>helper</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;AnnotationNode&gt; [annotations=cNode.getAnnotations()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkInnerClasses</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Iterator&lt;InnerClassNode&gt; [it=cNode.getInnerClasses()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generatePropertyMethods</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processProperty</MethodName>
            <MethodComment>/** 
 * Mostly copied from the  {@link Verifier} class but does *not* generate bytecode
 * @param cNode
 * @param node
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>PropertyNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=node.getName()]</InnerVar>
                <InnerVar>FieldNode [field=node.getField()]</InnerVar>
                <InnerVar>int [propNodeModifiers=node.getModifiers()]</InnerVar>
                <InnerVar>String [getterName="get" + Verifier.capitalize(name)]</InnerVar>
                <InnerVar>String [setterName="set" + Verifier.capitalize(name)]</InnerVar>
                <InnerVar>Statement [getterBlock=node.getGetterBlock()]</InnerVar>
                <InnerVar>Statement [setterBlock=node.getSetterBlock()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>methodNeedsReplacement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>m</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processField</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>FieldNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>initializer</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>staticInitializer</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldHelper</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trait</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>knownFields</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [initialExpression=field.getInitialExpression()]</InnerVar>
                <InnerVar>MethodNode [selectedMethod=field.isStatic() ? staticInitializer : initializer]</InnerVar>
                <InnerVar>String [dummyFieldName=(field.isStatic() ? Traits.STATIC_FIELD_PREFIX : Traits.FIELD_PREFIX) + (field.isPublic() ? Traits.PUBLIC_FIELD_PREFIX : Traits.PRIVATE_FIELD_PREFIX) + Traits.remappedFieldName(field.getOwner(),field.getName())]</InnerVar>
                <InnerVar>FieldNode [dummyField=new FieldNode(dummyFieldName,ACC_STATIC | ACC_PUBLIC | ACC_FINAL| ACC_SYNTHETIC,field.getOriginType(),fieldHelper,null)]</InnerVar>
                <InnerVar>List&lt;AnnotationNode&gt; [copied=new LinkedList&lt;AnnotationNode&gt;()]</InnerVar>
                <InnerVar>List&lt;AnnotationNode&gt; [notCopied=new LinkedList&lt;AnnotationNode&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fieldHelper;addMethod;[Traits.helperSetterName(field), ACC_PUBLIC | ACC_ABSTRACT, field.getOriginType(), new Parameter[]{new Parameter(field.getOriginType(),"val")}, ClassNode.EMPTY_ARRAY, null]</InnerMethodInvoke>
                <InnerMethodInvoke>fieldHelper;addMethod;[Traits.helperGetterName(field), ACC_PUBLIC | ACC_ABSTRACT, field.getOriginType(), Parameter.EMPTY_ARRAY, ClassNode.EMPTY_ARRAY, null]</InnerMethodInvoke>
                <InnerMethodInvoke>GeneralUtils;copyAnnotatedNodeAnnotations;[field, copied, notCopied]</InnerMethodInvoke>
                <InnerMethodInvoke>dummyField;addAnnotations;[copied]</InnerMethodInvoke>
                <InnerMethodInvoke>fieldHelper;addField;[dummyField]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>traitClass</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodNode</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldHelper</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>knownFields</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Parameter[] [initialParams=methodNode.getParameters()]</InnerVar>
                <InnerVar>Parameter[] [newParams=new Parameter[initialParams.length + 1]]</InnerVar>
                <InnerVar>int [mod=methodNode.isPrivate() ? ACC_PRIVATE : ACC_PUBLIC]</InnerVar>
                <InnerVar>MethodNode [mNode=new MethodNode(methodNode.getName(),mod | ACC_STATIC,methodNode.getReturnType(),newParams,methodNode.getExceptions(),processBody(new VariableExpression(newParams[0]),methodNode,methodNode.getCode(),traitClass,fieldHelper,knownFields))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;arraycopy;[initialParams, 0, newParams, 1, initialParams.length]</InnerMethodInvoke>
                <InnerMethodInvoke>mNode;setSourcePosition;[methodNode]</InnerMethodInvoke>
                <InnerMethodInvoke>mNode;addAnnotations;[filterAnnotations(methodNode.getAnnotations())]</InnerMethodInvoke>
                <InnerMethodInvoke>mNode;setGenericsTypes;[methodNode.getGenericsTypes()]</InnerMethodInvoke>
                <InnerMethodInvoke>methodNode;setCode;[null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>filterAnnotations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AnnotationNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotations</ParamName>
                    <ParamType>AnnotationNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;AnnotationNode&gt; [result=new ArrayList&lt;AnnotationNode&gt;(annotations.size())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createSelfParameter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Parameter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>traitClass</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isStatic</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [rawType=traitClass.getPlainNodeReference()]</InnerVar>
                <InnerVar>ClassNode [type=createReceiverType(isStatic,rawType)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createReceiverType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isStatic</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rawType</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [type]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processBody</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>thisObject</ParamName>
                    <ParamType>VariableExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodNode</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>code</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trait</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldHelper</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>knownFields</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NAryOperationRewriter [operationRewriter=new NAryOperationRewriter(unit,knownFields)]</InnerVar>
                <InnerVar>SuperCallTraitTransformer [superTrn=new SuperCallTraitTransformer(unit)]</InnerVar>
                <InnerVar>TraitReceiverTransformer [trn=new TraitReceiverTransformer(thisObject,unit,trait,fieldHelper,knownFields)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>code;visit;[operationRewriter]</InnerMethodInvoke>
                <InnerMethodInvoke>code;visit;[superTrn]</InnerMethodInvoke>
                <InnerMethodInvoke>code;visit;[trn]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCompilationUnit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>CompilationUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addDefaultParameterMethods</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setClassNode;[node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PostTypeCheckingExpressionReplacer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sourceUnit</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSourceUnit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SourceUnit</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transform</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exp</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [replacement=exp.getNodeMetaData(TraitASTTransformation.POST_TYPECHECKING_REPLACEMENT)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>