<Class>
    <Id>750</Id>
    <Package>org.codehaus.groovy.tools</Package>
    <ClassName>FileSystemCompiler</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>FileSystemCompiler  /** 
 * Command-line compiler (aka. &lt;tt&gt;groovyc&lt;/tt&gt;).
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>unit</FieldName>
            <FieldType>CompilationUnit</FieldType>
        </Field>
        <Field>
            <FieldName>displayStackTraceOnError</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>FileSystemCompiler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>CompilerConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ConfigurationException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>FileSystemCompiler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>CompilerConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cu</ParamName>
                    <ParamType>CompilationUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ConfigurationException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>paths</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>unit;addSources;[paths]</InnerMethodInvoke>
                <InnerMethodInvoke>unit;compile;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>files</ParamName>
                    <ParamType>File[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>unit;addSources;[files]</InnerMethodInvoke>
                <InnerMethodInvoke>unit;compile;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>displayHelp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>options</ParamName>
                    <ParamType>Options</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>HelpFormatter [formatter=new HelpFormatter()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>formatter;printHelp;[80, "groovyc [options] &lt;source-files&gt;", "options:", options, ""]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>displayVersion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [version=GroovySystem.getVersion()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.err;println;["Groovy compiler version " + version]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;["Copyright 2003-2013 The Codehaus. http://groovy.codehaus.org/"]</InnerMethodInvoke>
                <InnerMethodInvoke>System.err;println;[""]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkFiles</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filenames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [errors=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validateFiles</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filenames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>commandLineCompile</MethodName>
            <MethodComment>/** 
 * Same as main(args) except that exceptions are thrown out instead of causing the VM to exit.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;commandLineCompile;[args, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>commandLineCompile</MethodName>
            <MethodComment>/** 
 * Same as main(args) except that exceptions are thrown out instead of causing the VM to exit and the lookup for .groovy files can be controlled
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lookupUnnamedFiles</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Options [options=createCompilationOptions()]</InnerVar>
                <InnerVar>CommandLineParser [cliParser=new GroovyInternalPosixParser()]</InnerVar>
                <InnerVar>CommandLine [cli]</InnerVar>
                <InnerVar>CompilerConfiguration [configuration=generateCompilerConfigurationFromOptions(cli)]</InnerVar>
                <InnerVar>String[] [filenames=generateFileNamesFromOptions(cli)]</InnerVar>
                <InnerVar>boolean [fileNameErrors=filenames == null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>main</MethodName>
            <MethodComment>/** 
 * Primary entry point for compiling from the command line (using the groovyc script). &lt;p&gt; If calling inside a process and you don't want the JVM to exit on an error call commandLineCompile(String[]), which this method simply wraps
 * @param args command line arguments
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;commandLineCompileWithErrorHandling;[args, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>commandLineCompileWithErrorHandling</MethodName>
            <MethodComment>/** 
 * Primary entry point for compiling from the command line (using the groovyc script). &lt;p&gt; If calling inside a process and you don't want the JVM to exit on an error call commandLineCompile(String[]), which this method simply wraps
 * @param args               command line arguments
 * @param lookupUnnamedFiles do a lookup for .groovy files not part ofthe given list of files to compile
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lookupUnnamedFiles</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doCompilation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>CompilerConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>CompilationUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filenames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;doCompilation;[configuration, unit, filenames, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doCompilation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>CompilerConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>CompilationUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filenames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lookupUnnamedFiles</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>File [tmpDir=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadGroovySource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>URL</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filename</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>MalformedURLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateFileNamesFromOptions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cli</ParamName>
                    <ParamType>CommandLine</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [filenames=cli.getArgs()]</InnerVar>
                <InnerVar>List&lt;String&gt; [fileList=new ArrayList&lt;String&gt;(filenames.length)]</InnerVar>
                <InnerVar>boolean [errors=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateCompilerConfigurationFromOptions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CompilerConfiguration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cli</ParamName>
                    <ParamType>CommandLine</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompilerConfiguration [configuration=new CompilerConfiguration()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createCompilationOptions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Options</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Options [options=new Options()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>options;addOption;[OptionBuilder.hasArg().withArgName("path").withDescription("Specify where to find the class files - must be first argument").create("classpath")]</InnerMethodInvoke>
                <InnerMethodInvoke>options;addOption;[OptionBuilder.withLongOpt("classpath").hasArg().withArgName("path").withDescription("Aliases for '-classpath'").create("cp")]</InnerMethodInvoke>
                <InnerMethodInvoke>options;addOption;[OptionBuilder.withLongOpt("sourcepath").hasArg().withArgName("path").withDescription("Specify where to find the source files").create()]</InnerMethodInvoke>
                <InnerMethodInvoke>options;addOption;[OptionBuilder.withLongOpt("temp").hasArg().withArgName("temp").withDescription("Specify temporary directory").create()]</InnerMethodInvoke>
                <InnerMethodInvoke>options;addOption;[OptionBuilder.withLongOpt("encoding").hasArg().withArgName("encoding").withDescription("Specify the encoding of the user class files").create()]</InnerMethodInvoke>
                <InnerMethodInvoke>options;addOption;[OptionBuilder.hasArg().withDescription("Specify where to place generated class files").create('d')]</InnerMethodInvoke>
                <InnerMethodInvoke>options;addOption;[OptionBuilder.withLongOpt("help").withDescription("Print a synopsis of standard options").create('h')]</InnerMethodInvoke>
                <InnerMethodInvoke>options;addOption;[OptionBuilder.withLongOpt("version").withDescription("Print the version").create('v')]</InnerMethodInvoke>
                <InnerMethodInvoke>options;addOption;[OptionBuilder.withLongOpt("exception").withDescription("Print stack trace on error").create('e')]</InnerMethodInvoke>
                <InnerMethodInvoke>options;addOption;[OptionBuilder.withLongOpt("jointCompilation").withDescription("Attach javac compiler to compile .java files").create('j')]</InnerMethodInvoke>
                <InnerMethodInvoke>options;addOption;[OptionBuilder.withLongOpt("basescript").hasArg().withArgName("class").withDescription("Base class name for scripts (must derive from Script)").create('b')]</InnerMethodInvoke>
                <InnerMethodInvoke>options;addOption;[OptionBuilder.withArgName("property=value").withValueSeparator().hasArgs(2).withDescription("name-value pairs to pass to javac").create("J")]</InnerMethodInvoke>
                <InnerMethodInvoke>options;addOption;[OptionBuilder.withArgName("flag").hasArg().withDescription("passed to javac for joint compilation").create("F")]</InnerMethodInvoke>
                <InnerMethodInvoke>options;addOption;[OptionBuilder.withLongOpt("indy").withDescription("enables compilation using invokedynamic").create()]</InnerMethodInvoke>
                <InnerMethodInvoke>options;addOption;[OptionBuilder.withLongOpt("configscript").hasArg().withDescription("A script for tweaking the configuration options").create()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createTempDir</MethodName>
            <MethodComment>/** 
 * Creates a temporary directory in the default temporary directory (as specified by the system property &lt;i&gt;java.io.tmpdir&lt;/i&gt;.
 * @deprecated Use {@link DefaultGroovyStaticMethods#createTempDir(java.io.File,String,String)} instead.
 */
</MethodComment>
            <ReturnType>File</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deleteRecursive</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>