<Class>
    <Id>304</Id>
    <Package>org.codehaus.groovy.runtime</Package>
    <ClassName>ReverseListIterator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Iterator</SuperInterface>
        <SuperInterface>T</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ReverseListIterator  /** 
 * A reverse iterator over a list. Utilizes the  {@link ListIterator}obtained from the provided  {@link List} and converts it to an{@link Iterator} that efficiently traverses the &lt;code&gt;List&lt;/code&gt; inreverse. The fail-fast semantics of this iterator are the same as the semantics of the underlying &lt;code&gt;ListIterator&lt;/code&gt;.
 * @author Mike Dillon
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>delegate</FieldName>
            <FieldType>ListIterator</FieldType>
        </Field>
        <Field>
            <FieldName>delegate</FieldName>
            <FieldType>T</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ReverseListIterator</MethodName>
            <MethodComment>/** 
 * Constructs a new &lt;code&gt;ReverseListIterator&lt;/code&gt; for the provided list.
 * @param list the list to iterate over in reverse
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>list</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasNext</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>delegate;remove;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>