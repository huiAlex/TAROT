<Class>
    <Id>580</Id>
    <Package>org.codehaus.groovy.ast.expr</Package>
    <ClassName>Expression</ClassName>
    <SuperClass>AnnotatedNode</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Expression  /** 
 * Represents a base class for expressions which evaluate as an object
 * @author &lt;a href="mailto:james@coredevelopers.net"&gt;James Strachan&lt;/a&gt;
 * @version $Revision$
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>type</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>transformExpression</MethodName>
            <MethodComment>/** 
 * Return a copy of the expression calling the transformer on any nested expressions 
 * @param transformer
 */
</MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transformer</ParamName>
                    <ParamType>ExpressionTransformer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformExpressions</MethodName>
            <MethodComment>/** 
 * Transforms the list of expressions
 * @return a new list of transformed expressions
 */
</MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expressions</ParamName>
                    <ParamType>? extends Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transformer</ParamName>
                    <ParamType>ExpressionTransformer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Expression&gt; [list=new ArrayList&lt;Expression&gt;(expressions.size())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformExpressions</MethodName>
            <MethodComment>/** 
 * Transforms the list of expressions, and checks that all transformed expressions have the given type.
 * @return a new list of transformed expressions
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expressions</ParamName>
                    <ParamType>? extends Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transformer</ParamName>
                    <ParamType>ExpressionTransformer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>transformedType</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;T&gt; [list=new ArrayList&lt;T&gt;(expressions.size())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>