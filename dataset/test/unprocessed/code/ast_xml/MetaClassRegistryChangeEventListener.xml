<Class>
    <Id>667</Id>
    <Package>groovy.lang</Package>
    <ClassName>MetaClassRegistryChangeEventListener</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>EventListener</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MetaClassRegistryChangeEventListener  /** 
 * A listener called whenever a constant MetaClass is set, removed or replaced. 
 * @see groovy.lang.MetaClassRegistry
 * @see groovy.lang.MetaClassRegistryChangeEvent
 * @author &lt;a href="mailto:blackdrag@gmx.org"&gt;Jochen Theodorou&lt;/a&gt;
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>updateConstantMetaClass</MethodName>
            <MethodComment>/** 
 * Called when the a constant MetaClass is updated. If the new MetaClass is null, then the MetaClass is removed. Be careful, while this method is executed other updates may happen. If you want this method thread safe, you have to take care of that by yourself.
 * @param cmcu - the change event
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cmcu</ParamName>
                    <ParamType>MetaClassRegistryChangeEvent</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>