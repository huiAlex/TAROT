<Class>
    <Id>81</Id>
    <Package>groovy.util</Package>
    <ClassName>AntBuilderLocator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Locator</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AntBuilderLocator  /** 
 * Would be nice to retrieve location information (from AST?). In a first time, without info
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
        <Field>
            <FieldName>project</FieldName>
            <FieldType>Project</FieldType>
        </Field>
        <Field>
            <FieldName>antXmlContext</FieldName>
            <FieldType>AntXMLContext</FieldType>
        </Field>
        <Field>
            <FieldName>antElementHandler</FieldName>
            <FieldType>ProjectHelper2.ElementHandler</FieldType>
        </Field>
        <Field>
            <FieldName>antTargetHandler</FieldName>
            <FieldType>ProjectHelper2.TargetHandler</FieldType>
        </Field>
        <Field>
            <FieldName>collectorTarget</FieldName>
            <FieldType>Target</FieldType>
        </Field>
        <Field>
            <FieldName>implicitTarget</FieldName>
            <FieldType>Target</FieldType>
        </Field>
        <Field>
            <FieldName>definingTarget</FieldName>
            <FieldType>Target</FieldType>
        </Field>
        <Field>
            <FieldName>lastCompletedNode</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>insideTask</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>saveStreams</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>streamCount</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>savedIn</FieldName>
            <FieldType>InputStream</FieldType>
        </Field>
        <Field>
            <FieldName>savedErr</FieldName>
            <FieldType>PrintStream</FieldType>
        </Field>
        <Field>
            <FieldName>savedOut</FieldName>
            <FieldType>PrintStream</FieldType>
        </Field>
        <Field>
            <FieldName>demuxInputStream</FieldName>
            <FieldType>DemuxInputStream</FieldType>
        </Field>
        <Field>
            <FieldName>demuxOutputStream</FieldName>
            <FieldType>DemuxOutputStream</FieldType>
        </Field>
        <Field>
            <FieldName>demuxErrorStream</FieldName>
            <FieldType>DemuxOutputStream</FieldType>
        </Field>
        <Field>
            <FieldName>savedProjectInputStream</FieldName>
            <FieldType>InputStream</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>AntBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>AntBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>project</ParamName>
                    <ParamType>Project</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>AntBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>project</ParamName>
                    <ParamType>Project</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>owningTarget</ParamName>
                    <ParamType>Target</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>collectorTarget;setProject;[project]</InnerMethodInvoke>
                <InnerMethodInvoke>antXmlContext;setCurrentTarget;[collectorTarget]</InnerMethodInvoke>
                <InnerMethodInvoke>antXmlContext;setLocator;[new AntBuilderLocator()]</InnerMethodInvoke>
                <InnerMethodInvoke>antXmlContext;setCurrentTargets;[new HashMap&lt;String,Target&gt;()]</InnerMethodInvoke>
                <InnerMethodInvoke>implicitTarget;setProject;[project]</InnerMethodInvoke>
                <InnerMethodInvoke>implicitTarget;setName;[""]</InnerMethodInvoke>
                <InnerMethodInvoke>antXmlContext;setImplicitTarget;[implicitTarget]</InnerMethodInvoke>
                <InnerMethodInvoke>project;addDataTypeDefinition;["fileScanner", FileScanner.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>AntBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parentTask</ParamName>
                    <ParamType>Task</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>UnknownElement [ue=new UnknownElement(parentTask.getTaskName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ue;setProject;[parentTask.getProject()]</InnerMethodInvoke>
                <InnerMethodInvoke>ue;setTaskType;[parentTask.getTaskType()]</InnerMethodInvoke>
                <InnerMethodInvoke>ue;setTaskName;[parentTask.getTaskName()]</InnerMethodInvoke>
                <InnerMethodInvoke>ue;setLocation;[parentTask.getLocation()]</InnerMethodInvoke>
                <InnerMethodInvoke>ue;setOwningTarget;[parentTask.getOwningTarget()]</InnerMethodInvoke>
                <InnerMethodInvoke>ue;setRuntimeConfigurableWrapper;[parentTask.getRuntimeConfigurableWrapper()]</InnerMethodInvoke>
                <InnerMethodInvoke>parentTask.getRuntimeConfigurableWrapper();setProxy;[ue]</InnerMethodInvoke>
                <InnerMethodInvoke>antXmlContext;pushWrapper;[parentTask.getRuntimeConfigurableWrapper()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProject</MethodName>
            <MethodComment>/** 
 * # Gets the Ant project in which the tasks are executed
 * @return the project
 */
</MethodComment>
            <ReturnType>Project</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAntXmlContext</MethodName>
            <MethodComment>/** 
 * Gets the xml context of Ant used while creating tasks
 * @return the Ant xml context
 */
</MethodComment>
            <ReturnType>AntXMLContext</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSaveStreams</MethodName>
            <MethodComment>/** 
 * Whether stdin, stdout, stderr streams are saved.
 * @return true if we are saving streams
 * @see #setSaveStreams(boolean)
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSaveStreams</MethodName>
            <MethodComment>/** 
 * Indicates that we save stdin, stdout, stderr and replace them while AntBuilder is executing tasks with streams that funnel the normal streams into Ant's logs.
 * @param saveStreams set to false to disable this behavior
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>saveStreams</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createProject</MethodName>
            <MethodComment>/** 
 * @return Factory method to create new Project instances
 */
</MethodComment>
            <ReturnType>Project</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Project [project=new Project()]</InnerVar>
                <InnerVar>ProjectHelper [helper=ProjectHelper.getProjectHelper()]</InnerVar>
                <InnerVar>BuildLogger [logger=new NoBannerLogger()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>project;addReference;[ProjectHelper.PROJECTHELPER_REFERENCE, helper]</InnerMethodInvoke>
                <InnerMethodInvoke>helper.getImportStack();addElement;["AntBuilder"]</InnerMethodInvoke>
                <InnerMethodInvoke>logger;setMessageOutputLevel;[org.apache.tools.ant.Project.MSG_INFO]</InnerMethodInvoke>
                <InnerMethodInvoke>logger;setOutputPrintStream;[System.out]</InnerMethodInvoke>
                <InnerMethodInvoke>logger;setErrorPrintStream;[System.err]</InnerMethodInvoke>
                <InnerMethodInvoke>project;addBuildListener;[logger]</InnerMethodInvoke>
                <InnerMethodInvoke>project;init;[]</InnerMethodInvoke>
                <InnerMethodInvoke>project;getBaseDir;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setParent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>child</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doInvokeMethod</MethodName>
            <MethodComment>/** 
 * We don't want to return the node as created in  {@link #createNode(Object,Map,Object)}but the one made ready by  {@link #nodeCompleted(Object,Object)}
 * @see groovy.util.BuilderSupport#doInvokeMethod(java.lang.String,java.lang.Object,java.lang.Object)
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nodeCompleted</MethodName>
            <MethodComment>/** 
 * Determines, when the ANT Task that is represented by the "node" should perform. Node must be an ANT Task or no "perform" is called. If node is an ANT Task, it performs right after complete construction. If node is nested in a TaskContainer, calling "perform" is delegated to that TaskContainer.
 * @param parent note: null when node is root
 * @param node   the node that now has all its children applied
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>antElementHandler;onEndElement;[null, null, antXmlContext]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>performTask</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>task</ParamName>
                    <ParamType>Task</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Throwable [reason=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tagName</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [task=createNode(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setText;[task, value.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attributes</ParamName>
                    <ParamType>Map</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [task=createNode(name,attributes)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setText;[task, value.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildAttributes</MethodName>
            <MethodComment>/** 
 * Builds an  {@link Attributes} from a {@link Map}
 * @param attributes the attributes to wrap
 * @return the wrapped attributes
 */
</MethodComment>
            <ReturnType>Attributes</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>attributes</ParamName>
                    <ParamType>Map</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AttributesImpl [attr=new AttributesImpl()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attributes</ParamName>
                    <ParamType>Map</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Attributes [attrs=buildAttributes(attributes)]</InnerVar>
                <InnerVar>String [tagName=name.toString()]</InnerVar>
                <InnerVar>String [ns=""]</InnerVar>
                <InnerVar>RuntimeConfigurable [wrapper=antXmlContext.getWrapperStack().lastElement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onDefineTarget</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Target</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>attrs</ParamName>
                    <ParamType>Attributes</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tagName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ns</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Target [target=new Target()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>target;setProject;[project]</InnerMethodInvoke>
                <InnerMethodInvoke>target;setLocation;[new Location(antXmlContext.getLocator())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onStartTarget</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Target</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>attrs</ParamName>
                    <ParamType>Attributes</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tagName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ns</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Target [target=new Target()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>target;setProject;[project]</InnerMethodInvoke>
                <InnerMethodInvoke>target;setLocation;[new Location(antXmlContext.getLocator())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setText</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>task</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char[] [characters=text.toCharArray()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAntProject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Project</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumnNumber</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLineNumber</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPublicId</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSystemId</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>