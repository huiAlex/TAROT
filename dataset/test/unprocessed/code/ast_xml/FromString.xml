<Class>
    <Id>1087</Id>
    <Package>groovy.transform.stc</Package>
    <ClassName>FromString</ClassName>
    <SuperClass>ClosureSignatureHint</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>FromString  /** 
 * &lt;p&gt;A closure parameter hint class that is convenient if you want to use a String representation of the signature. It makes use of the  {@link ClosureParams#options() option strings}, where each string corresponds to a single signature.&lt;/p&gt; &lt;p&gt;The following example describes a closure as accepting a single signature (List&amp;lt;T&amp;gt; list -&amp;gt;):&lt;/p&gt; &lt;code&gt;public &amp;lt;T&amp;gt; T apply(T src, @ClosureParams(value=FromString.class, options="List&amp;lt;T&amp;gt;" Closure&amp;lt;T&amp;gt; cl)&lt;/code&gt; &lt;p&gt;The next example describes a closure as accepting two signatures (List&amp;lt;T&amp;gt; list -&amp;gt;) and (T t -&amp;gt;):&lt;/p&gt; &lt;code&gt;public &amp;lt;T&amp;gt; T apply(T src, @ClosureParams(value=FromString.class, options={"List&amp;lt;T&amp;gt;","T"} Closure&amp;lt;T&amp;gt; cl)&lt;/code&gt; &lt;p&gt;It is advisable not to use this hint as a replacement for the various  {@link FirstParam},  {@link SimpleType}, ... hints because it is actually much slower. Using this hint should therefore be limited to cases where it's not possible to express the signature using the existing hints.&lt;/p&gt;
 * @author CÃ©dric Champeau
 * @since 2.3.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getClosureSignatures</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sourceUnit</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>compilationUnit</ParamName>
                    <ParamType>CompilationUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>options</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>usage</ParamName>
                    <ParamType>ASTNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;ClassNode[]&gt; [list=new ArrayList&lt;ClassNode[]&gt;(options.length)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseOption</MethodName>
            <MethodComment>/** 
 * Parses a string representing a type, that must be aligned with the current context. For example, &lt;i&gt;"List&amp;lt;T&amp;gt;"&lt;/i&gt; must be converted into the appropriate ClassNode for which &lt;i&gt;T&lt;/i&gt; matches the appropriate placeholder.
 * @param option a string representing a type
 * @param sourceUnit the source unit (of the file being compiled)
 * @param compilationUnit the compilation unit (of the file being compiled)
 * @param mn the method node
 * @param usage
 * @return a class node if it could be parsed and resolved, null otherwise
 */
</MethodComment>
            <ReturnType>ClassNode[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>option</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sourceUnit</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>compilationUnit</ParamName>
                    <ParamType>CompilationUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mn</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>usage</ParamName>
                    <ParamType>ASTNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>