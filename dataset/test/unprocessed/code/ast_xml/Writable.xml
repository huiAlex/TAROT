<Class>
    <Id>579</Id>
    <Package>groovy.lang</Package>
    <ClassName>Writable</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Writable  /** 
 * Represents an object which is capable of writing itself to a text stream in a more efficient format than just creating a toString() representation of itself. This mechanism is particularly useful for templates and such like. &lt;p&gt; It is worth noting that writable implementations often override their toString() implementation as well to allow rendering the same result  directly to a String; however this is not required.
 * @author &lt;a href="mailto:james@coredevelopers.net"&gt;James Strachan&lt;/a&gt;
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>writeTo</MethodName>
            <MethodComment>/** 
 * Writes this object to the given writer. &lt;p&gt; This is used to defer content creation until the point when it is streamed to the output destination.  Oftentimes, content will be defined  but not necessarily created (as is may be the case with a Closure  definition.)  In that case, the output is then 'deferred' to the point  when it is serialized to the writer. This class may be used whenever an  object should be responsible for creating its own textual representation,  but creating the entire output as a single String would be inefficient (such as outputting a multi-gigabyte XML document.)
 * @param out the Writer to which this Writable should output its data.
 * @return the Writer that was passed
 * @throws IOException if an error occurred while outputting data to the writer
 */
</MethodComment>
            <ReturnType>Writer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>Writer</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>