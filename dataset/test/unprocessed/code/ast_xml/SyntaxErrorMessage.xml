<Class>
    <Id>935</Id>
    <Package>org.codehaus.groovy.control.messages</Package>
    <ClassName>SyntaxErrorMessage</ClassName>
    <SuperClass>Message</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SyntaxErrorMessage  /** 
 * A class for error messages produced by the parser system.
 * @author &lt;a href="mailto:cpoirier@dreaming.org"&gt;Chris Poirier&lt;/a&gt;
 * @version $Id$
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>cause</FieldName>
            <FieldType>SyntaxException</FieldType>
        </Field>
        <Field>
            <FieldName>source</FieldName>
            <FieldType>SourceUnit</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SyntaxErrorMessage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cause</ParamName>
                    <ParamType>SyntaxException</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cause;setSourceLocator;[source.getName()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCause</MethodName>
            <MethodComment>/** 
 * Returns the underlying SyntaxException.
 */
</MethodComment>
            <ReturnType>SyntaxException</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>write</MethodName>
            <MethodComment>/** 
 * Writes out a nicely formatted summary of the syntax error.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>output</ParamName>
                    <ParamType>PrintWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>janitor</ParamName>
                    <ParamType>Janitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=source.getName()]</InnerVar>
                <InnerVar>int [line=getCause().getStartLine()]</InnerVar>
                <InnerVar>int [column=getCause().getStartColumn()]</InnerVar>
                <InnerVar>String [sample=source.getSample(line,column,janitor)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>output;print;[name + ": " + line+ ": "+ getCause().getMessage()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>