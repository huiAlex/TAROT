<Class>
    <Id>396</Id>
    <Package>org.codehaus.groovy.ant</Package>
    <ClassName>RootLoaderRef</ClassName>
    <SuperClass>MatchingTask</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RootLoaderRef  /** 
 * Sets the RootLoader as reference. Reexecution of this task will set a new instance of RootLoader for the reference.  arguments: &lt;ul&gt; &lt;li&gt;ref&lt;/li&gt; &lt;li&gt;classpath&lt;/li&gt; &lt;/ul&gt; all arguments are required. As ant requires an AntClassLoader as reference, this will create a RootLoader and set an AntClassLoader as child and stored in the reference. The AntClassLoader instance will not have a classpath nor will it have access to the classpath somehow, all loading is done by the RootLoader parent. To avoid problems with loading classes  multiple times and using them at the same time, this task will filter out the ant jars and the commons-logging jars. This only works if the ant jars are starting with "ant-" and the logging jar starts with "commons-logging-". This was needed because if ant wants to access a task argument that uses for example a Path it look for a matching method which includes a matching class. But two classes of the same name with different classloaders are different, so ant would not be able to find the method.
 * @see org.codehaus.groovy.tools.RootLoader
 * @author Jochen Theodorou
 * @version $Revision$ 
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>name</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>taskClasspath</FieldName>
            <FieldType>Path</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>setRef</MethodName>
            <MethodComment>/** 
 * sets the name of the reference which should store the Loader
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>n</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>execute</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Project [project=getProject()]</InnerVar>
                <InnerVar>AntClassLoader [loader=new AntClassLoader(makeRoot(),true)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>project;addReference;[name, loader]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>BuildException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeRoot</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RootLoader</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String[] [list=taskClasspath.list()]</InnerVar>
                <InnerVar>LoaderConfiguration [lc=new LoaderConfiguration()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setClasspath</MethodName>
            <MethodComment>/** 
 * Set the classpath to be used for this compilation.
 * @param classpath an Ant Path object containing the compilation classpath.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classpath</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setClasspathRef</MethodName>
            <MethodComment>/** 
 * Adds a reference to a classpath defined elsewhere.
 * @param r a reference to a classpath
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r</ParamName>
                    <ParamType>Reference</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>createClasspath();setRefid;[r]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createClasspath</MethodName>
            <MethodComment>/** 
 * Adds a path to the classpath.
 * @return a class path to be configured
 */
</MethodComment>
            <ReturnType>Path</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>