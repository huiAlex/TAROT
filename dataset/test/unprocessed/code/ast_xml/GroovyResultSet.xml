<Class>
    <Id>634</Id>
    <Package>groovy.sql</Package>
    <ClassName>GroovyResultSet</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>GroovyObject</SuperInterface>
        <SuperInterface>ResultSet</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GroovyResultSet  /** 
 * Represents an extent of objects
 * @author &lt;a href="mailto:james@coredevelopers.net"&gt;James Strachan&lt;/a&gt;
 * @author &lt;a href="mailto:ivan_ganza@yahoo.com"&gt;Ivan Ganza&lt;/a&gt;
 * @author Chris Stevenson
 * @version $Revision$
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getAt</MethodName>
            <MethodComment>/** 
 * Supports integer-based subscript operators for accessing at numbered columns starting at zero. Negative indices are supported, they will count from the last column backwards.
 * @param index is the number of the column to look at starting at 1
 * @return the object for this index in the current result set
 * @throws SQLException if a database error occurs
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAt</MethodName>
            <MethodComment>/** 
 * Gets the value of the designated column in the current row as an &lt;code&gt;Object&lt;/code&gt;.
 * @param columnName the SQL name of the column
 * @return the returned column value
 * @throws groovy.lang.MissingPropertyException if an SQLException happens while getting the object
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putAt</MethodName>
            <MethodComment>/** 
 * Supports integer based subscript operators for updating the values of numbered columns starting at zero. Negative indices are supported, they will count from the last column backwards.
 * @param index    is the number of the column to look at starting at 1
 * @param newValue the new value for this index
 * @throws SQLException if a database error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newValue</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putAt</MethodName>
            <MethodComment>/** 
 * Updates the designated column with an &lt;code&gt;Object&lt;/code&gt; value.
 * @param columnName the SQL name of the column
 * @param newValue   the updated value
 * @throws groovy.lang.MissingPropertyException if an SQLException happens while setting the new value
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newValue</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>add</MethodName>
            <MethodComment>/** 
 * Adds a new row to this result set
 * @param values the new values to add
 * @throws SQLException if a database error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>values</ParamName>
                    <ParamType>Map</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eachRow</MethodName>
            <MethodComment>/** 
 * Call the closure once for each row in the result set.
 * @param closure the closure to call for each row
 * @throws SQLException if a database error occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>