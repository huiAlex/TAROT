<Class>
    <Id>381</Id>
    <Package>org.codehaus.groovy.runtime</Package>
    <ClassName>NioGroovyMethods</ClassName>
    <SuperClass>DefaultGroovyMethodsSupport</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>NioGroovyMethods  /** 
 * This class defines new groovy methods for Readers, Writers, InputStreams and OutputStreams which appear on normal JDK classes inside the Groovy environment. Static methods are used with the first parameter being the destination class, i.e. &lt;code&gt;public static T eachLine(InputStream self, Closure c)&lt;/code&gt; provides a &lt;code&gt;eachLine(Closure c)&lt;/code&gt; method for &lt;code&gt;InputStream&lt;/code&gt;. &lt;p/&gt; NOTE: While this class contains many 'public' static methods, it is primarily regarded as an internal class (its internal package name suggests this also). We value backwards compatibility of these methods when used within Groovy but value less backwards compatibility at the Java method call level. I.e. future versions of Groovy may remove or move a method call in this file but would normally aim to keep the method available from within Groovy.
 * @author &lt;a href="mailto:james@coredevelopers.net"&gt;James Strachan&lt;/a&gt;
 * @author Jeremy Rayner
 * @author Sam Pullara
 * @author Rod Cope
 * @author Guillaume Laforge
 * @author John Wilson
 * @author Hein Meling
 * @author Dierk Koenig
 * @author Pilho Kim
 * @author Marc Guillemot
 * @author Russel Winder
 * @author bing ran
 * @author Jochen Theodorou
 * @author Paul King
 * @author Michael Baehr
 * @author Joachim Baumann
 * @author Alex Tkachman
 * @author Ted Naleid
 * @author Brad Long
 * @author Jim Jagielski
 * @author Rodolfo Velasco
 * @author jeremi Joslin
 * @author Hamlet D'Arcy
 * @author Cedric Champeau
 * @author Tim Yates
 * @author Dinko Srkoc
 * @author Paolo Di Tommaso &lt;paolo.ditommaso@gmail.com&gt;
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Provide the standard Groovy &lt;code&gt;size()&lt;/code&gt; method for &lt;code&gt;Path&lt;/code&gt;.
 * @param self a {@code Path} object
 * @return the file's size (length)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newObjectOutputStream</MethodName>
            <MethodComment>/** 
 * Create an object output stream for this path.
 * @param self a {@code Path} object
 * @return an object output stream
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>ObjectOutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>withObjectOutputStream</MethodName>
            <MethodComment>/** 
 * Create a new ObjectOutputStream for this path and then pass it to the closure.  This method ensures the stream is closed after the closure returns.
 * @param self    a Path
 * @param closure a closure
 * @return the value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @see IOGroovyMethods#withStream(java.io.OutputStream,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newObjectInputStream</MethodName>
            <MethodComment>/** 
 * Create an object input stream for this file.
 * @param self a {@code Path} object
 * @return an object input stream
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>ObjectInputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newObjectInputStream</MethodName>
            <MethodComment>/** 
 * Create an object input stream for this path using the given class loader.
 * @param self a {@code Path} object
 * @param classLoader the class loader to use when loading the class
 * @return an object input stream
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>ObjectInputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eachObject</MethodName>
            <MethodComment>/** 
 * Iterates through the given file object by object.
 * @param self a {@code Path} object
 * @param closure a closure
 * @throws java.io.IOException if an IOException occurs.
 * @throws ClassNotFoundException if the class  is not found.
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#eachObject(java.io.ObjectInputStream,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>IOGroovyMethods;eachObject;[newObjectInputStream(self), closure]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>withObjectInputStream</MethodName>
            <MethodComment>/** 
 * Create a new ObjectInputStream for this file and pass it to the closure. This method ensures the stream is closed after the closure returns.
 * @param path    a Path
 * @param closure a closure
 * @return the value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#withStream(java.io.InputStream,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>withObjectInputStream</MethodName>
            <MethodComment>/** 
 * Create a new ObjectInputStream for this file associated with the given class loader and pass it to the closure. This method ensures the stream is closed after the closure returns.
 * @param self        a Path
 * @param classLoader the class loader to use when loading the class
 * @param closure     a closure
 * @return the value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#withStream(java.io.InputStream,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eachLine</MethodName>
            <MethodComment>/** 
 * Iterates through this path line by line.  Each line is passed to the given 1 or 2 arg closure.  The file is read using a reader which is closed before this method returns.
 * @param self    a Path
 * @param closure a closure (arg 1 is line, optional arg 2 is line number starting at line 1)
 * @return the last value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @see #eachLine(Path,int,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eachLine</MethodName>
            <MethodComment>/** 
 * Iterates through this file line by line.  Each line is passed to the given 1 or 2 arg closure.  The file is read using a reader which is closed before this method returns.
 * @param self    a Path
 * @param charset opens the file with a specified charset
 * @param closure a closure (arg 1 is line, optional arg 2 is line number starting at line 1)
 * @return the last value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @see #eachLine(Path,String,int,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eachLine</MethodName>
            <MethodComment>/** 
 * Iterates through this file line by line.  Each line is passed to the given 1 or 2 arg closure.  The file is read using a reader which is closed before this method returns.
 * @param self      a Path
 * @param firstLine the line number value used for the first line (default is 1, set to 0 to start counting from 0)
 * @param closure   a closure (arg 1 is line, optional arg 2 is line number)
 * @return the last value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#eachLine(java.io.Reader,int,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>firstLine</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eachLine</MethodName>
            <MethodComment>/** 
 * Iterates through this file line by line.  Each line is passed to the given 1 or 2 arg closure.  The file is read using a reader which is closed before this method returns.
 * @param self      a Path
 * @param charset   opens the file with a specified charset
 * @param firstLine the line number value used for the first line (default is 1, set to 0 to start counting from 0)
 * @param closure   a closure (arg 1 is line, optional arg 2 is line number)
 * @return the last value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#eachLine(java.io.Reader,int,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>firstLine</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>splitEachLine</MethodName>
            <MethodComment>/** 
 * Iterates through this file line by line, splitting each line using the given regex separator. For each line, the given closure is called with a single parameter being the list of strings computed by splitting the line around matches of the given regular expression. Finally the resources used for processing the file are closed.
 * @param self    a Path
 * @param regex   the delimiting regular expression
 * @param closure a closure
 * @return the last value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @throws java.util.regex.PatternSyntaxException if the regular expression's syntax is invalid
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#splitEachLine(java.io.Reader,String,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>regex</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>splitEachLine</MethodName>
            <MethodComment>/** 
 * Iterates through this file line by line, splitting each line using the given separator Pattern. For each line, the given closure is called with a single parameter being the list of strings computed by splitting the line around matches of the given regular expression Pattern. Finally the resources used for processing the file are closed.
 * @param self    a Path
 * @param pattern the regular expression Pattern for the delimiter
 * @param closure a closure
 * @return the last value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#splitEachLine(java.io.Reader,java.util.regex.Pattern,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <ParamType>Pattern</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>splitEachLine</MethodName>
            <MethodComment>/** 
 * Iterates through this file line by line, splitting each line using the given regex separator. For each line, the given closure is called with a single parameter being the list of strings computed by splitting the line around matches of the given regular expression. Finally the resources used for processing the file are closed.
 * @param self    a Path
 * @param regex   the delimiting regular expression
 * @param charset opens the file with a specified charset
 * @param closure a closure
 * @return the last value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @throws java.util.regex.PatternSyntaxException if the regular expression's syntax is invalid
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#splitEachLine(java.io.Reader,String,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>regex</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>splitEachLine</MethodName>
            <MethodComment>/** 
 * Iterates through this file line by line, splitting each line using the given regex separator Pattern. For each line, the given closure is called with a single parameter being the list of strings computed by splitting the line around matches of the given regular expression. Finally the resources used for processing the file are closed.
 * @param self    a Path
 * @param pattern the regular expression Pattern for the delimiter
 * @param charset opens the file with a specified charset
 * @param closure a closure
 * @return the last value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#splitEachLine(java.io.Reader,java.util.regex.Pattern,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <ParamType>Pattern</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readLines</MethodName>
            <MethodComment>/** 
 * Reads the file into a list of Strings, with one item for each line.
 * @param self a Path
 * @return a List of lines
 * @throws java.io.IOException if an IOException occurs.
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#readLines(java.io.Reader)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readLines</MethodName>
            <MethodComment>/** 
 * Reads the file into a list of Strings, with one item for each line.
 * @param self    a Path
 * @param charset opens the file with a specified charset
 * @return a List of lines
 * @throws java.io.IOException if an IOException occurs.
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#readLines(java.io.Reader)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getText</MethodName>
            <MethodComment>/** 
 * Read the content of the Path using the specified encoding and return it as a String.
 * @param self    the file whose content we want to read
 * @param charset the charset used to read the content of the file
 * @return a String containing the content of the file
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getText</MethodName>
            <MethodComment>/** 
 * Read the content of the Path and returns it as a String.
 * @param self the file whose content we want to read
 * @return a String containing the content of the file
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBytes</MethodName>
            <MethodComment>/** 
 * Read the content of the Path and returns it as a byte[].
 * @param self the file whose content we want to read
 * @return a String containing the content of the file
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setBytes</MethodName>
            <MethodComment>/** 
 * Write the bytes from the byte array to the Path.
 * @param self  the file to write to
 * @param bytes the byte[] to write to the file
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bytes</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>IOGroovyMethods;setBytes;[Files.newOutputStream(self), bytes]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>write</MethodName>
            <MethodComment>/** 
 * Write the text to the Path.
 * @param self a Path
 * @param text the text to write to the Path
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Writer [writer=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setText</MethodName>
            <MethodComment>/** 
 * Synonym for write(text) allowing file.text = 'foo'.
 * @param self a Path
 * @param text the text to write to the Path
 * @throws java.io.IOException if an IOException occurs.
 * @see #write(Path,String)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;write;[self, text]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setText</MethodName>
            <MethodComment>/** 
 * Synonym for write(text, charset) allowing: &lt;pre&gt; myFile.setText('some text', charset) &lt;/pre&gt; or with some help from &lt;code&gt;ExpandoMetaClass&lt;/code&gt;, you could do something like: &lt;pre&gt; myFile.metaClass.setText = { String s -&gt; delegate.setText(s, 'UTF-8') } myfile.text = 'some text' &lt;/pre&gt;
 * @param self    A Path
 * @param charset The charset used when writing to the file
 * @param text    The text to write to the Path
 * @throws java.io.IOException if an IOException occurs.
 * @see #write(Path,String,String)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;write;[self, text, charset]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Write the text to the Path.
 * @param self a Path
 * @param text the text to write to the Path
 * @return the original file
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>Path</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;append;[self, text]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Write bytes to a Path.
 * @param self  a Path
 * @param bytes the byte array to append to the end of the Path
 * @return the original file
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>Path</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bytes</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;append;[self, bytes]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Append binary data to the file.  See  {@link #append(Path,java.io.InputStream)}
 * @param path a Path
 * @param data an InputStream of data to write to the file
 * @return the file
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>Path</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;append;[path, data]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>write</MethodName>
            <MethodComment>/** 
 * Write the text to the Path, using the specified encoding.
 * @param self    a Path
 * @param text    the text to write to the Path
 * @param charset the charset used
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Writer [writer=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>append</MethodName>
            <MethodComment>/** 
 * Append the text at the end of the Path.
 * @param self a Path
 * @param text the text to append at the end of the Path
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Writer [writer=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>append</MethodName>
            <MethodComment>/** 
 * Append the text supplied by the Writer at the end of the File.
 * @param file a Path
 * @param reader the Reader supplying the text to append at the end of the File
 * @throws IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>Reader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;appendBuffered;[file, reader]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>append</MethodName>
            <MethodComment>/** 
 * Append the text supplied by the Writer at the end of the File.
 * @param file a File
 * @param writer the Writer supplying the text to append at the end of the File
 * @throws IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>writer</ParamName>
                    <ParamType>Writer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;appendBuffered;[file, writer]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>appendBuffered</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BufferedWriter [writer=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>append</MethodName>
            <MethodComment>/** 
 * Append bytes to the end of a Path.
 * @param self  a Path
 * @param bytes the byte array to append to the end of the Path
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bytes</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>OutputStream [stream=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>append</MethodName>
            <MethodComment>/** 
 * Append binary data to the file.  It &lt;strong&gt;will not&lt;/strong&gt; be interpreted as text.
 * @param self   a Path
 * @param stream stream to read data from.
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stream</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>OutputStream [out=Files.newOutputStream(self,CREATE,APPEND)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>append</MethodName>
            <MethodComment>/** 
 * Append the text at the end of the Path, using a specified encoding.
 * @param self    a Path
 * @param text    the text to append at the end of the Path
 * @param charset the charset used
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Writer [writer=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>append</MethodName>
            <MethodComment>/** 
 * Append the text supplied by the Writer at the end of the File, using a specified encoding.
 * @param file a File
 * @param writer the Writer supplying the text to append at the end of the File
 * @param charset the charset used
 * @throws IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>writer</ParamName>
                    <ParamType>Writer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;appendBuffered;[file, writer, charset]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>append</MethodName>
            <MethodComment>/** 
 * Append the text supplied by the Reader at the end of the File, using a specified encoding.
 * @param file a File
 * @param reader the Reader supplying the text to append at the end of the File
 * @param charset the charset used
 * @throws IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>Reader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;appendBuffered;[file, reader, charset]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>appendBuffered</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BufferedWriter [writer=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkDir</MethodName>
            <MethodComment>/** 
 * This method is used to throw useful exceptions when the eachFile* and eachDir closure methods are used incorrectly.
 * @param self The directory to check
 * @throws java.io.FileNotFoundException    if the given directory does not exist
 * @throws IllegalArgumentException if the provided Path object does not represent a directory
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FileNotFoundException</ExceptionType>
                <ExceptionType>IllegalArgumentException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eachFile</MethodName>
            <MethodComment>/** 
 * Invokes the closure for each 'child' file in this 'parent' folder/directory. Both regular files and subfolders/subdirectories can be processed depending on the fileType enum value.
 * @param self     a file object
 * @param fileType if normal files or directories or both should be processed
 * @param closure  the closure to invoke
 * @throws java.io.FileNotFoundException    if the given directory does not exist
 * @throws IllegalArgumentException if the provided Path object does not represent a directory
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fileType</ParamName>
                    <ParamType>FileType</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkDir;[self]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eachFile</MethodName>
            <MethodComment>/** 
 * Invokes the closure for each 'child' file in this 'parent' folder/directory. Both regular files and subfolders/subdirectories are processed.
 * @param self    a Path (that happens to be a folder/directory)
 * @param closure a closure (first parameter is the 'child' file)
 * @throws java.io.FileNotFoundException    if the given directory does not exist
 * @throws IllegalArgumentException if the provided Path object does not represent a directory
 * @see #eachFile(Path,groovy.io.FileType,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;eachFile;[self, FileType.ANY, closure]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eachDir</MethodName>
            <MethodComment>/** 
 * Invokes the closure for each subdirectory in this directory, ignoring regular files.
 * @param self    a Path (that happens to be a folder/directory)
 * @param closure a closure (first parameter is the subdirectory file)
 * @throws java.io.FileNotFoundException    if the given directory does not exist
 * @throws IllegalArgumentException if the provided Path object does not represent a directory
 * @see #eachFile(Path,groovy.io.FileType,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;eachFile;[self, FileType.DIRECTORIES, closure]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eachFileRecurse</MethodName>
            <MethodComment>/** 
 * Invokes the closure for each descendant file in this directory. Sub-directories are recursively searched in a depth-first fashion. Both regular files and subdirectories may be passed to the closure depending on the value of fileType.
 * @param self     a file object
 * @param fileType if normal files or directories or both should be processed
 * @param closure  the closure to invoke on each file
 * @throws java.io.FileNotFoundException    if the given directory does not exist
 * @throws IllegalArgumentException if the provided Path object does not represent a directory
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fileType</ParamName>
                    <ParamType>FileType</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkDir;[self]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>traverse</MethodName>
            <MethodComment>/** 
 * Invokes &lt;code&gt;closure&lt;/code&gt; for each descendant file in this directory tree. Sub-directories are recursively traversed as found. The traversal can be adapted by providing various options in the &lt;code&gt;options&lt;/code&gt; Map according to the following keys:&lt;dl&gt; &lt;dt&gt;type&lt;/dt&gt;&lt;dd&gt;A  {@link groovy.io.FileType} enum to determine if normal files or directories or both are processed&lt;/dd&gt;&lt;dt&gt;preDir&lt;/dt&gt;&lt;dd&gt;A  {@link groovy.lang.Closure} run before each directory is processed and optionally returning a {@link groovy.io.FileVisitResult} valuewhich can be used to control subsequent processing.&lt;/dd&gt; &lt;dt&gt;preRoot&lt;/dt&gt;&lt;dd&gt;A boolean indicating that the 'preDir' closure should be applied at the root level&lt;/dd&gt; &lt;dt&gt;postDir&lt;/dt&gt;&lt;dd&gt;A  {@link groovy.lang.Closure} run after each directory is processed and optionally returning a {@link groovy.io.FileVisitResult} valuewhich can be used to control subsequent processing.&lt;/dd&gt; &lt;dt&gt;postRoot&lt;/dt&gt;&lt;dd&gt;A boolean indicating that the 'postDir' closure should be applied at the root level&lt;/dd&gt; &lt;dt&gt;visitRoot&lt;/dt&gt;&lt;dd&gt;A boolean indicating that the given closure should be applied for the root dir (not applicable if the 'type' is set to  {@link groovy.io.FileType#FILES})&lt;/dd&gt; &lt;dt&gt;maxDepth&lt;/dt&gt;&lt;dd&gt;The maximum number of directory levels when recursing (default is -1 which means infinite, set to 0 for no recursion)&lt;/dd&gt; &lt;dt&gt;filter&lt;/dt&gt;&lt;dd&gt;A filter to perform on traversed files/directories (using the  {@link DefaultGroovyMethods#isCase(Object,Object)} method). If set,only files/dirs which match are candidates for visiting.&lt;/dd&gt; &lt;dt&gt;nameFilter&lt;/dt&gt;&lt;dd&gt;A filter to perform on the name of traversed files/directories (using the  {@link DefaultGroovyMethods#isCase(Object,Object)} method). If set,only files/dirs which match are candidates for visiting. (Must not be set if 'filter' is set)&lt;/dd&gt; &lt;dt&gt;excludeFilter&lt;/dt&gt;&lt;dd&gt;A filter to perform on traversed files/directories (using the  {@link DefaultGroovyMethods#isCase(Object,Object)} method).If set, any candidates which match won't be visited.&lt;/dd&gt; &lt;dt&gt;excludeNameFilter&lt;/dt&gt;&lt;dd&gt;A filter to perform on the names of traversed files/directories (using the  {@link DefaultGroovyMethods#isCase(Object,Object)} method).If set, any candidates which match won't be visited. (Must not be set if 'excludeFilter' is set)&lt;/dd&gt; &lt;dt&gt;sort&lt;/dt&gt;&lt;dd&gt;A  {@link groovy.lang.Closure} which if set causes the files and subdirectories for each directory to be processed in sorted order.Note that even when processing only files, the order of visited subdirectories will be affected by this parameter.&lt;/dd&gt; &lt;/dl&gt; This example prints out file counts and size aggregates for groovy source files within a directory tree: &lt;pre&gt; def totalSize = 0 def count = 0 def sortByTypeThenName = { a, b -&gt; a.isFile() != b.isFile() ? a.isFile() &lt;=&gt; b.isFile() : a.name &lt;=&gt; b.name } rootDir.traverse( type         : FILES, nameFilter   : ~/.*\.groovy/, preDir       : { if (it.name == '.svn') return SKIP_SUBTREE }, postDir      : { println "Found $count files in $it.name totalling $totalSize bytes" totalSize = 0; count = 0 }, postRoot     : true sort         : sortByTypeThenName ) {it -&gt; totalSize += it.size(); count++ } &lt;/pre&gt;
 * @param self    a Path
 * @param options a Map of options to alter the traversal behavior
 * @param closure the Closure to invoke on each file/directory and optionally returning a {@link groovy.io.FileVisitResult} valuewhich can be used to control subsequent processing
 * @throws java.io.FileNotFoundException    if the given directory does not exist
 * @throws IllegalArgumentException if the provided Path object does not represent a directory or illegal filter combinations are supplied
 * @see DefaultGroovyMethods#sort(java.util.Collection,groovy.lang.Closure)
 * @see groovy.io.FileVisitResult
 * @see groovy.io.FileType
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>options</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Number [maxDepthNumber=DefaultGroovyMethods.asType(options.remove("maxDepth"),Number.class)]</InnerVar>
                <InnerVar>int [maxDepth=maxDepthNumber == null ? -1 : maxDepthNumber.intValue()]</InnerVar>
                <InnerVar>Boolean [visitRoot=DefaultGroovyMethods.asType(get(options,"visitRoot",false),Boolean.class)]</InnerVar>
                <InnerVar>Boolean [preRoot=DefaultGroovyMethods.asType(get(options,"preRoot",false),Boolean.class)]</InnerVar>
                <InnerVar>Boolean [postRoot=DefaultGroovyMethods.asType(get(options,"postRoot",false),Boolean.class)]</InnerVar>
                <InnerVar>Closure [pre=(Closure)options.get("preDir")]</InnerVar>
                <InnerVar>Closure [post=(Closure)options.get("postDir")]</InnerVar>
                <InnerVar>FileType [type=(FileType)options.get("type")]</InnerVar>
                <InnerVar>Object [filter=options.get("filter")]</InnerVar>
                <InnerVar>Object [nameFilter=options.get("nameFilter")]</InnerVar>
                <InnerVar>Object [excludeFilter=options.get("excludeFilter")]</InnerVar>
                <InnerVar>Object [excludeNameFilter=options.get("excludeNameFilter")]</InnerVar>
                <InnerVar>Object [preResult=null]</InnerVar>
                <InnerVar>FileVisitResult [terminated=traverse(self,options,closure,maxDepth)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>notFiltered</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nameFilter</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>excludeFilter</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>excludeNameFilter</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [filterToUse=null]</InnerVar>
                <InnerVar>Object [filterParam=null]</InnerVar>
                <InnerVar>Object [excludeFilterToUse=null]</InnerVar>
                <InnerVar>Object [excludeParam=null]</InnerVar>
                <InnerVar>MetaClass [filterMC=filterToUse == null ? null : InvokerHelper.getMetaClass(filterToUse)]</InnerVar>
                <InnerVar>MetaClass [excludeMC=excludeFilterToUse == null ? null : InvokerHelper.getMetaClass(excludeFilterToUse)]</InnerVar>
                <InnerVar>boolean [included=filterToUse == null || DefaultTypeTransformation.castToBoolean(filterMC.invokeMethod(filterToUse,"isCase",filterParam))]</InnerVar>
                <InnerVar>boolean [excluded=excludeFilterToUse != null &amp;&amp; DefaultTypeTransformation.castToBoolean(excludeMC.invokeMethod(excludeFilterToUse,"isCase",excludeParam))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>traverse</MethodName>
            <MethodComment>/** 
 * Invokes the closure for each descendant file in this directory tree. Sub-directories are recursively traversed in a depth-first fashion. Convenience method for  {@link #traverse(Path,java.util.Map,groovy.lang.Closure)} whenno options to alter the traversal behavior are required.
 * @param self    a Path
 * @param closure the Closure to invoke on each file/directory and optionally returning a {@link groovy.io.FileVisitResult} valuewhich can be used to control subsequent processing
 * @throws java.io.FileNotFoundException    if the given directory does not exist
 * @throws IllegalArgumentException if the provided Path object does not represent a directory
 * @see #traverse(Path,java.util.Map,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;traverse;[self, new HashMap&lt;String,Object&gt;(), closure]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>traverse</MethodName>
            <MethodComment>/** 
 * Invokes the closure specified with key 'visit' in the options Map for each descendant file in this directory tree. Convenience method for  {@link #traverse(Path,java.util.Map,groovy.lang.Closure)} allowing the 'visit' closureto be included in the options Map rather than as a parameter.
 * @param self    a Path
 * @param options a Map of options to alter the traversal behavior
 * @throws java.io.FileNotFoundException    if the given directory does not exist
 * @throws IllegalArgumentException if the provided Path object does not represent a directory or illegal filter combinations are supplied
 * @see #traverse(Path,java.util.Map,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>options</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Closure [visit=(Closure)options.remove("visit")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;traverse;[self, options, visit]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>traverse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FileVisitResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>options</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxDepth</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Closure [pre=(Closure)options.get("preDir")]</InnerVar>
                <InnerVar>Closure [post=(Closure)options.get("postDir")]</InnerVar>
                <InnerVar>FileType [type=(FileType)options.get("type")]</InnerVar>
                <InnerVar>Object [filter=options.get("filter")]</InnerVar>
                <InnerVar>Object [nameFilter=options.get("nameFilter")]</InnerVar>
                <InnerVar>Object [excludeFilter=options.get("excludeFilter")]</InnerVar>
                <InnerVar>Object [excludeNameFilter=options.get("excludeNameFilter")]</InnerVar>
                <InnerVar>Closure [sort=(Closure)options.get("sort")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkDir;[self]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eachFileRecurse</MethodName>
            <MethodComment>/** 
 * Invokes the closure for each descendant file in this directory. Sub-directories are recursively searched in a depth-first fashion. Both regular files and subdirectories are passed to the closure.
 * @param self    a Path
 * @param closure a closure
 * @throws java.io.FileNotFoundException    if the given directory does not exist
 * @throws IllegalArgumentException if the provided Path object does not represent a directory
 * @see #eachFileRecurse(Path,groovy.io.FileType,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;eachFileRecurse;[self, FileType.ANY, closure]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eachDirRecurse</MethodName>
            <MethodComment>/** 
 * Invokes the closure for each descendant directory of this directory. Sub-directories are recursively searched in a depth-first fashion. Only subdirectories are passed to the closure; regular files are ignored.
 * @param self    a directory
 * @param closure a closure
 * @throws java.io.FileNotFoundException    if the given directory does not exist
 * @throws IllegalArgumentException if the provided Path object does not represent a directory
 * @see #eachFileRecurse(Path,groovy.io.FileType,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;eachFileRecurse;[self, FileType.DIRECTORIES, closure]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eachFileMatch</MethodName>
            <MethodComment>/** 
 * Invokes the closure for each file whose name (file.name) matches the given nameFilter in the given directory - calling the  {@link org.codehaus.groovy.runtime.DefaultGroovyMethods#isCase(Object,Object)} method to determine if a match occurs.  This method can be usedwith different kinds of filters like regular expressions, classes, ranges etc. Both regular files and subdirectories may be candidates for matching depending on the value of fileType. &lt;pre&gt; // collect names of files in baseDir matching supplied regex pattern import static groovy.io.FileType. def names = [] baseDir.eachFileMatch FILES, ~/foo\d\.txt/, { names &lt;&lt; it.name } assert names == ['foo1.txt', 'foo2.txt'] // remove all *.bak files in baseDir baseDir.eachFileMatch FILES, ~/.*\.bak/, { Path bak -&gt; bak.delete() } // print out files &gt; 4K in size from baseDir baseDir.eachFileMatch FILES, { new Path(baseDir, it).size() &gt; 4096 }, { println "$it.name ${it.size()}" } &lt;/pre&gt;
 * @param self       a file
 * @param fileType   whether normal files or directories or both should be processed
 * @param nameFilter the filter to perform on the name of the file/directory (using the {@link org.codehaus.groovy.runtime.DefaultGroovyMethods#isCase(Object,Object)} method)
 * @param closure    the closure to invoke
 * @throws java.io.FileNotFoundException    if the given directory does not exist
 * @throws IllegalArgumentException if the provided Path object does not represent a directory
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fileType</ParamName>
                    <ParamType>FileType</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nameFilter</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;checkDir;[self]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eachFileMatch</MethodName>
            <MethodComment>/** 
 * Invokes the closure for each file whose name (file.name) matches the given nameFilter in the given directory - calling the  {@link org.codehaus.groovy.runtime.DefaultGroovyMethods#isCase(Object,Object)} method to determine if a match occurs.  This method can be usedwith different kinds of filters like regular expressions, classes, ranges etc. Both regular files and subdirectories are matched.
 * @param self       a file
 * @param nameFilter the nameFilter to perform on the name of the file (using the {@link org.codehaus.groovy.runtime.DefaultGroovyMethods#isCase(Object,Object)} method)
 * @param closure    the closure to invoke
 * @throws java.io.FileNotFoundException    if the given directory does not exist
 * @throws IllegalArgumentException if the provided Path object does not represent a directory
 * @see #eachFileMatch(Path,groovy.io.FileType,Object,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nameFilter</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;eachFileMatch;[self, FileType.ANY, nameFilter, closure]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eachDirMatch</MethodName>
            <MethodComment>/** 
 * Invokes the closure for each subdirectory whose name (dir.name) matches the given nameFilter in the given directory - calling the  {@link DefaultGroovyMethods#isCase(java.lang.Object,java.lang.Object)} method to determine if a match occurs.  This method can be usedwith different kinds of filters like regular expressions, classes, ranges etc. Only subdirectories are matched; regular files are ignored.
 * @param self       a file
 * @param nameFilter the nameFilter to perform on the name of the directory (using the {@link org.codehaus.groovy.runtime.DefaultGroovyMethods#isCase(Object,Object)} method)
 * @param closure    the closure to invoke
 * @throws java.io.FileNotFoundException    if the given directory does not exist
 * @throws IllegalArgumentException if the provided Path object does not represent a directory
 * @see #eachFileMatch(Path,groovy.io.FileType,Object,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nameFilter</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;eachFileMatch;[self, FileType.DIRECTORIES, nameFilter, closure]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deleteDir</MethodName>
            <MethodComment>/** 
 * Deletes a directory with all contained files and subdirectories. &lt;p&gt;The method returns &lt;ul&gt; &lt;li&gt;true, when deletion was successful&lt;/li&gt; &lt;li&gt;true, when it is called for a non existing directory&lt;/li&gt; &lt;li&gt;false, when it is called for a file which isn't a directory&lt;/li&gt; &lt;li&gt;false, when directory couldn't be deleted&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
 * @param self a Path
 * @return true if the file doesn't exist or deletion was successful
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>renameTo</MethodName>
            <MethodComment>/** 
 * Renames a file.
 * @param self        a Path
 * @param newPathName The new pathname for the named file
 * @return &lt;code&gt;true&lt;/code&gt; if and only if the renaming succeeded;&lt;code&gt;false&lt;/code&gt; otherwise
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newPathName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>renameTo</MethodName>
            <MethodComment>/** 
 * Renames a file.
 * @param self        a Path
 * @param newPathName The new target path specified as a URI object
 * @return &lt;code&gt;true&lt;/code&gt; if and only if the renaming succeeded;&lt;code&gt;false&lt;/code&gt; otherwise
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newPathName</ParamName>
                    <ParamType>URI</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asWritable</MethodName>
            <MethodComment>/** 
 * Converts this Path to a  {@link groovy.lang.Writable}.
 * @param self a Path
 * @return a Path which wraps the input file and which implements Writable
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>Path</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asType</MethodName>
            <MethodComment>/** 
 * Converts this Path to a  {@link groovy.lang.Writable} or delegates to default{@link org.codehaus.groovy.runtime.DefaultGroovyMethods#asType(Object,Class)}.
 * @param path a Path
 * @param c the desired class
 * @return the converted object
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asWritable</MethodName>
            <MethodComment>/** 
 * Allows a file to return a Writable implementation that can output itself to a Writer stream.
 * @param self     a Path
 * @param encoding the encoding to be used when reading the file's contents
 * @return Path which wraps the input file and which implements Writable
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>Path</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>encoding</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newReader</MethodName>
            <MethodComment>/** 
 * Create a buffered reader for this file.
 * @param self a Path
 * @return a BufferedReader
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>BufferedReader</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newReader</MethodName>
            <MethodComment>/** 
 * Create a buffered reader for this file, using the specified charset as the encoding.
 * @param self    a Path
 * @param charset the charset for this Path
 * @return a BufferedReader
 * @throws java.io.FileNotFoundException        if the Path was not found
 * @throws java.io.UnsupportedEncodingException if the encoding specified is not supported
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>BufferedReader</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>withReader</MethodName>
            <MethodComment>/** 
 * Create a new BufferedReader for this file and then passes it into the closure, ensuring the reader is closed after the closure returns.
 * @param self    a file object
 * @param closure a closure
 * @return the value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>withReader</MethodName>
            <MethodComment>/** 
 * Create a new BufferedReader for this file using the specified charset and then passes it into the closure, ensuring the reader is closed after the closure returns.
 * @param self    a file object
 * @param charset the charset for this input stream
 * @param closure a closure
 * @return the value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newOutputStream</MethodName>
            <MethodComment>/** 
 * Create a buffered output stream for this file.
 * @param self a file object
 * @return the created OutputStream
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>BufferedOutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newDataOutputStream</MethodName>
            <MethodComment>/** 
 * Creates a new data output stream for this file.
 * @param self a file object
 * @return the created DataOutputStream
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>DataOutputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>withOutputStream</MethodName>
            <MethodComment>/** 
 * Creates a new OutputStream for this file and passes it into the closure. This method ensures the stream is closed after the closure returns.
 * @param self    a Path
 * @param closure a closure
 * @return the value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#withStream(java.io.OutputStream,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>withInputStream</MethodName>
            <MethodComment>/** 
 * Create a new InputStream for this file and passes it into the closure. This method ensures the stream is closed after the closure returns.
 * @param self    a Path
 * @param closure a closure
 * @return the value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#withStream(java.io.InputStream,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>withDataOutputStream</MethodName>
            <MethodComment>/** 
 * Create a new DataOutputStream for this file and passes it into the closure. This method ensures the stream is closed after the closure returns.
 * @param self    a Path
 * @param closure a closure
 * @return the value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#withStream(java.io.OutputStream,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>withDataInputStream</MethodName>
            <MethodComment>/** 
 * Create a new DataInputStream for this file and passes it into the closure. This method ensures the stream is closed after the closure returns.
 * @param self    a Path
 * @param closure a closure
 * @return the value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#withStream(java.io.InputStream,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newWriter</MethodName>
            <MethodComment>/** 
 * Create a buffered writer for this file.
 * @param self a Path
 * @return a BufferedWriter
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>BufferedWriter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newWriter</MethodName>
            <MethodComment>/** 
 * Creates a buffered writer for this file, optionally appending to the existing file content.
 * @param self   a Path
 * @param append true if data should be appended to the file
 * @return a BufferedWriter
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>BufferedWriter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>append</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newWriter</MethodName>
            <MethodComment>/** 
 * Helper method to create a buffered writer for a file.  If the given charset is "UTF-16BE" or "UTF-16LE", the requisite byte order mark is written to the stream before the writer is returned.
 * @param self    a Path
 * @param charset the name of the encoding used to write in this file
 * @param append  true if in append mode
 * @return a BufferedWriter
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>BufferedWriter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>append</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newWriter</MethodName>
            <MethodComment>/** 
 * Creates a buffered writer for this file, writing data using the given encoding.
 * @param self    a Path
 * @param charset the name of the encoding used to write in this file
 * @return a BufferedWriter
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>BufferedWriter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>withWriter</MethodName>
            <MethodComment>/** 
 * Creates a new BufferedWriter for this file, passes it to the closure, and ensures the stream is flushed and closed after the closure returns.
 * @param self    a Path
 * @param closure a closure
 * @return the value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>withWriter</MethodName>
            <MethodComment>/** 
 * Creates a new BufferedWriter for this file, passes it to the closure, and ensures the stream is flushed and closed after the closure returns. The writer will use the given charset encoding.
 * @param self    a Path
 * @param charset the charset used
 * @param closure a closure
 * @return the value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>withWriterAppend</MethodName>
            <MethodComment>/** 
 * Create a new BufferedWriter which will append to this file.  The writer is passed to the closure and will be closed before this method returns.
 * @param self    a Path
 * @param charset the charset used
 * @param closure a closure
 * @return the value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>withWriterAppend</MethodName>
            <MethodComment>/** 
 * Create a new BufferedWriter for this file in append mode.  The writer is passed to the closure and is closed after the closure returns.
 * @param self    a Path
 * @param closure a closure
 * @return the value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newPrintWriter</MethodName>
            <MethodComment>/** 
 * Create a new PrintWriter for this file.
 * @param self a Path
 * @return the created PrintWriter
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>PrintWriter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newPrintWriter</MethodName>
            <MethodComment>/** 
 * Create a new PrintWriter for this file, using specified charset.
 * @param self    a Path
 * @param charset the charset
 * @return a PrintWriter
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>PrintWriter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>withPrintWriter</MethodName>
            <MethodComment>/** 
 * Create a new PrintWriter for this file which is then passed it into the given closure.  This method ensures its the writer is closed after the closure returns.
 * @param self    a Path
 * @param closure the closure to invoke with the PrintWriter
 * @return the value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>withPrintWriter</MethodName>
            <MethodComment>/** 
 * Create a new PrintWriter with a specified charset for this file.  The writer is passed to the closure, and will be closed before this method returns.
 * @param self    a Path
 * @param charset the charset
 * @param closure the closure to invoke with the PrintWriter
 * @return the value returned by the closure
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newInputStream</MethodName>
            <MethodComment>/** 
 * Creates a buffered input stream for this file.
 * @param self a Path
 * @return a BufferedInputStream of the file
 * @throws java.io.FileNotFoundException if the file is not found.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>BufferedInputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newDataInputStream</MethodName>
            <MethodComment>/** 
 * Create a data input stream for this file
 * @param self a Path
 * @return a DataInputStream of the file
 * @throws java.io.FileNotFoundException if the file is not found.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>DataInputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eachByte</MethodName>
            <MethodComment>/** 
 * Traverse through each byte of this Path
 * @param self    a Path
 * @param closure a closure
 * @throws java.io.IOException if an IOException occurs.
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#eachByte(java.io.InputStream,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BufferedInputStream [is=newInputStream(self)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>IOGroovyMethods;eachByte;[is, closure]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eachByte</MethodName>
            <MethodComment>/** 
 * Traverse through the bytes of this Path, bufferLen bytes at a time.
 * @param self      a Path
 * @param bufferLen the length of the buffer to use.
 * @param closure   a 2 parameter closure which is passed the byte[] and a number of bytes successfully read.
 * @throws java.io.IOException if an IOException occurs.
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#eachByte(java.io.InputStream,int,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bufferLen</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BufferedInputStream [is=newInputStream(self)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>IOGroovyMethods;eachByte;[is, bufferLen, closure]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>filterLine</MethodName>
            <MethodComment>/** 
 * Filters the lines of a Path and creates a Writable in return to stream the filtered lines.
 * @param self    a Path
 * @param closure a closure which returns a boolean indicating to filterthe line or not
 * @return a Writable closure
 * @throws java.io.IOException if &lt;code&gt;self&lt;/code&gt; is not readable
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#filterLine(java.io.Reader,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>Writable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>filterLine</MethodName>
            <MethodComment>/** 
 * Filters the lines of a Path and creates a Writable in return to stream the filtered lines.
 * @param self    a Path
 * @param charset opens the file with a specified charset
 * @param closure a closure which returns a boolean indicating to filterthe line or not
 * @return a Writable closure
 * @throws java.io.IOException if an IOException occurs
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#filterLine(java.io.Reader,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>Writable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>filterLine</MethodName>
            <MethodComment>/** 
 * Filter the lines from this Path, and write them to the given writer based on the given closure predicate.
 * @param self    a Path
 * @param writer  a writer destination to write filtered lines to
 * @param closure a closure which takes each line as a parameter and returns&lt;code&gt;true&lt;/code&gt; if the line should be written to this writer.
 * @throws java.io.IOException if &lt;code&gt;self&lt;/code&gt; is not readable
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#filterLine(java.io.Reader,java.io.Writer,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>writer</ParamName>
                    <ParamType>Writer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>IOGroovyMethods;filterLine;[newReader(self), writer, closure]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>filterLine</MethodName>
            <MethodComment>/** 
 * Filter the lines from this Path, and write them to the given writer based on the given closure predicate.
 * @param self    a Path
 * @param writer  a writer destination to write filtered lines to
 * @param charset opens the file with a specified charset
 * @param closure a closure which takes each line as a parameter and returns&lt;code&gt;true&lt;/code&gt; if the line should be written to this writer.
 * @throws java.io.IOException if an IO error occurs
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#filterLine(java.io.Reader,java.io.Writer,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>writer</ParamName>
                    <ParamType>Writer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charset</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>IOGroovyMethods;filterLine;[newReader(self,charset), writer, closure]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readBytes</MethodName>
            <MethodComment>/** 
 * Reads the content of the file into a byte array.
 * @param self a Path
 * @return a byte array with the contents of the file.
 * @throws java.io.IOException if an IOException occurs.
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>withCloseable</MethodName>
            <MethodComment>/** 
 * #deprecated use the variant in IOGroovyMethods
 * @see org.codehaus.groovy.runtime.IOGroovyMethods#withCloseable(java.io.Closeable,groovy.lang.Closure)
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Closeable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>action</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>