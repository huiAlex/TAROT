<Class>
    <Id>59</Id>
    <Package>groovy.lang</Package>
    <ClassName>BenchmarkInterceptor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Interceptor</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BenchmarkInterceptor  /** 
 * Interceptor that registers the timestamp of each method call before and after invocation. The timestamps are stored internally and can be retrieved through the with the &lt;pre&gt;getCalls()&lt;/pre&gt;  and &lt;pre&gt;statistic()&lt;/pre&gt; API. &lt;p&gt; Example usage: &lt;pre&gt; def proxy = ProxyMetaClass.getInstance(ArrayList.class) proxy.interceptor = new BenchmarkInterceptor() proxy.use { def list = (0..10000).collect{ it } 4.times { list.size() } 4000.times { list.set(it, it+1) } } proxy.interceptor.statistic() &lt;/pre&gt; Which produces the following output:  &lt;pre&gt; [[size, 4, 0], [set, 4000, 21]] &lt;/pre&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>calls</FieldName>
            <FieldType>Map</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getCalls</MethodName>
            <MethodComment>/** 
 * Returns the raw data associated with the current benchmark run. 
 */
</MethodComment>
            <ReturnType>Map</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reset</MethodName>
            <MethodComment>/** 
 * Resets all the benchmark data on this object. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>beforeInvoke</MethodName>
            <MethodComment>/** 
 * This code is executed before the method is called.
 * @param object        receiver object for the method call
 * @param methodName    name of the method to call
 * @param arguments     arguments to the method call
 * @return nullrelays this result.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((List)calls.get(methodName));add;[new Long(System.currentTimeMillis())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>afterInvoke</MethodName>
            <MethodComment>/** 
 * This code is executed after the method is called.
 * @param object        receiver object for the called method
 * @param methodName    name of the called method
 * @param arguments     arguments to the called method
 * @param result        result of the executed method call or result of beforeInvoke if method was not called
 * @return result
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((List)calls.get(methodName));add;[new Long(System.currentTimeMillis())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doInvoke</MethodName>
            <MethodComment>/** 
 * The call should be invoked seperately
 * @return true
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>statistic</MethodName>
            <MethodComment>/** 
 * Returns benchmark statistics as a List&amp;lt;Object[]&amp;gt;.  AccumulateTime is measured in milliseconds and is as accurate as System.currentTimeMillis() allows it to be. 
 * @return a list of lines, each item is [methodname, numberOfCalls, accumulatedTime]
 */
</MethodComment>
            <ReturnType>List</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List [result=new LinkedList()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>