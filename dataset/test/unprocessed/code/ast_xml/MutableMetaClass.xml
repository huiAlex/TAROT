<Class>
    <Id>830</Id>
    <Package>groovy.lang</Package>
    <ClassName>MutableMetaClass</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>MetaClass</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MutableMetaClass  /** 
 * An interface that defines methods that implementers of mutable Meta classes should specify. It provides operations to perform mutations on the MetaClass instance. &lt;p&gt; Whether a MetaClass allows mutation is up to the MetaClass itself and considerations of Thread safety need to be taken into account when making a MetaClass mutable &lt;p&gt; The default implementation allows mutation of MetaClass instances before initialisation (before the initialize() method is called) but not after, thus ensuring Thread safety once a MetaClass has been constructed and placed in the registry
 * @see MetaClassImpl
 * @see MetaClass
 * @author Graeme Rocher
 * @since 1.5
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>isModified</MethodName>
            <MethodComment>/** 
 * Return whether the MetaClass has been modified or not
 * @return True if it has
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addNewInstanceMethod</MethodName>
            <MethodComment>/** 
 * adds a new instance method to this MetaClass. Instance methods are able to overwrite the original methods of the class. Calling this method should not be done after initialise was called.
 * @param method the method to be added
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addNewStaticMethod</MethodName>
            <MethodComment>/** 
 * adds a new static method to this MetaClass. This is only possible as long as initialise was not called.
 * @param method the method to be added
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addMetaMethod</MethodName>
            <MethodComment>/** 
 * Adds a new MetaMethod to the MetaClass
 * @param metaMethod The MetaMethod to add
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>metaMethod</ParamName>
                    <ParamType>MetaMethod</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addMetaBeanProperty</MethodName>
            <MethodComment>/** 
 * Adds a new MetaBeanProperty to the MetaClass
 * @param metaBeanProperty The MetaBeanProperty instance
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>metaBeanProperty</ParamName>
                    <ParamType>MetaBeanProperty</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>