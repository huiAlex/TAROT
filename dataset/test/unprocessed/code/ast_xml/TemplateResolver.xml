<Class>
    <Id>24</Id>
    <Package>groovy.text.markup</Package>
    <ClassName>TemplateResolver</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TemplateResolver  /** 
 * Interface for template resolvers, which, given a template identifier, return an URL where the template can be loaded.
 * @author CÃ©dric Champeau
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>configure</MethodName>
            <MethodComment>/** 
 * This method is called once the template engine is initialized, providing the resolver with the template engine configuration and its template class loader.
 * @param templateClassLoader the classloader where templates will be searched for
 * @param configuration the configuration of the template engine
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>templateClassLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>TemplateConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resolveTemplate</MethodName>
            <MethodComment>/** 
 * Resolvers must implement this method in order to resolve a template, given a template path. They must return a valid URL or an IOException.
 * @param templatePath path to the template
 * @return the template URL, that will be used to load the template
 * @throws IOException
 */
</MethodComment>
            <ReturnType>URL</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>templatePath</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>