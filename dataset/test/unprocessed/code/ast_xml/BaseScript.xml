<Class>
    <Id>422</Id>
    <Package>groovy.transform</Package>
    <ClassName>BaseScript</ClassName>
    <ClassComment>BaseScript  /** 
 * Variable annotation used for changing the base script class of the current script. &lt;p&gt; The type of the variable annotated with  {@code @BaseScript} must extend {@link groovy.lang.Script}. It will be used as the base script class. The annotated variable will become shortcut to &lt;code&gt;this&lt;/code&gt; object. Using this annotation will override base script set by Groovy compiler or {@link org.codehaus.groovy.control.CompilerConfiguration} of {@link groovy.lang.GroovyShell}Example usage: &lt;pre&gt; class CustomScript extends Script { int getTheMeaningOfLife() { 42 } } &amp;#64;BaseScript CustomScript baseScript assert baseScript == this assert theMeaningOfLife == 42 assert theMeaningOfLife == baseScript.theMeaningOfLife &lt;/pre&gt; In this example, the base script of the current script will be changed to  &lt;code&gt;CustomScript&lt;/code&gt; allowing usage of &lt;code&gt;getTheMeaningOfLife()&lt;/code&gt; method. &lt;code&gt;baseScript&lt;/code&gt; variable will become typed shortcut for  &lt;code&gt;this&lt;/code&gt; object which enables better IDE support. &lt;/p&gt;&lt;p&gt; The custom base script may implement the run() method and specify a different method name to be used for the script body by declaring a single abstract method. For example: &lt;pre&gt; abstract class CustomScriptBodyMethod extends Script { abstract def runScript() def preRun() { println "preRunning" } def postRun() { println "postRunning" } def run() { preRun() try { 3.times { runScript() } } finally { postRun() } } } {@code @BaseScript} CustomScriptBodyMethod baseScriptprintln "Script body run" &lt;/pre&gt; That will produce the following output: &lt;pre&gt; preRunning Script body run Script body run Script body run postRunning &lt;/pre&gt; Note that while you can declare arguments for the script body's method, as the AST is currently implemented they are not accessible in the script body code. &lt;/p&gt;
 * @author Paul King
 * @author Vladimir Orany
 * @author Jim White
 * @since 2.2.0
 */
</ClassComment>
    <FieldList/>
    <MethodList/>
</Class>