<Class>
    <Id>226</Id>
    <Package>groovy.transform</Package>
    <ClassName>TupleConstructor</ClassName>
    <ClassComment>TupleConstructor  /** 
 * Class annotation used to assist in the creation of tuple constructors in classes. &lt;p&gt; It allows you to write classes in this shortened form: &lt;pre&gt; {@code @TupleConstructor} class Customer {String first, last int age Date since Collection favItems } def c1 = new Customer(first:'Tom', last:'Jones', age:21, since:new Date(), favItems:['Books', 'Games']) def c2 = new Customer('Tom', 'Jones', 21, new Date(), ['Books', 'Games']) def c3 = new Customer('Tom', 'Jones') &lt;/pre&gt; The  {@code @TupleConstructor} annotation instructs the compiler to execute anAST transformation which adds the necessary constructor method to your class. &lt;p&gt; A tuple constructor is created with a parameter for each property (and optionally field and super properties). A default value is provided (using Java's default values) for all parameters in the constructor. Groovy's normal conventions then allows any number of parameters to be left off the end of the parameter list including all of the parameters - giving a no-arg constructor which can be used with the map-style naming conventions. &lt;p&gt; The order of parameters is given by the properties of any super classes with most super first (if  {@code includeSuperProperties} is set) followed by the properties of the class followedby the fields of the class (if  {@code includeFields} is set). Within each grouping the orderis as attributes appear within the respective class. &lt;p&gt; Limitations: &lt;ul&gt; &lt;li&gt;Groovy's normal map-style naming conventions will not be available if the first property (or field) has type  {@code LinkedHashMap} or if there is a single Map, AbstractMap or HashMap property (or field)&lt;/li&gt;&lt;/ul&gt;
 * @author Paul King
 * @since 1.8.0
 */
</ClassComment>
    <FieldList/>
    <MethodList/>
</Class>