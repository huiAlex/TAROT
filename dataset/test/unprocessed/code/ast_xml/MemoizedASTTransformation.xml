<Class>
    <Id>972</Id>
    <Package>org.codehaus.groovy.transform</Package>
    <ClassName>MemoizedASTTransformation</ClassName>
    <SuperClass>AbstractASTTransformation</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MemoizedASTTransformation  /** 
 * Handles generation of code for the  {@link Memoized} annotation.
 * @author Andrey Bloschetsov
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>CLOSURE_CALL_METHOD_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MY_CLASS</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>MY_CLASS</FieldName>
            <FieldType>Memoized</FieldType>
        </Field>
        <Field>
            <FieldName>MY_TYPE</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>MY_TYPE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PROTECTED_CACHE_SIZE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_CACHE_SIZE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CLOSURE_LABEL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>METHOD_LABEL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MEMOIZE_METHOD_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MEMOIZE_AT_MOST_METHOD_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MEMOIZE_AT_LEAST_METHOD_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MEMOIZE_BETWEEN_METHOD_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nodes</ParamName>
                    <ParamType>ASTNode[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AnnotationNode [annotationNode=(AnnotationNode)nodes[0]]</InnerVar>
                <InnerVar>AnnotatedNode [annotatedNode=(AnnotatedNode)nodes[1]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;init;[nodes, source]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildDelegatingMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotatedMethod</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ownerClassNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Statement [code=annotatedMethod.getCode()]</InnerVar>
                <InnerVar>int [access=ACC_PROTECTED]</InnerVar>
                <InnerVar>MethodNode [method=new MethodNode(buildUniqueName(ownerClassNode,METHOD_LABEL,annotatedMethod),access,annotatedMethod.getReturnType(),cloneParams(annotatedMethod.getParameters()),annotatedMethod.getExceptions(),code)]</InnerVar>
                <InnerVar>List&lt;AnnotationNode&gt; [sourceAnnotations=annotatedMethod.getAnnotations()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>method;addAnnotations;[new ArrayList&lt;AnnotationNode&gt;(sourceAnnotations)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildMemoizeClosureCallExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodCallExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>privateMethod</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>protectedCacheSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxCacheSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Parameter[] [srcParams=privateMethod.getParameters()]</InnerVar>
                <InnerVar>Parameter[] [newParams=cloneParams(srcParams)]</InnerVar>
                <InnerVar>List&lt;Expression&gt; [argList=new ArrayList&lt;Expression&gt;(newParams.length)]</InnerVar>
                <InnerVar>ClosureExpression [expression=new ClosureExpression(newParams,stmt(callThisX(privateMethod.getName(),args(argList))))]</InnerVar>
                <InnerVar>MethodCallExpression [mce]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mce;setImplicitThis;[false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildUniqueName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>owner</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ident</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodNode</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [nameBuilder=new StringBuilder("memoizedMethod" + ident + "$").append(methodNode.getName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildTypeName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>