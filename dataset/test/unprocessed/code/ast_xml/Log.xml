<Class>
    <Id>833</Id>
    <Package>groovy.util.logging</Package>
    <ClassName>Log</ClassName>
    <ClassComment>Log  /** 
 * This local transform adds a logging ability to your program using java.util.logging. Every method call on a unbound variable named &lt;i&gt;log&lt;/i&gt; will be mapped to a call to the logger. For this a &lt;i&gt;log&lt;/i&gt; field will be inserted in the class. If the field already exists the usage of this transform will cause a compilation error. The method name will be used to determine what to call on the logger. &lt;pre&gt; log.name(exp) &lt;/pre&gt;is mapped to &lt;pre&gt; if (log.isLoggable(Level.NAME) { log.name(exp) }&lt;/pre&gt; Here name is a place holder for info, fine, finer, finest, config, warning, severe. NAME is name transformed to upper case. if anything else is used it will result in an exception at runtime. If the expression exp is a constant or only a variable access the method call will not be transformed. But this will still cause a call on the injected logger.
 * @author Guillaume Laforge
 * @author Jochen Theodorou
 * @author Dinko Srkoc
 * @author Hamlet D'Arcy
 * @author Raffaele Cigni
 * @author Alberto Vilches Raton
 * @since 1.8.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>LOGGER_CLASSNODE</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>LEVEL_CLASSNODE</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>JavaUtilLoggingStrategy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>loader</ParamName>
                    <ParamType>GroovyClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addLoggerFieldToClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FieldNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>logFieldName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>categoryName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isLoggingMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>wrapLoggingMethodCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>logVariable</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>originalExpression</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AttributeExpression [logLevelExpression=new AttributeExpression(new ClassExpression(LEVEL_CLASSNODE),new ConstantExpression(methodName.toUpperCase(Locale.ENGLISH)))]</InnerVar>
                <InnerVar>ArgumentListExpression [args=new ArgumentListExpression()]</InnerVar>
                <InnerVar>MethodCallExpression [condition=new MethodCallExpression(logVariable,"isLoggable",args)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>args;addExpression;[logLevelExpression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>