<Class>
    <Id>465</Id>
    <Package>groovy.ui</Package>
    <ClassName>GroovySocketServer</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Runnable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GroovySocketServer  /** 
 * Simple server that executes supplied script against a socket. &lt;p&gt; Typically this is used from the groovy command line agent but it can be  invoked programatically. To run this program from the command line please refer to the command line documentation at &lt;a href="http://groovy.codehaus.org/Groovy+CLI"&gt; Groovy CLI&lt;/a&gt;. &lt;p&gt; Here is an example of how to use this class to open a listening socket on the server,  listen for incoming data, and then echo the data back to the client in reverse order:  &lt;pre&gt; new GroovySocketServer( new GroovyShell(),      // evaluator false,                  // is not a file "println line.reverse()",         // script to evaluate true,                   // return result to client 1960)                   //port &lt;/pre&gt; There are several variables in the script binding: &lt;ul&gt; &lt;li&gt;line - The data from the socket&lt;/li&gt;  &lt;li&gt;out - The output PrintWriter, should you need it for some reason.&lt;/li&gt;  &lt;li&gt;socket - The socket, should you need it for some reason.&lt;/li&gt;  &lt;/ul&gt;
 * @author Jeremy Rayner
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>url</FieldName>
            <FieldType>URL</FieldType>
        </Field>
        <Field>
            <FieldName>groovy</FieldName>
            <FieldType>GroovyShell</FieldType>
        </Field>
        <Field>
            <FieldName>source</FieldName>
            <FieldType>GroovyCodeSource</FieldType>
        </Field>
        <Field>
            <FieldName>autoOutput</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>counter</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>uriPattern</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>script</FieldName>
            <FieldType>Script</FieldType>
        </Field>
        <Field>
            <FieldName>socket</FieldName>
            <FieldType>Socket</FieldType>
        </Field>
        <Field>
            <FieldName>reader</FieldName>
            <FieldType>BufferedReader</FieldType>
        </Field>
        <Field>
            <FieldName>writer</FieldName>
            <FieldType>PrintWriter</FieldType>
        </Field>
        <Field>
            <FieldName>autoOutputFlag</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>GroovySocketServer</MethodName>
            <MethodComment>/** 
 * This creates and starts the socket server on a new Thread. There is no need to call run or spawn a new thread yourself.
 * @param groovy The GroovyShell object that evaluates the incoming text. If you need additional classes in the classloader then configure that through this object.
 * @param isScriptFile Whether the incoming socket data String will be a script or a file path.
 * @param scriptFilenameOrText This will be a groovy script or a file location depending on the argument isScriptFile.
 * @param autoOutput whether output should be automatically echoed back to the client
 * @param port the port to listen on
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>groovy</ParamName>
                    <ParamType>GroovyShell</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isScriptFile</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scriptFilenameOrText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>autoOutput</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>port</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCodeSource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>GroovyCodeSource</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scriptFile</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scriptFilenameOrText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateScriptName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GroovySocketServer</MethodName>
            <MethodComment>/** 
 * This creates and starts the socket server on a new Thread. There is no need to call run or spawn a new thread yourself. 
 * @param groovy The GroovyShell object that evaluates the incoming text. If you need additional classes in the  classloader then configure that through this object. 
 * @param source GroovyCodeSource for the Groovy script
 * @param autoOutput whether output should be automatically echoed back to the client
 * @param port the port to listen on
 * @since 2.3.0
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>groovy</ParamName>
                    <ParamType>GroovyShell</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>GroovyCodeSource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>autoOutput</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>port</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>new Thread(this);start;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment>/** 
 * Runs this server. There is typically no need to call this method, as the object's constructor creates a new thread and runs this object automatically. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GroovyClientConnection</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>script</ParamName>
                    <ParamType>Script</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>autoOutput</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>socket</ParamName>
                    <ParamType>Socket</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>new Thread(this,"Groovy client connection - " + socket.getInetAddress().getHostAddress());start;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>