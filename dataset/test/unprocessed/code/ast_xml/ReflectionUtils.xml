<Class>
    <Id>1101</Id>
    <Package>org.codehaus.groovy.reflection</Package>
    <ClassName>ReflectionUtils</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ReflectionUtils  /** 
 * This class contains utility methods to determine which class called the current class to multiple levels of depth.  Calls used to handle the groovy MOP are excluded from the level counting.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>IGNORED_PACKAGES</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>IGNORED_PACKAGES</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HELPER</FieldName>
            <FieldType>ClassContextHelper</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>isCallingClassReflectionAvailable</MethodName>
            <MethodComment>/** 
 * Determine whether or not the getCallingClass methods will return any sensible results.  On JVMs that are not Sun derived i.e. (gcj, Harmony) this will likely return false.  When not available all getCallingClass methods will return null.
 * @return true if getCallingClass can return anything but null, false ifit will only return null.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCallingClass</MethodName>
            <MethodComment>/** 
 * Get the immediate calling class, ignoring MOP frames.
 * @return The Class of the caller
 */
</MethodComment>
            <ReturnType>Class</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCallingClass</MethodName>
            <MethodComment>/** 
 * Get the called that is matchLevel stack frames before the call, ignoring MOP frames.
 * @param matchLevel how may call stacks down to look.If it is less than 1 it is treated as though it was 1.
 * @return The Class of the matched caller, or null if there aren'tenough stackframes to satisfy matchLevel
 */
</MethodComment>
            <ReturnType>Class</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>matchLevel</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCallingClass</MethodName>
            <MethodComment>/** 
 * Get the called that is matchLevel stack frames before the call, ignoring MOP frames and desired exclude packages.
 * @param matchLevel           how may call stacks down to look.If it is less than 1 it is treated as though it was 1.
 * @param extraIgnoredPackages A collection of string names of packages to excludein addition to the MOP packages when counting stack frames.
 * @return The Class of the matched caller, or null if there aren'tenough stackframes to satisfy matchLevel
 */
</MethodComment>
            <ReturnType>Class</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>matchLevel</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>extraIgnoredPackages</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class[] [classContext=HELPER.getClassContext()]</InnerVar>
                <InnerVar>int [depth=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>superClassShouldBeIgnored</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sc</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>classShouldBeIgnored</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>extraIgnoredPackages</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Class[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>