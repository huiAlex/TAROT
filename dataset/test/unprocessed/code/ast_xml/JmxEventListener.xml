<Class>
    <Id>310</Id>
    <Package>groovy.jmx.builder</Package>
    <ClassName>JmxEventListener</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>NotificationListener</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>JmxEventListener  /** 
 * The JmxEventListener class is used by the builder to listen to events on the event bus.  It is used internally by JmxBuilder to handle attribute-change and operation-invoke events on the bean() node.
 * @author Vladimir Vivien
 * @see groovy.jmx.builder.JmxBeanFactory
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>listener</FieldName>
            <FieldType>JmxEventListener</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getListener</MethodName>
            <MethodComment>/** 
 * Factory method that returns an instance of the listener.
 * @return - JmxEventListener instance.
 */
</MethodComment>
            <ReturnType>JmxEventListener</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleNotification</MethodName>
            <MethodComment>/** 
 * This is the implemented method for NotificationListener.  It is called by an event emitter to dispatch JMX events to listeners.  Here it handles internal JmxBuilder events.
 * @param notification the notification object passed to closure used to handle JmxBuilder events.
 * @param handback     - In this case, the handback is the closure to execute when the event is handled.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>notification</ParamName>
                    <ParamType>Notification</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>handback</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map [event=(Map)handback]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildOperationNotificationPacket</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Map</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>note</ParamName>
                    <ParamType>Notification</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,Object&gt; [result=new HashMap&lt;String,Object&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>result;put;["event", note.getType()]</InnerMethodInvoke>
                <InnerMethodInvoke>result;put;["source", note.getSource()]</InnerMethodInvoke>
                <InnerMethodInvoke>result;put;["sequenceNumber", note.getSequenceNumber()]</InnerMethodInvoke>
                <InnerMethodInvoke>result;put;["timeStamp", note.getTimeStamp()]</InnerMethodInvoke>
                <InnerMethodInvoke>result;put;["data", note.getUserData()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>