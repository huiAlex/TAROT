<Class>
    <Id>356</Id>
    <Package>groovy.transform</Package>
    <ClassName>InheritConstructors</ClassName>
    <ClassComment>InheritConstructors  /** 
 * Class annotation to make constructors from a super class available in a sub class. &lt;p&gt; {@code @InheritConstructors} saves you typing some boilerplate code.&lt;p&gt; &lt;em&gt;Example usage:&lt;/em&gt; &lt;pre&gt; class Person { String first, last Person(String first, String last) { this.first = first this.last = last.toUpperCase() } } {@code @InheritConstructors}class PersonAge extends Person { int age } def js = new PersonAge('John', 'Smith') js.age = 25 println "$js.last, $js.first is $js.age years old" // =&gt; SMITH, John is 25 years old &lt;/pre&gt; for this case, the &lt;code&gt;PersonAge&lt;/code&gt; class will be equivalent to the following code: &lt;pre&gt; class PersonAge extends Person { PersonAge(String first, String last) { super(first, last) } int age } &lt;/pre&gt; You may add additional constructors in addition to inherited ones. If the argument types of a supplied constructor exactly match those of a parent constructor, then that constructor won't be inherited. &lt;p&gt; &lt;em&gt;Style note:&lt;/em&gt; Don't go overboard using this annotation. Typical Groovy style is to use named-arg constructors when possible. This is easy to do for Groovy objects or any objects following JavaBean conventions. In other cases, inheriting the constructors may be useful. However, sub-classes often introduce new properties and these are often best set in a constructor; especially if that matches the style adopted in parent classes. So, even for the example above, it may have been better style to define an explicit constructor for &lt;code&gt;PersonAge&lt;/code&gt; that also set the &lt;code&gt;age&lt;/code&gt; property. Sometimes, consistent style is much more important than saving a few keystrokes. &lt;p&gt; As another example, this: &lt;pre&gt; {@code @InheritConstructors} class CustomException extends RuntimeException { }&lt;/pre&gt; is equivalent to this: &lt;pre&gt; class CustomException extends RuntimeException { CustomException() { super() } CustomException(String message) { super(message) } CustomException(String message, Throwable cause) { super(message, cause) } CustomException(Throwable cause) { super(cause) } } &lt;/pre&gt; &lt;em&gt;Advanced note:&lt;/em&gt;If you create Groovy constructors with optional arguments this leads to multiple constructors created in the byte code. The expansion to multiple constructors occurs in a later phase to this AST transformation. This means that you can't override (i.e. not inherit) the constructors with signatures that Groovy adds later. If you get it wrong you will get a compile-time error about the duplication.
 * @author Paul King
 * @since 1.7.3
 */
</ClassComment>
    <FieldList/>
    <MethodList/>
</Class>