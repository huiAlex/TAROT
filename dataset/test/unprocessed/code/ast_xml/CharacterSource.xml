<Class>
    <Id>501</Id>
    <Package>groovy.json.internal</Package>
    <ClassName>CharacterSource</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CharacterSource  /** 
 * @author Richard Hightower
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>skipWhiteSpace</MethodName>
            <MethodComment>/** 
 * Skip white space.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextChar</MethodName>
            <MethodComment>/** 
 * returns the next character moving the file pointer or index to the next location.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>currentChar</MethodName>
            <MethodComment>/** 
 * returns the current character without changing the IO pointer or index.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasChar</MethodName>
            <MethodComment>/** 
 * Checks to see if there is a next character.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>consumeIfMatch</MethodName>
            <MethodComment>/** 
 * Useful for finding constants in a string like true, false, etc.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>match</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>location</MethodName>
            <MethodComment>/** 
 * This is mostly for debugging and testing.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>safeNextChar</MethodName>
            <MethodComment>/** 
 * Combines the operations of nextChar and hasChar. Characters is -1 if not found which signifies end of file. This might be preferable to avoid two method calls.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findNextChar</MethodName>
            <MethodComment>/** 
 * Used to find strings and their ilk Finds the next non-escaped char
 * @param ch  character to find
 * @param esc escape character to avoid next char if escaped
 * @return list of chars until this is found.
 */
</MethodComment>
            <ReturnType>char[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ch</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>esc</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hadEscape</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readNumber</MethodName>
            <MethodComment>/** 
 * Reads a number from the character source.
 */
</MethodComment>
            <ReturnType>char[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>errorDetails</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>