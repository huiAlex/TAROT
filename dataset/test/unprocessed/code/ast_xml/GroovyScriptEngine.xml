<Class>
    <Id>1172</Id>
    <Package>groovy.util</Package>
    <ClassName>GroovyScriptEngine</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ResourceConnector</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GroovyScriptEngine  /** 
 * Specific script engine able to reload modified scripts as well as dealing properly with dependent scripts.
 * @author sam
 * @author Marc Palmer
 * @author Guillaume Laforge
 * @author Jochen Theodorou
 * @author Mattias Reichel
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>CL_STUB</FieldName>
            <FieldType>ClassLoader</FieldType>
        </Field>
        <Field>
            <FieldName>EMPTY_URL_ARRAY</FieldName>
            <FieldType>URL[]</FieldType>
        </Field>
        <Field>
            <FieldName>cu</FieldName>
            <FieldType>CompilationUnit</FieldType>
        </Field>
        <Field>
            <FieldName>dependencyCache</FieldName>
            <FieldType>StringSetMap</FieldType>
        </Field>
        <Field>
            <FieldName>precompiledEntries</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>precompiledEntries</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>localData</FieldName>
            <FieldType>WeakReference</FieldType>
        </Field>
        <Field>
            <FieldName>localData</FieldName>
            <FieldType>ThreadLocal&lt;LocalData&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>roots</FieldName>
            <FieldType>URL[]</FieldType>
        </Field>
        <Field>
            <FieldName>rc</FieldName>
            <FieldType>ResourceConnector</FieldType>
        </Field>
        <Field>
            <FieldName>parentLoader</FieldName>
            <FieldType>ClassLoader</FieldType>
        </Field>
        <Field>
            <FieldName>groovyLoader</FieldName>
            <FieldType>GroovyClassLoader</FieldType>
        </Field>
        <Field>
            <FieldName>scriptCache</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>scriptCache</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>config</FieldName>
            <FieldType>CompilerConfiguration</FieldType>
        </Field>
        <Field>
            <FieldName>scriptClass</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>lastModified</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>lastCheck</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>dependencies</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>dependencies</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>sourceNewer</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getLocalData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LocalData</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ThreadLocal&lt;LocalData&gt; [local=localData.get()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ScriptCacheEntry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>modified</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lastCheck</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>depend</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sourceNewer</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ScriptCacheEntry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>old</ParamName>
                    <ParamType>ScriptCacheEntry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lastCheck</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sourceNewer</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ScriptClassLoader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>loader</ParamName>
                    <ParamType>GroovyClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ScriptClassLoader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>loader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>CompilerConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setResLoader;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setResLoader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>GroovyResourceLoader [rl=getResourceLoader()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setResourceLoader;[new GroovyResourceLoader(){
  public URL loadGroovySource(  String className) throws MalformedURLException {
    String filename;
    for (    String extension : getConfig().getScriptExtensions()) {
      filename=className.replace('.',File.separatorChar) + "." + extension;
      try {
        URLConnection dependentScriptConn=rc.getResourceConnection(filename);
        return dependentScriptConn.getURL();
      }
 catch (      ResourceException e) {
      }
    }
    return rl.loadGroovySource(className);
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadGroovySource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>URL</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [filename]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>MalformedURLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createCompilationUnit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CompilationUnit</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>CompilerConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>CodeSource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompilationUnit [cu=super.createCompilationUnit(configuration,source)]</InnerVar>
                <InnerVar>LocalData [local=getLocalData().get()]</InnerVar>
                <InnerVar>StringSetMap [cache=local.dependencyCache]</InnerVar>
                <InnerVar>Map&lt;String,String&gt; [precompiledEntries=local.precompiledEntries]</InnerVar>
                <InnerVar>List&lt;CompilationCustomizer&gt; [customizers=config.getCompilationCustomizers()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cache;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>cu;addPhaseOperation;[new CompilationUnit.PrimaryClassNodeOperation(){
  @Override public void call(  final SourceUnit source,  GeneratorContext context,  ClassNode classNode) throws CompilationFailedException {
    if (classNode instanceof InnerClassNode)     return;
    DependencyTracker dt=new DependencyTracker(source,cache,precompiledEntries);
    dt.visitClass(classNode);
  }
}
, Phases.CLASS_GENERATION]</InnerMethodInvoke>
                <InnerMethodInvoke>cu;setClassNodeResolver;[new ClassNodeResolver(){
  @Override public LookupResult findClassNode(  String origName,  CompilationUnit compilationUnit){
    CompilerConfiguration cc=compilationUnit.getConfiguration();
    String name=origName.replace('.','/');
    for (    String ext : cc.getScriptExtensions()) {
      try {
        String finalName=name + "." + ext;
        URLConnection conn=rc.getResourceConnection(finalName);
        URL url=conn.getURL();
        String path=url.toExternalForm();
        ScriptCacheEntry entry=scriptCache.get(path);
        Class clazz=null;
        if (entry != null)         clazz=entry.scriptClass;
        if (GroovyScriptEngine.this.isSourceNewer(entry)) {
          try {
            SourceUnit su=compilationUnit.addSource(url);
            return new LookupResult(su,null);
          }
  finally {
            forceClose(conn);
          }
        }
 else {
          precompiledEntries.put(origName,path);
        }
        if (clazz != null) {
          ClassNode cn=new ClassNode(clazz);
          return new LookupResult(null,cn);
        }
      }
 catch (      ResourceException re) {
      }
    }
    return super.findClassNode(origName,compilationUnit);
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>GeneratorContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DependencyTracker [dt=new DependencyTracker(source,cache,precompiledEntries)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>dt;visitClass;[classNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findClassNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LookupResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>origName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>compilationUnit</ParamName>
                    <ParamType>CompilationUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompilerConfiguration [cc=compilationUnit.getConfiguration()]</InnerVar>
                <InnerVar>String [name=origName.replace('.','/')]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Class</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>codeSource</ParamName>
                    <ParamType>GroovyCodeSource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>shouldCacheSource</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doParseClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Class</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>codeSource</ParamName>
                    <ParamType>GroovyCodeSource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ThreadLocal&lt;LocalData&gt; [localTh=getLocalData()]</InnerVar>
                <InnerVar>LocalData [localData=new LocalData()]</InnerVar>
                <InnerVar>StringSetMap [cache=localData.dependencyCache]</InnerVar>
                <InnerVar>ScriptCacheEntry [origEntry=scriptCache.get(codeSource.getName())]</InnerVar>
                <InnerVar>Set&lt;String&gt; [origDep=null]</InnerVar>
                <InnerVar>Class [answer=super.parseClass(codeSource,false)]</InnerVar>
                <InnerVar>long [time=getCurrentTime()]</InnerVar>
                <InnerVar>Set&lt;String&gt; [entryNames=new HashSet&lt;String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>localTh;set;[localData]</InnerMethodInvoke>
                <InnerMethodInvoke>cache;makeTransitiveHull;[]</InnerMethodInvoke>
                <InnerMethodInvoke>cache;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>localTh;set;[null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPath</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>precompiledEntries</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompilationUnit [cu=getLocalData().get().cu]</InnerVar>
                <InnerVar>String [name=clazz.getName()]</InnerVar>
                <InnerVar>ClassNode [classNode=cu.getClassNode(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convertToPaths</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>orig</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>precompiledEntries</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;String&gt; [ret=new HashSet&lt;String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>main</MethodName>
            <MethodComment>/** 
 * Simple testing harness for the GSE. Enter script roots as arguments and then input script names to run them.
 * @param urls an array of URLs
 * @throws Exception if something goes wrong
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>urls</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GroovyScriptEngine [gse=new GroovyScriptEngine(urls)]</InnerVar>
                <InnerVar>BufferedReader [br=new BufferedReader(new InputStreamReader(System.in))]</InnerVar>
                <InnerVar>String [line]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initGroovyLoader</MethodName>
            <MethodComment>/** 
 * Initialize a new GroovyClassLoader with a default or constructor-supplied parentClassLoader.
 * @return the parent classloader used to load scripts
 */
</MethodComment>
            <ReturnType>GroovyClassLoader</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResourceConnection</MethodName>
            <MethodComment>/** 
 * Get a resource connection as a &lt;code&gt;URLConnection&lt;/code&gt; to retrieve a script from the &lt;code&gt;ResourceConnector&lt;/code&gt;.
 * @param resourceName name of the resource to be retrieved
 * @return a URLConnection to the resource
 * @throws ResourceException
 */
</MethodComment>
            <ReturnType>URLConnection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resourceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>URLConnection [groovyScriptConn=null]</InnerVar>
                <InnerVar>ResourceException [se=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ResourceException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>openConnection</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>URLConnection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scriptURL</ParamName>
                    <ParamType>URL</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>URLConnection [urlConnection=scriptURL.openConnection()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;verifyInputStream;[urlConnection]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forceClose</MethodName>
            <MethodComment>/** 
 * This method closes a  {@link URLConnection} by getting its {@link InputStream} and calling the{@link InputStream#close()} method on it. The {@link URLConnection} doesn't have a close() methodand relies on garbage collection to close the underlying connection to the file. Relying on garbage collection could lead to the application exhausting the number of files the user is allowed to have open at any one point in time and cause the application to crash ( {@link java.io.FileNotFoundException} (Too many open files)).Hence the need for this method to explicitly close the underlying connection to the file.
 * @param urlConnection the {@link URLConnection} to be "closed" to close the underlying file descriptors.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>urlConnection</ParamName>
                    <ParamType>URLConnection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>verifyInputStream</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>urlConnection</ParamName>
                    <ParamType>URLConnection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InputStream [in=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GroovyScriptEngine</MethodName>
            <MethodComment>/** 
 * The groovy script engine will run groovy scripts and reload them and their dependencies when they are modified. This is useful for embedding groovy in other containers like games and application servers.
 * @param roots This an array of URLs where Groovy scripts will be stored. They shouldbe laid out using their package structure like Java classes
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>roots</ParamName>
                    <ParamType>URL[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rc</ParamName>
                    <ParamType>ResourceConnector</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GroovyScriptEngine</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>roots</ParamName>
                    <ParamType>URL[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GroovyScriptEngine</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>roots</ParamName>
                    <ParamType>URL[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentClassLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GroovyScriptEngine</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>urls</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createRoots</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>URL[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>urls</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>URL[] [roots=new URL[urls.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>MalformedURLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GroovyScriptEngine</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>urls</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentClassLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GroovyScriptEngine</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>url</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GroovyScriptEngine</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>url</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentClassLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GroovyScriptEngine</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rc</ParamName>
                    <ParamType>ResourceConnector</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GroovyScriptEngine</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rc</ParamName>
                    <ParamType>ResourceConnector</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentClassLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParentClassLoader</MethodName>
            <MethodComment>/** 
 * Get the &lt;code&gt;ClassLoader&lt;/code&gt; that will serve as the parent ClassLoader of the {@link GroovyClassLoader} in which scripts will be executed. By default, this is theClassLoader that loaded the &lt;code&gt;GroovyScriptEngine&lt;/code&gt; class.
 * @return the parent classloader used to load scripts
 */
</MethodComment>
            <ReturnType>ClassLoader</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadScriptByName</MethodName>
            <MethodComment>/** 
 * Get the class of the scriptName in question, so that you can instantiate Groovy objects with caching and reloading.
 * @param scriptName resource name pointing to the script
 * @return the loaded scriptName as a compiled class
 * @throws ResourceException if there is a problem accessing the script
 * @throws ScriptException   if there is a problem parsing the script
 */
</MethodComment>
            <ReturnType>Class</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scriptName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>URLConnection [conn=rc.getResourceConnection(scriptName)]</InnerVar>
                <InnerVar>String [path=conn.getURL().toExternalForm()]</InnerVar>
                <InnerVar>ScriptCacheEntry [entry=scriptCache.get(path)]</InnerVar>
                <InnerVar>Class [clazz=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ResourceException</ExceptionType>
                <ExceptionType>ScriptException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment>/** 
 * Run a script identified by name with a single argument.
 * @param scriptName name of the script to run
 * @param argument   a single argument passed as a variable named &lt;code&gt;arg&lt;/code&gt; in the binding
 * @return a &lt;code&gt;toString()&lt;/code&gt; representation of the result of the execution of the script
 * @throws ResourceException if there is a problem accessing the script
 * @throws ScriptException   if there is a problem parsing the script
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scriptName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>argument</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Binding [binding=new Binding()]</InnerVar>
                <InnerVar>Object [result=run(scriptName,binding)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>binding;setVariable;["arg", argument]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ResourceException</ExceptionType>
                <ExceptionType>ScriptException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment>/** 
 * Run a script identified by name with a given binding.
 * @param scriptName name of the script to run
 * @param binding    the binding to pass to the script
 * @return an object
 * @throws ResourceException if there is a problem accessing the script
 * @throws ScriptException   if there is a problem parsing the script
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scriptName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>binding</ParamName>
                    <ParamType>Binding</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ResourceException</ExceptionType>
                <ExceptionType>ScriptException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createScript</MethodName>
            <MethodComment>/** 
 * Creates a Script with a given scriptName and binding.
 * @param scriptName name of the script to run
 * @param binding    the binding to pass to the script
 * @return the script object
 * @throws ResourceException if there is a problem accessing the script
 * @throws ScriptException   if there is a problem parsing the script
 */
</MethodComment>
            <ReturnType>Script</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scriptName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>binding</ParamName>
                    <ParamType>Binding</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ResourceException</ExceptionType>
                <ExceptionType>ScriptException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLastModified</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scriptName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>URLConnection [conn=rc.getResourceConnection(scriptName)]</InnerVar>
                <InnerVar>long [lastMod=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ResourceException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSourceNewer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entry</ParamName>
                    <ParamType>ScriptCacheEntry</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [mainEntryLastCheck=entry.lastCheck]</InnerVar>
                <InnerVar>long [now=0]</InnerVar>
                <InnerVar>boolean [returnValue=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ResourceException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGroovyClassLoader</MethodName>
            <MethodComment>/** 
 * Returns the GroovyClassLoader associated with this script engine instance. Useful if you need to pass the class loader to another library.
 * @return the GroovyClassLoader
 */
</MethodComment>
            <ReturnType>GroovyClassLoader</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConfig</MethodName>
            <MethodComment>/** 
 * @return a non null compiler configuration
 */
</MethodComment>
            <ReturnType>CompilerConfiguration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setConfig</MethodName>
            <MethodComment>/** 
 * sets a compiler configuration
 * @param config - the compiler configuration
 * @throws NullPointerException if config is null
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>CompilerConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentTime</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>