<Class>
    <Id>47</Id>
    <Package>org.codehaus.groovy.transform</Package>
    <ClassName>NotYetImplementedASTTransformation</ClassName>
    <SuperClass>AbstractASTTransformation</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>NotYetImplementedASTTransformation  /** 
 * Handles generation of code for the  {@code @NotYetImplemented} annotation.
 * @see groovy.transform.NotYetImplemented
 * @author Dierk König
 * @author Andre Steingress
 * @author Ilinca V. Hallberg
 * @author Björn Westlin
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>CATCHED_THROWABLE_TYPE</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>ASSERTION_FAILED_ERROR_TYPE</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nodes</ParamName>
                    <ParamType>ASTNode[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AnnotationNode [annotationNode=(AnnotationNode)nodes[0]]</InnerVar>
                <InnerVar>ASTNode [node=nodes[1]]</InnerVar>
                <InnerVar>MethodNode [methodNode=(MethodNode)node]</InnerVar>
                <InnerVar>ArrayList&lt;Statement&gt; [statements=new ArrayList&lt;Statement&gt;()]</InnerVar>
                <InnerVar>Statement [statement=methodNode.getCode()]</InnerVar>
                <InnerVar>BlockStatement [rewrittenMethodCode=new BlockStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rewrittenMethodCode;addStatement;[tryCatchAssertionFailedError(annotationNode,methodNode,statements)]</InnerMethodInvoke>
                <InnerMethodInvoke>rewrittenMethodCode;addStatement;[throwAssertionFailedError(annotationNode)]</InnerMethodInvoke>
                <InnerMethodInvoke>methodNode;setCode;[rewrittenMethodCode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tryCatchAssertionFailedError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TryCatchStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotationNode</ParamName>
                    <ParamType>AnnotationNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodNode</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>statements</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TryCatchStatement [tryCatchStatement=new TryCatchStatement(new BlockStatement(statements,methodNode.getVariableScope()),EmptyStatement.INSTANCE)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tryCatchStatement;addCatch;[new CatchStatement(new Parameter(CATCHED_THROWABLE_TYPE,"ex"),ReturnStatement.RETURN_NULL_OR_VOID)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>throwAssertionFailedError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotationNode</ParamName>
                    <ParamType>AnnotationNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ThrowStatement [throwStatement=new ThrowStatement(new ConstructorCallExpression(ASSERTION_FAILED_ERROR_TYPE,new ArgumentListExpression(new ConstantExpression("Method is marked with @NotYetImplemented but passes unexpectedly"))))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>throwStatement;setSourcePosition;[annotationNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>