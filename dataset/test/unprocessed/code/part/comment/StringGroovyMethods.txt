/** 
 * Coerce a string (an instance of CharSequence) to a boolean value. A string is coerced to false if it is of length 0, and to true otherwise.
 * @param string the character sequence
 * @return the boolean value
 * @since 1.7.0
 */

/** 
 * Coerce a Matcher instance to a boolean value.
 * @param matcher the matcher
 * @return the boolean value
 * @since 1.7.0
 */

/** 
 * <p>Provides a method to perform custom 'dynamic' type conversion to the given class using the <code>as</code> operator.
 * @param self a CharSequence
 * @param c    the desired class
 * @return the converted object
 * @see #asType(String,Class)
 * @since 1.8.2
 */

/** 
 * Converts the GString to a File, or delegates to the default {@link org.codehaus.groovy.runtime.DefaultGroovyMethods#asType(Object,Class)}
 * @param self a GString
 * @param c    the desired class
 * @return the converted object
 * @since 1.5.0
 */

/** 
 * Provides a method to perform custom 'dynamic' type conversion to the given class using the <code>as</code> operator. <strong>Example:</strong> <code>'123' as Double</code> <p> By default, the following types are supported: <ul> <li>List</li> <li>BigDecimal</li> <li>BigInteger</li> <li>Long</li> <li>Integer</li> <li>Short</li> <li>Byte</li> <li>Character</li> <li>Double</li> <li>Float</li> <li>File</li> <li>Subclasses of Enum (Java 5 and above)</li> </ul> If any other type is given, the call is delegated to {@link org.codehaus.groovy.runtime.DefaultGroovyMethods#asType(Object,Class)}.
 * @param self a String
 * @param c    the desired class
 * @return the converted object
 * @since 1.0
 */

/** 
 * Turns a CharSequence into a regular expression Pattern
 * @param self a String to convert into a regular expression
 * @return the regular expression pattern
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #bitwiseNegate(CharSequence)
 */

/** 
 * Convenience method to capitalize the first letter of a CharSequence (typically the first letter of a word). Example usage: <pre class="groovyTestCase"> assert 'h'.capitalize() == 'H' assert 'hello'.capitalize() == 'Hello' assert 'hello world'.capitalize() == 'Hello world' assert 'Hello World' == 'hello world'.split(' ').collect{ it.capitalize() }.join(' ') </pre>
 * @param self The CharSequence to capitalize
 * @return A String containing the capitalized toString() of the CharSequence
 * @see #capitalize(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #capitalize(CharSequence)
 */

/** 
 * Pad a CharSequence to a minimum length specified by <tt>numberOfChars</tt> by adding the space character around it as many times as needed so that it remains centered. If the String is already the same size or bigger than the target <tt>numberOfChars</tt>, then the original String is returned. An example: <pre> ['A', 'BB', 'CCC', 'DDDD'].each{ println '|' + it.center(6) + '|' } </pre> will produce output like: <pre> |  A   | |  BB  | | CCC  | | DDDD | </pre>
 * @param self          a CharSequence object
 * @param numberOfChars the total minimum number of characters of the result
 * @return the centered toString() of this CharSequence with padded characters around it
 * @see #center(String,Number)
 * @since 1.8.2
 */

/** 
 * Pad a CharSequence to a minimum length specified by <tt>numberOfChars</tt>, appending the supplied padding CharSequence around the original as many times as needed keeping it centered. If the String is already the same size or bigger than the target <tt>numberOfChars</tt>, then the original String is returned. An example: <pre> ['A', 'BB', 'CCC', 'DDDD'].each{ println '|' + it.center(6, '+') + '|' } </pre> will produce output like: <pre> |++A+++| |++BB++| |+CCC++| |+DDDD+| </pre>
 * @param self          a CharSequence object
 * @param numberOfChars the total minimum number of characters of the resulting CharSequence
 * @param padding       the characters used for padding
 * @return the centered toString() of this CharSequence with padded characters around it
 * @see #center(String,Number,String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #center(CharSequence,Number)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #center(CharSequence,Number,CharSequence)
 */

/** 
 * Provide an implementation of contains() like {@link java.util.Collection#contains(Object)} to make CharSequences more polymorphic.
 * @param self a CharSequence
 * @param text the CharSequence to look for
 * @return true if this CharSequence contains the given text
 * @see #contains(String,String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #contains(CharSequence,CharSequence)
 */

/** 
 * Count the number of occurrences of a sub CharSequence.
 * @param self a CharSequence
 * @param text a sub CharSequence
 * @return the number of occurrences of the given CharSequence inside this CharSequence
 * @see #count(String,String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #contains(CharSequence,CharSequence)
 */

/** 
 * Return a CharSequence with lines (separated by LF, CR/LF, or CR) terminated by the platform specific line separator.
 * @param self a CharSequence object
 * @return the denormalized toString() of this CharSequence
 * @see #denormalize(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #denormalize(CharSequence)
 */

/** 
 * Drops the given number of chars from the head of this CharSequence if they are available. <pre class="groovyTestCase"> def text = "Groovy" assert text.drop( 0 ) == 'Groovy' assert text.drop( 2 ) == 'oovy' assert text.drop( 7 ) == '' </pre>
 * @param self the original CharSequence
 * @param num the number of characters to drop from this iterator
 * @return a CharSequence consisting of all characters except the first <code>num</code> ones,or else an empty String, if this CharSequence has less than <code>num</code> characters.
 * @since 1.8.1
 */

/** 
 * A GString variant of the equivalent CharSequence method.
 * @param self the original GString
 * @param num the number of characters to drop from this iterator
 * @return a String consisting of all characters except the first <code>num</code> ones,or else an empty String, if the toString() of this GString has less than <code>num</code> characters.
 * @see #drop(CharSequence,int)
 * @since 2.3.7
 */

/** 
 * Create a suffix of the given CharSequence by dropping as many characters as possible from the front of the original CharSequence such that calling the given closure condition evaluates to true when passed each of the dropped characters. <p> <pre class="groovyTestCase"> def text = "Groovy" assert text.dropWhile{ false } == 'Groovy' assert text.dropWhile{ true } == '' assert text.dropWhile{ it < 'Z' } == 'roovy' assert text.dropWhile{ it != 'v' } == 'vy' </pre>
 * @param self      the original CharSequence
 * @param condition the closure that while continuously evaluating to true will cause us to drop elements fromthe front of the original CharSequence
 * @return the shortest suffix of the given CharSequence such that the given closure conditionevaluates to true for each element dropped from the front of the CharSequence
 * @since 2.0.0
 */

/** 
 * A GString variant of the equivalent CharSequence method.
 * @param self      the original GString
 * @param condition the closure that while continuously evaluating to true will cause us to drop elements fromthe front of the original GString
 * @return the shortest suffix of the given GString such that the given closure conditionevaluates to true for each element dropped from the front of the CharSequence
 * @see #dropWhile(CharSequence,groovy.lang.Closure)
 * @since 2.3.7
 */

/** 
 * Iterates through this CharSequence line by line.  Each line is passed to the given 1 or 2 arg closure. If a 2 arg closure is found the line count is passed as the second argument.
 * @param self    a CharSequence
 * @param closure a closure
 * @return the last value returned by the closure
 * @throws java.io.IOException if an error occurs
 * @see #eachLine(String,groovy.lang.Closure)
 * @since 1.8.2
 */

/** 
 * Iterates through this CharSequence line by line.  Each line is passed to the given 1 or 2 arg closure. If a 2 arg closure is found the line count is passed as the second argument.
 * @param self    a CharSequence
 * @param firstLine the line number value used for the first line (default is 1, set to 0 to start counting from 0)
 * @param closure a closure (arg 1 is line, optional arg 2 is line number)
 * @return the last value returned by the closure
 * @throws java.io.IOException if an error occurs
 * @see #eachLine(String,int,groovy.lang.Closure)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #eachLine(CharSequence,groovy.lang.Closure)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #eachLine(CharSequence,int,groovy.lang.Closure)
 */

/** 
 * Iterate through this String a character at a time collecting either the original character or a transformed replacement String. The  {@code transform}Closure should return  {@code null} to indicate that no transformation isrequired for the given character. <p> <pre class="groovyTestCase"> assert "Groovy".collectReplacements{ it == 'o' ? '_O_' : null } == 'Gr_O__O_vy' assert "B&W".collectReplacements{ it == '&' ? '&amp;' : null } == 'B&amp;W' </pre>
 * @param orig the original String
 * @return A new string in which all characters that require escapinghave been replaced with the corresponding replacements as determined by the  {@code transform} Closure.
 */

/** 
 * Process each regex group matched substring of the given CharSequence. If the closure parameter takes one argument, an array with all match groups is passed to it. If the closure takes as many arguments as there are match groups, then each parameter will be one match group.
 * @param self    the source CharSequence
 * @param regex   a Regex CharSequence
 * @param closure a closure with one parameter or as much parameters as groups
 * @return the source CharSequence
 * @see #eachMatch(String,String,groovy.lang.Closure)
 * @since 1.8.2
 */

/** 
 * Process each regex group matched substring of the given pattern. If the closure parameter takes one argument, an array with all match groups is passed to it. If the closure takes as many arguments as there are match groups, then each parameter will be one match group.
 * @param self    the source CharSequence
 * @param pattern a regex Pattern
 * @param closure a closure with one parameter or as much parameters as groups
 * @return the source CharSequence
 * @see #eachMatch(String,java.util.regex.Pattern,groovy.lang.Closure)
 * @since 1.8.2
 */

/** 
 * Process each regex group matched substring of the given pattern. If the closure parameter takes one argument, an array with all match groups is passed to it. If the closure takes as many arguments as there are match groups, then each parameter will be one match group.
 * @param self    the source string
 * @param pattern a regex Pattern
 * @param closure a closure with one parameter or as much parameters as groups
 * @return the source string
 * @since 1.6.1
 */

/** 
 * Process each regex group matched substring of the given string. If the closure parameter takes one argument, an array with all match groups is passed to it. If the closure takes as many arguments as there are match groups, then each parameter will be one match group.
 * @param self    the source string
 * @param regex   a Regex string
 * @param closure a closure with one parameter or as much parameters as groups
 * @return the source string
 * @since 1.6.0
 */

/** 
 * Expands all tabs into spaces with tabStops of size 8.
 * @param self A CharSequence to expand
 * @return The expanded toString() of this CharSequence
 * @see #expand(String)
 * @since 1.8.2
 */

/** 
 * Expands all tabs into spaces. If the CharSequence has multiple lines, expand each line - restarting tab stops at the start of each line.
 * @param self A CharSequence to expand
 * @param tabStop The number of spaces a tab represents
 * @return The expanded toString() of this CharSequence
 * @see #expand(String,int)
 * @since 1.8.2
 */

/* */
/** 
 * @deprecated Use the CharSequence version
 * @see #expand(CharSequence)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #expand(CharSequence,int)
 */

/** 
 * Expands all tabs into spaces. Assumes the CharSequence represents a single line of text.
 * @param self A line to expand
 * @param tabStop The number of spaces a tab represents
 * @return The expanded toString() of this CharSequence
 * @see #expandLine(String,int)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #expand(CharSequence,int)
 */

/** 
 * Finds the first occurrence of a regular expression String within a String. If the regex doesn't match, null will be returned. <p> For example, if the regex doesn't match the result is null: <pre> assert null == "New York, NY".find(/\d{5}/) </pre> If it does match, we get the matching string back: <pre> assert "10292" == "New York, NY 10292-0098".find(/\d{5}/) </pre> If we have capture groups in our expression, we still get back the full match <pre> assert "10292-0098" == "New York, NY 10292-0098".find(/(\d{5})-?(\d{4})/) </pre>
 * @param self  a CharSequence
 * @param regex the capturing regex
 * @return a String containing the matched portion, or null if the regex doesn't match
 * @see #find(String,java.util.regex.Pattern)
 * @since 1.8.2
 */

/** 
 * Returns the result of calling a closure with the first occurrence of a regular expression found within a CharSequence. If the regex doesn't match, the closure will not be called and find will return null.
 * @param self    a CharSequence
 * @param regex   the capturing regex CharSequence
 * @param closure the closure that will be passed the full match, plus each of the capturing groups (if any)
 * @return a String containing the result of calling the closure (calling toString() if needed), or null if the regex pattern doesn't match
 * @see #find(String,java.util.regex.Pattern,groovy.lang.Closure)
 * @since 1.8.2
 */

/** 
 * Finds the first occurrence of a compiled regular expression Pattern within a String. If the pattern doesn't match, null will be returned. <p> For example, if the pattern doesn't match the result is null: <pre> assert null == "New York, NY".find(~/\d{5}/) </pre> If it does match, we get the matching string back: <pre> assert "10292" == "New York, NY 10292-0098".find(~/\d{5}/) </pre> If we have capture groups in our expression, the groups are ignored and we get back the full match: <pre> assert "10292-0098" == "New York, NY 10292-0098".find(~/(\d{5})-?(\d{4})/) </pre> If you need to work with capture groups, then use the closure version of this method or use Groovy's matcher operators or use <tt>eachMatch</tt>.
 * @param self    a CharSequence
 * @param pattern the compiled regex Pattern
 * @return a String containing the matched portion, or null if the regex pattern doesn't match
 * @see #find(String,java.util.regex.Pattern)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #find(CharSequence,java.util.regex.Pattern)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #find(CharSequence,java.util.regex.Pattern,groovy.lang.Closure)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #find(CharSequence,CharSequence)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #find(CharSequence,CharSequence,groovy.lang.Closure)
 */

/** 
 * Returns a (possibly empty) list of all occurrences of a regular expression (provided as a CharSequence) found within a CharSequence. <p> For example, if the regex doesn't match, it returns an empty list: <pre> assert [] == "foo".findAll(/(\w*) Fish/) </pre> Any regular expression matches are returned in a list, and all regex capture groupings are ignored, only the full match is returned: <pre> def expected = ["One Fish", "Two Fish", "Red Fish", "Blue Fish"] assert expected == "One Fish, Two Fish, Red Fish, Blue Fish".findAll(/(\w*) Fish/) </pre> If you need to work with capture groups, then use the closure version of this method or use Groovy's matcher operators or use <tt>eachMatch</tt>.
 * @param self  a CharSequence
 * @param regex the capturing regex CharSequence
 * @return a List containing all full matches of the regex within the CharSequence, an empty list will be returned if there are no matches
 * @see #findAll(CharSequence,Pattern)
 * @since 1.8.2
 */

/** 
 * Returns a (possibly empty) list of all occurrences of a regular expression (in Pattern format) found within a CharSequence. <p> For example, if the pattern doesn't match, it returns an empty list: <pre> assert [] == "foo".findAll(~/(\w*) Fish/) </pre> Any regular expression matches are returned in a list, and all regex capture groupings are ignored, only the full match is returned: <pre> def expected = ["One Fish", "Two Fish", "Red Fish", "Blue Fish"] assert expected == "One Fish, Two Fish, Red Fish, Blue Fish".findAll(~/(\w*) Fish/) </pre>
 * @param self    a CharSequence
 * @param pattern the compiled regex Pattern
 * @return a List containing all full matches of the Pattern within the CharSequence, an empty list will be returned if there are no matches
 * @see #findAll(String,java.util.regex.Pattern)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #findAll(CharSequence,java.util.regex.Pattern)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #findAll(CharSequence,java.util.regex.Pattern,groovy.lang.Closure)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #findAll(CharSequence,CharSequence)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #findAll(CharSequence,CharSequence,groovy.lang.Closure)
 */

/** 
 * Select a List of characters from a CharSequence using a Collection to identify the indices to be selected.
 * @param self    a CharSequence
 * @param indices a Collection of indices
 * @return a String consisting of the characters at the given indices
 * @since 1.0
 */

/** 
 * Support the range subscript operator for CharSequence or StringBuffer with EmptyRange
 * @param text  a CharSequence
 * @param range an EmptyRange
 * @return the empty String
 * @since 1.5.0
 */

/** 
 * Support the subscript operator for CharSequence.
 * @param text  a CharSequence
 * @param index the index of the Character to get
 * @return the Character at the given index
 * @since 1.0
 */

/** 
 * Support the subscript operator for GString.
 * @param text  a GString
 * @param index the index of the Character to get
 * @return the Character at the given index
 * @since 2.3.7
 */

/** 
 * Support the range subscript operator for CharSequence with IntRange
 * @param text  a CharSequence
 * @param range an IntRange
 * @return the subsequence CharSequence
 * @since 1.0
 */

/** 
 * Support the range subscript operator for GString with IntRange
 * @param text  a GString
 * @param range an IntRange
 * @return the String of characters corresponding to the provided range
 * @since 2.3.7
 */

/** 
 * Support the range subscript operator for CharSequence
 * @param text  a CharSequence
 * @param range a Range
 * @return the subsequence CharSequence
 * @since 1.0
 */

/** 
 * Support the range subscript operator for GString
 * @param text  a GString
 * @param range a Range
 * @return the String of characters corresponding to the provided range
 * @since 2.3.7
 */

/** 
 * Select a List of values from a Matcher using a Collection to identify the indices to be selected.
 * @param self    a Matcher
 * @param indices a Collection of indices
 * @return a String of the values at the given indices
 * @since 1.6.0
 */

/** 
 * Given a matcher that matches a string against a pattern, this method returns true when the string matches the pattern or if a longer string, could match the pattern. For example: <pre class="groovyTestCase"> def emailPattern = /\w+@\w+\.\w{2,}/ def matcher = "john@doe" =~ emailPattern assert matcher.matchesPartially() matcher = "john@doe.com" =~ emailPattern assert matcher.matchesPartially() matcher = "john@@" =~ emailPattern assert !matcher.matchesPartially() </pre>
 * @param matcher the Matcher
 * @return true if more input to the String could make the matcher match the associated pattern, false otherwise.
 * @since 2.0.0
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #getAt(CharSequence,java.util.Collection)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #getAt(CharSequence,groovy.lang.EmptyRange)
 */

/** 
 * Support the subscript operator for String.
 * @param text  a String
 * @param index the index of the Character to get
 * @return the Character at the given index
 * @since 1.0
 */

/** 
 * Support the range subscript operator for String with IntRange
 * @param text  a String
 * @param range an IntRange
 * @return the resulting String
 * @since 1.0
 */

/** 
 * Support the range subscript operator for String
 * @param text  a String
 * @param range a Range
 * @return a substring corresponding to the Range
 * @since 1.0
 */

/** 
 * Converts the given CharSequence into an array of characters.
 * @param self a CharSequence
 * @return an array of characters
 * @see #getChars(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #getChars(CharSequence)
 */

/** 
 * Find the number of Strings matched to the given Matcher.
 * @param matcher a Matcher
 * @return int  the number of Strings matched to the given matcher.
 * @since 1.0
 */

/** 
 * Get a replacement corresponding to the matched pattern for  {@link org.codehaus.groovy.runtime.StringGroovyMethods#replaceAll(String,java.util.regex.Pattern,groovy.lang.Closure)}. The closure take parameter: <ul> <li>Whole of match if the pattern include no capturing group</li> <li>Object[] of capturing groups if the closure takes Object[] as parameter</li> <li>List of capturing groups</li> </ul>
 * @param matcher the matcher object used for matching
 * @param closure specified with replaceAll() to get replacement
 * @return   replacement correspond replacement for a match
 */

/** 
 * Check whether a Matcher contains a group or not.
 * @param matcher a Matcher
 * @return boolean  <code>true</code> if matcher contains at least one group.
 * @since 1.0
 */

/** 
 * True if a CharSequence only contains whitespace characters.
 * @param self The CharSequence to check the characters in
 * @return true If all characters are whitespace characters
 * @see #isAllWhitespace(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #isAllWhitespace(CharSequence)
 */

/** 
 * Determine if a CharSequence can be parsed as a BigDecimal.
 * @param self a CharSequence
 * @return true if the CharSequence can be parsed
 * @see #isBigDecimal(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #isBigDecimal(CharSequence)
 */

/** 
 * Determine if a CharSequence can be parsed as a BigInteger.
 * @param self a CharSequence
 * @return true if the CharSequence can be parsed
 * @see #isBigInteger(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #isBigInteger(CharSequence)
 */

/** 
 * 'Case' implementation for a CharSequence, which uses equals between the toString() of the caseValue and the switchValue. This allows CharSequence values to be used in switch statements. For example: <pre> switch( str ) { case 'one' : // etc... } </pre> Note that this returns <code>true</code> for the case where both the 'switch' and 'case' operand is <code>null</code>.
 * @param caseValue   the case value
 * @param switchValue the switch value
 * @return true if the switchValue's toString() equals the caseValue
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #isCase(CharSequence,Object)
 */

/** 
 * 'Case' implementation for the  {@link java.util.regex.Pattern} class, which allowstesting a String against a number of regular expressions. For example: <pre>switch( str ) { case ~/one/ : // the regex 'one' matches the value of str } </pre> Note that this returns true for the case where both the pattern and the 'switch' values are <code>null</code>.
 * @param caseValue   the case value
 * @param switchValue the switch value
 * @return true if the switchValue is deemed to match the caseValue
 * @since 1.0
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #isCase(CharSequence,Object)
 */

/** 
 * Determine if a CharSequence can be parsed as a Double.
 * @param self a CharSequence
 * @return true if the CharSequence can be parsed
 * @see #isDouble(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #isDouble(CharSequence)
 */

/** 
 * Determine if a CharSequence can be parsed as a Float.
 * @param self a CharSequence
 * @return true if the CharSequence can be parsed
 * @see #isFloat(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #isFloat(CharSequence)
 */

/** 
 * Determine if a CharSequence can be parsed as an Integer.
 * @param self a CharSequence
 * @return true if the CharSequence can be parsed
 * @see #isInteger(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #isInteger(CharSequence)
 */

/** 
 * Determine if a CharSequence can be parsed as a Long.
 * @param self a CharSequence
 * @return true if the CharSequence can be parsed
 * @see #isLong(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #isLong(CharSequence)
 */

/** 
 * Determine if a CharSequence can be parsed as a Number. Synonym for 'isBigDecimal()'.
 * @param self a CharSequence
 * @return true if the CharSequence can be parsed
 * @see #isBigDecimal(CharSequence)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #isNumber(CharSequence)
 */

/** 
 * Returns an  {@link java.util.Iterator} which traverses each match.
 * @param matcher a Matcher object
 * @return an Iterator for a Matcher
 * @see java.util.regex.Matcher#group()
 * @since 1.0
 */

/* */
/* */
/** 
 * Overloads the left shift operator to provide an easy way to append multiple objects as string representations to a CharSequence.
 * @param self  a CharSequence
 * @param value an Object
 * @return a StringBuilder built from this CharSequence
 * @since 1.8.2
 */

/** 
 * Overloads the left shift operator to provide an easy way to append multiple objects as string representations to a String.
 * @param self  a String
 * @param value an Object
 * @return a StringBuffer built from this string
 * @since 1.0
 */

/** 
 * Overloads the left shift operator to provide an easy way to append multiple objects as string representations to a StringBuffer.
 * @param self  a StringBuffer
 * @param value a value to append
 * @return the StringBuffer on which this operation was invoked
 * @since 1.0
 */

/** 
 * Overloads the left shift operator to provide syntactic sugar for appending to a StringBuilder.
 * @param self  a StringBuilder
 * @param value an Object
 * @return the original StringBuilder
 * @since 1.8.2
 */

/** 
 * Tells whether or not a CharSequence matches the given compiled regular expression Pattern.
 * @param self the CharSequence that is to be matched
 * @param pattern the regex Pattern to which the string of interest is to be matched
 * @return  true if the CharSequence matches
 * @see String#matches(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #matches(CharSequence,Pattern)
 */

/** 
 * Remove a part of a CharSequence by replacing the first occurrence of target within self with '' and returns the result.
 * @param self   a CharSequence
 * @param target an object representing the part to remove
 * @return a String containing the original minus the part to be removed
 * @see #minus(String,Object)
 * @since 1.8.2
 */

/** 
 * Remove a part of a CharSequence. This replaces the first occurrence of the pattern within self with '' and returns the result.
 * @param self   a String
 * @param pattern a Pattern representing the part to remove
 * @return a String minus the part to be removed
 * @since 2.2.0
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #minus(CharSequence,java.util.regex.Pattern)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #minus(CharSequence,Object)
 */

/** 
 * Repeat a CharSequence a certain number of times.
 * @param self   a CharSequence to be repeated
 * @param factor the number of times the CharSequence should be repeated
 * @return a String composed of a repetition
 * @throws IllegalArgumentException if the number of repetitions is &lt; 0
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #multiply(CharSequence,Number)
 */

/** 
 * This method is called by the ++ operator for the class CharSequence. It increments the last character in the given CharSequence. If the last character in the CharSequence is Character.MAX_VALUE a Character.MIN_VALUE will be appended. The empty CharSequence is incremented to a string consisting of the character Character.MIN_VALUE.
 * @param self a CharSequence
 * @return a value obtained by incrementing the toString() of the CharSequence
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #next(CharSequence)
 */

/** 
 * Return a String with linefeeds and carriage returns normalized to linefeeds.
 * @param self a CharSequence object
 * @return the normalized toString() for the CharSequence
 * @see #normalize(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #normalize(CharSequence)
 */

/** 
 * Pad a CharSequence to a minimum length specified by <tt>numberOfChars</tt> by adding the space character to the left as many times as needed. If the String is already the same size or bigger than the target <tt>numberOfChars</tt>, then the original String is returned. An example: <pre> println 'Numbers:' [1, 10, 100, 1000].each{ println it.toString().padLeft(5) } </pre> will produce output like: <pre> Numbers: 1 10 100 1000 </pre>
 * @param self          a CharSequence object
 * @param numberOfChars the total minimum number of characters of the resulting CharSequence
 * @return the CharSequence padded to the left as a String
 * @see #padLeft(CharSequence,Number,CharSequence)
 * @since 1.8.2
 */

/** 
 * Pad a CharSequence to a minimum length specified by <tt>numberOfChars</tt>, adding the supplied padding CharSequence as many times as needed to the left. If the CharSequence is already the same size or bigger than the target <tt>numberOfChars</tt>, then the toString() of the original CharSequence is returned. An example: <pre> println 'Numbers:' [1, 10, 100, 1000].each{ println it.toString().padLeft(5, '*') } [2, 20, 200, 2000].each{ println it.toString().padLeft(5, '*_') } </pre> will produce output like: <pre> Numbers: ****1 ***10 **100 *1000 *_*_2 *_*20 *_200 *2000 </pre>
 * @param self          a CharSequence object
 * @param numberOfChars the total minimum number of characters of the resulting CharSequence
 * @param padding       the characters used for padding
 * @return the CharSequence padded to the left as a String
 * @see #padLeft(String,Number,String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #padLeft(CharSequence,Number)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #padLeft(CharSequence,Number,CharSequence)
 */

/** 
 * Pad a CharSequence to a minimum length specified by <tt>numberOfChars</tt> by adding the space character to the right as many times as needed. If the CharSequence is already the same size or bigger than the target <tt>numberOfChars</tt>, then the toString() of the original CharSequence is returned. An example: <pre> ['A', 'BB', 'CCC', 'DDDD'].each{ println it.padRight(5) + it.size() } </pre> will produce output like: <pre> A    1 BB   2 CCC  3 DDDD 4 </pre>
 * @param self          a CharSequence object
 * @param numberOfChars the total minimum number of characters of the resulting string
 * @return the CharSequence padded to the right as a String
 * @see #padRight(String,Number)
 * @since 1.8.2
 */

/** 
 * Pad a CharSequence to a minimum length specified by <tt>numberOfChars</tt>, adding the supplied padding CharSequence as many times as needed to the right. If the CharSequence is already the same size or bigger than the target <tt>numberOfChars</tt>, then the toString() of the original CharSequence is returned. An example: <pre> ['A', 'BB', 'CCC', 'DDDD'].each{ println it.padRight(5, '#') + it.size() } </pre> will produce output like: <pre> A####1 BB###2 CCC##3 DDDD#4 </pre>
 * @param self          a CharSequence object
 * @param numberOfChars the total minimum number of characters of the resulting CharSequence
 * @param padding       the characters used for padding
 * @return the CharSequence padded to the right as a String
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #padRight(CharSequence,Number)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #padRight(CharSequence,Number,CharSequence)
 */

/** 
 * Appends the String representation of the given operand to this CharSequence.
 * @param left  a CharSequence
 * @param value any Object
 * @return the original toString() of the CharSequence with the object appended
 * @since 1.8.2
 */

/** 
 * Appends a String to the string representation of this number.
 * @param value a Number
 * @param right a String
 * @return a String
 * @since 1.0
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #plus(CharSequence,Object)
 */

/** 
 * Appends the String representation of the given operand to this string.
 * @param left  a String
 * @param value any CharSequence
 * @return the new string with the object appended
 * @since 2.2
 */

/** 
 * Appends a String to this StringBuffer.
 * @param left  a StringBuffer
 * @param value a String
 * @return a String
 * @since 1.0
 */

/** 
 * This method is called by the -- operator for the class CharSequence. It decrements the last character in the given CharSequence. If the last character in the CharSequence is Character.MIN_VALUE it will be deleted. The empty CharSequence can't be decremented.
 * @param self a CharSequence
 * @return a String with a decremented character at the end
 * @see #previous(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #previous(CharSequence)
 */

/** 
 * Support the range subscript operator for StringBuffer.
 * @param self  a StringBuffer
 * @param range a Range
 * @param value the object that's toString() will be inserted
 * @since 1.0
 */

/** 
 * Support the range subscript operator for StringBuffer.  Index values are treated as characters within the buffer.
 * @param self  a StringBuffer
 * @param range a Range
 * @param value the object that's toString() will be inserted
 * @since 1.0
 */

/** 
 * Return the lines of a CharSequence as a List of String.
 * @param self a CharSequence object
 * @return a list of lines
 * @throws java.io.IOException if an error occurs
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #readLines(CharSequence)
 */

/** 
 * Replaces each substring of this CharSequence that matches the given regular expression with the given replacement.
 * @param self        a CharSequence
 * @param regex       the capturing regex
 * @param replacement the string to be substituted for each match
 * @return the toString() of the CharSequence with content replaced
 * @throws java.util.regex.PatternSyntaxException if the regular expression's syntax is invalid
 * @see String#replaceAll(String,String)
 * @since 1.8.2
 */

/** 
 * Replaces all substrings of a CharSequence that match the given compiled regular expression with the given replacement. <p> Note that backslashes (<tt>\</tt>) and dollar signs (<tt>$</tt>) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see {@link java.util.regex.Matcher#replaceAll}. Use  {@link java.util.regex.Matcher#quoteReplacement} to suppress the specialmeaning of these characters, if desired. <p> <pre class="groovyTestCase"> assert "foo".replaceAll('o', 'X') == 'fXX' </pre>
 * @param self the CharSequence that is to be matched
 * @param pattern the regex Pattern to which the CharSequence of interest is to be matched
 * @param replacement the CharSequence to be substituted for the first match
 * @return  The resulting <tt>String</tt>
 * @see #replaceAll(String,java.util.regex.Pattern,String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #replaceAll(CharSequence,java.util.regex.Pattern,groovy.lang.Closure)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #replaceAll(CharSequence,java.util.regex.Pattern,CharSequence)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #replaceAll(CharSequence,CharSequence,groovy.lang.Closure)
 */

/** 
 * Replaces the first substring of this CharSequence that matches the given regular expression with the given replacement.
 * @param self        a CharSequence
 * @param regex       the capturing regex
 * @param replacement the CharSequence to be substituted for each match
 * @return a CharSequence with replaced content
 * @throws java.util.regex.PatternSyntaxException if the regular expression's syntax is invalid
 * @see String#replaceFirst(String,String)
 * @since 1.8.2
 */

/** 
 * Replaces the first substring of a CharSequence that matches the given compiled regular expression with the given replacement. <p> Note that backslashes (<tt>\</tt>) and dollar signs (<tt>$</tt>) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see {@link java.util.regex.Matcher#replaceFirst}. Use  {@link java.util.regex.Matcher#quoteReplacement} to suppress the specialmeaning of these characters, if desired. <p> <pre class="groovyTestCase"> assert "foo".replaceFirst('o', 'X') == 'fXo' </pre>
 * @param self the CharSequence that is to be matched
 * @param pattern the regex Pattern to which the CharSequence of interest is to be matched
 * @param replacement the CharSequence to be substituted for the first match
 * @return  The resulting <tt>String</tt>
 * @see #replaceFirst(String,java.util.regex.Pattern,String)
 * @since 1.8.2
 */

/** 
 * Replaces the first occurrence of a captured group by the result of a closure call on that text. <p> For example (with some replaceAll variants thrown in for comparison purposes), <pre> assert "hellO world" == "hello world".replaceFirst(~"(o)") { it[0].toUpperCase() } // first match assert "hellO wOrld" == "hello world".replaceAll(~"(o)") { it[0].toUpperCase() }   // all matches assert '1-FISH, two fish' == "one fish, two fish".replaceFirst(~/([a-z]{3})\s([a-z]{4})/) { [one:1, two:2][it[1]] + '-' + it[2].toUpperCase() } assert '1-FISH, 2-FISH' == "one fish, two fish".replaceAll(~/([a-z]{3})\s([a-z]{4})/) { [one:1, two:2][it[1]] + '-' + it[2].toUpperCase() } </pre>
 * @param self    a CharSequence
 * @param pattern the capturing regex Pattern
 * @param closure the closure to apply on the first captured group
 * @return a CharSequence with replaced content
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #replaceFirst(CharSequence,java.util.regex.Pattern,groovy.lang.Closure)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #replaceFirst(CharSequence,java.util.regex.Pattern,CharSequence)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #replaceFirst(CharSequence,CharSequence,groovy.lang.Closure)
 */

/** 
 * Creates a String which is the reverse (backwards) of this CharSequence
 * @param self a CharSequence
 * @return a new String with all the characters reversed.
 * @see #reverse(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #reverse(CharSequence)
 */

/** 
 * Set the position of the given Matcher to the given index.
 * @param matcher a Matcher
 * @param idx     the index number
 * @since 1.0
 */

/** 
 * Provide the standard Groovy <code>size()</code> method for <code>CharSequence</code>.
 * @param text a CharSequence
 * @return the length of the CharSequence
 * @since 1.8.2
 */

/** 
 * Provide the standard Groovy <code>size()</code> method for <code>Matcher</code>.
 * @param self a matcher object
 * @return the matcher's size (count)
 * @since 1.5.0
 */

/** 
 * Provide the standard Groovy <code>size()</code> method for <code>String</code>.
 * @param text a String
 * @return the length of the String
 * @since 1.0
 */

/** 
 * Provide the standard Groovy <code>size()</code> method for <code>StringBuffer</code>.
 * @param buffer a StringBuffer
 * @return the length of the StringBuffer
 * @since 1.0
 */

/** 
 * Convenience method to split a CharSequence (with whitespace as delimiter). Similar to tokenize, but returns an Array of String instead of a List.
 * @param self the CharSequence to split
 * @return String[] result of split
 * @see #split(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #split(CharSequence)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #split(CharSequence)
 */

/** 
 * Iterates through the given CharSequence line by line, splitting each line using the given regex delimiter.  The list of tokens for each line is then passed to the given closure.
 * @param self    a CharSequence
 * @param regex   the delimiting regular expression
 * @param closure a closure
 * @return the last value returned by the closure
 * @throws java.io.IOException if an error occurs
 * @throws java.util.regex.PatternSyntaxException if the regular expression's syntax is invalid
 * @see #splitEachLine(CharSequence,java.util.regex.Pattern,groovy.lang.Closure)
 * @since 1.8.2
 */

/** 
 * Iterates through the given CharSequence line by line, splitting each line using the given separator Pattern.  The list of tokens for each line is then passed to the given closure.
 * @param self    a CharSequence
 * @param pattern the regular expression Pattern for the delimiter
 * @param closure a closure
 * @return the last value returned by the closure
 * @throws java.io.IOException if an error occurs
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #splitEachLine(CharSequence,java.util.regex.Pattern,groovy.lang.Closure)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #splitEachLine(CharSequence,java.util.regex.Pattern,groovy.lang.Closure)
 */

/** 
 * Strip leading spaces from every line in a CharSequence. The line with the least number of leading spaces determines the number to remove. Lines only containing whitespace are ignored when calculating the number of leading spaces to strip. <pre class="groovyTestCase"> assert '  A\n B\nC' == '   A\n  B\n C'.stripIndent() </pre>
 * @param self     The CharSequence to strip the leading spaces from
 * @return the stripped toString() of the CharSequence
 * @see #stripIndent(String)
 * @since 1.8.2
 */

/* */
/** 
 * Strip <tt>numChar</tt> leading characters from every line in a CharSequence. <pre class="groovyTestCase"> assert 'DEF\n456' == '''ABCDEF\n123456'''.stripIndent(3) </pre>
 * @param self     The CharSequence to strip the characters from
 * @param numChars The number of characters to strip
 * @return the stripped String
 * @since 1.8.2
 */

/* */
/** 
 * @deprecated Use the CharSequence version
 * @see #stripIndent(CharSequence)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #stripIndent(CharSequence)
 */

/** 
 * Strip leading whitespace/control characters followed by '|' from every line in a CharSequence. <pre class="groovyTestCase"> assert 'ABC\n123\n456' == '''ABC |123 |456'''.stripMargin() </pre>
 * @param self The CharSequence to strip the margin from
 * @return the stripped String
 * @see #stripMargin(CharSequence,char)
 * @since 1.8.2
 */

/** 
 * Strip leading whitespace/control characters followed by <tt>marginChar</tt> from every line in a CharSequence. <pre class="groovyTestCase"> assert 'ABC\n123\n456' == '''ABC *123 *456'''.stripMargin('*') </pre>
 * @param self       The CharSequence to strip the margin from
 * @param marginChar Any character that serves as margin delimiter
 * @return the stripped String
 * @see #stripMargin(String,char)
 * @since 1.8.2
 */

/* */
/** 
 * Strip leading whitespace/control characters followed by <tt>marginChar</tt> from every line in a CharSequence.
 * @param self       The CharSequence to strip the margin from
 * @param marginChar Any character that serves as margin delimiter
 * @return the stripped CharSequence
 * @see #stripMargin(String,String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #stripMargin(CharSequence)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #stripMargin(CharSequence,char)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #stripMargin(CharSequence,char)
 */

/** 
 * Returns the first <code>num</code> elements from this CharSequence. <pre class="groovyTestCase"> def text = "Groovy" assert text.take( 0 ) == '' assert text.take( 2 ) == 'Gr' assert text.take( 7 ) == 'Groovy' </pre>
 * @param self the original CharSequence
 * @param num  the number of chars to take from this CharSequence
 * @return a CharSequence consisting of the first <code>num</code> chars,or else the whole CharSequence if it has less then <code>num</code> elements.
 * @since 1.8.1
 */

/** 
 * A GString variant of the equivalent CharSequence method.
 * @param self the original GString
 * @param num  the number of chars to take from this GString
 * @return a String consisting of the first <code>num</code> chars,or else the whole GString if it has less then <code>num</code> elements.
 * @since 2.3.7
 */

/** 
 * Returns the longest prefix of this CharSequence where each element passed to the given closure evaluates to true. <p> <pre class="groovyTestCase"> def text = "Groovy" assert text.takeWhile{ it < 'A' } == '' assert text.takeWhile{ it < 'Z' } == 'G' assert text.takeWhile{ it != 'v' } == 'Groo' assert text.takeWhile{ it < 'z' } == 'Groovy' </pre>
 * @param self      the original CharSequence
 * @param condition the closure that must evaluate to true to continue taking elements
 * @return a prefix of elements in the CharSequence where eachelement passed to the given closure evaluates to true
 * @since 2.0.0
 */

/** 
 * A GString variant of the equivalent GString method.
 * @param self      the original GString
 * @param condition the closure that must evaluate to true to continue taking elements
 * @return a prefix of elements in the GString where eachelement passed to the given closure evaluates to true
 * @since 2.3.7
 */

/** 
 * Parse a CharSequence into a BigDecimal
 * @param self a CharSequence
 * @return a BigDecimal
 * @see #toBigDecimal(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #toBigDecimal(CharSequence)
 */

/** 
 * Parse a CharSequence into a BigInteger
 * @param self a CharSequence
 * @return a BigInteger
 * @see #toBigInteger(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #toBigInteger(CharSequence)
 */

/** 
 * Converts the given string into a Boolean object. If the trimmed string is "true", "y" or "1" (ignoring case) then the result is true otherwise it is false.
 * @param self a String
 * @return The Boolean value
 * @since 1.0
 */

/** 
 * Converts the given string into a Character object using the first character in the string.
 * @param self a String
 * @return the first Character
 * @since 1.0
 */

/** 
 * Parse a CharSequence into a Double
 * @param self a CharSequence
 * @return a Double
 * @see #toDouble(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #toDouble(CharSequence)
 */

/** 
 * Parse a CharSequence into a Float
 * @param self a CharSequence
 * @return a Float
 * @see #toFloat(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #toFloat(CharSequence)
 */

/** 
 * Parse a CharSequence into an Integer
 * @param self a CharSequence
 * @return an Integer
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #toInteger(CharSequence)
 */

/** 
 * Tokenize a CharSequence (with a whitespace as the delimiter).
 * @param self a CharSequence
 * @return a List of tokens
 * @see java.util.StringTokenizer#StringTokenizer(String)
 * @since 1.8.2
 */

/** 
 * Tokenize a CharSequence based on the given character delimiter. For example: <pre class="groovyTestCase"> char pathSep = ':' assert "/tmp:/usr".tokenize(pathSep) == ["/tmp", "/usr"] </pre>
 * @param self  a CharSequence
 * @param token the delimiter
 * @return a List of tokens
 * @see java.util.StringTokenizer#StringTokenizer(String,String)
 * @since 1.8.2
 */

/** 
 * Tokenize a CharSequence based on the given CharSequence delimiter.
 * @param self  a CharSequence
 * @param token the delimiter
 * @return a List of tokens
 * @see java.util.StringTokenizer#StringTokenizer(String,String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #tokenize(CharSequence)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #tokenize(CharSequence,Character)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #tokenize(CharSequence,CharSequence)
 */

/** 
 * Converts the given CharSequence into a List of Strings of one character.
 * @param self a CharSequence
 * @return a List of characters (a 1-character String)
 * @see #toSet(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #toList(CharSequence)
 */

/** 
 * Parse a CharSequence into a Long
 * @param self a CharSequence
 * @return a Long
 * @see #toLong(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #toLong(CharSequence)
 */

/** 
 * Converts the given CharSequence into a Set of unique String of one character.
 * @param self a CharSequence
 * @return a Set of unique characters (each a 1-character String)
 * @see #toSet(String)
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #toSet(CharSequence)
 */

/** 
 * Parse a CharSequence into a Short
 * @param self a CharSequence
 * @return a Short
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #toShort(CharSequence)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #tr(CharSequence,CharSequence,CharSequence)
 */

/** 
 * Replaces sequences of whitespaces with tabs using tabStops of size 8.
 * @param self A CharSequence to unexpand
 * @return an unexpanded String
 * @see #unexpand(String)
 * @since 1.8.2
 */

/** 
 * Replaces sequences of whitespaces with tabs.
 * @param self A CharSequence to unexpand
 * @param tabStop The number of spaces a tab represents
 * @return an unexpanded String
 * @since 1.8.2
 */

/* */
/** 
 * @deprecated Use the CharSequence version
 * @see #unexpand(CharSequence)
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #unexpand(CharSequence,int)
 */

/** 
 * Replaces sequences of whitespaces with tabs within a line.
 * @param self A line to unexpand
 * @param tabStop The number of spaces a tab represents
 * @return an unexpanded String
 * @since 1.8.2
 */

/** 
 * @deprecated Use the CharSequence version
 * @see #tokenize(CharSequence)
 */

