/** 
 * This class defines new groovy methods which appear on normal JDK Date and Calendar classes inside the Groovy environment.
 */

/** 
 * Support the subscript operator for a Date.
 * @param self  a Date
 * @param field a Calendar field, e.g. MONTH
 * @return the value for the given field, e.g. FEBRUARY
 * @see java.util.Calendar
 * @since 1.5.5
 */

/** 
 * Convert a Date to a Calendar.
 * @param self a Date
 * @return a Calendar corresponding to the given Date
 * @since 1.7.6
 */

/** 
 * Support the subscript operator for a Calendar.
 * @param self  a Calendar
 * @param field a Calendar field, e.g. MONTH
 * @return the value for the given field, e.g. FEBRUARY
 * @see java.util.Calendar
 * @since 1.7.3
 */

/** 
 * Support the subscript operator for mutating a Calendar. Example usage: <pre> import static java.util.Calendar. def cal = Calendar.instance cal[DAY_OF_WEEK] = MONDAY cal[MONTH] = MARCH println cal.time // A Monday in March </pre>
 * @param self  A Calendar
 * @param field A Calendar field, e.g. MONTH
 * @param value The value for the given field, e.g. FEBRUARY
 * @see java.util.Calendar#set(int,int)
 * @since 1.7.3
 */

/** 
 * Support the subscript operator for mutating a Date.
 * @param self  A Date
 * @param field A Calendar field, e.g. MONTH
 * @param value The value for the given field, e.g. FEBRUARY
 * @see #putAt(java.util.Calendar,int,int)
 * @see java.util.Calendar#set(int,int)
 * @since 1.7.3
 */

/** 
 * Legacy alias for copyWith. Will be deprecated and removed in future versions of Groovy.
 * @see #copyWith(java.util.Calendar,java.util.Map)
 * @since 1.7.3
 */

/** 
 * Support creating a new Date having similar properties to an existing Date (which remains unaltered) but with some fields updated according to a Map of changes. <p> Example usage: <pre> import static java.util.Calendar.YEAR def now = Calendar.instance def nextYear = now[YEAR] + 1 def oneYearFromNow = now.copyWith(year: nextYear) println now.time println oneYearFromNow.time </pre>
 * @param self    A Calendar
 * @param updates A Map of Calendar keys and values
 * @return The newly created Calendar
 * @see java.util.Calendar#set(int,int)
 * @see java.util.Calendar#set(int,int,int,int,int,int)
 * @see #set(java.util.Calendar,java.util.Map)
 * @since 2.2.0
 */

/** 
 * Legacy alias for copyWith. Will be deprecated and removed in future versions of Groovy.
 * @see #copyWith(java.util.Date,java.util.Map)
 * @since 1.7.3
 */

/** 
 * Support creating a new Date having similar properties to an existing Date (which remains unaltered) but with some fields updated according to a Map of changes. <p> Example usage: <pre> import static java.util.Calendar.YEAR def today = new Date() def nextYear = today[YEAR] + 1 def oneYearFromNow = today.copyWith(year: nextYear) println today println oneYearFromNow </pre>
 * @param self    A Date
 * @param updates A Map of Calendar keys and values
 * @return The newly created Date
 * @see java.util.Calendar#set(int,int)
 * @see #set(java.util.Date,java.util.Map)
 * @see #copyWith(java.util.Calendar,java.util.Map)
 * @since 2.2.0
 */

/** 
 * Increment a Date by one day.
 * @param self a Date
 * @return the next days date
 * @since 1.0
 */

/** 
 * Increment a Calendar by one day.
 * @param self a Calendar
 * @return a new Calendar set to the next day
 * @since 1.8.7
 */

/** 
 * Decrement a Calendar by one day.
 * @param self a Calendar
 * @return a new Calendar set to the previous day
 * @since 1.8.7
 */

/** 
 * Increment a java.sql.Date by one day.
 * @param self a java.sql.Date
 * @return the next days date
 * @since 1.0
 */

/** 
 * Decrement a Date by one day.
 * @param self a Date
 * @return the previous days date
 * @since 1.0
 */

/** 
 * Decrement a java.sql.Date by one day.
 * @param self a java.sql.Date
 * @return the previous days date
 * @since 1.0
 */

/** 
 * Add a number of days to this date and returns the new date.
 * @param self a Date
 * @param days the number of days to increase
 * @return the new date
 * @since 1.0
 */

/** 
 * Add a number of days to this date and returns the new date.
 * @param self a java.sql.Date
 * @param days the number of days to increase
 * @return the new date
 * @since 1.0
 */

/** 
 * Add number of days to this Timestamp and returns the new Timestamp object.
 * @param self a Timestamp
 * @param days the number of days to increase
 * @return the new Timestamp
 */

/** 
 * Subtract a number of days from this date and returns the new date.
 * @param self a Date
 * @param days the number of days to subtract
 * @return the new date
 * @since 1.0
 */

/** 
 * Subtract a number of days from this date and returns the new date.
 * @param self a java.sql.Date
 * @param days the number of days to subtract
 * @return the new date
 * @since 1.0
 */

/** 
 * Subtract a number of days from this Timestamp and returns the new Timestamp object.
 * @param self a Timestamp
 * @param days the number of days to subtract
 * @return the new Timestamp
 */

/** 
 * Subtract another date from this one and return the number of days of the difference. <p> Date self = Date then + (Date self - Date then) <p> IOW, if self is before then the result is a negative value.
 * @param self a Calendar
 * @param then another Calendar
 * @return number of days
 * @since 1.6.0
 */

/** 
 * Subtract another Date from this one and return the number of days of the difference. <p> Date self = Date then + (Date self - Date then) <p> IOW, if self is before then the result is a negative value.
 * @param self a Date
 * @param then another Date
 * @return number of days
 * @since 1.6.0
 */

/** 
 * <p>Create a String representation of this date according to the given format pattern. <p> <p>For example, if the system timezone is GMT, <code>new Date(0).format('MM/dd/yy')</code> would return the string <code>"01/01/70"</code>. See documentation for  {@link java.text.SimpleDateFormat}for format pattern use. <p> <p>Note that a new DateFormat instance is created for every invocation of this method (for thread safety).
 * @param self   a Date
 * @param format the format pattern to use according to {@link java.text.SimpleDateFormat}
 * @return a string representation of this date.
 * @see java.text.SimpleDateFormat
 * @since 1.5.7
 */

/** 
 * <p>Create a String representation of this date according to the given format pattern and timezone. <p> <p>For example: <code> def d = new Date(0) def tz = TimeZone.getTimeZone('GMT') println d.format('dd/MMM/yyyy', tz) </code> would return the string <code>"01/Jan/1970"</code>. See documentation for  {@link java.text.SimpleDateFormat}for format pattern use. <p> <p>Note that a new DateFormat instance is created for every invocation of this method (for thread safety).
 * @param self   a Date
 * @param format the format pattern to use according to {@link java.text.SimpleDateFormat}
 * @param tz     the TimeZone to use
 * @return a string representation of this date.
 * @see java.text.SimpleDateFormat
 * @since 1.8.3
 */

/** 
 * <p>Return a string representation of the 'day' portion of this date according to the locale-specific  {@link java.text.DateFormat#SHORT} default format.For an "en_UK" system locale, this would be <code>dd/MM/yy</code>. <p> <p>Note that a new DateFormat instance is created for every invocation of this method (for thread safety).
 * @param self a Date
 * @return a string representation of this date
 * @see java.text.DateFormat#getDateInstance(int)
 * @see java.text.DateFormat#SHORT
 * @since 1.5.7
 */

/** 
 * <p>Return a string representation of the time portion of this date according to the locale-specific  {@link java.text.DateFormat#MEDIUM} default format.For an "en_UK" system locale, this would be <code>HH:MM:ss</code>. <p> <p>Note that a new DateFormat instance is created for every invocation of this method (for thread safety).
 * @param self a Date
 * @return a string representing the time portion of this date
 * @see java.text.DateFormat#getTimeInstance(int)
 * @see java.text.DateFormat#MEDIUM
 * @since 1.5.7
 */

/** 
 * <p>Return a string representation of the date and time time portion of this Date instance, according to the locale-specific format used by {@link java.text.DateFormat}.  This method uses the  {@link java.text.DateFormat#SHORT}preset for the day portion and  {@link java.text.DateFormat#MEDIUM} for the timeportion of the output string. <p> <p>Note that a new DateFormat instance is created for every invocation of this method (for thread safety).
 * @param self a Date
 * @return a string representation of this date and time
 * @see java.text.DateFormat#getDateTimeInstance(int,int)
 * @since 1.5.7
 */

/** 
 * Common code for  {@link #clearTime(java.util.Calendar)} and {@link #clearTime(java.util.Date)}and  {@link #clearTime(java.sql.Date)}
 * @param self a Calendar to adjust
 */

/** 
 * Clears the time portion of this Date instance; useful utility where it makes sense to compare month/day/year only portions of a Date.
 * @param self a Date
 * @return the Date but with the time portion cleared
 * @since 1.6.7
 */

/** 
 * Clears the time portion of this java.sql.Date instance; useful utility where it makes sense to compare month/day/year only portions of a Date.
 * @param self a java.sql.Date
 * @return the java.sql.Date but with the time portion cleared
 * @since 1.6.7
 */

/** 
 * Clears the time portion of this Calendar instance; useful utility where it makes sense to compare month/day/year only portions of a Calendar.
 * @param self a Calendar
 * @return the Calendar but with the time portion cleared
 * @since 1.6.7
 */

/** 
 * Iterates from this date up to the given date, inclusive, incrementing by one day each time.
 * @param self    a Date
 * @param to      another Date to go up to
 * @param closure the closure to call
 * @since 2.2
 */

/** 
 * Iterates from the date represented by this calendar up to the date represented by the given calendar, inclusive, incrementing by one day each time.
 * @param self    a Calendar
 * @param to      another Calendar to go up to
 * @param closure the closure to call
 * @since 2.2
 */

/** 
 * Iterates from this date down to the given date, inclusive, decrementing by one day each time.
 * @param self    a Date
 * @param to      another Date to go down to
 * @param closure the closure to call
 * @since 2.2
 */

/** 
 * Iterates from the date represented by this calendar up to the date represented by the given calendar, inclusive, incrementing by one day each time.
 * @param self    a Calendar
 * @param to      another Calendar to go down to
 * @param closure the closure to call
 * @since 2.2
 */

