/** 
 * A registry of MetaClass instances which caches introspection & reflection information and allows methods to be dynamically added to existing classes at runtime
 * @author <a href="mailto:james@coredevelopers.net">James Strachan</a>
 * @author John Wilson
 * @author <a href="mailto:blackdrag@gmx.org">Jochen Theodorou</a>
 * @author Graeme Rocher
 * @author Alex Tkachman
 * @version $Revision$
 */

/** 
 * @deprecated Use {@link ExtensionModuleScanner#MODULE_META_INF_FILE instead}
 */

/** 
 * @param useAccessible defines whether or not the {@link java.lang.reflect.AccessibleObject#setAccessible(boolean)}method will be called to enable access to all methods when using reflection
 */

/** 
 * Looks for a class called 'groovy.runtime.metaclass.CustomMetaClassCreationHandle' and if it exists uses it as the MetaClassCreationHandle otherwise uses the default
 * @see groovy.lang.MetaClassRegistry.MetaClassCreationHandle
 */

/* */
/* */
/** 
 * if oldMc is null, newMc will replace whatever meta class was used before. if oldMc is not null, then newMc will be used only if he stored mc is the same as oldMc
 */

/** 
 * Registers a new MetaClass in the registry to customize the type
 * @param theClass
 * @param theMetaClass
 */

/** 
 * Gets a handle internally used to create MetaClass implementations WARNING: experimental code, likely to change soon
 * @return the handle
 */

/** 
 * Sets a handle internally used to create MetaClass implementations. When replacing the handle with a custom version, you should reuse the old handle to keep custom logic and to use the default logic as fall back. WARNING: experimental code, likely to change soon
 * @param handle the handle
 */

/** 
 * Adds a listener for constant meta classes.
 * @param listener the listener
 */

/** 
 * Adds a listener for constant meta classes. This listener cannot be removed!
 * @param listener the listener
 */

/** 
 * Removes a constant meta class listener.
 * @param listener the listener
 */

/** 
 * Causes the execution of all registered listeners. This method is used mostly internal to kick of the listener notification. It can also be used by subclasses to achieve the same.
 * @param obj object instance if the MetaClass change is on a per-instance metaclass (or null if global)
 * @param c the class
 * @param oldMC the old MetaClass
 * @param newMc the new MetaClass
 */

/** 
 * Gets an array of of all registered ConstantMetaClassListener instances.
 */

/** 
 * Singleton of MetaClassRegistry. 
 * @param includeExtension
 * @return the registry
 */

/** 
 * Returns an iterator to iterate over all constant meta classes. This iterator can be seen as making a snapshot of the current state of the registry. The snapshot will include all meta classes that has been used unless they are already collected. Collected meta classes  will be skipped automatically, so you can expect that each element of the iteration is not null. Calling this method is thread safe, the usage of the iterator is not.
 * @return the iterator.
 */

