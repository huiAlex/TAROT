/** 
 * Static support methods for  {@link StaticTypeCheckingVisitor}.
 */

/** 
 * This is for internal use only. When an argument method is null, we cannot determine its type, so we use this one as a wildcard.
 */

/** 
 * This comparator is used when we return the list of methods from DGM which name correspond to a given name. As we also lookup for DGM methods of superclasses or interfaces, it may be possible to find two methods which have the same name and the same arguments. In that case, we should not add the method from superclass or interface otherwise the system won't be able to select the correct method, resulting in an ambiguous method selection for similar methods.
 */

/** 
 * Returns true for expressions of the form x[...]
 * @param expression an expression
 * @return true for array access expressions
 */

/** 
 * Called on method call checks in order to determine if a method call corresponds to the idiomatic o.with { ... } structure
 * @param name name of the method called
 * @param callArguments arguments of the method
 * @return true if the name is "with" and arguments consist of a single closure
 */

/** 
 * Given a variable expression, returns the ultimately accessed variable.
 * @param ve a variable expression
 * @return the target variable
 */

/** 
 * @deprecated Use {@link #findDGMMethodsForClassNode(ClassLoader,ClassNode,String)} instead
 */

/** 
 * @deprecated Use {@link #findDGMMethodsForClassNode(ClassLoader,ClassNode,String,TreeSet)} instead
 */

/** 
 * Checks that arguments and parameter types match.
 * @param params method parameters
 * @param args type arguments
 * @return -1 if arguments do not match, 0 if arguments are of the exact type and >0 when one or more argument isnot of the exact type but still match
 */

/** 
 * Checks that arguments and parameter types match, expecting that the number of parameters is strictly greater than the number of arguments, allowing possible inclusion of default parameters.
 * @param params method parameters
 * @param args type arguments
 * @return -1 if arguments do not match, 0 if arguments are of the exact type and >0 when one or more argument isnot of the exact type but still match
 */

/** 
 * Checks that excess arguments match the vararg signature parameter.
 * @param params
 * @param args
 * @return -1 if no match, 0 if all arguments matches the vararg type and >0 if one or more vararg argument isassignable to the vararg type, but still not an exact match
 */

/** 
 * Checks if the last argument matches the vararg type.
 * @param params
 * @param args
 * @return -1 if no match, 0 if the last argument is exactly the vararg type and 1 if of an assignable type
 */

/** 
 * Checks if a class node is assignable to another. This is used for example in assignment checks where you want to verify that the assignment is valid.
 * @param type
 * @param toBeAssignedTo
 * @return true if the class node is assignable to the other class node, false otherwise
 */

/** 
 * Returns true for operations that are of the class, that given a common type class for left and right, the operation "left op right" will have a result in the same type class In Groovy on numbers that is +,-,* as well as their variants with equals.
 */

/** 
 * Returns true or false depending on whether the right classnode can be assigned to the left classnode. This method should not add errors by itself: we let the caller decide what to do if an incompatible assignment is found.
 * @param left  the class to be assigned to
 * @param right the assignee class
 * @return false if types are incompatible
 */

/** 
 * Tells if a class is one of the "accept all" classes as the left hand side of an assignment.
 * @param node the classnode to test
 * @return true if it's an Object, String, boolean, Boolean or Class.
 */

/** 
 * @deprecated Use {@link #findDGMMethodsByNameAndArguments(ClassLoader,org.codehaus.groovy.ast.ClassNode,String,org.codehaus.groovy.ast.ClassNode[],java.util.List)} instead
 */

/** 
 * @deprecated Use {@link #findDGMMethodsByNameAndArguments(ClassLoader,org.codehaus.groovy.ast.ClassNode,String,org.codehaus.groovy.ast.ClassNode[],List)} instead
 */

/** 
 * Returns true if the provided class node, when considered as a receiver of a message or as a parameter, is using a placeholder in its generics type. In this case, we're facing unchecked generics and type checking is limited (ex: void foo(Set s) { s.keySet() }
 * @param node the node to test
 * @return true if it is using any placeholder in generics types
 */

/** 
 * Given a list of candidate methods, returns the one which best matches the argument types
 * @param receiver
 * @param methods candidate methods
 * @param args argument types
 * @return the list of methods which best matches the argument types. It is still possible that multiplemethods match the argument types.
 */

/* */
/** 
 * Given a receiver and a method node, parameterize the method arguments using available generic type information.
 * @param receiver the class
 * @param m the method
 * @return the parameterized arguments
 */

/** 
 * Given a parameter, builds a new parameter for which the known generics placeholders are resolved.
 * @param genericFromReceiver resolved generics from the receiver of the message
 * @param placeholdersFromContext, resolved generics from the method context
 * @param methodParameter the method parameter for which we want to resolve generic types
 * @param paramType the (unresolved) type of the method parameter
 * @return a new parameter with the same name and type as the original one, but with resolved generic types
 */

/** 
 * Returns true if a class node makes use of generic types. If the class node represents an array type, then checks if the component type is using generics.
 * @param cn a class node for which to check if it is using generics
 * @return true if the type (or component type) is using generics
 */

/** 
 * Given a generics type representing SomeClass&lt;T,V&gt; and a resolved placeholder map, returns a new generics type for which placeholders are resolved recursively.
 */

/** 
 * Checks that the parameterized generics of an argument are compatible with the generics of the parameter.
 * @param parameterType the parameter type of a method
 * @param argumentType  the type of the argument passed to the method
 */

/** 
 * use supplied type to make a connection from usage to declaration The method operates in two modes.  * For type !instanceof target a structural compare will be done  (for example Dummy<T> and List<R> to get T=R)  * If type equals target, a structural match is done as well  (for example Colection<U> and Collection<E> to get U=E) * otherwise we climb the hierarchy to find a case of type equals target to then execute the structural match, while applying possibly existing generics contexts on the way (for example for IntRange and Collection<E> to get E=Integer, since IntRange is an AbstractList<Integer>) Should the target not have any generics this method does nothing.
 */

/** 
 * A DGM-like method which adds support for method calls which are handled specifically by the Groovy compiler.
 */

/** 
 * This class is used to make extension methods lookup faster. Basically, it will only collect the list of extension methods (see  {@link ExtensionModule} if the list ofextension modules has changed. It avoids recomputing the whole list each time we perform a method lookup.
 */

/** 
 * Returns a map which contains, as the key, the name of a class. The value consists of a list of MethodNode, one for each default groovy method found which is applicable for this class.
 * @return
 * @param modules
 */

/** 
 * @return true if the class node is either a GString or the LUB of String and GString.
 */

/** 
 * @param node the node to be tested
 * @return true if the node is using generics types and one of those types is a gstring or string/gstring lub
 */

/** 
 * @param node the node to be tested
 * @return true if the node is using generics types and one of those types is a string
 */

/** 
 * A helper method that can be used to evaluate expressions as found in annotation parameters. For example, it will evaluate a constant, be it referenced directly as an integer or as a reference to a field. If this method throws an exception, then the expression cannot be evaluated on its own.
 * @param expr the expression to be evaluated
 * @param config the compiler configuration
 * @return the result of the expression
 */

/** 
 * Collects all interfaces of a class node, including those defined by the super class.
 * @param node a class for which we want to retrieve all interfaces
 * @return a set of interfaces implemented by this class node
 */

/** 
 * Collects all interfaces of a class node, including those defined by the super class.
 * @param node a class for which we want to retrieve all interfaces
 * @param out the set where to collect interfaces
 */

/** 
 * Returns true if the class node represents a the class node for the Class class and if the parametrized type is a neither a placeholder or a wildcard. For example, the class node Class&lt;Foo&gt; where Foo is a class would return true, but the class node for Class&lt;?&gt; would return false.
 * @param classNode a class node to be tested
 * @return true if it is the class node for Class and its generic type is a real class
 */

