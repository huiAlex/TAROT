/** 
 * As subclass of MetaClass, ProxyMetaClass manages calls from Groovy Objects to POJOs. It enriches MetaClass with the feature of making method invokations interceptable by an Interceptor. To this end, it acts as a decorator (decorator pattern) allowing to add or withdraw this feature at runtime. See groovy/lang/InterceptorTest.groovy for details. <p> WARNING: This implementation of ProxyMetaClass is NOT thread-safe and hence should only be used for as a per-instance MetaClass running in a single thread. Do not place this MetaClass in the MetaClassRegistry as it will result in unpredictable behaviour
 * @author Dierk Koenig
 * @author Graeme Rocher
 * @see groovy.lang.MetaClassRegistry
 */

/** 
 * convenience factory method for the most usual case.
 */

/** 
 * @param adaptee the MetaClass to decorate with interceptability
 */

/** 
 * Use the ProxyMetaClass for the given Closure. Cares for balanced register/unregister.
 * @param closure piece of code to be executed with registered ProxyMetaClass
 */

/** 
 * Use the ProxyMetaClass for the given Closure. Cares for balanced setting/unsetting ProxyMetaClass.
 * @param closure piece of code to be executed with ProxyMetaClass
 */

/** 
 * @return the interceptor in use or null if no interceptor is used
 */

/** 
 * @param interceptor may be null to reset any interception
 */

/** 
 * Call invokeMethod on adaptee with logic like in MetaClass unless we have an Interceptor. With Interceptor the call is nested in its beforeInvoke and afterInvoke methods. The method call is suppressed if Interceptor.doInvoke() returns false. See Interceptor for details.
 */

/** 
 * Call invokeMethod on adaptee with logic like in MetaClass unless we have an Interceptor. With Interceptor the call is nested in its beforeInvoke and afterInvoke methods. The method call is suppressed if Interceptor.doInvoke() returns false. See Interceptor for details.
 */

/** 
 * Call invokeStaticMethod on adaptee with logic like in MetaClass unless we have an Interceptor. With Interceptor the call is nested in its beforeInvoke and afterInvoke methods. The method call is suppressed if Interceptor.doInvoke() returns false. See Interceptor for details.
 */

/** 
 * Call invokeConstructor on adaptee with logic like in MetaClass unless we have an Interceptor. With Interceptor the call is nested in its beforeInvoke and afterInvoke methods. The method call is suppressed if Interceptor.doInvoke() returns false. See Interceptor for details.
 */

/** 
 * Interceptors the call to getProperty if a PropertyAccessInterceptor is available
 * @param object   the object to invoke the getter on
 * @param property the property name
 * @return the value of the property
 */

/** 
 * Interceptors the call to a property setter if a PropertyAccessInterceptor is available
 * @param object   The object to invoke the setter on
 * @param property The property name to set
 * @param newValue The new value of the property
 */

