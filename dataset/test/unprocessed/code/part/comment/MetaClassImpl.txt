/** 
 * Allows methods to be dynamically added to existing classes at runtime
 * @author <a href="mailto:james@coredevelopers.net">James Strachan</a>
 * @author Guillaume Laforge
 * @author <a href="mailto:blackdrag@gmx.org">Jochen "blackdrag" Theodorou</a>
 * @author Graeme Rocher
 * @author Alex Tkachman
 * @author Roshan Dawrani
 * @see groovy.lang.MetaClass
 */

/** 
 * Constructor
 * @param theClass The class this is the metaclass dor
 * @param add The methods for this class
 */

/** 
 * Constructor that sets the methods to null
 * @param theClass The class this is the metaclass dor
 */

/** 
 * Constructor with registry
 * @param registry The metaclass registry for this MetaClass
 * @param theClass The class
 * @param add The methods
 */

/** 
 * Constructor with registry setting methods to null
 * @param registry The metaclass registry for this MetaClass
 * @param theClass The class
 */

/** 
 * Returns the cached class for this metaclass
 * @return The cached class.
 */

/** 
 * Returns the registry for this metaclass
 * @return The resgistry
 */

/** 
 * @see MetaObjectProtocol#respondsTo(Object,String,Object[])
 */

/** 
 * @see MetaObjectProtocol#respondsTo(Object,String)
 */

/** 
 * @see MetaObjectProtocol#hasProperty(Object,String)
 */

/** 
 * @see MetaObjectProtocol#getMetaProperty(String)
 */

/** 
 * @see MetaObjectProtocol#getStaticMetaMethod(String,Object[])
 */

/** 
 * @see MetaObjectProtocol#getMetaMethod(String,Object[])
 */

/** 
 * Returns the class this object this is the metaclass of.
 * @return The class contained by this metaclass
 */

/** 
 * Return wether the class represented by this metaclass instance is an instance of the GroovyObject class
 * @return true if this is a groovy class, false otherwise.
 */

/** 
 * Fills the method index
 */

/** 
 * Gets all instance methods available on this class for the given name
 * @return all the normal instance methods available on this class for thegiven name
 */

/** 
 * Returns all the normal static methods on this class for the given name 
 * @return all the normal static methods available on this class for thegiven name
 */

/** 
 * Returns wether this metaclassimpl has been modified. Since MetaClassImpl  is not designed for modificaiton this method always returns false
 * @return false
 */

/** 
 * Adds an instance method to this metaclass.
 * @param method The method to be added
 */

/** 
 * Adds a static method to this metaclass.
 * @param method The method to be added
 */

/** 
 * Invoke a method on the given object with the given arguments.
 * @param object The object the method should be invoked on.
 * @param methodName The name of the method to invoke.
 * @param arguments The arguments to the invoked method as null, a Tuple, an array or a single argument of any type.
 * @return The result of the method invocation.
 */

/** 
 * Invoke a missing method on the given object with the given arguments.
 * @param instance The object the method should be invoked on.
 * @param methodName The name of the method to invoke.
 * @param arguments The arguments to the invoked method.
 * @return The result of the method invocation.
 */

/** 
 * Invoke a missing property on the given object with the given arguments.
 * @param instance The object the method should be invoked on.
 * @param propertyName The name of the property to invoke.
 * @param optionalValue The (optional) new value for the property
 * @param isGetter Wether the method is a getter
 * @return The result of the method invocation.
 */

/** 
 * Hook to deal with the case of MissingProperty for static properties. The method will look attempt to look up "propertyMissing" handlers and invoke them otherwise thrown a MissingPropertyException
 * @param instance      The instance
 * @param propertyName  The name of the property
 * @param optionalValue The value in the case of a setter
 * @param isGetter      True if its a getter
 * @return The value in the case of a getter or a MissingPropertyException
 */

/** 
 * Invokes a method on the given receiver for the specified arguments.  The MetaClass will attempt to establish the method to invoke based on the name and arguments provided.
 * @param object The object which the method was invoked on
 * @param methodName The name of the method
 * @param originalArguments The arguments to the method
 * @return The return value of the method
 * @see MetaClass#invokeMethod(Class,Object,String,Object[],boolean,boolean)
 */

/** 
 * <p>Invokes a method on the given receiver for the specified arguments. The sender is the class that invoked the method on the object. The MetaClass will attempt to establish the method to invoke based on the name and arguments provided. <p>The isCallToSuper and fromInsideClass help the Groovy runtime perform optimisations on the call to go directly to the super class if necessary
 * @param sender The java.lang.Class instance that invoked the method
 * @param object The object which the method was invoked on
 * @param methodName The name of the method
 * @param originalArguments The arguments to the method
 * @param isCallToSuper Whether the method is a call to a super class method
 * @param fromInsideClass Whether the call was invoked from the inside or the outside of the class
 * @return The return value of the method
 * @see MetaClass#invokeMethod(Class,Object,String,Object[],boolean,boolean)
 */

/** 
 * checks if the initialisation of the class id complete. This method should be called as a form of assert, it is no way to test if there is still initialisation work to be done. Such logic must be implemented in a different way.
 * @throws IllegalStateException if the initialisation is incomplete yet
 */

/** 
 * This is a helper class introduced in Groovy 2.1.0, which is used only by indy. This class is for internal use only.
 * @since Groovy 2.1.0
 */

/** 
 * This is a helper method added in Groovy 2.1.0, which is used only by indy. This method is for internal use only.
 * @since Groovy 2.1.0
 */

/** 
 * Sets a number of bean properties from the given Map where the keys are the String names of properties and the values are the values of the properties to set
 */

/** 
 * @return the given property's value on the object
 */

/** 
 * todo these special cases should be special MetaClasses maybe 
 */

/** 
 * todo these special cases should be special MetaClasses maybe 
 */

/** 
 * Get all the properties defined for this type
 * @return a list of MetaProperty objects
 */

/** 
 * return null if nothing valid has been found, a MetaMethod (for getter always the case if not null) or a LinkedList<MetaMethod> if there are multiple setter
 */

/** 
 * This will build up the property map (Map of MetaProperty objects, keyed on property name).
 * @param propertyDescriptors
 */

/** 
 * Adds a new MetaBeanProperty to this MetaClass
 * @param mp The MetaBeanProperty
 */

/** 
 * <p>Retrieves a property on the given receiver for the specified arguments. The sender is the class that is requesting the property from the object. The MetaClass will attempt to establish the method to invoke based on the name and arguments provided. <p>The useSuper and fromInsideClass help the Groovy runtime perform optimisations on the call to go directly to the super class if necessary
 * @param sender The java.lang.Class instance that is mutating the property
 * @param object The Object which the property is being set on
 * @param name The name of the property
 * @param newValue The new value of the property to set
 * @param useSuper Whether the call is to a super class property
 * @param fromInsideClass Whether the call was invoked from the inside or the outside of the class.
 */

/** 
 * Retrieves the value of an attribute (field). This method is to support the Groovy runtime and not for general client API usage.
 * @param sender The class of the object that requested the attribute
 * @param receiver The instance
 * @param messageName The name of the attribute
 * @param useSuper Whether to look-up on the super class or not
 * @return The attribute value
 */

/** 
 * Retrieves the value of an attribute (field). This method is to support the Groovy runtime and not for general client API usage.
 * @param sender The class of the object that requested the attribute
 * @param object The instance the attribute is to retrived from
 * @param attribute The name of the attribute
 * @param useSuper Whether to look-up on the super class or not
 * @param fromInsideClass Whether the call was invoked from the inside or the outside of the class.
 * @return The attribute value
 */

/** 
 * <p>Sets an attribute on the given receiver for the specified arguments. The sender is the class that is setting the attribute from the object. The MetaClass will attempt to establish the method to invoke based on the name and arguments provided. <p>The isCallToSuper and fromInsideClass help the Groovy runtime perform optimisations on the call to go directly to the super class if necessary
 * @param sender The java.lang.Class instance that is mutating the property
 * @param object The Object which the property is being set on
 * @param attribute The name of the attribute,
 * @param newValue The new value of the attribute to set
 * @param useSuper Whether the call is to a super class property
 * @param fromInsideClass Whether the call was invoked from the inside or the outside of the class
 */

/** 
 * Obtains a reference to the original AST for the MetaClass if it is available at runtime
 * @return The original AST or null if it cannot be returned
 */

/** 
 * todo there is no CompileUnit in scope so class name checking won't work but that mostly affects the bytecode generation rather than viewing the AST
 */

/** 
 * Returns a string representation of this metaclass
 */

/** 
 * adds a MetaMethod to this class. WARNING: this method will not do the neccessary steps for multimethod logic and using this method doesn't mean, that a method added here is replacing another method from a parent class completely. These steps are usually done by initialize, which means if you need these steps, you have to add the method before running initialize the first time.
 * @param method the MetaMethod
 * @see #initialize()
 */

/** 
 * Checks if the metaMethod is a method from the GroovyObject interface such as setProperty, getProperty and invokeMethod
 * @param metaMethod The metaMethod instance
 * @see GroovyObject
 */

/** 
 * return false: add method null:  ignore method true:  replace
 */

/** 
 * @return the matching method which should be found
 */

/** 
 * Chooses the correct method to use from a list of methods which match by name.
 * @param methodOrList   the possible methods to choose from
 * @param arguments
 */

/** 
 * Complete the initialisation process. After this method is called no methods should be added to the meta class. Invocation of methods or access to fields/properties is forbidden unless this method is called. This method  should contain any initialisation code, taking a longer time to complete. An example is the creation of the  Reflector. It is suggested to synchronize this  method.
 */

/** 
 * Retrieves the list of Methods held by the class
 * @return A list of Methods
 */

/** 
 * Retrieves the list of MetaMethods held by this class
 * @return A list of MetaMethods
 */

/** 
 * Create a CallSite
 */

/** 
 * Create a CallSite
 */

/** 
 * Create a CallSite
 */

/** 
 * Create a CallSite
 */

/** 
 * Create a CallSite
 */

/** 
 * Returns ClasInfo for the contained Class
 * @return The ClassInfo for the contained class.
 */

/** 
 * Returns version of the contained Class
 * @return The version of the contained class.
 */

/** 
 * Increments version of the contained Class
 */

/** 
 * Retrieves a list of additional MetaMethods held by this class
 * @return A list of MetaMethods
 */

/** 
 * <p>Retrieves a property on the given object for the specified arguments. 
 * @param object The Object which the property is being retrieved from
 * @param property The name of the property
 * @return The properties value
 */

/** 
 * <p>Sets a property on the given object for the specified arguments. 
 * @param object The Object which the property is being retrieved from
 * @param property The name of the property
 * @param newValue The new value
 */

/** 
 * Retrieves the value of an attribute (field). This method is to support the Groovy runtime and not for general client API usage.
 * @param object The object to get the attribute from
 * @param attribute The name of the attribute
 * @return The attribute value
 */

/** 
 * Sets the value of an attribute (field). This method is to support the Groovy runtime and not for general client API usage.
 * @param object The object to get the attribute from
 * @param attribute The name of the attribute
 * @param newValue The new value of the attribute
 */

/** 
 * Selects a method by name and argument classes. This method does not search for an exact match, it searches for a compatible method. For this the method selection mechanism is used as provided by the implementation of this MetaClass. pickMethod may or may not be used during the method selection process when invoking a method. There is no warranty for that.
 * @return a matching MetaMethod or null
 * @throws GroovyRuntimeException if there is more than one matching method
 * @param methodName the name of the method to pick
 * @param arguments the method arguments
 */

/** 
 * indicates is the meta class method invocation for non-static methods is done through a custom invoker object.
 * @return true - if the method invocation is not done by the meta class itself
 */

/** 
 * indicates is the meta class method invocation for static methods is done through a custom invoker object.
 * @return true - if the method invocation is not done by the meta class itself
 */

/** 
 * remove all method call cache entries. This should be done if a method is added during runtime, but not by using a category.
 */

