/** 
 * Constructs a new ExpandoMetaClass instance for the given class
 * @param theClass The class that the MetaClass applies to
 */

/** 
 * Constructs a new ExpandoMetaClass instance for the given class optionally placing the MetaClass in the MetaClassRegistry automatically
 * @param theClass The class that the MetaClass applies to
 * @param register True if the MetaClass should be registered inside the MetaClassRegistry. This defaults to true and ExpandoMetaClass will effect all instances if changed
 */

/** 
 * Constructs a new ExpandoMetaClass instance for the given class optionally placing the MetaClass in the MetaClassRegistry automatically
 * @param theClass The class that the MetaClass applies to
 * @param register True if the MetaClass should be registered inside the MetaClassRegistry. This defaults to true and ExpandoMetaClass will effect all instances if changed
 * @param allowChangesAfterInit Should the meta class be modifiable after initialization. Default is false.
 */

/* */
/** 
 * For simulating closures in Java
 */

/** 
 * Call to enable global use of global use of ExpandoMetaClass within the registry. This has the advantage that inheritance will function correctly, but has a higher memory usage on the JVM than normal Groovy
 */

/** 
 * Call to disable the global use of ExpandoMetaClass
 */

/* */
/** 
 * Checks if the meta class is initialized.
 * @see groovy.lang.MetaClassImpl#isInitialized()
 */

/** 
 * Instances of this class are returned when using the << left shift operator. <p> Example: <p> metaClass.myMethod << { String args -> } <p> This allows callbacks to the ExpandoMetaClass for registering appending methods
 * @author Graeme Rocher
 */

/* */
/* */
/* */
/** 
 * Handles the ability to use the left shift operator to append new constructors
 * @author Graeme Rocher
 */

/* */
/* */
/* */
/* */
/* */
/** 
 * Registers a new bean property
 * @param property The property name
 * @param newValue The properties initial value
 */

/** 
 * Registers a new instance method for the given method name and closure on this MetaClass
 * @param metaMethod
 */

/** 
 * Overrides the behavior of parent getMethods() method to make MetaClass aware of added Expando methods
 * @return A list of MetaMethods
 * @see MetaObjectProtocol#getMethods()
 */

/** 
 * Registers a new static method for the given method name and closure on this MetaClass
 * @param name     The method name
 * @param callable The callable Closure
 */

/** 
 * @return The Java class enhanced by this MetaClass
 */

/** 
 * Called from ExpandoMetaClassCreationHandle in the registry if it exists to set up inheritance handling
 * @param modifiedSuperExpandos A list of modified super ExpandoMetaClass
 */

/** 
 * Returns a list of expando MetaMethod instances added to this ExpandoMetaClass
 * @return the expandoMethods
 */

/** 
 * Returns a list of MetaBeanProperty instances added to this ExpandoMetaClass
 * @return the expandoProperties
 */

/** 
 * Overrides default implementation just in case invokeMethod has been overridden by ExpandoMetaClass
 * @see groovy.lang.MetaClassImpl#invokeMethod(Class,Object,String,Object[],boolean,boolean)
 */

/** 
 * Overrides default implementation just in case a static invoke method has been set on ExpandoMetaClass
 * @see MetaClassImpl#invokeStaticMethod(Object,String,Object[])
 */

/** 
 * Overrides default implementation just in case getProperty method has been overridden by ExpandoMetaClass
 * @see MetaClassImpl#getProperty(Class,Object,String,boolean,boolean)
 */

/** 
 * Overrides default implementation just in case getProperty method has been overridden by ExpandoMetaClass
 * @see MetaClassImpl#getProperty(Object,String)
 */

/** 
 * Overrides default implementation just in case setProperty method has been overridden by ExpandoMetaClass
 * @see MetaClassImpl#setProperty(Class,Object,String,Object,boolean,boolean)
 */

/** 
 * Looks up an existing MetaProperty by name
 * @param name The name of the MetaProperty
 * @return The MetaProperty or null if it doesn't exist
 */

/** 
 * Returns true if the MetaClass has the given property
 * @param name The name of the MetaProperty
 * @return True it exists as a MetaProperty
 */

/** 
 * Checks whether a MetaMethod for the given name and arguments exists
 * @param name The name of the MetaMethod
 * @param args The arguments to the meta method
 * @return True if the method exists otherwise null
 */

/** 
 * Determine if this method name suffix is a legitimate bean property name. Either the first or second letter must be upperCase for that to be true.
 */

/** 
 * Returns true if the name of the method specified and the number of arguments make it a javabean property
 * @param name True if its a Javabean property
 * @param args The arguments
 * @return True if it is a javabean property method
 */

/** 
 * Returns a property name equivalent for the given getter name or null if it is not a getter
 * @param getterName The getter name
 * @return The property name equivalent
 */

/** 
 * Returns a property name equivalent for the given setter name or null if it is not a getter
 * @param setterName The setter name
 * @return The property name equivalent
 */

