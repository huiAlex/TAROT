/** 
 * A Collections utility class
 * @author Paul King
 * @author Jim White
 */

/** 
 * Finds all combinations of items from the given collections.
 * @param collections the given collections
 * @return a List of the combinations found
 * @see #combinations(Collection)
 */

/** 
 * Finds all non-null subsequences of a list. E.g. <code>subsequences([1, 2, 3])</code> would be: [[1, 2, 3], [1, 3], [2, 3], [1, 2], [1], [2], [3]]
 * @param items the List of items
 * @return the subsequences from items
 */

/** 
 * @param collections the given collections
 * @deprecated use combinations(Iterable)
 */

/** 
 * Finds all combinations of items from the given Iterable aggregate of collections. So, <code>combinations([[true, false], [true, false]])</code> is <code>[[true, true], [false, true], [true, false], [false, false]]</code> and <code>combinations([['a', 'b'],[1, 2, 3]])</code> is <code>[['a', 1], ['b', 1], ['a', 2], ['b', 2], ['a', 3], ['b', 3]]</code>. If a non-collection item is given, it is treated as a singleton collection, i.e. <code>combinations([[1, 2], 'x'])</code> is <code>[[1, 'x'], [2, 'x']]</code>.
 * @param collections the Iterable of given collections
 * @return a List of the combinations found
 * @since 2.2.0
 */

/** 
 * Transposes an array of lists.
 * @param lists the given lists
 * @return a List of the transposed lists
 * @see #transpose(List)
 */

/** 
 * Transposes the given lists. So, <code>transpose([['a', 'b'], [1, 2]])</code> is <code>[['a', 1], ['b', 2]]</code> and <code>transpose([['a', 'b', 'c']])</code> is <code>[['a'], ['b'], ['c']]</code>.
 * @param lists the given lists
 * @return a List of the transposed lists
 */

/** 
 * Selects the minimum value found in an array of items, so min([2, 4, 6] as Object[]) == 2.
 * @param items an array of items
 * @return the minimum value
 */

/** 
 * @deprecated use min(Iterable)
 */

/** 
 * Selects the minimum value found in an Iterable of items.
 * @param items an Iterable
 * @return the minimum value
 * @since 2.2.0
 */

/** 
 * Selects the maximum value found in an array of items, so min([2, 4, 6] as Object[]) == 6.
 * @param items an array of items
 * @return the maximum value
 */

/** 
 * @deprecated use max(Iterable)
 */

/** 
 * Selects the maximum value found in an Iterable.
 * @param items a Collection
 * @return the maximum value
 * @since 2.2.0
 */

/** 
 * Sums all the items from an array of items.
 * @param items an array of items
 * @return the sum of the items
 */

/** 
 * @deprecated use sum(Iterable)
 */

/** 
 * Sums all the given items.
 * @param items an Iterable of items
 * @return the sum of the item
 * @since 2.2.0
 */

