/** 
 * A collection of utility methods used to deal with traits.
 * @author CÃ©dric Champeau
 * @since 2.3.0
 */

/** 
 * Returns true if the specified class node is a trait.
 * @param cNode a class node to test
 * @return true if the classnode represents a trait
 */

/** 
 * Returns true if the specified class is a trait.
 * @param clazz a class to test
 * @return true if the classnode represents a trait
 */

/** 
 * Returns true if the specified class node is annotated with the  {@link Trait} interface.
 * @param cNode a class node
 * @return true if the specified class node is annotated with the {@link Trait} interface.
 */

/** 
 * Indicates whether a method in a trait interface has a default implementation.
 * @param method a method node
 * @return true if the method has a default implementation in the trait
 */

/** 
 * Indicates whether a method in a trait interface has a default implementation.
 * @param method a method node
 * @return true if the method has a default implementation in the trait
 */

/** 
 * Reflection API to indicate whether some method is a bridge method to the default implementation of a trait.
 * @param someMethod a method node
 * @return null if it is not a method implemented in a trait. If it is, returns the method from the trait class.
 */

/** 
 * Reflection API to find the method corresponding to the default implementation of a trait, given a bridge method.
 * @param someMethod a method node
 * @return null if it is not a method implemented in a trait. If it is, returns the method from the trait class.
 */

/** 
 * Converts a class implementing some trait into a target class. If the trait is a dynamic proxy and that the target class is assignable to the target object of the proxy, then the target object is returned. Otherwise, falls back to  {@link org.codehaus.groovy.runtime.DefaultGroovyMethods#asType(java.lang.Object,Class)}
 * @param self an object to be coerced to some class
 * @param clazz the class to be coerced to
 * @return the object coerced to the target class, or the proxy instance if it is compatible with the target class.
 */

/** 
 * Returns the name of a method without the super trait specific prefix. If the method name doesn't correspond to a super trait method call, the result will be null.
 * @param origName the name of a method
 * @return null if the name doesn't start with the super trait prefix, otherwise the name without the prefix
 */

/** 
 * Collects all interfaces of a class node, but reverses the order of the declaration of direct interfaces of this class node. This is used to make sure a trait implementing A,B where both A and B have the same method will take the method from B (latest), aligning the behavior with categories.
 * @param cNode a class node
 * @param interfaces ordered set of interfaces
 */

/** 
 * Collects all the self types that a type should extend or implement, given the traits is implements. Collects from interfaces and superclasses too.
 * @param receiver a class node that may implement a trait
 * @param selfTypes a collection where the list of self types will be written
 * @return the selfTypes collection itself
 * @since 2.4.0
 */

/** 
 * Collects all the self types that a type should extend or implement, given the traits is implements.
 * @param receiver a class node that may implement a trait
 * @param selfTypes a collection where the list of self types will be written
 * @param checkInterfaces should the interfaces that the node implements be collected too
 * @param checkSuper should we collect from the superclass too
 * @return the selfTypes collection itself
 * @since 2.4.0
 */

/** 
 * Internal annotation used to indicate which methods in a trait interface have a default implementation.
 */

/** 
 * Internal annotation used to indicate that a method is a bridge method to a trait default implementation.
 */

/** 
 * @return the trait class
 */

/** 
 * @return The method descriptor of the method from the trait
 */

