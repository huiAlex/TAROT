/** 
 * Allows you to provide  {@code @Immutable} with a list of classes whichare deemed immutable. By supplying a class in this list, you are vouching for its immutability and  {@code @Immutable} will do no further checks.Example: <pre> import groovy.transform. {@code @Immutable}(knownImmutableClasses = [Address]) class Person { String first, last Address address } {@code @TupleConstructor}class Address { final String street } </pre>
 * @since 1.8.7
 */

/** 
 * Allows you to provide  {@code @Immutable} with a list of property names whichare deemed immutable. By supplying a property's name in this list, you are vouching for its immutability and  {@code @Immutable} will do no further checks.Example: <pre> {@code @groovy.transform.Immutable}(knownImmutables = ['address']) class Person { String first, last Address address } ... </pre>
 * @since 2.1.0
 */

/** 
 * If  {@code true}, this adds a method  {@code copyWith} which takes a Map ofnew property values and returns a new instance of the Immutable class with these values set. Example: <pre> {@code @groovy.transform.Immutable}(copyWith = true) class Person { String first, last } def tim   = new Person( 'tim', 'yates' ) def alice = tim.copyWith( first:'alice' ) assert tim.first   == 'tim' assert alice.first == 'alice' </pre> Unknown keys in the map are ignored, and if the values would not change the object, then the original object is returned. If a method called  {@code copyWith} that takes a single parameter alreadyexists in the class, then this setting is ignored, and no method is generated.
 * @since 2.2.0
 */

