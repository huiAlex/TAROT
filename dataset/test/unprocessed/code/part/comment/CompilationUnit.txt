/** 
 * The CompilationUnit collects all compilation data as it is generated by the compiler system. You can use this object to add additional source units to the compilation, or force the compilation to be run again (to affect only the deltas). <p> You can also add PhaseOperations to this compilation using the addPhaseOperation method. This is commonly used when you want to wire a new AST Transformation into the compilation.
 * @author <a href="mailto:cpoirier@dreaming.org">Chris Poirier</a>
 * @author <a href="mailto:blackdrag@gmx.org">Jochen Theodorou</a>
 * @author <a href="mailto:roshandawrani@codehaus.org">Roshan Dawrani</a>
 */

/** 
 * Initializes the CompilationUnit with defaults.
 */

/** 
 * Initializes the CompilationUnit with defaults except for class loader.
 */

/** 
 * Initializes the CompilationUnit with no security considerations.
 */

/** 
 * Initializes the CompilationUnit with a CodeSource for controlling security stuff and a class loader for loading classes.
 */

/** 
 * Initializes the CompilationUnit with a CodeSource for controlling security stuff, a class loader for loading classes, and a class loader for loading AST transformations. <b>Note</b> The transform loader must be able to load compiler classes. That means CompilationUnit.class.classLoader must be at last a parent to transformLoader. The other loader has no such constraint.
 * @param transformLoader - the loader for transforms
 * @param loader          - loader used to resolve classes against during compilation
 * @param security        - security setting for the compilation
 * @param configuration   - compilation configuration
 */

/** 
 * Returns the class loader for loading AST transformations.
 * @return - the transform class loader
 */

/** 
 * Configures its debugging mode and classloader classpath from a given compiler configuration. This cannot be done more than once due to limitations in  {@link java.net.URLClassLoader URLClassLoader}.
 */

/* */
/** 
 * Returns the CompileUnit that roots our AST.
 */

/** 
 * Get the source summaries
 */

/** 
 * Get the GroovyClasses generated by compile().
 */

/** 
 * Convenience routine to get the first ClassNode, for when you are sure there is only one.
 */

/** 
 * Convenience routine to get the named ClassNode.
 */

/** 
 * @return the AST transformations current context
 */

/** 
 * Adds a set of file paths to the unit.
 */

/** 
 * Adds a set of source files to the unit.
 */

/** 
 * Adds a source file to the unit.
 */

/** 
 * Adds a source file to the unit.
 */

/** 
 * Adds a InputStream source to the unit.
 */

/** 
 * Adds a SourceUnit to the unit.
 */

/** 
 * Returns an iterator on the unit's SourceUnits.
 */

/** 
 * Adds a ClassNode directly to the unit (ie. without source). WARNING: the source is needed for error reporting, using this method without setting a SourceUnit will cause NullPinterExceptions
 */

/** 
 * A callback interface you can use to "accompany" the classgen() code as it traverses the ClassNode tree.  You will be called-back for each primary and inner class.  Use setClassgenCallback() before running compile() to set your callback.
 */

/** 
 * Sets a ClassgenCallback.  You can have only one, and setting it to null removes any existing setting.
 */

/** 
 * A callback interface you can use to get a callback after every unit of the compile process.  You will be called-back with a ProcessingUnit and a phase indicator.  Use setProgressCallback() before running compile() to set your callback.
 */

/** 
 * Sets a ProgressCallback.  You can have only one, and setting it to null removes any existing setting.
 */

/** 
 * Synonym for compile(Phases.ALL).
 */

/** 
 * Compiles the compilation unit from sources.
 */

/** 
 * Dequeues any source units add through addSource and resets the compiler phase to initialization. <p> Note: this does not mean a file is recompiled. If a SourceUnit has already passed a phase it is skipped until a higher phase is reached.
 * @return true if there was a queued source
 * @throws CompilationFailedException
 */

/** 
 * Resolves all types
 */

/** 
 * Runs convert() on a single SourceUnit.
 */

/* */
/** 
 * Runs classgen() on a single ClassNode.
 */

/** 
 * Updates the phase marker on all sources.
 */

/** 
 * Marks a single SourceUnit with the current phase, if it isn't already there yet.
 */

/** 
 * An callback interface for use in the applyToSourceUnits loop driver.
 */

/** 
 * A loop driver for applying operations to all SourceUnits. Automatically skips units that have already been processed through the current phase.
 */

/** 
 * An callback interface for use in the applyToSourceUnits loop driver.
 */

/** 
 * A loop driver for applying operations to all primary ClassNodes in our AST.  Automatically skips units that have already been processed through the current phase.
 */

