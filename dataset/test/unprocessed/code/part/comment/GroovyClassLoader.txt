/* */
/** 
 * A ClassLoader which can load Groovy classes. The loaded classes are cached, classes from other classloaders should not be cached. To be able to load a script that was asked for earlier but was created later it is essential not to keep anything like a "class not found" information for that class name. This includes possible parent loaders. Classes that are not cached are always reloaded.
 * @author <a href="mailto:james@coredevelopers.net">James Strachan</a>
 * @author Guillaume Laforge
 * @author Steve Goetze
 * @author Bing Ran
 * @author <a href="mailto:scottstirling@rcn.com">Scott Stirling</a>
 * @author <a href="mailto:blackdrag@gmx.org">Jochen Theodorou</a>
 * @version $Revision$
 */

/** 
 * this cache contains the loaded classes or PARSING, if the class is currently parsed
 */

/** 
 * This cache contains mappings of file name to class. It is used to bypass compilation.
 */

/** 
 * creates a GroovyClassLoader using the current Thread's context Class loader as parent.
 */

/** 
 * creates a GroovyClassLoader using the given ClassLoader as parent
 */

/** 
 * creates a GroovyClassLoader using the given GroovyClassLoader as parent. This loader will get the parent's CompilerConfiguration
 */

/** 
 * creates a GroovyClassLoader.
 * @param parent                    the parent class loader
 * @param config                    the compiler configuration
 * @param useConfigurationClasspath determines if the configurations classpath should be added
 */

/** 
 * creates a GroovyClassLoader using the given ClassLoader as parent.
 */

/** 
 * Loads the given class node returning the implementation Class. <p> WARNING: this compilation is not synchronized
 * @param classNode
 * @return a class
 */

/** 
 * Parses the given file into a Java class capable of being run
 * @param file the file name to parse
 * @return the main class defined in the given script
 */

/** 
 * Parses the given text into a Java class capable of being run
 * @param text     the text of the script/class to parse
 * @param fileName the file name to use as the name of the class
 * @return the main class defined in the given script
 */

/** 
 * Parses the given text into a Java class capable of being run
 * @param text the text of the script/class to parse
 * @return the main class defined in the given script
 */

/** 
 * @deprecated Prefer using methods taking a Reader rather than an InputStream to avoid wrong encoding issues.
 */

/** 
 * Parses the given code source into a Java class. If there is a class file for the given code source, then no parsing is done, instead the cached class is returned.
 * @param shouldCacheSource if true then the generated class will be stored in the source cache
 * @return the main class defined in the given script
 */

/** 
 * gets the currently used classpath.
 * @return a String[] containing the file information of the urls
 * @see #getURLs()
 */

/** 
 * creates a new CompilationUnit. If you want to add additional phase operations to the CompilationUnit (for example to inject additional methods, variables, fields), then you should overwrite this method.
 * @param config the compiler configuration, usually the same as for this class loader
 * @param source the source containing the initial file to compile, more files may follow during compilation
 * @return the CompilationUnit
 */

/** 
 * creates a ClassCollector for a new compilation.
 * @param unit the compilationUnit
 * @param su   the SourceUnit
 * @return the ClassCollector
 */

/** 
 * open up the super class define that takes raw bytes
 */

/** 
 * loads a class from a file or a parent classloader. This method does call loadClass(String, boolean, boolean, boolean) with the last parameter set to false.
 * @throws CompilationFailedException if compilation was not successful
 */

/** 
 * gets a class from the class cache. This cache contains only classes loaded through this class loader or an InnerLoader instance. If no class is stored for a specific name, then the method should return null.
 * @param name of the class
 * @return the class stored for the given name
 * @see #removeClassCacheEntry(String)
 * @see #setClassCacheEntry(Class)
 * @see #clearCache()
 */

/** 
 * sets an entry in the class cache.
 * @param cls the class
 * @see #removeClassCacheEntry(String)
 * @see #getClassCacheEntry(String)
 * @see #clearCache()
 */

/** 
 * removes a class from the class cache.
 * @param name of the class
 * @see #getClassCacheEntry(String)
 * @see #setClassCacheEntry(Class)
 * @see #clearCache()
 */

/** 
 * adds a URL to the classloader.
 * @param url the new classpath element
 */

/** 
 * Indicates if a class is recompilable. Recompilable means, that the classloader will try to locate a groovy source file for this class and then compile it again, adding the resulting class as entry to the cache. Giving null as class is like a recompilation, so the method should always return true here. Only classes that are implementing GroovyObject are compilable and only if the timestamp in the class is lower than Long.MAX_VALUE. <p> NOTE: First the parent loaders will be asked and only if they don't return a class the recompilation will happen. Recompilation also only happen if the source file is newer.
 * @param cls the class to be tested. If null the method should return true
 * @return true if the class should be compiled again
 * @see #isSourceNewer(URL,Class)
 */

/** 
 * sets if the recompilation should be enable. There are 3 possible values for this. Any value different than null overrides the value from the compiler configuration. true means to recompile if needed false means to never recompile.
 * @param mode the recompilation mode
 * @see CompilerConfiguration
 */

/** 
 * gets the currently set recompilation mode. null means, the compiler configuration is used. False means no recompilation and true means that recompilation will be done if needed.
 * @return the recompilation mode
 */

/** 
 * loads a class from a file or a parent classloader.
 * @param name                  of the class to be loaded
 * @param lookupScriptFiles     if false no lookup at files is done at all
 * @param preferClassOverScript if true the file lookup is only done if there is no class
 * @param resolve               see {@link java.lang.ClassLoader#loadClass(java.lang.String,boolean)}
 * @return the class found or the class created from a file lookup
 * @throws ClassNotFoundException     if the class could not be found
 * @throws CompilationFailedException if the source file could not be compiled
 */

/** 
 * (Re)Compiles the given source. This method starts the compilation of a given source, if the source has changed since the class was created. For this isSourceNewer is called.
 * @param source    the source pointer for the compilation
 * @param className the name of the class to be generated
 * @param oldClass  a possible former class
 * @return the old class if the source wasn't new enough, the new class else
 * @throws CompilationFailedException if the compilation failed
 * @throws IOException                if the source is not readable
 * @see #isSourceNewer(URL,Class)
 */

/** 
 * Implemented here to check package access prior to returning an already loaded class.
 * @throws CompilationFailedException if the compilation failed
 * @throws ClassNotFoundException     if the class was not found
 * @see java.lang.ClassLoader#loadClass(java.lang.String,boolean)
 */

/** 
 * gets the time stamp of a given class. For groovy generated classes this usually means to return the value of the static field __timeStamp. If the parameter doesn't have such a field, then Long.MAX_VALUE is returned
 * @param cls the class
 * @return the time stamp
 */

/** 
 * This method will take a file name and try to "decode" any URL encoded characters.  For example if the file name contains any spaces this method call will take the resulting %20 encoded values and convert them to spaces. <p> This method was added specifically to fix defect:  Groovy-1787.  The defect involved a situation where two scripts were sitting in a directory with spaces in its name.  The code would fail when the class loader tried to resolve the file name and would choke on the URLEncoded space values.
 */

/* */
/** 
 * Decides if the given source is newer than a class.
 * @param source the source we may want to compile
 * @param cls    the former class
 * @return true if the source is newer, false else
 * @throws IOException if it is not possible to open anconnection for the given source
 * @see #getTimeStamp(Class)
 */

/** 
 * adds a classpath to this classloader.
 * @param path is a jar file or a directory.
 * @see #addURL(URL)
 */

/** 
 * <p>Returns all Groovy classes loaded by this class loader.
 * @return all classes loaded by this class loader
 */

/** 
 * Removes all classes from the class cache.
 * @see #getClassCacheEntry(String)
 * @see #setClassCacheEntry(Class)
 * @see #removeClassCacheEntry(String)
 */

