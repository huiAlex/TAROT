/** 
 * A Command line to execute groovy.
 * @author Jeremy Rayner
 * @author Yuri Schimke
 * @author Roshan Dawrani
 * @version $Revision$
 */

/** 
 * Main CLI interface.
 * @param args all command line args.
 */

/** 
 * Parse the command line.
 * @param options the options parser.
 * @param args    the command line args.
 * @return parsed command line.
 * @throws ParseException if there was a problem.
 */

/** 
 * Build the options parser.  Has to be synchronized because of the way Options are constructed.
 * @return an options parser.
 */

/** 
 * Process the users request.
 * @param line the parsed command line.
 * @throws ParseException if invalid options are chosen
 */

/** 
 * Run the script.
 */

/** 
 * Process Sockets.
 */

/** 
 * Get the text of the Groovy script at the given location. If the location is a file path and it does not exist as given, then  {@link GroovyMain#huntForTheScriptFile(String)} is called to trywith some Groovy extensions appended. This method is not used to process scripts and is retained for backward compatibility.  If you want to modify how GroovyMain processes scripts then use  {@link GroovyMain#getScriptSource(boolean,String)}.
 * @param uriOrFilename
 * @return the text content at the location
 * @throws IOException
 * @deprecated
 */

/** 
 * Get a new GroovyCodeSource for a script which may be given as a location (isScript is true) or as text (isScript is false).
 * @param isScriptFile indicates whether the script parameter is a location or content
 * @param script the location or context of the script
 * @return a new GroovyCodeSource for the given script
 * @throws IOException
 * @throws URISyntaxException
 * @since 2.3.0
 */

/** 
 * Search for the script file, doesn't bother if it is named precisely. Tries in this order: - actual supplied name - name.groovy - name.gvy - name.gy - name.gsh
 * @since 2.3.0
 */

/** 
 * Hunt for the script file by calling searchForGroovyScriptFile(String).
 * @see GroovyMain#searchForGroovyScriptFile(String)
 */

/** 
 * Process the input files.
 */

/** 
 * Process a single input file.
 * @param s    the script to execute.
 * @param file the input file.
 */

/** 
 * Process a script against a single input file.
 * @param s      script to execute.
 * @param reader input file.
 * @param pw     output sink.
 */

/** 
 * Process the standard, single script with args.
 */

