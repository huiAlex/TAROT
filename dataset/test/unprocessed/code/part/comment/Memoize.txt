/** 
 * Implements memoize for Closures. It is supposed to be used by the Closure class itself to implement the memoize() family of methods.
 * @author Vaclav Pech
 */

/** 
 * A place-holder for null values in cache
 */

/** 
 * Creates a new closure delegating to the supplied one and memoizing all return values by the arguments. The supplied cache is used to store the memoized values and it is the cache's responsibility to put limits on the cache size or implement cache eviction strategy. The LRUCache, for example, allows to set the maximum cache size constraint and implements the LRU (Last Recently Used) eviction strategy.
 * @param cache A map to hold memoized return values
 * @param closure The closure to memoize
 * @param < V > The closure's return type
 * @return A new memoized closure
 */

/** 
 * Creates a key to use in the memoize cache
 * @param args The arguments supplied to the closure invocation
 * @return The key - a list holding all arguments
 */

/** 
 * A place-holder for cached null values
 */

/** 
 * After the garbage collector has done its job, we need to clean the cache from references to all the evicted memoized values.
 * @param cache The cache to prune
 * @param queue A reference queue holding references to gc-evicted memoized values
 */

