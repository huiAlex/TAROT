/** 
 * Represents an arbitrary tree node which can be used for structured metadata or any arbitrary XML-like tree. A node can have a name, a value and an optional Map of attributes. Typically the name is a String and a value is either a String or a List of other Nodes, though the types are extensible to provide a flexible structure, e.g. you could use a QName as the name which includes a namespace URI and a local name. Or a JMX ObjectName etc. So this class can represent metadata like <code>{foo a=1 b="abc"}</code> or nested metadata like <code>{foo a=1 b="123" { bar x=12 text="hello" }}</code>
 * @author <a href="mailto:james@coredevelopers.net">James Strachan</a>
 * @author Paul King
 */

/** 
 * Creates a new Node with the same name, no parent, shallow cloned attributes and if the value is a NodeList, a (deep) clone of those nodes.
 * @return the clone
 */

/** 
 * Creates a new Node named <code>name</code> and if a parent is supplied, adds the newly created node as a child of the parent.
 * @param parent the parent node or null if no parent
 * @param name   the name of the node
 */

/** 
 * Creates a new Node named <code>name</code> with value <code>value</code> and if a parent is supplied, adds the newly created node as a child of the parent.
 * @param parent the parent node or null if no parent
 * @param name   the name of the node
 * @param value  the Node value, e.g. some text but in general any Object
 */

/** 
 * Creates a new Node named <code>name</code> with attributes specified in the <code>attributes</code> Map. If a parent is supplied, the newly created node is added as a child of the parent.
 * @param parent     the parent node or null if no parent
 * @param name       the name of the node
 * @param attributes a Map of name-value pairs
 */

/** 
 * Creates a new Node named <code>name</code> with value <code>value</code> and with attributes specified in the <code>attributes</code> Map. If a parent is supplied, the newly created node is added as a child of the parent.
 * @param parent     the parent node or null if no parent
 * @param name       the name of the node
 * @param attributes a Map of name-value pairs
 * @param value      the Node value, e.g. some text but in general any Object
 */

/** 
 * Appends a child to the current node.
 * @param child the child to append
 * @return <code>true</code>
 */

/** 
 * Removes a child of the current node.
 * @param child the child to remove
 * @return <code>true</code> if the param was a child of the current node
 */

/** 
 * Creates a new node as a child of the current node.
 * @param name the name of the new node
 * @param attributes the attributes of the new node
 * @return the newly created <code>Node</code>
 */

/** 
 * Creates a new node as a child of the current node.
 * @param name the name of the new node
 * @return the newly created <code>Node</code>
 */

/** 
 * Creates a new node as a child of the current node.
 * @param name the name of the new node
 * @param value the value of the new node
 * @return the newly created <code>Node</code>
 */

/** 
 * Creates a new node as a child of the current node.
 * @param name the name of the new node
 * @param attributes the attributes of the new node
 * @param value the value of the new node
 * @return the newly created <code>Node</code>
 */

/** 
 * Replaces the current node with nodes defined using builder-style notation via a Closure.
 * @param c A Closure defining the new nodes using builder-style notation.
 * @return the original now replaced node
 */

/** 
 * Replaces the current node with the supplied node.
 * @param n the new Node
 * @return the original now replaced node
 */

/** 
 * Adds sibling nodes (defined using builder-style notation via a Closure) after the current node.
 * @param c A Closure defining the new sibling nodes to add using builder-style notation.
 */

/** 
 * Extension point for subclasses to override the metaclass. The default one supports the property and @ attribute notations.
 * @param metaClass the original metaclass
 * @param nodeClass the class whose metaclass we wish to override (this class or a subclass)
 */

/** 
 * Returns the textual representation of the current node and all its child nodes.
 * @return the text value of the node including child text
 */

/** 
 * Returns an <code>Iterator</code> of the children of the node.
 * @return the iterator of the nodes children
 */

/** 
 * Returns a <code>List</code> of the nodes children.
 * @return the nodes children
 */

/** 
 * Returns a <code>Map</code> of the attributes of the node or an empty <code>Map</code> if the node does not have any attributes.
 * @return the attributes of the node
 */

/** 
 * Provides lookup of attributes by key.
 * @param key the key of interest
 * @return the attribute matching the key or <code>null</code> if no match exists
 */

/** 
 * Returns an <code>Object</code> representing the name of the node.
 * @return the name or <code>null</code> if name is empty
 */

/** 
 * Returns an <code>Object</code> representing the value of the node.
 * @return the value or <code>null</code> if value is empty
 */

/** 
 * Adds or replaces the value of the node.
 * @param value the new value of the node
 */

/** 
 * Returns the parent of the node.
 * @return the parent or <code>null</code> for the root node
 */

/** 
 * Adds or replaces the parent of the node.
 * @param parent the new parent of the node
 */

/** 
 * Provides lookup of elements by non-namespaced name
 * @param key the name (or shortcut key) of the node(s) of interest
 * @return the nodes which match key
 */

/** 
 * Provides lookup of elements by QName.
 * @param name the QName of interest
 * @return the nodes matching name
 */

/** 
 * Provides lookup of elements by name.
 * @param name the name of interest
 * @return the nodes matching name
 */

/** 
 * Provides a collection of all the nodes in the tree using a depth first traversal.
 * @return the list of (depth-first) ordered nodes
 */

/** 
 * Provides a collection of all the nodes in the tree using a breadth-first traversal.
 * @return the list of (breadth-first) ordered nodes
 */

/** 
 * Returns the list of any direct String nodes of this node.
 * @return the list of String values from this node
 * @since 2.3.0
 */

/** 
 * Writes the node to the specified <code>PrintWriter</code>.
 * @param out the writer receiving the output
 */

