/** 
 * Represents any closure object in Groovy. <p> Groovy allows instances of Closures to be called in a short form. For example: <pre> def a = 1 def c = { a } assert c() == 1 </pre> To be able to use a Closure in this way with your own subclass, you need to provide a doCall method with any signature you want to. This ensures that {@link #getMaximumNumberOfParameters()} and{@link #getParameterTypes()} will work too without anyadditional code. If no doCall method is provided a closure must be used in its long form like <pre> def a = 1 def c = {a} assert c.call() == 1 </pre>
 * @author <a href="mailto:james@coredevelopers.net">James Strachan</a>
 * @author <a href="mailto:tug@wilson.co.uk">John Wilson</a>
 * @author <a href="mailto:blackdrag@gmx.org">Jochen Theodorou</a>
 * @author Graeme Rocher
 * @author Paul King
 */

/** 
 * With this resolveStrategy set the closure will attempt to resolve property references and methods to the owner first, then the delegate (<b>this is the default strategy</b>). For example the following code : <pre> class Test { def x = 30 def y = 40 def run() { def data = [ x: 10, y: 20 ] def cl = { y = x + y } cl.delegate = data cl() println x println y println data } } new Test().run() </pre> will output : <pre> 30 70 [x:10, y:20] </pre> because the x and y fields declared in the Test class the variables in the delegate.<p> <i>Note that local variables are always looked up first, independently of the resolution strategy.</i>
 */

/** 
 * With this resolveStrategy set the closure will attempt to resolve property references and methods to the delegate first then the owner. For example the following code : <pre> class Test { def x = 30 def y = 40 def run() { def data = [ x: 10, y: 20 ] def cl = { y = x + y } cl.delegate = data cl.resolveStrategy = Closure.DELEGATE_FIRST cl() println x println y println data } } new Test().run() </pre> will output : <pre> 30 40 [x:10, y:30] </pre> because the x and y variables declared in the delegate shadow the fields in the owner class.<p> <i>Note that local variables are always looked up first, independently of the resolution strategy.</i>
 */

/** 
 * With this resolveStrategy set the closure will resolve property references and methods to the owner only and not call the delegate at all. For example the following code : <pre> class Test { def x = 30 def y = 40 def run() { def data = [ x: 10, y: 20, z: 30 ] def cl = { y = x + y + z } cl.delegate = data cl.resolveStrategy = Closure.OWNER_ONLY cl() println x println y println data } } new Test().run() </pre> will throw "No such property: z" error because even if the z variable is declared in the delegate, no lookup is made.<p> <i>Note that local variables are always looked up first, independently of the resolution strategy.</i>
 */

/** 
 * With this resolveStrategy set the closure will resolve property references and methods to the delegate only and entirely bypass the owner. For example the following code : <pre> class Test { def x = 30 def y = 40 def z = 50 def run() { def data = [ x: 10, y: 20 ] def cl = { y = x + y + z } cl.delegate = data cl.resolveStrategy = Closure.DELEGATE_ONLY cl() println x println y println data } } new Test().run() </pre> will throw an error because even if the owner declares a "z" field, the resolution strategy will bypass lookup in the owner.<p> <i>Note that local variables are always looked up first, independently of the resolution strategy.</i>
 */

/** 
 * With this resolveStrategy set the closure will resolve property references to itself and go through the usual MetaClass look-up process. This means that properties and methods are neither resolved from the owner nor the delegate, but only on the closure object itself. This allows the developer to override getProperty using ExpandoMetaClass of the closure itself.<p> <i>Note that local variables are always looked up first, independently of the resolution strategy.</i>
 */

/** 
 * Constructor used when the "this" object for the Closure is null. This is rarely the case in normal Groovy usage.
 * @param owner the Closure owner
 */

/** 
 * Sets the strategy which the closure uses to resolve property references and methods. The default is Closure.OWNER_FIRST
 * @param resolveStrategy The resolve strategy to set
 * @see groovy.lang.Closure#DELEGATE_FIRST
 * @see groovy.lang.Closure#DELEGATE_ONLY
 * @see groovy.lang.Closure#OWNER_FIRST
 * @see groovy.lang.Closure#OWNER_ONLY
 * @see groovy.lang.Closure#TO_SELF
 */

/** 
 * Gets the strategy which the closure users to resolve methods and properties
 * @return The resolve strategy
 * @see groovy.lang.Closure#DELEGATE_FIRST
 * @see groovy.lang.Closure#DELEGATE_ONLY
 * @see groovy.lang.Closure#OWNER_FIRST
 * @see groovy.lang.Closure#OWNER_ONLY
 * @see groovy.lang.Closure#TO_SELF
 */

/** 
 * Invokes the closure without any parameters, returning any value if applicable.
 * @return the value if applicable or null if there is no return statement in the closure
 */

/** 
 * Invokes the closure, returning any value if applicable.
 * @param arguments could be a single value or a List of values
 * @return the value if applicable or null if there is no return statement in the closure
 */

/** 
 * @return the owner Object to which method calls will go which istypically the outer class when the closure is constructed
 */

/** 
 * @return the delegate Object to which method calls will go which istypically the outer class when the closure is constructed
 */

/** 
 * Allows the delegate to be changed such as when performing markup building
 * @param delegate the new delegate
 */

/** 
 * @return the parameter types of the longest doCall methodof this closure
 */

/** 
 * @return the maximum number of parameters a doCall methodof this closure can take
 */

/** 
 * @return a version of this closure which implements Writable.  Note thatthe returned Writable also overrides  {@link #toString()} in orderto allow rendering the result directly to a String.
 */

/* */
/** 
 * Support for Closure currying.
 * @param argument the argument to bind
 * @return the new closure with the argument bound
 * @see #curry(Object...)
 */

/** 
 * Support for Closure "right" currying. Parameters are supplied on the right rather than left as per the normal curry() method. Typical usage: <pre> def divide = { a, b -> a / b } def halver = divide.rcurry(2) assert halver(8) == 4 </pre>
 * @param arguments the arguments to bind
 * @return the new closure with its arguments bound
 * @see #curry(Object...)
 */

/** 
 * Support for Closure "right" currying.
 * @param argument the argument to bind
 * @return the new closure with the argument bound
 * @see #rcurry(Object...)
 */

/** 
 * Support for Closure currying at a given index.
 * @param argument the argument to bind
 * @return the new closure with the argument bound
 * @see #ncurry(int,Object...)
 */

/** 
 * Support for Closure forward composition. <p> Typical usage: <pre> def twice = { a -> a * 2 } def thrice = { a -> a * 3 } def times6 = twice >> thrice // equivalent: times6 = { a -> thrice(twice(a)) } assert times6(3) == 18 </pre>
 * @param other the Closure to compose with the current Closure
 * @return the new composed Closure
 */

/** 
 * Support for Closure reverse composition. <p> Typical usage: <pre> def twice = { a -> a * 2 } def thrice = { a -> a * 3 } def times6 = thrice << twice // equivalent: times6 = { a -> thrice(twice(a)) } assert times6(3) == 18 </pre>
 * @param other the Closure to compose with the current Closure
 * @return the new composed Closure
 */

/* */
/** 
 * Creates a caching variant of the closure. Whenever the closure is called, the mapping between the parameters and the return value is preserved in cache making subsequent calls with the same arguments fast. This variant will keep all cached values forever, i.e. till the closure gets garbage-collected. The returned function can be safely used concurrently from multiple threads, however, the implementation values high average-scenario performance and so concurrent calls on the memoized function with identical argument values may not necessarily be able to benefit from each other's cached return value. With this having been mentioned, the performance trade-off still makes concurrent use of memoized functions safe and highly recommended. The cache gets garbage-collected together with the memoized closure.
 * @return A new closure forwarding to the original one while caching the results
 */

/** 
 * Builds a trampolined variant of the current closure. To prevent stack overflow due to deep recursion, functions can instead leverage the trampoline mechanism and avoid recursive calls altogether. Under trampoline, the function is supposed to perform one step of the calculation and, instead of a recursive call to itself or another function, it return back a new closure, which will be executed by the trampoline as the next step. Once a non-closure value is returned, the trampoline stops and returns the value as the final result. Here is an example: <pre> def fact fact = { n, total -> n == 0 ? total : fact.trampoline(n - 1, n * total) }.trampoline() def factorial = { n -> fact(n, 1G)} println factorial(20) // => 2432902008176640000 </pre>
 * @param args Parameters to the closure, so as the trampoline mechanism can call it
 * @return A closure, which will execute the original closure on a trampoline.
 */

/** 
 * Builds a trampolined variant of the current closure. To prevent stack overflow due to deep recursion, functions can instead leverage the trampoline mechanism and avoid recursive calls altogether. Under trampoline, the function is supposed to perform one step of the calculation and, instead of a recursive call to itself or another function, it return back a new closure, which will be executed by the trampoline as the next step. Once a non-closure value is returned, the trampoline stops and returns the value as the final result.
 * @return A closure, which will execute the original closure on a trampoline.
 * @see #trampoline(Object...)
 */

/* */
/* */
/* */
/* */
/* */
/* */
/* */
/* */
/* */
/* */
/* */
/* */
/* */
/* */
/* */
/* */
/* */
/* */
/** 
 * @return Returns the directive.
 */

/** 
 * @param directive The directive to set.
 */

/** 
 * Returns a copy of this closure where the "owner", "delegate" and "thisObject" fields are null, allowing proper serialization when one of them is not serializable.
 * @return a serializable closure.
 * @since 1.8.5
 */

/** 
 * Returns a copy of this closure for which the delegate, owner and thisObject are replaced with the supplied parameters. Use this when you want to rehydrate a closure which has been made serializable thanks to the  {@link #dehydrate()}method.
 * @param delegate the closure delegate
 * @param owner the closure owner
 * @param thisObject the closure "this" object
 * @return a copy of this closure where owner, delegate and thisObject are replaced
 * @since 1.8.5
 */

