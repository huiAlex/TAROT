/** 
 * This class defines all the encoding/decoding groovy methods which enhance the normal JDK classes when inside the Groovy environment. Static methods are used with the first parameter the destination class.
 */

/** 
 * Produce a Writable object which writes the Base64 encoding of the byte array. Calling toString() on the result returns the encoding as a String. For more information on Base64 encoding and chunking see <code>RFC 4648</code>.
 * @param data Byte array to be encoded
 * @param chunked whether or not the Base64 encoded data should be MIME chunked
 * @return object which will write the Base64 encoding of the byte array
 * @since 1.5.1
 */

/** 
 * Produce a Writable object which writes the Base64 encoding of the byte array. Calling toString() on the result returns the encoding as a String. For more information on Base64 encoding and chunking see <code>RFC 4648</code>.
 * @param data Byte array to be encoded
 * @return object which will write the Base64 encoding of the byte array
 * @since 1.0
 */

/** 
 * Produce a Writable object which writes the Base64 encoding of the byte array. Calling toString() on the result returns the encoding as a String. For more information on Base64 encoding and chunking see <code>RFC 4648</code>.
 * @param data byte array to be encoded
 * @param chunked whether or not the Base64 encoded data should be MIME chunked
 * @return object which will write the Base64 encoding of the byte array
 * @since 1.5.7
 */

/** 
 * Produce a Writable object which writes the Base64 encoding of the byte array. Calling toString() on the result returns the encoding as a String. For more information on Base64 encoding and chunking see <code>RFC 4648</code>.
 * @param data byte array to be encoded
 * @return object which will write the Base64 encoding of the byte array
 * @since 1.0
 */

/** 
 * Decode the String from Base64 into a byte array.
 * @param value the string to be decoded
 * @return the decoded bytes as an array
 * @since 1.0
 */

/** 
 * Produces a Writable that writes the hex encoding of the Byte[]. Calling toString() on this Writable returns the hex encoding as a String. The hex encoding includes two characters for each byte and all letters are lower case.
 * @param data byte array to be encoded
 * @return object which will write the hex encoding of the byte array
 * @see Integer#toHexString(int)
 */

/** 
 * Produces a Writable that writes the hex encoding of the byte[]. Calling toString() on this Writable returns the hex encoding as a String. The hex encoding includes two characters for each byte and all letters are lower case.
 * @param data byte array to be encoded
 * @return object which will write the hex encoding of the byte array
 * @see Integer#toHexString(int)
 */

/** 
 * Decodes a hex string to a byte array. The hex string can contain either upper case or lower case letters.
 * @param value string to be decoded
 * @return decoded byte array
 * @throws NumberFormatException If the string contains an odd number of charactersor if the characters are not valid hexadecimal values.
 */

