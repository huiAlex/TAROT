/** 
 * The main class code visitor responsible for static type checking. It will perform various inspections like checking assignment types, type inference, ... Eventually, class nodes may be annotated with inferred type information.
 * @author Cedric Champeau
 * @author Jochen Theodorou
 */

/** 
 * Returns the current type checking context. The context is used internally by the type checker during type checking to store various state data.
 * @return the type checking context
 */

/** 
 * Returns the list of type checking annotations class nodes. Subclasses may override this method in order to provide additional classes which must be looked up when checking if a method or a class node should be skipped. <p> The default implementation returns  {@link TypeChecked}.
 * @return array of class nodes
 */

/** 
 * Test if a node is an inner class node, and if it is, then checks if the enclosing method is skipped.
 * @param node
 * @return true if the inner class node should be skipped
 */

/** 
 * Given a field node, checks if we are calling a private field from an inner class.
 */

/** 
 * Given a method node, checks if we are calling a private method from an inner class.
 */

/** 
 * wrap type in Class<> if usingClass==true
 */

/** 
 * Given a binary expression corresponding to an assignment, will check that the type of the RHS matches one of the possible setters and if not, throw a type checking error.
 * @param expression the assignment expression
 * @param leftExpression left expression of the assignment
 * @param rightExpression right expression of the assignment
 * @param setterInfo possible setters
 * @return true if type checking passed
 */

/** 
 * Stores information about types when [objectOfInstanceof instanceof typeExpression] is visited
 * @param objectOfInstanceOf the expression which must be checked against instanceof
 * @param typeExpression     the expression which represents the target type
 */

/** 
 * Checks that a constructor style expression is valid regarding the number of arguments and the argument types.
 * @param node      the class node for which we will try to find a matching constructor
 * @param arguments the constructor arguments
 * @deprecated use {@link #checkGroovyStyleConstructor(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode[],org.codehaus.groovy.ast.ASTNode)} )}
 */

/** 
 * Checks that a constructor style expression is valid regarding the number of arguments and the argument types.
 * @param node      the class node for which we will try to find a matching constructor
 * @param arguments the constructor arguments
 */

/** 
 * When instanceof checks are found in the code, we store temporary type information data in the  {@link TypeCheckingContext#temporaryIfBranchTypeInformation} table. This method computes the key which must be used to store this typeinfo.
 * @param expression the expression for which to compute the key
 * @return a key to be used for {@link TypeCheckingContext#temporaryIfBranchTypeInformation}
 */

/** 
 * A helper method which determines which receiver class should be used in error messages when a field or attribute is not found. The returned type class depends on whether we have temporary type information availble (due to instanceof checks) and whether there is a single candidate in that case.
 * @param expr the expression for which an unknown field has been found
 * @param type the type of the expression (used as fallback type)
 * @return if temporary information is available and there's only one type, returns the temporary type classotherwise falls back to the provided type class.
 */

/** 
 * Checks whether a property exists on the receiver, or on any of the possible receiver classes (found in the temporary type information table)
 * @param pexp             a property expression
 * @param readMode         if true, look for property read, else for property set
 * @param visitor          if not null, when the property node is found, visit it with the provided visitor
 * @return true if the property is defined in any of the possible receiver classes
 */

/* */
/** 
 * This method is used to filter search results in which null means "no match", to filter out illegal access to instance members from a static context. Return null if the given member is not static, but we want to access in a static way (staticOnly=true). If we want to access in a non-static way we always return the member, since then access to static members and non-static members is allowed.
 */

/** 
 * Given a loop collection type, returns the inferred type of the loop element. Used, for example, to infer the element type of a (for e in list) loop.
 * @param collectionType the type of the collection
 * @return the inferred component type
 */

/* */
/** 
 * @deprecated this method is unused, replaced with {@link DelegatesTo} inference.
 * @param callArguments
 * @param receiver
 */

/** 
 * visit a method call target, to infer the type. Don't report errors right away, that will be done by a later visitMethod call
 */

/** 
 * This method is responsible for performing type inference on closure argument types whenever code like this is found: <code>foo.collect { it.toUpperCase() }</code>. In this case, the type checker tries to find if the <code>collect</code> method has its  {@link Closure} argumentannotated with  {@link groovy.transform.stc.ClosureParams}. If yes, then additional type inference can be performed and the type of <code>it</code> may be inferred.
 * @param receiver
 * @param arguments
 * @param expression a closure expression for which the argument types should be inferred
 * @param param the parameter where to look for a {@link groovy.transform.stc.ClosureParams} annotation.
 * @param selectedMethod the method accepting a closure
 */

/** 
 * Given a GenericsType instance, returns a ClassNode which can be used as an inferred type.
 * @param genericsType a {@link org.codehaus.groovy.ast.GenericsType} representing either a type, a placeholder or a wildcard
 * @return a class node usable as an inferred type
 */

/** 
 * A special method handling the "withTrait" call for which the type checker knows more than what the type signature is able to tell. If "withTrait" is detected, then a new class node is created representing the list of trait interfaces.
 * @param directMethodCallCandidate a method selected by the type checker
 * @param receiver the receiver of the method call
 * @param args the arguments of the method call
 * @param returnType the original return type, as inferred by the type checker   @return fixed return type if the selected method is {@link org.codehaus.groovy.runtime.DefaultGroovyMethods#withTraits(Object,Class[]) withTraits}
 */

/** 
 * add various getAt and setAt methods for primitive arrays
 * @param receiver the receiver class
 * @param name  the name of the method
 * @param args the argument classes
 */

/** 
 * In the case of a <em>Object.with { ... }</em> call, this method is supposed to retrieve the inferred closure return type.
 * @param callArguments the argument list from the <em>Object#with(Closure)</em> call, ie. a single closure expression
 * @return the inferred closure return type or <em>null</em>
 */

/** 
 * Given an object expression (a receiver expression), generate the list of potential receiver types.
 * @param objectExpression the receiver expression
 * @return the list of types the receiver may be
 */

/** 
 * This method returns the list of methods named against the supplied parameter that are defined on the specified receiver, but it will also add "non existing" methods that will be generated afterwards by the compiler, for example if a method is using default values and that the specified class node isn't compiled yet.
 * @param receiver the receiver where to find methods
 * @param name the name of the methods to return
 * @return the methods that are defined on the receiver completed with stubs for future methods
 */

/** 
 * Given a method name and a prefix, returns the name of the property that should be looked up, following the java beans rules. For example, "getName" would return "name", while "getFullName" would return "fullName". If the prefix is not found, returns null.
 * @param prefix the method name prefix ("get", "is", "set", ...)
 * @param methodName the method name
 * @return a property name if the prefix is found and the method matches the java beans rules, null otherwise
 */

/** 
 * resolves a Field or Property node generics by using the current class and the declaring class to extract the right meaning of the generics symbols
 * @param an a FieldNode or PropertyNode
 * @param type the origin type
 * @return the new ClassNode with corrected generics
 */

/** 
 * Stores the inferred return type of a closure or a method. We are using a separate key to store inferred return type because the inferred type of a closure is  {@link Closure}, which is different from the inferred type of the code of the closure.
 * @param node a {@link ClosureExpression} or a {@link MethodNode}
 * @param type the inferred return type of the code
 * @return the old value of the inferred type
 */

/** 
 * Returns the inferred return type of a closure or a method, if stored on the AST node. This method doesn't perform any type inference by itself.
 * @param exp a {@link ClosureExpression} or {@link MethodNode}
 * @return the inferred type, as stored on node metadata.
 */

/** 
 * If a method call returns a parameterized type, then we can perform additional inference on the return type, so that the type gets actual type parameters. For example, the method Arrays.asList(T...) is generified with type T which can be deduced from actual type arguments.
 * @param method    the method node
 * @param arguments the method call arguments
 * @return parameterized, infered, class node
 */

/** 
 * If a method call returns a parameterized type, then we can perform additional inference on the return type, so that the type gets actual type parameters. For example, the method Arrays.asList(T...) is generified with type T which can be deduced from actual type arguments.
 * @param method    the method node
 * @param arguments the method call arguments
 * @param explicitTypeHints explicit type hints as found for example in Collections.&lt;String&gt;emptyList()
 * @return parameterized, infered, class node
 */

/** 
 * This method will convert a closure type to the appropriate SAM type, which will be used to infer return type generics.
 * @param closureType the inferred type of a closure (Closure&lt;ClosureReturnType&gt;)
 * @param samType the type into which the closure is coerced into
 * @return same SAM type, but completed with information from the closure node
 */

/** 
 * Returns a wrapped type if, and only if, the provided class node is a primitive type. This method differs from  {@link ClassHelper#getWrapper(org.codehaus.groovy.ast.ClassNode)} as it willreturn the same instance if the provided type is not a generic type.
 * @param type
 * @return the wrapped type
 */

