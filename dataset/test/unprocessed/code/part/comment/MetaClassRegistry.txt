/** 
 * A MetaClassRegistry is an object that is responsible for managing the a cache of MetaClass instances. Each java.lang.Class instance has an associated MetaClass and client code can query this interface for the MetaClass for a given associated java.lang.Class
 * @see groovy.lang.MetaClass
 * @author John Wilson
 * @author Graeme Rocher
 * @author <a href="mailto:blackdrag@gmx.org">Jochen Theodorou</a>
 */

/** 
 * The main function of the registry If a meta class exists then return it otherwise create one, put it in the registry and return it
 */

/** 
 * Adds a metaclass to the registery for the given class
 * @param theClass The class
 * @param theMetaClass The MetaClass for theClass
 */

/** 
 * Removes a cached MetaClass from the registry
 * @param theClass The Java class of the MetaClass to remove
 */

/** 
 * Retrieves the MetaClassCreationHandle that is responsible for constructing MetaClass instances
 * @return The MetaClassCreationHandle instance
 */

/** 
 * Sets the MetaClassCreationHandle instance that is responsible for constructing instances
 * @param handle The handle instance
 */

/** 
 * Adds a meta class change listener for constant meta classes
 * @param listener - the update listener
 */

/** 
 * Adds a meta class change listener for constant meta classes.  This listener cannot be removed!
 * @param listener - the update listener
 */

/** 
 * Removes a meta class change listener for constant meta classes
 * @param listener - the update listener
 */

/** 
 * Returns all registered class change listener for constant meta classes.
 * @return an array containing all change listener
 */

/** 
 * Gets a snapshot of the current constant meta classes and returns it as Iterator. Modifications done using this Iterator will not cause a ConcurrentModificationException. If a MetaClass is removed using this Iterator, then the MetaClass will only be removed if the MetaClass was not replaced by another MetaClass in the meantime. If a MetaClass is added while using this Iterator, then it will be part of the Iteration. If a MetaClass replaces another constant meta class, then the Iteration might show two meta classes for the same class. <p> Note: This Iterator may not used with multiple threads.
 * @return Iterator for the constant meta classes
 */

/** 
 * Class used as base for the creation of MetaClass implementations. The Class defaults to MetaClassImpl, if the class loading fails to find a special meta class. The name for such a meta class would be the class name it is created for with the prefix "groovy.runtime.metaclass." By replacing the handle in the registry you can have any control over the creation of what MetaClass is used for a class that you want to have.  WARNING: experimental code, likely to change soon
 * @author Jochen Theodorou
 */

/** 
 * Creates a metaclass implementation for theClass.
 * @param theClass The class to create a metaclass for
 * @param registry The metaclass registry the metaclass we be registered in.
 */

/** 
 * Returns wether custom metaClasse is disabled.
 */

/** 
 * Set flag saying to disable lookup of custom meta classes It's enough to call this method only once in your application for handle which was set in to registry as every new handle will inherit this property
 * @param disableCustomMetaClassLookup flag saying to disable lookup of custom meta classes
 */

