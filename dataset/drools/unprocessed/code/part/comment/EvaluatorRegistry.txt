/**
 * A registry class for all available evaluators
 */

/**
     * Default constructor. The registry will use the context classloader (if available)
     * to load the evaluator definition classes or this class classloader if it is
     * not available.
     */

/**
     * Creates a new EvaluatorRegistry using the given classloader to load
     * the evaluator definition classes.
     *
     * @param classloader the classloader to use to load evaluator definition
     *                    classes. If it is null, try to obtain the context
     *                    classloader. If it is also null, uses the same classloader
     *                    that loaded this class.
     */

/**
     * Return the set of registered keys.
     * @return a Set of Strings
     */

/**
     * Adds an evaluator definition class to the registry using the
     * evaluator class name. The class will be loaded and the corresponting
     * evaluator ID will be added to the registry. In case there exists
     * an implementation for that ID already, the new implementation will
     * replace the previous one.
     *
     * @param className the name of the class for the implementation definition.
     *                  The class must implement the EvaluatorDefinition interface.
     *
     * @return true if the new class implementation is replacing an old
     *         implementation for the same evaluator ID. False otherwise.
     */

/**
     * Adds an evaluator definition class to the registry. In case there exists
     * an implementation for that evaluator ID already, the new implementation will
     * replace the previous one.
     *
     * @param def the evaluator definition to be added.
     */

/**
     * Returns the evaluator definition for the given evaluator ID
     * or null if no one was found
     *
     * @param evaluatorId
     * @return
     */

/**
     * Returns the evaluator definition for the given operator
     * or null if no one was found
     *
     * @param operator the operator implemented by the evaluator definition
     * @return
     */

/**
     * Returns the evaluator instance for the given type and the
     * defined parameterText
     *
     * @param type the type of the attributes this evaluator will
     *             operate on. This is important because the evaluator
     *             may do optimizations and type coercion based on the
     *             types it is evaluating. It is also possible that
     *             this evaluator does not support a given type.
     *
     * @param operator the operator that evaluator implements
     *
     * @param parameterText some evaluators support parameters and these
     *                      parameters are defined as a String that is
     *                      parsed by the evaluator itself.
     *
     * @return an Evaluator instance capable of evaluating expressions
     *         between values of the given type, or null in case the type
     *         is not supported.
     */

/**
     * Returns the evaluator instance for the given type and the
     * defined parameterText
     *
     * @param type the type of the attributes this evaluator will
     *             operate on. This is important because the evaluator
     *             may do optimizations and type coercion based on the
     *             types it is evaluating. It is also possible that
     *             this evaluator does not support a given type.
     *
     * @param operator the operator that evaluator implements
     *
     * @return an Evaluator instance capable of evaluating expressions
     *         between values of the given type, or null in case the type
     *         is not supported.
     */

