/** The actual memory for the JoinNodes. */

/** Global values which are associated with this memory. */

/** The eventSupport */

/** The RuleBase with which this memory is associated. */

/** Rule-firing agenda. */

/**
     * This must be thread safe as it is incremented and read via different
     * EntryPoints
     */

/**
     * (This shall NOT be exposed on public API)  
     */

/**
     * Keeps firing activations until a halt is called. If in a given moment,
     * there is no activation to fire, it will wait for an activation to be
     * added to an active agenda group or rule flow group.
     *
     *      *             if this method is called when running in sequential mode
     */

/**
     * Keeps firing activations until a halt is called. If in a given moment,
     * there is no activation to fire, it will wait for an activation to be
     * added to an active agenda group or rule flow group.
     *
     * @param agendaFilter
     *            filters the activations that may fire
     *
     *      *             if this method is called when running in sequential mode
     */

/**
     * Returns the fact Object for the given FactHandle. It
     * actually attempts to return the value from the handle, before retrieving
     * it from objects map.
     *
     *      *
     * @param handle
     *            The FactHandle reference for the
     *            Object lookup
     */

/**
     *      */

/**
     *      */

/**
     * This class is not thread safe, changes to the working memory during
     * iteration may give unexpected results
     */

/**
     * This class is not thread safe, changes to the working memory during
     * iteration may give unexpected results
     */

/**
     * This class is not thread safe, changes to the working memory during
     * iteration may give unexpected results
     */

/**
     * This class is not thread safe, changes to the working memory during
     * iteration may give unexpected results
     */

/**
     *      */

/**
     * modify is implemented as half way retract / assert due to the truth
     * maintenance issues.
     *
     *      */

/**
     * Retrieve the JoinMemory for a particular
     * JoinNode.
     * @param node
     *            The JoinNode key.
     * @return The node's memory.
     */

/**
     * Sets the AsyncExceptionHandler to handle exceptions thrown by the Agenda
     * Scheduler used for duration rules.
     */

/**
     * This method must be called before starting any new work in the engine,
     * like inserting a new fact or firing a new rule. It will reset the engine
     * idle time counter.
     *
     * This method must be extremely light to avoid contentions when called by
     * multiple threads/entry-points
     */

/**
     * This method must be called after finishing any work in the engine,
     * like inserting a new fact or firing a new rule. It will reset the engine
     * idle time counter.
     *
     * This method must be extremely light to avoid contentions when called by
     * multiple threads/entry-points
     */

/**
     * Returns the number of time units (usually ms) that the engine is idle
     * according to the session clock or -1 if it is not idle.
     *
     * This method is not synchronised and might return an approximate value.
     */

/**
     * Returns the number of time units (usually ms) to
     * the next scheduled job
     *
     * @return the number of time units until the next scheduled job or -1 if
     *         there is no job scheduled
     */

