/**
 * This is a simple linked linked implementation. Each node must implement LinkedListNode so that it references
 * the node before and after it. This way a node can be removed without having to scan the list to find it. This class
 * does not provide an Iterator implementation as its designed for efficiency and not genericity. There are a number of
 * ways to iterate the list.
 * 
 * Simple iterator:
 * 
 */

/**
     * Construct an empty LinkedList
     */

/**
     * Add a TupleSinkNode to the list. If the LinkedList is empty then the first and
     * last nodes are set to the added node.
     *
     * @param node
     *      The TupleSinkNode to be added
     */

/**
     * Removes a TupleSinkNode from the list. This works by attach the previous reference to the child reference.
     * When the node to be removed is the first node it calls removeFirst(). When the node to be removed is the last node
     * it calls removeLast().
     *
     * @param node
     *      The TupleSinkNode to be removed.
     */

/**
     * Return the first node in the list
     * @return
     *      The first TupleSinkNode.
     */

/**
     * Return the last node in the list
     * @return
     *      The last TupleSinkNode.
     */

/**
     * Remove the first node from the list. The next node then becomes the first node. If this is the last
     * node then both first and last node references are set to null.
     *
     * @return
     *      The first TupleSinkNode.
     */

/**
     * Remove the last node from the list. The previous node then becomes the last node. If this is the last
     * node then both first and last node references are set to null.
     *
     * @return
     *      The first TupleSinkNode.
     */

/**
     * @return
     *      boolean value indicating the empty status of the list
     */

/**
     * Iterates the list removing all the nodes until there are no more nodes to remove.
     */

/**
     * @return
     *     return size of the list as an int
     */

/**
     * Returns a list iterator
     * @return
     */

