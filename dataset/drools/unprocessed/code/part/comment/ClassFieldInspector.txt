/**
 * Visit a POJO user class, and extract the property getter methods that are public, in the 
 * order in which they are declared actually in the class itself (not using introspection).
 *
 * This may be enhanced in the future to allow annotations or perhaps external meta data
 * configure the order of the indexes, as this may provide fine tuning options in special cases.
 */

/**
     * @param classUnderInspection The class that the fields to be shadowed are extracted for.
     *      */

/** Walk up the inheritance hierarchy recursively, reading in fields */

/**
     * Convert it to a form so we can load the bytes from the classpath.
     */

/**
     * Return a mapping of the field "names" (ie bean property name convention)
     * to the numerical index by which they can be accessed.
     */

/**
     * sotty:
     * Checks whether a returned field is actually a getter or not
     *
     * @param name the field to test
     * @return true id the name does not correspond to a getter field
     */

/**
     * @return A mapping of field types (unboxed).
     */

/**
     * @return A mapping of field types (unboxed).
     */

/**
     * @return A mapping of methods for the getters. 
     */

/**
     * @return A mapping of methods for the getters. 
     */

/**
     * Using the ASM classfield extractor to pluck it out in the order they appear in the class file.
     */

/**
     * This is required for POJOs that have annotations. 
     * It may also come in handy if we want to allow custom annotations for marking field numbers etc.
     */

