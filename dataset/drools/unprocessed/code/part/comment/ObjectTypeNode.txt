/**
 * ObjectTypeNodes are responsible for filtering and propagating the matching
 * fact assertions propagated from the Rete node using ObjectType interface.
 * 
 * The assert and retract methods do not attempt to filter as this is the role of the Rete
 * node which builds up a cache of matching ObjectTypdeNodess for each asserted object, using
 * the matches(Object object) method. Incorrect propagation in these methods is not checked and
 * will result in ClassCastExpcections later on in the network.
 * 
 * Filters Objects coming from the Rete using a
 * ObjectType semantic module.
 *
 *  */

/**
     * The ObjectType semantic module.
     */

/**
     * Construct given a semantic ObjectType and the provided
     * unique id. All ObjectTypdeNode have node memory.
     *
     * @param id         The unique id for the node.
     * @param objectType The semantic object-type differentiator.
     */

/**
     * Retrieve the semantic ObjectType differentiator.
     *
     * @return The semantic ObjectType differentiator.
     */

/**
     * Returns the partition ID for which this node belongs to
     */

/**
     * Propagate the FactHandleimpl through the Rete network. All
     * FactHandleImpl should be remembered in the node memory, so that later runtime rule attachmnents
     * can have the matched facts propagated to them.
     *
     * @param factHandle    The fact handle.
     * @param context       The propagation context.
     * @param workingMemory The working memory session.
     */

/**
     * Retract the FactHandleimpl from the Rete network. Also remove the
     * FactHandleImpl from the node memory.
     *
     * @param factHandle    The fact handle.
     * @param context       The propagation context.
     * @param workingMemory The working memory session.
     */

/**
     * Rete needs to know that this ObjectTypeNode has been added
     */

/**
     * OTN needs to override remove to avoid releasing the node ID, since OTN are
     * never removed from the rulebase in the current implementation
     */

/**
     * OTN needs to override remove to avoid releasing the node ID, since OTN are
     * never removed from the rulebase in the current implementation
     */

/**
     * Creates memory for the node using PrimitiveLongMap as its optimised for storage and reteivals of Longs.
     * However PrimitiveLongMap is not ideal for spase data. So it should be monitored incase its more optimal
     * to switch back to a standard HashMap.
     */

/**
     * @return the entryPoint
     */

