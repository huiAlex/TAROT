/**
     * An empty immutable String array.
     */

/**
     * The empty String "".
     *      */

/**
     * Represents a failed index search.
     *      */

/**
     * The maximum size to which the padding constant(s) can expand.
     */

/**
     * StringUtils instances should NOT be constructed in
     * standard programming. Instead, the class should be used as
     * StringUtils.trim(" foo ");.
     *
     * This constructor is public to permit tools that require a JavaBean
     * instance to operate.
     */

/**
     * Checks if a String is empty ("") or null.
     *
     * 
     *
     * NOTE: This method changed in Lang version 2.0.
     * It no longer trims the String.
     * That functionality is available in isBlank().
     *
     * @param str  the String to check, may be null
     * @return true if the String is empty or null
     */

/**
     * Repeat a String repeat times to form a
     * new String.
     *
     * 
     *
     * @param str  the String to repeat, may be null
     * @param repeat  number of times to repeat str, negative treated as zero
     * @return a new String consisting of the original String repeated,
     *  null if null String input
     */

/**
     * Performs the logic for the split and 
     * splitPreserveAllTokens methods that return a maximum array 
     * length.
     *
     * @param str  the String to parse, may be null
     * @param separatorChars the separate character
     * @param max  the maximum number of elements to include in the
     *  array. A zero or negative value implies no limit.
     * @param preserveAllTokens if true, adjacent separators are
     * treated as empty token separators; if false, adjacent
     * separators are treated as one separator.
     * @return an array of parsed Strings, null if null String input
     */

/**
     * Returns padding using the specified delimiter repeated
     * to a given length.
     *
     * 
     *
     * Note: this method doesn't not support padding with
     * Unicode Supplementary Characters
     * as they require a pair of chars to be represented.
     * If you are needing to support full I18N of your applications
     * consider using {@link #repeat(String, int)} instead. 
     * 
     *
     * @param repeat  number of times to repeat delim
     * @param padChar  character to repeat
     * @return String with repeated character
     *      *      */

/**
     * Unescapes any Java literals found in the String.
     * For example, it will turn a sequence of '\' and
     * 'n' into a newline character, unless the '\'
     * is preceded by another '\'.
     * 
     * @param str  the String to unescape, may be null
     * @return a new unescaped String, null if null string input
     */

/**
     * Unescapes any Java literals found in the String to a
     * Writer.
     *
     * For example, it will turn a sequence of '\' and
     * 'n' into a newline character, unless the '\'
     * is preceded by another '\'.
     * 
     * A null string input has no effect.
     * 
     * @param out  the Writer used to output unescaped characters
     * @param str  the String to unescape, may be null
     *      *      */

/**
     * Normalize the path by suppressing sequences like "path/.." and
     * inner simple dots.
     * The result is convenient for path comparison. For other uses,
     * notice that Windows separators ("\") are replaced by simple slashes.
     * @param path the original path
     * @return the normalized path
     * 
     * Borrowed from Spring, under the ASL2.0 license.
     */

/**
     * Convenience method to return a Collection as a delimited (e.g. CSV)
     * String. E.g. useful for toString() implementations.
     * @param coll the Collection to display
     * @param delim the delimiter to use (probably a ",")
     * @param prefix the String to start each element with
     * @param suffix the String to end each element with
     * @return the delimited String
     * 
     * Borrowed from Spring, under the ASL2.0 license.
     */

/**
     * Convenience method to return a Collection as a delimited (e.g. CSV)
     * String. E.g. useful for toString() implementations.
     * @param coll the Collection to display
     * @param delim the delimiter to use (probably a ",")
     * @return the delimited String
     * 
     * Borrowed from Spring, under the ASL2.0 license.
     */

/**
     * Replace all occurences of a substring within a string with
     * another string.
     * @param inString String to examine
     * @param oldPattern String to replace
     * @param newPattern String to insert
     * @return a String with the replacements
     * 
     * Borrowed from Spring, under the ASL2.0 license.
     */

/**
     * Take a String which is a delimited list and convert it to a String array.
     * A single delimiter can consists of more than one character: It will still
     * be considered as single delimiter string, rather than as bunch of potential
     * delimiter characters - in contrast to tokenizeToStringArray.
     * @param str the input String
     * @param delimiter the delimiter between elements (this is a single delimiter,
     * rather than a bunch individual delimiter characters)
     * @return an array of the tokens in the list
     *
     * Borrowed from Spring, under the ASL2.0 license.
     */

/**
     * Take a String which is a delimited list and convert it to a String array.
     * A single delimiter can consists of more than one character: It will still
     * be considered as single delimiter string, rather than as bunch of potential
     * delimiter characters - in contrast to tokenizeToStringArray.
     * @param str the input String
     * @param delimiter the delimiter between elements (this is a single delimiter,
     * rather than a bunch individual delimiter characters)
     * @param charsToDelete a set of characters to delete. Useful for deleting unwanted
     * line breaks: e.g. "\r\n\f" will delete all new lines and line feeds in a String.
     * @return an array of the tokens in the list
     *
     * Borrowed from Spring, under the ASL2.0 license.
     */

/**
     * Copy the given Collection into a String array.
     * The Collection must contain String elements only.
     * @param collection the Collection to copy
     * @return the String array (null if the passed-in
     * Collection was null)
     * 
     * Borrowed from Spring, under the ASL2.0 license.
     */

/**
     * Delete any character in a given String.
     * @param inString the original String
     * @param charsToDelete a set of characters to delete.
     * E.g. "az\n" will delete 'a's, 'z's and new lines.
     * @return the resulting String
     * 
     * Borrowed from Spring, under the ASL2.0 license.
     */

/**
     * Compares two string being equals ignoring whitespaces, but preserving whitespace between double-quotes
     * The two inputs MUST BE valid DRL/Java syntax (this validation is NOT performed by this method, this method assumes they are).
     * Null check: if either of the input is null, this method will return true IFF both are null.
     * Empty check: if either of the input is an empty string, it will be considered as a whitespace during code-aware comparison.
     */

