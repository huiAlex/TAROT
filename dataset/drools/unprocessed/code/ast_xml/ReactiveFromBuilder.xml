<Class>
    <Id>2288</Id>
    <Package>org.drools.core.reteoo.builder</Package>
    <ClassName>ReactiveFromBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ReteooComponentBuilder</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>build</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>BuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>utils</ParamName>
                    <ParamType>BuildUtils</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rce</ParamName>
                    <ParamType>RuleConditionElement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>From [from=(From)rce]</InnerVar>
                <InnerVar>BetaConstraints [betaConstraints=utils.createBetaNodeConstraint(context,context.getBetaconstraints(),true)]</InnerVar>
                <InnerVar>AlphaNodeFieldConstraint[] [alphaNodeFieldConstraints=context.getAlphaConstraints() != null ? context.getAlphaConstraints().toArray(new AlphaNodeFieldConstraint[context.getAlphaConstraints().size()]) : new AlphaNodeFieldConstraint[0]]</InnerVar>
                <InnerVar>ReactiveFromNode [node=context.getComponentFactory().getNodeFactoryService().buildReactiveFromNode(context.getNextId(),from.getDataProvider(),context.getTupleSource(),alphaNodeFieldConstraints,betaConstraints,context.isTupleMemoryEnabled(),context,from)]</InnerVar>
                <InnerVar>int [patternOffset=context.getCurrentPatternOffset()]</InnerVar>
                <InnerVar>List&lt;XpathConstraint&gt; [xpathConstraints=context.getXpathConstraints()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>context;pushRuleComponent;[from]</InnerMethodInvoke>
                <InnerMethodInvoke>context;setTupleSource;[utils.attachNode(context,node)]</InnerMethodInvoke>
                <InnerMethodInvoke>context;setAlphaConstraints;[null]</InnerMethodInvoke>
                <InnerMethodInvoke>context;setBetaconstraints;[null]</InnerMethodInvoke>
                <InnerMethodInvoke>context;incrementCurrentPatternOffset;[]</InnerMethodInvoke>
                <InnerMethodInvoke>context;setCurrentPatternOffset;[patternOffset]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>requiresLeftActivation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>utils</ParamName>
                    <ParamType>BuildUtils</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rce</ParamName>
                    <ParamType>RuleConditionElement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>