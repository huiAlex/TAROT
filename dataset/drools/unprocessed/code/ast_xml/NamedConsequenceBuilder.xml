<Class>
    <Id>1209</Id>
    <Package>org.drools.core.reteoo.builder</Package>
    <ClassName>NamedConsequenceBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ReteooComponentBuilder</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>build</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>BuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>utils</ParamName>
                    <ParamType>BuildUtils</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rce</ParamName>
                    <ParamType>RuleConditionElement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NamedConsequence [namedConsequence=(NamedConsequence)rce]</InnerVar>
                <InnerVar>Timer [timer=context.getRule().getTimer()]</InnerVar>
                <InnerVar>RuleTerminalNode [terminalNode=buildTerminalNodeForNamedConsequence(context,namedConsequence)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>terminalNode;attach;[context]</InnerMethodInvoke>
                <InnerMethodInvoke>terminalNode;networkUpdated;[new UpdateContext()]</InnerMethodInvoke>
                <InnerMethodInvoke>context.getNodes();add;[terminalNode]</InnerMethodInvoke>
                <InnerMethodInvoke>context;setTerminated;[namedConsequence.isTerminal()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>requiresLeftActivation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>utils</ParamName>
                    <ParamType>BuildUtils</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rce</ParamName>
                    <ParamType>RuleConditionElement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildTerminalNodeForNamedConsequence</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RuleTerminalNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>BuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namedConsequence</ParamName>
                    <ParamType>NamedConsequence</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RuleImpl [rule=context.getRule()]</InnerVar>
                <InnerVar>GroupElement [subrule=(GroupElement)context.peek()]</InnerVar>
                <InnerVar>ActivationListenerFactory [factory=context.getKnowledgeBase().getConfiguration().getActivationListenerFactory(rule.getActivationListener())]</InnerVar>
                <InnerVar>TerminalNode [terminal=factory.createActivationListener(context.getNextId(),context.getTupleSource(),rule,subrule,0,context)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>context;setConsequenceName;[namedConsequence.getConsequenceName()]</InnerMethodInvoke>
                <InnerMethodInvoke>context;setConsequenceName;[null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>