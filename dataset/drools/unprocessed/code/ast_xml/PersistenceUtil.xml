<Class>
    <Id>3418</Id>
    <Package>org.kie.test.util.db</Package>
    <ClassName>PersistenceUtil</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>logger</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
        <Field>
            <FieldName>ENTITY_MANAGER_FACTORY</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TRANSACTION_MANAGER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DATASOURCE_PROPERTIES</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>h2Server</FieldName>
            <FieldType>H2Server</FieldType>
        </Field>
        <Field>
            <FieldName>defaultProperties</FieldName>
            <FieldType>Properties</FieldType>
        </Field>
        <Field>
            <FieldName>DATASOURCE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>realH2Server</FieldName>
            <FieldType>Server</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>setupWithPoolingDataSource</MethodName>
            <MethodComment>/** 
 * @see #setupWithPoolingDataSource(String,String,boolean)
 * @param persistenceUnitName The name of the persistence unit to be used.
 * @return test context
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>persistenceUnitName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupWithPoolingDataSource</MethodName>
            <MethodComment>/** 
 * @see #setupWithPoolingDataSource(String,String,boolean)
 * @param persistenceUnitName The name of the persistence unit to be used.
 * @return test context
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>persistenceUnitName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>testMarshalling</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupWithPoolingDataSource</MethodName>
            <MethodComment>/** 
 * This method does all of the setup for the test and returns a HashMap containing the persistence objects that the test might need.
 * @param persistenceUnitName The name of the persistence unit used by the test.
 * @return Map with persistence objects, such as the EntityManagerFactory and DataSource
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>persistenceUnitName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dataSourceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>testMarshalling</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Properties [dsProps=getDatasourceProperties()]</InnerVar>
                <InnerVar>String [jdbcUrl=dsProps.getProperty("url")]</InnerVar>
                <InnerVar>String [driverClass=dsProps.getProperty("driverClassName")]</InnerVar>
                <InnerVar>PoolingDataSource [ds1=setupPoolingDataSource(dsProps,dataSourceName)]</InnerVar>
                <InnerVar>Map&lt;String,Object&gt; [context=new HashMap&lt;String,Object&gt;()]</InnerVar>
                <InnerVar>EntityManagerFactory [emf=Persistence.createEntityManagerFactory(persistenceUnitName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ds1;init;[]</InnerMethodInvoke>
                <InnerMethodInvoke>context;put;[DATASOURCE, ds1]</InnerMethodInvoke>
                <InnerMethodInvoke>context;put;[ENTITY_MANAGER_FACTORY, emf]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cleanUp</MethodName>
            <MethodComment>/** 
 * This method should be called in the @After method of a test to clean up the persistence unit and datasource.
 * @param context A HashMap
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupPoolingDataSource</MethodName>
            <MethodComment>/** 
 * This method uses the "jdbc/testDS1" datasource, which is the default.
 * @param dsProps The properties used to setup the data source.
 * @return a PoolingDataSource
 */
</MethodComment>
            <ReturnType>PoolingDataSource</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dsProps</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupPoolingDataSource</MethodName>
            <MethodComment>/** 
 * This sets up a PoolingDataSource.
 * @return PoolingDataSource that has been set up but _not_ initialized.
 */
</MethodComment>
            <ReturnType>PoolingDataSource</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dsProps</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>datasourceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PoolingDataSource [pds=new PoolingDataSource()]</InnerVar>
                <InnerVar>String [driverClass=dsProps.getProperty("driverClassName")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>pds;setUniqueName;[datasourceName]</InnerMethodInvoke>
                <InnerMethodInvoke>pds;setClassName;[dsProps.getProperty("className")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDefaultProperties</MethodName>
            <MethodComment>/** 
 * Return the default database/datasource properties - These properties use an in-memory H2 database This is used when the developer is somehow running the tests but bypassing the maven filtering that's been turned on in the pom.
 * @return Properties containing the default properties
 */
</MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDatasourceProperties</MethodName>
            <MethodComment>/** 
 * This reads in the (maven filtered) datasource properties from the test resource directory.
 * @return Properties containing the datasource properties.
 */
</MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [propertiesNotFoundMessage="Unable to load datasource properties [" + DATASOURCE_PROPERTIES + "]"]</InnerVar>
                <InnerVar>boolean [propertiesNotFound=false]</InnerVar>
                <InnerVar>InputStream [propsInputStream=PersistenceUtil.class.getResourceAsStream(DATASOURCE_PROPERTIES)]</InnerVar>
                <InnerVar>Properties [props=new Properties()]</InnerVar>
                <InnerVar>String [password=props.getProperty("password")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;setProperty;["h2.lobInDatabase", "true"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNotNull;[propertiesNotFoundMessage, propsInputStream]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>useTransactions</MethodName>
            <MethodComment>/** 
 * This method returns whether or not transactions should be used when dealing with the SessionInfo object (or any other persisted entity that contains @Lob's )
 * @return boolean Whether or not to use transactions
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [useTransactions=false]</InnerVar>
                <InnerVar>String [databaseDriverClassName=getDatasourceProperties().getProperty("driverClassName")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finalize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>DeleteDbFiles;execute;["", "JPADroolsFlow", true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Throwable</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>