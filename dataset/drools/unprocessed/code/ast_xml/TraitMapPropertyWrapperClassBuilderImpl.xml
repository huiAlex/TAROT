<Class>
    <Id>1581</Id>
    <Package>org.drools.core.factmodel.traits</Package>
    <ClassName>TraitMapPropertyWrapperClassBuilderImpl</ClassName>
    <SuperClass>AbstractPropertyWrapperClassBuilderImpl</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>TraitPropertyWrapperClassBuilder</SuperInterface>
        <SuperInterface>Serializable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>buildClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FieldVisitor [fv]</InnerVar>
                <InnerVar>MethodVisitor [mv]</InnerVar>
                <InnerVar>BitSet [mask=traitRegistry.getFieldMask(trait.getName(),core.getDefinedClass().getName())]</InnerVar>
                <InnerVar>String [name=TraitFactory.getPropertyWrapperName(trait,core)]</InnerVar>
                <InnerVar>String [internalWrapper=BuildUtils.getInternalType(name)]</InnerVar>
                <InnerVar>String [descrCore=Type.getDescriptor(core.getDefinedClass())]</InnerVar>
                <InnerVar>String [internalCore=Type.getInternalName(core.getDefinedClass())]</InnerVar>
                <InnerVar>ClassWriter [cw=createClassWriter(classLoader,ACC_PUBLIC + ACC_SUPER,internalWrapper,Type.getDescriptor(Object.class) + Type.getDescriptor(Map.class) + Type.getDescriptor(MapWrapper.class),Type.getInternalName(Object.class),new String[]{Type.getInternalName(Map.class),Type.getInternalName(MapWrapper.class),Type.getInternalName(Serializable.class)})]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cw;visitInnerClass;[Type.getInternalName(Map.Entry.class), Type.getInternalName(Map.class), "Entry", ACC_PUBLIC + ACC_STATIC + ACC_ABSTRACT+ ACC_INTERFACE]</InnerMethodInvoke>
                <InnerMethodInvoke>null;buildSize;[cw, name, core]</InnerMethodInvoke>
                <InnerMethodInvoke>null;buildIsEmpty;[cw, name, core]</InnerMethodInvoke>
                <InnerMethodInvoke>null;buildGet;[cw, name, core]</InnerMethodInvoke>
                <InnerMethodInvoke>null;buildPut;[cw, name, core]</InnerMethodInvoke>
                <InnerMethodInvoke>null;buildClear;[cw, name, trait, core, mask]</InnerMethodInvoke>
                <InnerMethodInvoke>null;buildRemove;[cw, name, trait, core, mask]</InnerMethodInvoke>
                <InnerMethodInvoke>null;buildContainsKey;[cw, name, core]</InnerMethodInvoke>
                <InnerMethodInvoke>null;buildContainsValue;[cw, name, trait, core]</InnerMethodInvoke>
                <InnerMethodInvoke>null;buildKeyset;[cw, name, core]</InnerMethodInvoke>
                <InnerMethodInvoke>null;buildValues;[cw, name, core]</InnerMethodInvoke>
                <InnerMethodInvoke>null;buildEntryset;[cw, name, core]</InnerMethodInvoke>
                <InnerMethodInvoke>null;buildCommonMethods;[cw, name]</InnerMethodInvoke>
                <InnerMethodInvoke>cw;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SecurityException</ExceptionType>
                <ExceptionType>IllegalArgumentException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
                <ExceptionType>NoSuchMethodException</ExceptionType>
                <ExceptionType>IllegalAccessException</ExceptionType>
                <ExceptionType>InvocationTargetException</ExceptionType>
                <ExceptionType>InstantiationException</ExceptionType>
                <ExceptionType>NoSuchFieldException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildRemove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wrapperName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trait</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mask</ParamName>
                    <ParamType>BitSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [internalWrapper=BuildUtils.getInternalType(wrapperName)]</InnerVar>
                <InnerVar>MethodVisitor [mv=cw.visitMethod(ACC_PUBLIC,"remove","(" + Type.getDescriptor(Object.class) + ")"+ Type.getDescriptor(Object.class),null,null)]</InnerVar>
                <InnerVar>int [j=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, internalWrapper, "map", Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(Map.class), "remove", "(" + Type.getDescriptor(Object.class) + ")"+ Type.getDescriptor(Object.class), true]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initSoftFields</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trait</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>internalWrapper</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mask</ParamName>
                    <ParamType>BitSet</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>varNum</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [j=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildClear</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wrapperName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trait</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mask</ParamName>
                    <ParamType>BitSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [internalWrapper=BuildUtils.getInternalType(wrapperName)]</InnerVar>
                <InnerVar>MethodVisitor [mv=cw.visitMethod(ACC_PUBLIC,"clear","()V",null,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, internalWrapper, "map", Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(Map.class), "clear", "()V", true]</InnerMethodInvoke>
                <InnerMethodInvoke>null;initSoftFields;[mv, trait, core, internalWrapper, mask, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[RETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildContainsValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wrapperName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trait</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [internalWrapper=BuildUtils.getInternalType(wrapperName)]</InnerVar>
                <InnerVar>MethodVisitor [mv=cw.visitMethod(ACC_PUBLIC,"containsValue","(" + Type.getDescriptor(Object.class) + ")Z",null,null)]</InnerVar>
                <InnerVar>Label [l99=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFNONNULL, l99]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, internalWrapper, "map", Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ACONST_NULL]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(Map.class), "containsValue", "(" + Type.getDescriptor(Object.class) + ")Z", true]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[IRETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[l99]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, internalWrapper, "map", Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(Map.class), "containsValue", "(" + Type.getDescriptor(Object.class) + ")Z", true]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[IRETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildContainsKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [internalWrapper=BuildUtils.getInternalType(name)]</InnerVar>
                <InnerVar>MethodVisitor [mv=cw.visitMethod(ACC_PUBLIC,"containsKey","(" + Type.getDescriptor(Object.class) + ")Z",null,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, internalWrapper, "map", Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(Map.class), "containsKey", "(" + Type.getDescriptor(Object.class) + ")Z", true]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[IRETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildSize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wrapperName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [internalWrapper=BuildUtils.getInternalType(wrapperName)]</InnerVar>
                <InnerVar>MethodVisitor [mv=cw.visitMethod(ACC_PUBLIC,"size","()I",null,null)]</InnerVar>
                <InnerVar>int [n=core.getFieldsDefinitions().size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, internalWrapper, "map", Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(Map.class), "size", "()I", true]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[IRETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildIsEmpty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wrapperName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [internalWrapper=BuildUtils.getInternalType(wrapperName)]</InnerVar>
                <InnerVar>boolean [hasHardFields=core.getFieldsDefinitions().size() &gt; 0]</InnerVar>
                <InnerVar>MethodVisitor [mv=cw.visitMethod(ACC_PUBLIC,"isEmpty","()Z",null,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[IRETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invokeGet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wrapperName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>FieldDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Label [l0=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitLdcInsn;[fieldName]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, Type.getInternalName(String.class), "equals", "(" + Type.getDescriptor(Object.class) + ")Z", false]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFEQ, l0]</InnerMethodInvoke>
                <InnerMethodInvoke>TraitFactory;invokeExtractor;[mv, wrapperName, trait, core, field]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[l0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildGet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wrapperName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [internalWrapper=BuildUtils.getInternalType(wrapperName)]</InnerVar>
                <InnerVar>MethodVisitor [mv=cw.visitMethod(ACC_PUBLIC,"get","(" + Type.getDescriptor(Object.class) + ")"+ Type.getDescriptor(Object.class),null,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, internalWrapper, "map", Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(Map.class), "get", "(" + Type.getDescriptor(Object.class) + ")"+ Type.getDescriptor(Object.class), true]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildPut</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wrapperName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [internalWrapper=BuildUtils.getInternalType(wrapperName)]</InnerVar>
                <InnerVar>MethodVisitor [mv=cw.visitMethod(ACC_PUBLIC,"put","(" + Type.getDescriptor(String.class) + Type.getDescriptor(Object.class)+ ")"+ Type.getDescriptor(Object.class),null,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, internalWrapper, "map", Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(Map.class), "put", "(" + Type.getDescriptor(Object.class) + Type.getDescriptor(Object.class)+ ")"+ Type.getDescriptor(Object.class), true]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildEntryset</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wrapperName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [internalWrapper=BuildUtils.getInternalType(wrapperName)]</InnerVar>
                <InnerVar>MethodVisitor [mv=cw.visitMethod(ACC_PUBLIC,"entrySet","()" + Type.getDescriptor(Set.class),"()Ljava/util/Set&lt;Ljava/util/Map$Entry&lt;Ljava/lang/String;Ljava/lang/Object;&gt;;&gt;;",null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[NEW, Type.getInternalName(HashSet.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[DUP]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESPECIAL, Type.getInternalName(HashSet.class), "&lt;init&gt;", "()V", false]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, internalWrapper, "map", Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(Map.class), "entrySet", "()" + Type.getDescriptor(Set.class), true]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(Set.class), "addAll", "(" + Type.getDescriptor(Collection.class) + ")Z", true]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[POP]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildKeyset</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wrapperName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [internalWrapper=BuildUtils.getInternalType(wrapperName)]</InnerVar>
                <InnerVar>MethodVisitor [mv=cw.visitMethod(ACC_PUBLIC,"keySet","()" + Type.getDescriptor(Set.class),"()Ljava/util/Set&lt;Ljava/lang/String;&gt;;",null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[NEW, Type.getInternalName(HashSet.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[DUP]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESPECIAL, Type.getInternalName(HashSet.class), "&lt;init&gt;", "()V", false]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, internalWrapper, "map", Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(Map.class), "keySet", "()" + Type.getDescriptor(Set.class), true]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(Set.class), "addAll", "(" + Type.getDescriptor(Collection.class) + ")Z", true]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[POP]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildValues</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wrapperName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [internalWrapper=BuildUtils.getInternalType(wrapperName)]</InnerVar>
                <InnerVar>MethodVisitor [mv=cw.visitMethod(ACC_PUBLIC,"values","()" + Type.getDescriptor(Collection.class),"()Ljava/util/Collection&lt;Ljava/lang/Object;&gt;;",null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[NEW, Type.getInternalName(ArrayList.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[DUP]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESPECIAL, Type.getInternalName(ArrayList.class), "&lt;init&gt;", "()V", false]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, internalWrapper, "map", Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(Map.class), "values", "()" + Type.getDescriptor(Collection.class), true]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(Collection.class), "addAll", "(" + Type.getDescriptor(Collection.class) + ")Z", true]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[POP]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildCommonMethods</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wrapper</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>