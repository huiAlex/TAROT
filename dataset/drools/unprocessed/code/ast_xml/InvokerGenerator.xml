<Class>
    <Id>972</Id>
    <Package>org.drools.compiler.rule.builder.dialect.asm</Package>
    <ClassName>InvokerGenerator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>createInvokerStubGenerator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassGenerator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>InvokerDataProvider</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ruleContext</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createStubGenerator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassGenerator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>InvokerDataProvider</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeResolver</ParamName>
                    <ParamType>TypeResolver</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>imports</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassGenerator [generator=new ClassGenerator(data.getPackageName() + "." + data.getInvokerClassName(),classLoader,typeResolver)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>generator.addStaticField(ACC_PRIVATE + ACC_FINAL,"serialVersionUID",Long.TYPE,GeneratorHelper.INVOKER_SERIAL_UID);addDefaultConstructor;[]</InnerMethodInvoke>
                <InnerMethodInvoke>generator.addMethod(ACC_PUBLIC,"hashCode",generator.methodDescr(Integer.TYPE),new ClassGenerator.MethodBody(){
  public void body(  MethodVisitor mv){
    push(data.hashCode());
    mv.visitInsn(IRETURN);
  }
}
).addMethod(ACC_PUBLIC,"getMethodBytecode",generator.methodDescr(List.class),new GeneratorHelper.GetMethodBytecodeMethod(data)).addMethod(ACC_PUBLIC,"equals",generator.methodDescr(Boolean.TYPE,Object.class),new GeneratorHelper.EqualsMethod()).addMethod(ACC_PUBLIC,"getPackageName",generator.methodDescr(String.class),new ClassGenerator.MethodBody(){
  public void body(  MethodVisitor mv){
    push(data.getPackageName());
    mv.visitInsn(ARETURN);
  }
}
).addMethod(ACC_PUBLIC,"getGeneratedInvokerClassName",generator.methodDescr(String.class),new ClassGenerator.MethodBody(){
  public void body(  MethodVisitor mv){
    push(data.getInvokerClassName() + "Generated");
    mv.visitInsn(ARETURN);
  }
}
).addMethod(ACC_PUBLIC,"getExpectedDeclarationTypes",generator.methodDescr(String[].class),new ClassGenerator.MethodBody(){
  public void body(  MethodVisitor mv){
    Declaration[] declarations=((InvokerContext)data).getDeclarations();
    List&lt;String&gt; declarationTypes=new ArrayList&lt;String&gt;(declarations.length);
    for (    Declaration decl : declarations) {
      declarationTypes.add(decl.getTypeName());
    }
    returnAsArray(declarationTypes,String.class);
  }
}
).addMethod(ACC_PUBLIC,"getRuleClassName",generator.methodDescr(String.class),new ClassGenerator.MethodBody(){
  public void body(  MethodVisitor mv){
    push(data.getRuleClassName());
    mv.visitInsn(ARETURN);
  }
}
).addMethod(ACC_PUBLIC,"getInternalRuleClassName",generator.methodDescr(String.class),new ClassGenerator.MethodBody(){
  public void body(  MethodVisitor mv){
    push(data.getInternalRuleClassName());
    mv.visitInsn(ARETURN);
  }
}
).addMethod(ACC_PUBLIC,"getMethodName",generator.methodDescr(String.class),new ClassGenerator.MethodBody(){
  public void body(  MethodVisitor mv){
    push(data.getMethodName());
    mv.visitInsn(ARETURN);
  }
}
).addMethod(ACC_PUBLIC,"getInvokerClassName",generator.methodDescr(String.class),new ClassGenerator.MethodBody(){
  public void body(  MethodVisitor mv){
    push(data.getInvokerClassName());
    mv.visitInsn(ARETURN);
  }
}
).addMethod(ACC_PUBLIC,"getGlobals",generator.methodDescr(String[].class),new ClassGenerator.MethodBody(){
  public void body(  MethodVisitor mv){
    returnAsArray(data.getGlobals());
  }
}
).addMethod(ACC_PUBLIC,"getGlobalTypes",generator.methodDescr(String[].class),new ClassGenerator.MethodBody(){
  public void body(  MethodVisitor mv){
    returnAsArray(data.getGlobalTypes());
  }
}
);addMethod;[ACC_PUBLIC, "getPackageImports", generator.methodDescr(String[].class), new ClassGenerator.MethodBody(){
  public void body(  MethodVisitor mv){
    returnAsArray(imports,String.class);
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;push;[data.hashCode()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[IRETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;push;[data.getPackageName()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;push;[data.getInvokerClassName() + "Generated"]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Declaration[] [declarations=((InvokerContext)data).getDeclarations()]</InnerVar>
                <InnerVar>List&lt;String&gt; [declarationTypes=new ArrayList&lt;String&gt;(declarations.length)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;returnAsArray;[declarationTypes, String.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;push;[data.getRuleClassName()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;push;[data.getInternalRuleClassName()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;push;[data.getMethodName()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;push;[data.getInvokerClassName()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;returnAsArray;[data.getGlobals()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;returnAsArray;[data.getGlobalTypes()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;returnAsArray;[imports, String.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createInvokerClassGenerator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassGenerator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>InvokerDataProvider</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ruleContext</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [className=data.getPackageName() + "." + data.getInvokerClassName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>