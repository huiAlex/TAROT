<Class>
    <Id>1339</Id>
    <Package>org.drools.modelcompiler.builder.generator</Package>
    <ClassName>POJOGenerator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>EQUALS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>HASH_CODE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TO_STRING</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TYPE_META_DATA_CALL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>referenceEquals</FieldName>
            <FieldType>Statement</FieldType>
        </Field>
        <Field>
            <FieldName>classCheckEquals</FieldName>
            <FieldType>Statement</FieldType>
        </Field>
        <Field>
            <FieldName>predefinedClassLevelAnnotation</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>predefinedClassLevelAnnotation</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>generatePOJO</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pkg</ParamName>
                    <ParamType>InternalKnowledgePackage</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageDescr</ParamName>
                    <ParamType>PackageDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageModel</ParamName>
                    <ParamType>PackageModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TypeResolver [typeResolver=pkg.getTypeResolver()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compileType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kbuilder</ParamName>
                    <ParamType>KnowledgeBuilderImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageClassLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classesWithPackage</ParamName>
                    <ParamType>GeneratedClassWithPackage</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeResolver</ParamName>
                    <ParamType>TypeResolver</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classMap</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>packageModel</ParamName>
                    <ParamType>PackageModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeDescr</ParamName>
                    <ParamType>TypeDeclarationDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodCallExpr [typeMetaDataCall=registerTypeMetaData(type.getPackage().getName(),type.getSimpleName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>packageModel;addTypeMetaDataExpressions;[typeMetaDataCall]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerTypeMetaData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodCallExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pkg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodCallExpr [typeMetaDataCall=new MethodCallExpr(null,TYPE_META_DATA_CALL)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>typeMetaDataCall;addArgument;[new StringLiteralExpr(pkg)]</InnerMethodInvoke>
                <InnerMethodInvoke>typeMetaDataCall;addArgument;[new StringLiteralExpr(name)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toClassDeclaration</MethodName>
            <MethodComment>/** 
 * @param packageDescr 
 */
</MethodComment>
            <ReturnType>ClassOrInterfaceDeclaration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeDeclaration</ParamName>
                    <ParamType>TypeDeclarationDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageDescr</ParamName>
                    <ParamType>PackageDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>EnumSet&lt;Modifier&gt; [classModifiers=EnumSet.of(Modifier.PUBLIC)]</InnerVar>
                <InnerVar>String [generatedClassName=typeDeclaration.getTypeName()]</InnerVar>
                <InnerVar>ClassOrInterfaceDeclaration [generatedClass=new ClassOrInterfaceDeclaration(classModifiers,false,generatedClassName)]</InnerVar>
                <InnerVar>boolean [hasSuper=typeDeclaration.getSuperTypeName() != null]</InnerVar>
                <InnerVar>List&lt;AnnotationDescr&gt; [softAnnotations=new ArrayList&lt;&gt;()]</InnerVar>
                <InnerVar>List&lt;Statement&gt; [equalsFieldStatement=new ArrayList&lt;&gt;()]</InnerVar>
                <InnerVar>List&lt;Statement&gt; [hashCodeFieldStatement=new ArrayList&lt;&gt;()]</InnerVar>
                <InnerVar>List&lt;String&gt; [toStringFieldStatement=new ArrayList&lt;&gt;()]</InnerVar>
                <InnerVar>List&lt;TypeFieldDescr&gt; [keyFields=new ArrayList&lt;&gt;()]</InnerVar>
                <InnerVar>Collection&lt;TypeFieldDescr&gt; [inheritedFields=findInheritedDeclaredFields(typeDeclaration,packageDescr)]</InnerVar>
                <InnerVar>Collection&lt;TypeFieldDescr&gt; [typeFields=typeDeclaration.getFields().values()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>generatedClass;addImplementedType;[GeneratedFact.class.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>generatedClass;addImplementedType;[Serializable.class.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>generatedClass;addConstructor;[Modifier.PUBLIC]</InnerMethodInvoke>
                <InnerMethodInvoke>generatedClass;addMember;[generateToStringMethod(generatedClassName,toStringFieldStatement)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addCtorArg</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Type</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullArgumentsCtor</ParamName>
                    <ParamType>ConstructorDeclaration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Type [returnType=JavaParser.parseType(typeName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fullArgumentsCtor;addParameter;[returnType, fieldName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findInheritedDeclaredFields</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypeFieldDescr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeDeclaration</ParamName>
                    <ParamType>TypeDeclarationDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageDescr</ParamName>
                    <ParamType>PackageDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findInheritedDeclaredFields</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypeFieldDescr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fields</ParamName>
                    <ParamType>TypeFieldDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>supertType</ParamName>
                    <ParamType>TypeDeclarationDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageDescr</ParamName>
                    <ParamType>PackageDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>supertType;ifPresent;[st -&gt; {
  findInheritedDeclaredFields(fields,getSuperType(st,packageDescr),packageDescr);
  fields.addAll(st.getFields().values());
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSuperType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypeDeclarationDescr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeDeclaration</ParamName>
                    <ParamType>TypeDeclarationDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageDescr</ParamName>
                    <ParamType>PackageDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateEqualsMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodDeclaration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>generatedClassName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>equalsFieldStatement</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NodeList&lt;Statement&gt; [equalsStatements=nodeList(referenceEquals,classCheckEquals)]</InnerVar>
                <InnerVar>Type [returnType=JavaParser.parseType(boolean.class.getSimpleName())]</InnerVar>
                <InnerVar>MethodDeclaration [equals=new MethodDeclaration(EnumSet.of(Modifier.PUBLIC),returnType,EQUALS)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>equalsStatements;add;[classCastStatement(generatedClassName)]</InnerMethodInvoke>
                <InnerMethodInvoke>equalsStatements;add;[parseStatement("if ( !super.equals( o ) ) return false;")]</InnerMethodInvoke>
                <InnerMethodInvoke>equalsStatements;addAll;[equalsFieldStatement]</InnerMethodInvoke>
                <InnerMethodInvoke>equalsStatements;add;[parseStatement("return true;")]</InnerMethodInvoke>
                <InnerMethodInvoke>equals;addParameter;[Object.class, "o"]</InnerMethodInvoke>
                <InnerMethodInvoke>equals;addAnnotation;["Override"]</InnerMethodInvoke>
                <InnerMethodInvoke>equals;setBody;[new BlockStmt(equalsStatements)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>classCastStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Statement [statement=parseStatement("__className that = (__className) o;")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>statement.findAll(ClassOrInterfaceType.class).stream().filter(n1 -&gt; n1.getName().toString().equals("__className"));forEach;[n -&gt; n.replace(JavaParser.parseClassOrInterfaceType(className))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateEqualsForField</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>getter</ParamName>
                    <ParamType>MethodDeclaration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Type [type=getter.getType()]</InnerVar>
                <InnerVar>Statement [statement]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceFieldName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>statement.findAll(NameExpr.class).stream().filter(n -&gt; n.getName().toString().equals("__fieldName"));forEach;[n -&gt; n.replace(new NameExpr(fieldName))]</InnerMethodInvoke>
                <InnerMethodInvoke>statement.findAll(FieldAccessExpr.class).stream().filter(n -&gt; n.getName().toString().equals("__fieldName"));forEach;[n -&gt; n.replace(new FieldAccessExpr(n.getScope(),fieldName))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateHashCodeMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodDeclaration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>hashCodeFieldStatement</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Statement [header=parseStatement("int result = super.hashCode();")]</InnerVar>
                <InnerVar>NodeList&lt;Statement&gt; [hashCodeStatements=nodeList(header)]</InnerVar>
                <InnerVar>Type [returnType=JavaParser.parseType(int.class.getSimpleName())]</InnerVar>
                <InnerVar>MethodDeclaration [equals=new MethodDeclaration(EnumSet.of(Modifier.PUBLIC),returnType,HASH_CODE)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>hashCodeStatements;addAll;[hashCodeFieldStatement]</InnerMethodInvoke>
                <InnerMethodInvoke>hashCodeStatements;add;[parseStatement("return result;")]</InnerMethodInvoke>
                <InnerMethodInvoke>equals;addAnnotation;["Override"]</InnerMethodInvoke>
                <InnerMethodInvoke>equals;setBody;[new BlockStmt(hashCodeStatements)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateHashCodeForField</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>getter</ParamName>
                    <ParamType>MethodDeclaration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Type [type=getter.getType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateToStringMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodDeclaration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>generatedClassName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>toStringFieldStatement</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [header=format("return {0} + {1}",quote(generatedClassName),quote("( "))]</InnerVar>
                <InnerVar>String [body=String.join(format("+ {0}",quote(", ")),toStringFieldStatement)]</InnerVar>
                <InnerVar>String [close=format("+{0};",quote(" )"))]</InnerVar>
                <InnerVar>Statement [toStringStatement=parseStatement(header + body + close)]</InnerVar>
                <InnerVar>Type [returnType=JavaParser.parseType(String.class.getSimpleName())]</InnerVar>
                <InnerVar>MethodDeclaration [equals=new MethodDeclaration(EnumSet.of(Modifier.PUBLIC),returnType,TO_STRING)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>equals;addAnnotation;["Override"]</InnerMethodInvoke>
                <InnerMethodInvoke>equals;setBody;[new BlockStmt(NodeList.nodeList(toStringStatement))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>quote</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAnnotationValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotationName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>valueName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>