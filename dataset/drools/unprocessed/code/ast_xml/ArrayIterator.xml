<Class>
    <Id>1515</Id>
    <Package>org.drools.core.util</Package>
    <ClassName>ArrayIterator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>java.util.Iterator</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ArrayIterator  /** 
 * Implements an  {@link java.util.Iterator Iterator} over any array.&lt;p&gt; The array can be either an array of object or of primitives. If you know  that you have an object array, the  {@link org.apache.commons.collections.iterators.ObjectArrayIterator ObjectArrayIterator}class is a better choice, as it will perform better. &lt;p&gt; The iterator implements a  {@link #reset} method, allowing the reset of the iterator back to the start if required.
 * @since Commons Collections 1.0
 * @version $Revision$ $Date$
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>array</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>endIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>index</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ArrayIterator</MethodName>
            <MethodComment>/** 
 * Constructs an ArrayIterator that will iterate over the values in the specified array.
 * @param array the array to iterate over.
 * @throws IllegalArgumentException if &lt;code&gt;array&lt;/code&gt; is not an array.
 * @throws NullPointerException if &lt;code&gt;array&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>array</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setArray;[array]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkBound</MethodName>
            <MethodComment>/** 
 * Checks whether the index is valid or not.
 * @param bound  the index to check
 * @param type  the index type (for error messages)
 * @throws IndexOutOfBoundsException if the index is invalid
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bound</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasNext</MethodName>
            <MethodComment>/** 
 * Returns true if there are more elements to return from the array.
 * @return true if there is a next element to return
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment>/** 
 * Returns the next element in the array.
 * @return the next element in the array
 * @throws NoSuchElementException if all the elements in the arrayhave already been returned
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment>/** 
 * Throws  {@link UnsupportedOperationException}.
 * @throws UnsupportedOperationException always
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getArray</MethodName>
            <MethodComment>/** 
 * Gets the array that this iterator is iterating over. 
 * @return the array this iterator iterates over, or &lt;code&gt;null&lt;/code&gt; ifthe no-arg constructor was used and  {@link #setArray(Object)} has neverbeen called with a valid array.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setArray</MethodName>
            <MethodComment>/** 
 * Sets the array that the ArrayIterator should iterate over. &lt;p&gt; If an array has previously been set (using the single-arg constructor or this method) then that array is discarded in favour of this one. Iteration is restarted at the start of the new array. Although this can be used to reset iteration, the  {@link #clear()} methodis a more effective choice.
 * @param array the array that the iterator should iterate over.
 * @throws IllegalArgumentException if &lt;code&gt;array&lt;/code&gt; is not an array.
 * @throws NullPointerException if &lt;code&gt;array&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>array</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>