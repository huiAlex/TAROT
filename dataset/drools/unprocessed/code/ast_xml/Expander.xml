<Class>
    <Id>966</Id>
    <Package>org.drools.compiler.lang</Package>
    <ClassName>Expander</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Expander  /** 
 * Expanders are extension points for expanding  expressions in DRL at parse time. This is just-in-time translation, or macro expansion, or whatever you want. The important thing is that it happens at the last possible moment,  so any errors in expansion are included in the parsers errors. Just-in-time expansions may include complex pre-compilers,  or just macros, and everything in between. Expanders should ideally not make presumptions on any embedded semantic  language. For instance, java aware pre processing should be done in drools-java semantic module, not in the parser itself. Expanders should  be reusable across semantic languages. 
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>expand</MethodName>
            <MethodComment>/** 
 * Expands (process) the expression Just-In-Time for the parser. If the source is not meant to be expanded, or if no appropriate match was found for expansion, it will echo back  the same expression.
 * @param drl the source code to be pre-processed
 * @return source code after running pre-processors
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drl</ParamName>
                    <ParamType>Reader</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expand</MethodName>
            <MethodComment>/** 
 * Expands (process) the expression Just-In-Time for the parser. If the source is not meant to be expanded, or if no appropriate match was found for expansion, it will echo back  the same expression.
 * @param source the source code to be expanded
 * @return source code after running pre-processors
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addDSLMapping</MethodName>
            <MethodComment>/** 
 * Add the new mapping to this expander.
 * @param mapping
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mapping</ParamName>
                    <ParamType>DSLMapping</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getErrors</MethodName>
            <MethodComment>/** 
 * Returns the list of errors from the last expansion made
 * @return A list of &lt;code&gt;ExpanderException&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>ExpanderException</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasErrors</MethodName>
            <MethodComment>/** 
 * Returns true in case the last expansion had any errors
 * @return
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>