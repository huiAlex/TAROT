<Class>
    <Id>3252</Id>
    <Package>org.drools.compiler.rule.builder.dialect.java</Package>
    <ClassName>JavaRuleBuilderHelper</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>logger</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
        <Field>
            <FieldName>RULE_REGISTRY</FieldName>
            <FieldType>TemplateRegistry</FieldType>
        </Field>
        <Field>
            <FieldName>INVOKER_REGISTRY</FieldName>
            <FieldType>TemplateRegistry</FieldType>
        </Field>
        <Field>
            <FieldName>JAVA_RULE_MVEL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>JAVA_INVOKERS_MVEL</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>setConsequenceTemplate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setInvokerTemplate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRuleTemplateRegistry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TemplateRegistry</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cl</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInvokerTemplateRegistry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TemplateRegistry</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cl</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createJavaAnalysisResult</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>JavaAnalysisResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consequenceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>decls</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RuleDescr [ruleDescr=context.getRuleDescr()]</InnerVar>
                <InnerVar>BoundIdentifiers [bindings=new BoundIdentifiers(DeclarationScopeResolver.getDeclarationClasses(decls),context,Collections.EMPTY_MAP,KnowledgeHelper.class)]</InnerVar>
                <InnerVar>String [consequenceStr=(RuleImpl.DEFAULT_CONSEQUENCE_NAME.equals(consequenceName)) ? (String)ruleDescr.getConsequence() : (String)ruleDescr.getNamedConsequences().get(consequenceName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createConsequenceContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consequenceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consequenceText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>decls</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>usedIdentifiers</ParamName>
                    <ParamType>BoundIdentifiers</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Declaration[] [declarations=new Declaration[usedIdentifiers.getDeclrClasses().size()]]</InnerVar>
                <InnerVar>String[] [declrStr=new String[declarations.length]]</InnerVar>
                <InnerVar>int [j=0]</InnerVar>
                <InnerVar>Map&lt;String,Object&gt; [map=createVariableContext(className,consequenceText,context,declarations,null,usedIdentifiers.getGlobals())]</InnerVar>
                <InnerVar>Integer[] [indexes=new Integer[declarations.length]]</InnerVar>
                <InnerVar>Boolean[] [notPatterns=new Boolean[declarations.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Arrays;sort;[declarations, RuleTerminalNode.SortDeclarations.instance]</InnerMethodInvoke>
                <InnerMethodInvoke>context.getRule();setRequiredDeclarationsForConsequence;[consequenceName, declrStr]</InnerMethodInvoke>
                <InnerMethodInvoke>map;put;["consequenceName", consequenceName]</InnerMethodInvoke>
                <InnerMethodInvoke>map;put;["indexes", indexes]</InnerMethodInvoke>
                <InnerMethodInvoke>map;put;["notPatterns", notPatterns]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createVariableContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declarations</ParamName>
                    <ParamType>Declaration[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>localDeclarations</ParamName>
                    <ParamType>Declaration[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globals</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,Object&gt; [map=new HashMap&lt;String,Object&gt;()]</InnerVar>
                <InnerVar>String[] [globalStr=new String[globals.size()]]</InnerVar>
                <InnerVar>String[] [globalTypes=new String[globals.size()]]</InnerVar>
                <InnerVar>int [i=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>map;put;["className", className]</InnerMethodInvoke>
                <InnerMethodInvoke>map;put;["methodName", className]</InnerMethodInvoke>
                <InnerMethodInvoke>map;put;["package", context.getPkg().getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>map;put;["ruleClassName", StringUtils.ucFirst(context.getRuleDescr().getClassName())]</InnerMethodInvoke>
                <InnerMethodInvoke>map;put;["invokerClassName", context.getRuleDescr().getClassName() + StringUtils.ucFirst(className) + "Invoker"]</InnerMethodInvoke>
                <InnerMethodInvoke>map;put;["declarations", declarations]</InnerMethodInvoke>
                <InnerMethodInvoke>map;put;["globals", globalStr]</InnerMethodInvoke>
                <InnerMethodInvoke>map;put;["globalTypes", globalTypes]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateTemplates</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruleTemplate</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>invokerTemplate</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>vars</ParamName>
                    <ParamType>Map</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>invokerLookup</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>descrLookup</ParamName>
                    <ParamType>BaseDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;generateMethodTemplate;[ruleTemplate, context, vars]</InnerMethodInvoke>
                <InnerMethodInvoke>null;generateInvokerTemplate;[invokerTemplate, context, className, vars, invokerLookup, descrLookup]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateMethodTemplate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruleTemplate</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>vars</ParamName>
                    <ParamType>Map</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TemplateRegistry [registry=getRuleTemplateRegistry(context.getKnowledgeBuilder().getRootClassLoader())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>context;addMethod;[(String)TemplateRuntime.execute(registry.getNamedTemplate(ruleTemplate),null,new MapVariableResolverFactory(vars),registry)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateInvokerTemplate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>invokerTemplate</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>vars</ParamName>
                    <ParamType>Map</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>invokerLookup</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>descrLookup</ParamName>
                    <ParamType>BaseDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TemplateRegistry [registry=getInvokerTemplateRegistry(context.getKnowledgeBuilder().getRootClassLoader())]</InnerVar>
                <InnerVar>String [invokerClassName=context.getPkg().getName() + "." + context.getRuleDescr().getClassName()+ StringUtils.ucFirst(className)+ "Invoker"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>context;addInvoker;[invokerClassName, (String)TemplateRuntime.execute(registry.getNamedTemplate(invokerTemplate),null,new MapVariableResolverFactory(vars),registry)]</InnerMethodInvoke>
                <InnerMethodInvoke>context;addInvokerLookup;[invokerClassName, invokerLookup]</InnerMethodInvoke>
                <InnerMethodInvoke>context;addDescrLookups;[invokerClassName, descrLookup]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerInvokerBytecode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>vars</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bytecode</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>invokerLookup</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [packageName=(String)vars.get("package")]</InnerVar>
                <InnerVar>String [invokerClassName=(String)vars.get("invokerClassName")]</InnerVar>
                <InnerVar>String [className=packageName + "." + invokerClassName]</InnerVar>
                <InnerVar>String [resourceName=className.replace('.','/') + ".class"]</InnerVar>
                <InnerVar>JavaDialectRuntimeData [data=(JavaDialectRuntimeData)context.getPkg().getDialectRuntimeRegistry().getDialectData("java")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>data;write;[resourceName, bytecode]</InnerMethodInvoke>
                <InnerMethodInvoke>data;putInvoker;[className, (Wireable)invokerLookup]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>