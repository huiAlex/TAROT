<Class>
    <Id>2119</Id>
    <Package>org.drools.core.time</Package>
    <ClassName>TimeUtils</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TimeUtils  /** 
 * A helper class with utility methods for time related operations.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>SIMPLE</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>SIM_SGN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SIM_DAY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SIM_HOU</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SIM_MIN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SIM_SEC</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SIM_MS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SEC_MS</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>MIN_MS</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>HOU_MS</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>DAY_MS</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>calculateTemporalDistance</MethodName>
            <MethodComment>/** 
 * This method calculates the transitive closure of the given adjacency matrix in order to find the temporal distance between each event represented in the adjacency matrix. For more information on the calculation of the temporal distance, please refer to the paper: "Discarding Unused Temporal Information in a Production System", by Dan Teodosiu and Gunter Pollak. This method also uses an adaptation of the Floyd-Warshall algorithm to calculate  the transitive closure of the interval matrix. More information can be found here: http://en.wikipedia.org/wiki/Floyd-Warshall_algorithm The adaptation of the algorithm follows the definition of the path addition and path intersection operations as defined in the paper previously mentioned. The algorithm runs in O(n^3).
 * @param constraintMatrix the starting adjacency matrix
 * @return the resulting temporal distance matrix
 */
</MethodComment>
            <ReturnType>Interval[][]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constraintMatrix</ParamName>
                    <ParamType>Interval[][]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Interval[][] [result=new Interval[constraintMatrix.length][]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseTimeString</MethodName>
            <MethodComment>/** 
 * Parses the given time String and returns the corresponding time in milliseconds
 * @param time
 * @return
 * @throws NullPointerException if time is null
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>time</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [trimmed=time.trim()]</InnerVar>
                <InnerVar>long [result=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evalTimeExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <ParamType>MVELObjectExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leftTuple</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declrs</ParamName>
                    <ParamType>Declaration[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [d=expr.getValue(leftTuple,declrs,null,wm)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evalDateExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <ParamType>MVELObjectExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leftTuple</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declrs</ParamName>
                    <ParamType>Declaration[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [d=expr.getValue(leftTuple,declrs,null,wm)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>