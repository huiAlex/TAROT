<Class>
    <Id>3080</Id>
    <Package>org.drools.core.rule.builder.dialect.asm</Package>
    <ClassName>EvalGenerator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>generate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stub</ParamName>
                    <ParamType>EvalStub</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tuple</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declarations</ParamName>
                    <ParamType>Declaration[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>workingMemory</ParamName>
                    <ParamType>WorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [globals=stub.getGlobals()]</InnerVar>
                <InnerVar>String[] [globalTypes=stub.getGlobalTypes()]</InnerVar>
                <InnerVar>List&lt;DeclarationMatcher&gt; [declarationMatchers=matchDeclarationsToTuple(declarations)]</InnerVar>
                <InnerVar>ClassGenerator [generator=createInvokerClassGenerator(stub,workingMemory).setInterfaces(EvalExpression.class,CompiledInvoker.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>generator.addMethod(ACC_PUBLIC,"createContext",generator.methodDescr(Object.class),new ClassGenerator.MethodBody(){
  public void body(  MethodVisitor mv){
    mv.visitInsn(ACONST_NULL);
    mv.visitInsn(ARETURN);
  }
}
).addMethod(ACC_PUBLIC,"clone",generator.methodDescr(EvalExpression.class),new ClassGenerator.MethodBody(){
  public void body(  MethodVisitor mv){
    mv.visitVarInsn(ALOAD,0);
    mv.visitInsn(ARETURN);
  }
}
).addMethod(ACC_PUBLIC,"replaceDeclaration",generator.methodDescr(null,Declaration.class,Declaration.class));addMethod;[ACC_PUBLIC, "evaluate", generator.methodDescr(Boolean.TYPE,Tuple.class,Declaration[].class,WorkingMemory.class,Object.class), new String[]{"java/lang/Exception"}, new GeneratorHelper.EvaluateMethod(){
  public void body(  MethodVisitor mv){
    objAstorePos=7;
    String[] expectedDeclarations=stub.getExpectedDeclarationTypes();
    int[] declarationsParamsPos=new int[declarations.length];
    mv.visitVarInsn(ALOAD,1);
    cast(LeftTuple.class);
    mv.visitVarInsn(ASTORE,5);
    Tuple currentTuple=tuple;
    for (    DeclarationMatcher matcher : declarationMatchers) {
      int i=matcher.getOriginalIndex();
      declarationsParamsPos[i]=objAstorePos;
      currentTuple=traverseTuplesUntilDeclaration(currentTuple,matcher.getRootDistance(),5);
      mv.visitVarInsn(ALOAD,2);
      push(i);
      mv.visitInsn(AALOAD);
      mv.visitVarInsn(ALOAD,3);
      mv.visitVarInsn(ALOAD,5);
      invokeInterface(LeftTuple.class,"getFactHandle",InternalFactHandle.class);
      invokeInterface(InternalFactHandle.class,"getObject",Object.class);
      storeObjectFromDeclaration(declarations[i],expectedDeclarations[i]);
    }
    StringBuilder evalMethodDescr=new StringBuilder("(");
    for (int i=0; i &lt; declarations.length; i++) {
      load(declarationsParamsPos[i]);
      evalMethodDescr.append(typeDescr(expectedDeclarations[i]));
    }
    parseGlobals(globals,globalTypes,3,evalMethodDescr);
    evalMethodDescr.append(")Z");
    mv.visitMethodInsn(INVOKESTATIC,stub.getInternalRuleClassName(),stub.getMethodName(),evalMethodDescr.toString());
    mv.visitInsn(IRETURN);
  }
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>stub;setEval;[generator.&lt;EvalExpression&gt;newInstance()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitInsn;[ACONST_NULL]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [expectedDeclarations=stub.getExpectedDeclarationTypes()]</InnerVar>
                <InnerVar>int[] [declarationsParamsPos=new int[declarations.length]]</InnerVar>
                <InnerVar>Tuple [currentTuple=tuple]</InnerVar>
                <InnerVar>StringBuilder [evalMethodDescr=new StringBuilder("(")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;cast;[LeftTuple.class]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, 5]</InnerMethodInvoke>
                <InnerMethodInvoke>null;parseGlobals;[globals, globalTypes, 3, evalMethodDescr]</InnerMethodInvoke>
                <InnerMethodInvoke>evalMethodDescr;append;[")Z"]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESTATIC, stub.getInternalRuleClassName(), stub.getMethodName(), evalMethodDescr.toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[IRETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>