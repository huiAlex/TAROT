<Class>
    <Id>3376</Id>
    <Package>org.drools.compiler.reteoo.compiled</Package>
    <ClassName>ObjectTypeNodeCompiler</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ObjectTypeNodeCompiler  /** 
 * todo: document
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>NEWLINE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PACKAGE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BINARY_PACKAGE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>className</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>generatedClassSimpleName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>objectTypeNode</FieldName>
            <FieldType>ObjectTypeNode</FieldType>
        </Field>
        <Field>
            <FieldName>builder</FieldName>
            <FieldType>StringBuilder</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ObjectTypeNodeCompiler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>objectTypeNode</ParamName>
                    <ParamType>ObjectTypeNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassObjectType [classObjectType=(ClassObjectType)objectTypeNode.getObjectType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateSource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ObjectTypeNodeParser [parser=new ObjectTypeNodeParser(objectTypeNode)]</InnerVar>
                <InnerVar>DeclarationsHandler [declarations=new DeclarationsHandler(builder)]</InnerVar>
                <InnerVar>Collection&lt;HashedAlphasDeclaration&gt; [hashedAlphaDeclarations=declarations.getHashedAlphaDeclarations()]</InnerVar>
                <InnerVar>SetNodeReferenceHandler [setNode=new SetNodeReferenceHandler(builder)]</InnerVar>
                <InnerVar>AssertHandler [assertHandler=new AssertHandler(builder,className,hashedAlphaDeclarations.size() &gt; 0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;createClassDeclaration;[]</InnerMethodInvoke>
                <InnerMethodInvoke>parser;accept;[declarations]</InnerMethodInvoke>
                <InnerMethodInvoke>null;createConstructor;[hashedAlphaDeclarations]</InnerMethodInvoke>
                <InnerMethodInvoke>parser;accept;[setNode]</InnerMethodInvoke>
                <InnerMethodInvoke>parser;accept;[assertHandler]</InnerMethodInvoke>
                <InnerMethodInvoke>builder.append("}");append;[NEWLINE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createClassDeclaration</MethodName>
            <MethodComment>/** 
 * This method will output the package statement, followed by the opening of the class declaration
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder.append("package ").append(PACKAGE_NAME).append(";");append;[NEWLINE]</InnerMethodInvoke>
                <InnerMethodInvoke>builder.append("public class ").append(generatedClassSimpleName).append(" extends ").append(CompiledNetwork.class.getName()).append("{ ");append;[NEWLINE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createConstructor</MethodName>
            <MethodComment>/** 
 * Creates the constructor for the generated class. If the hashedAlphaDeclarations is empty, it will just output a empty default constructor; if it is not, the constructor will contain code to fill the hash alpha maps with the values and node ids.
 * @param hashedAlphaDeclarations declarations used for creating statements to populate the hashed alphamaps for the generate class
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>hashedAlphaDeclarations</ParamName>
                    <ParamType>HashedAlphasDeclaration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder.append("public ").append(generatedClassSimpleName).append("() {");append;[NEWLINE]</InnerMethodInvoke>
                <InnerMethodInvoke>builder.append("}");append;[NEWLINE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment>/** 
 * Returns the fully qualified name of the generated subclass of  {@link CompiledNetwork}
 * @return name of generated class
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBinaryName</MethodName>
            <MethodComment>/** 
 * Returns the fully qualified binary name of the generated subclass of  {@link CompiledNetwork}
 * @return binary name of generated class
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPackageName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment>/** 
 * Creates a  {@link CompiledNetwork} for the specified {@link ObjectTypeNode}. The  {@link PackageBuilder} is usedto compile the generated source and load the class.
 * @param kBuilder     builder used to compile and load class
 * @param objectTypeNode OTN we are generating a compiled network for
 * @return CompiledNetwork
 */
</MethodComment>
            <ReturnType>CompiledNetwork</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kBuilder</ParamName>
                    <ParamType>KnowledgeBuilderImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>objectTypeNode</ParamName>
                    <ParamType>ObjectTypeNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ObjectTypeNodeCompiler [compiler=new ObjectTypeNodeCompiler(objectTypeNode)]</InnerVar>
                <InnerVar>String [packageName=compiler.getPackageName()]</InnerVar>
                <InnerVar>PackageRegistry [pkgReg=kBuilder.getPackageRegistry(packageName)]</InnerVar>
                <InnerVar>String [source=compiler.generateSource()]</InnerVar>
                <InnerVar>String [generatedSourceName=compiler.getName()]</InnerVar>
                <InnerVar>JavaDialect [dialect=(JavaDialect)pkgReg.getDialectCompiletimeRegistry().getDialect("java")]</InnerVar>
                <InnerVar>CompiledNetwork [network]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>dialect;addSrc;[compiler.getBinaryName(), source.getBytes(IoUtils.UTF8_CHARSET)]</InnerMethodInvoke>
                <InnerMethodInvoke>kBuilder;compileAll;[]</InnerMethodInvoke>
                <InnerMethodInvoke>kBuilder;updateResults;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>