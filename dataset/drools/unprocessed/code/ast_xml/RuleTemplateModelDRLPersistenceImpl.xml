<Class>
    <Id>1530</Id>
    <Package>org.drools.workbench.models.guided.template.backend</Package>
    <ClassName>RuleTemplateModelDRLPersistenceImpl</ClassName>
    <SuperClass>RuleModelDRLPersistenceImpl</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RuleTemplateModelDRLPersistenceImpl  /** 
 * This class persists a  {@link TemplateModel} to DRL template
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>patternTemplateKey</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
        <Field>
            <FieldName>INSTANCE</FieldName>
            <FieldType>RuleModelPersistence</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>RuleTemplateModelDRLPersistenceImpl</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInstance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RuleModelPersistence</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLHSPatternVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LHSPatternVisitor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isDSLEnhanced</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buf</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nestedIndentation</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isNegated</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>generatorContextFactory</ParamName>
                    <ParamType>LHSGeneratorContextFactory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRHSActionVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RHSActionVisitor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isDSLEnhanced</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buf</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indentation</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>generatorContextFactory</ParamName>
                    <ParamType>RHSGeneratorContextFactory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>LHSPatternVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isDSLEnhanced</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bindingsPatterns</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bindingsFields</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraintValueBuilder</ParamName>
                    <ParamType>DRLConstraintValueBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>generatorContextFactory</ParamName>
                    <ParamType>LHSGeneratorContextFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indentation</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isPatternNegated</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>preGeneratePattern</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gctx</ParamName>
                    <ParamType>LHSGeneratorContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>buf;append;["@if{("]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>postGeneratePattern</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gctx</ParamName>
                    <ParamType>LHSGeneratorContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>buf;append;["@end{}"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>preGenerateNestedConnector</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gctx</ParamName>
                    <ParamType>LHSGeneratorContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>postGenerateNestedConnector</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gctx</ParamName>
                    <ParamType>LHSGeneratorContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>preGenerateNestedConstraint</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gctx</ParamName>
                    <ParamType>LHSGeneratorContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>postGenerateNestedConstraint</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gctx</ParamName>
                    <ParamType>LHSGeneratorContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateConstraint</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constr</ParamName>
                    <ParamType>FieldConstraint</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>gctx</ParamName>
                    <ParamType>LHSGeneratorContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [generateTemplateCheck=isTemplateKey(constr)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>buf;append;["@code{hasLHSOutput" + gctx.getDepth() + "_"+ gctx.getOffset()+ " = true}"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTemplateKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nestedConstr</ParamName>
                    <ParamType>FieldConstraint</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateSeparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constr</ParamName>
                    <ParamType>FieldConstraint</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>gctx</ParamName>
                    <ParamType>LHSGeneratorContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;LHSGeneratorContext&gt; [peers=generatorContextFactory.getPeers(gctx)]</InnerVar>
                <InnerVar>boolean [generateTemplateCheck=isTemplateKey(constr)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;preGenerateNestedConnector;[gctx]</InnerMethodInvoke>
                <InnerMethodInvoke>null;postGenerateNestedConnector;[gctx]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addConnectiveFieldRestriction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buf</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operator</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>ExpressionFormLine</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>gctx</ParamName>
                    <ParamType>LHSGeneratorContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>spaceBeforeOperator</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [generateTemplateCheck=type == BaseSingleFieldConstraint.TYPE_TEMPLATE]</InnerVar>
                <InnerVar>String [_operator=operator]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitFreeFormLine</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ffl</ParamName>
                    <ParamType>FreeFormLine</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Matcher [matcherTemplateKey=patternTemplateKey.matcher(ffl.getText())]</InnerVar>
                <InnerVar>boolean [found=matcherTemplateKey.find()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitFromCollectCompositeFactPattern</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <ParamType>FromCollectCompositeFactPattern</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isSubPattern</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>RHSActionVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isDSLEnhanced</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bindingsPatterns</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bindingsFields</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraintValueBuilder</ParamName>
                    <ParamType>DRLConstraintValueBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>generatorContextFactory</ParamName>
                    <ParamType>RHSGeneratorContextFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indentation</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>preGenerateAction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gctx</ParamName>
                    <ParamType>RHSGeneratorContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>buf;append;["@if{("]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>postGenerateAction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gctx</ParamName>
                    <ParamType>RHSGeneratorContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>buf;append;["@end{}"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>preGenerateSetMethodCallParameterValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gctx</ParamName>
                    <ParamType>RHSGeneratorContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldValue</ParamName>
                    <ParamType>ActionFieldValue</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateSetMethodCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>variableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldValue</ParamName>
                    <ParamType>ActionFieldValue</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateModifyMethodCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gctx</ParamName>
                    <ParamType>RHSGeneratorContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldValue</ParamName>
                    <ParamType>ActionFieldValue</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateModifyMethodSeparator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gctx</ParamName>
                    <ParamType>RHSGeneratorContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldValue</ParamName>
                    <ParamType>ActionFieldValue</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;RHSGeneratorContext&gt; [peers=generatorContextFactory.getPeers(gctx)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>buf;append;["@if{("]</InnerMethodInvoke>
                <InnerMethodInvoke>buf.append("hasRHSOutput" + gctx.getDepth() + "_"+ gctx.getOffset());append;[" &amp;&amp; ("]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;[")}"]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;[", \n"]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["@end{}"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitFreeFormLine</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ffl</ParamName>
                    <ParamType>FreeFormLine</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Matcher [matcherTemplateKey=patternTemplateKey.matcher(ffl.getText())]</InnerVar>
                <InnerVar>boolean [found=matcherTemplateKey.find()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>marshal</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>RuleModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [ruleTemplate=marshalRule(model)]</InnerVar>
                <InnerVar>DataProvider [dataProvider=chooseDataProvider(model)]</InnerVar>
                <InnerVar>DataProviderCompiler [tplCompiler=new DataProviderCompiler()]</InnerVar>
                <InnerVar>InputStream [templateStream=new ByteArrayInputStream(ruleTemplate.getBytes(IoUtils.UTF8_CHARSET))]</InnerVar>
                <InnerVar>DefaultTemplateContainer [tc=new DefaultTemplateContainer(templateStream,false)]</InnerVar>
                <InnerVar>TemplateDataListener [listener=new TemplateDataListener(tc,false)]</InnerVar>
                <InnerVar>String [generatedDrl=tplCompiler.compile(dataProvider,listener)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;debug;["ruleTemplate:\n{}", ruleTemplate]</InnerMethodInvoke>
                <InnerMethodInvoke>log;debug;["generated template:\n{}", ruleTemplate]</InnerMethodInvoke>
                <InnerMethodInvoke>log;debug;["generated drl:\n{}", generatedDrl]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>marshalRule</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>RuleModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [isDSLEnhanced=model.hasDSLSentences()]</InnerVar>
                <InnerVar>StringBuilder [buf=new StringBuilder()]</InnerVar>
                <InnerVar>StringBuilder [header=new StringBuilder()]</InnerVar>
                <InnerVar>LHSGeneratorContextFactory [lhsGeneratorContextFactory=new LHSGeneratorContextFactory()]</InnerVar>
                <InnerVar>RHSGeneratorContextFactory [rhsGeneratorContextFactory=new RHSGeneratorContextFactory()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;fixActionInsertFactBindings;[model.rhs]</InnerMethodInvoke>
                <InnerMethodInvoke>this;marshalRuleHeader;[model, header]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["\twhen\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["\tthen\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>this;marshalFooter;[buf]</InnerMethodInvoke>
                <InnerMethodInvoke>header;append;["@code{\n" + "  def removeDelimitingQuotes(value) {\n" + "    if(value.startsWith('\"') &amp;&amp; value.endsWith('\"')) {\n"+ "      return value.substring(1, value.length() - 1);\n"+ "    }\n"+ "  value;\n"+ "  }\n"+ "}"]</InnerMethodInvoke>
                <InnerMethodInvoke>header;append;["@code{\n" + "def capitals(value) {\n" + "  value.toUpperCase();\n"+ "}}"]</InnerMethodInvoke>
                <InnerMethodInvoke>header;append;["@code{\n" + " def makeValueList(value) {\n" + "    if(value.startsWith('\"') &amp;&amp; value.endsWith('\"')) {\n"+ "      value = value.substring(1, value.length() - 1);\n"+ "    }\n"+ "	workingValue = value.trim();\n"+ "	if ( workingValue.startsWith('(') ) {\n"+ "		workingValue = workingValue.substring( 1 );\n"+ "	}\n"+ "	if ( workingValue.endsWith(')') ) {\n"+ "		workingValue = workingValue.substring( 0,"+ "				workingValue.length() - 1 );\n"+ "	}\n"+ "	values = workingValue.split( ',' );\n"+ "	output = ' (';\n"+ "	for (v : values ) {\n"+ "		v = v.trim();\n"+ "		if ( v.startsWith( '\"' ) ) {\n"+ "			v = v.substring( 1 );\n"+ "		}\n"+ "		if ( v.endsWith( '\"' ) ) {\n"+ "   		v = v.substring( 0,v.length() - 1 );\n"+ "		}\n"+ "		output+='\"'+v+'\", ';\n"+ "	}"+ "	output=output.substring(0,output.length()-2)+')';\n"+ "	output;\n"+ "	}\n"+ "}"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>chooseDataProvider</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DataProvider</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>RuleModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DataProvider [dataProvider]</InnerVar>
                <InnerVar>TemplateModel [tplModel=(TemplateModel)model]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateEmptyIterator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DataProvider</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasNext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>marshalRuleHeader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>RuleModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buf</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TemplateModel [templateModel=(TemplateModel)model]</InnerVar>
                <InnerVar>InterpolationVariable[] [interpolationVariables=templateModel.getInterpolationVariablesList()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>buf;append;["template header\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>buf.append("\ntemplate \"").append(super.marshalRuleName(templateModel));append;["\"\n\n"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>marshalRuleName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>RuleModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>marshalFooter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buf</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>buf;append;["\nend template"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>