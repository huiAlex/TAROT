<Class>
    <Id>5</Id>
    <Package>org.drools.core.impl</Package>
    <ClassName>KnowledgeBaseFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>KnowledgeBaseFactory  /** 
 * &lt;p&gt; This factory will create and return a KnowledgeBase instance, an optional KnowledgeBaseConfiguration can be provided. The KnowledgeBaseConfiguration is also itself created from this factory. &lt;/p&gt; &lt;pre&gt; KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase(); &lt;/pre&gt; &lt;p&gt; Create sequential KnowledgeBase using the given ClassLoader. &lt;/p&gt; &lt;pre&gt; Properties properties = new Properties(); properties.setOption( SequentialOption.YES ); KnowledgeBaseConfiguration kbConf = KnowledgeBaseFactory.newKnowledgeBaseConfiguration(properties, myClassLoader); KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase(kbConf); &lt;/pre&gt; &lt;p&gt; The above could also have used the supported property &lt;/p&gt; &lt;pre&gt; properties.setProperty( "org.kie.sequential", "true"); &lt;/pre&gt;
 * @see KnowledgeBase
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>newKnowledgeBase</MethodName>
            <MethodComment>/** 
 * Create a new KnowledgeBase using the default KnowledgeBaseConfiguration
 * @return The KnowledgeBase
 */
</MethodComment>
            <ReturnType>InternalKnowledgeBase</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newKnowledgeBase</MethodName>
            <MethodComment>/** 
 * Create a new KnowledgeBase using the default KnowledgeBaseConfiguration and the given KnowledgeBase ID.
 * @param kbaseId A string Identifier for the knowledge base. Specially useful when enabling JMX monitoring and management, as that ID will be used to compose the JMX ObjectName for all related MBeans. The application must ensure all kbase IDs are unique.
 * @return The KnowledgeBase
 */
</MethodComment>
            <ReturnType>InternalKnowledgeBase</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kbaseId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newKnowledgeBase</MethodName>
            <MethodComment>/** 
 * Create a new KnowledgeBase using the given KnowledgeBaseConfiguration
 * @return The KnowledgeBase
 */
</MethodComment>
            <ReturnType>InternalKnowledgeBase</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>KieBaseConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newKnowledgeBase</MethodName>
            <MethodComment>/** 
 * Create a new KnowledgeBase using the given KnowledgeBaseConfiguration and the given KnowledgeBase ID.
 * @param kbaseId A string Identifier for the knowledge base. Specially useful when enabling JMX monitoring and management, as that ID will be used to compose the JMX ObjectName for all related MBeans. The application must ensure all kbase IDs are unique.
 * @return The KnowledgeBase
 */
</MethodComment>
            <ReturnType>InternalKnowledgeBase</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kbaseId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>KieBaseConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newKnowledgeBaseConfiguration</MethodName>
            <MethodComment>/** 
 * Create a KnowledgeBaseConfiguration on which properties can be set.
 * @return The KnowledgeBaseConfiguration.
 */
</MethodComment>
            <ReturnType>KieBaseConfiguration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newKnowledgeBaseConfiguration</MethodName>
            <MethodComment>/** 
 * Create a KnowledgeBaseConfiguration on which properties can be set. Use the given properties file and ClassLoader - either of which can be null.
 * @return The KnowledgeBaseConfiguration.
 */
</MethodComment>
            <ReturnType>KieBaseConfiguration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoaders</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newKnowledgeSessionConfiguration</MethodName>
            <MethodComment>/** 
 * Create a KnowledgeSessionConfiguration on which properties can be set.
 * @return The KnowledgeSessionConfiguration.
 */
</MethodComment>
            <ReturnType>KieSessionConfiguration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newKnowledgeSessionConfiguration</MethodName>
            <MethodComment>/** 
 * Create a KnowledgeSessionConfiguration on which properties can be set.
 * @return The KnowledgeSessionConfiguration.
 */
</MethodComment>
            <ReturnType>KieSessionConfiguration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>properties</ParamName>
                    <ParamType>Properties</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>