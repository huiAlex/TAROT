<Class>
    <Id>2359</Id>
    <Package>org.kie.dmn.feel.runtime.decisiontables</Package>
    <ClassName>DecisionTableImpl</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>logger</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
        <Field>
            <FieldName>name</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>parameterNames</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>parameterNames</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>inputs</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>inputs</FieldName>
            <FieldType>DTInputClause</FieldType>
        </Field>
        <Field>
            <FieldName>outputs</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>outputs</FieldName>
            <FieldType>DTOutputClause</FieldType>
        </Field>
        <Field>
            <FieldName>decisionRules</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>decisionRules</FieldName>
            <FieldType>DTDecisionRule</FieldType>
        </Field>
        <Field>
            <FieldName>hitPolicy</FieldName>
            <FieldType>HitPolicy</FieldType>
        </Field>
        <Field>
            <FieldName>hasDefaultValues</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>feel</FieldName>
            <FieldType>FEEL</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DecisionTableImpl</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameterNames</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inputs</ParamName>
                    <ParamType>DTInputClause</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outputs</ParamName>
                    <ParamType>DTOutputClause</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>decisionRules</ParamName>
                    <ParamType>DTDecisionRule</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hitPolicy</ParamName>
                    <ParamType>HitPolicy</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>feel</ParamName>
                    <ParamType>FEEL</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluate</MethodName>
            <MethodComment>/** 
 * Evaluates this decision table returning the result
 * @param ctx
 * @param params these are the required information items, not to confuse with the columns of thedecision table that are expressions derived from these parameters
 * @return
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>EvaluationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object[] [actualInputs=resolveActualInputs(ctx,feel)]</InnerVar>
                <InnerVar>Either&lt;FEELEvent,Object&gt; [actualInputMatch=actualInputsMatchInputValues(ctx,actualInputs)]</InnerVar>
                <InnerVar>List&lt;DTDecisionRule&gt; [matches=findMatches(ctx,actualInputs)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkResults</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Integer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>EvaluationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>matches</ParamName>
                    <ParamType>DTDecisionRule</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>results</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;Integer,String&gt; [msgs=new TreeMap&lt;&gt;()]</InnerVar>
                <InnerVar>int [i=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkOneResult</MethodName>
            <MethodComment>/** 
 * This checks one "column" of the decision table output(s).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>EvaluationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>DTDecisionRule</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>msgs</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dtOutputClause</ParamName>
                    <ParamType>DTOutputClause</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkOneValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>EvaluationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>DTDecisionRule</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>msgs</ParamName>
                    <ParamType>Integer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dtOutputClause</ParamName>
                    <ParamType>DTOutputClause</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resolveActualInputs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>EvaluationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>feel</ParamName>
                    <ParamType>FEEL</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,Object&gt; [variables=ctx.getAllValues()]</InnerVar>
                <InnerVar>Object[] [actualInputs=new Object[inputs.size()]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>actualInputsMatchInputValues</MethodName>
            <MethodComment>/** 
 * If valid input values are defined, check that all parameters match the respective valid inputs
 * @param ctx
 * @param params
 * @return
 */
</MethodComment>
            <ReturnType>FEELEvent</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>EvaluationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findMatches</MethodName>
            <MethodComment>/** 
 * Finds all rules that match a given set of parameters
 * @param ctx
 * @param params
 * @return
 */
</MethodComment>
            <ReturnType>DTDecisionRule</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>EvaluationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;DTDecisionRule&gt; [matchingDecisionRules=new ArrayList&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ctx;notifyEvt;[() -&gt; {
  List&lt;Integer&gt; matches=matchingDecisionRules.stream().map(dr -&gt; dr.getIndex() + 1).collect(Collectors.toList());
  return new DecisionTableRulesMatchedEvent(FEELEvent.Severity.INFO,"Rules matched for decision table '" + getName() + "': "+ matches.toString(),getName(),getName(),matches);
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>matches</MethodName>
            <MethodComment>/** 
 * Checks if the parameters match a single rule
 * @param ctx
 * @param params
 * @param rule
 * @return
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>EvaluationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>DTDecisionRule</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>satisfies</MethodName>
            <MethodComment>/** 
 * Checks that a given parameter matches a single cell test
 * @param ctx
 * @param param
 * @param test
 * @return
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>EvaluationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>param</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>test</ParamName>
                    <ParamType>UnaryTest</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateResults</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>EvaluationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>feel</ParamName>
                    <ParamType>FEEL</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>matchingDecisionRules</ParamName>
                    <ParamType>DTDecisionRule</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Object&gt; [results=matchingDecisionRules.stream().map(dr -&gt; hitToOutput(ctx,feel,dr)).collect(Collectors.toList())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hitToOutput</MethodName>
            <MethodComment>/** 
 * Each hit results in one output value (multiple outputs are collected into a single context value)
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>EvaluationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>feel</ParamName>
                    <ParamType>FEEL</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>DTDecisionRule</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;CompiledExpression&gt; [outputEntries=rule.getOutputEntry()]</InnerVar>
                <InnerVar>Map&lt;String,Object&gt; [values=ctx.getAllValues()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>defaultToOutput</MethodName>
            <MethodComment>/** 
 * No hits matched for the DT, so calculate result based on default outputs
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>EvaluationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>feel</ParamName>
                    <ParamType>FEEL</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,Object&gt; [values=ctx.getAllValues()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getHitPolicy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>HitPolicy</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOutputs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DTOutputClause</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParameterNames</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSignature</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>