<Class>
    <Id>1888</Id>
    <Package>org.drools.modelcompiler.builder.generator.expressiontyper</Package>
    <ClassName>ExpressionTyper</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>ruleContext</FieldName>
            <FieldType>RuleContext</FieldType>
        </Field>
        <Field>
            <FieldName>packageModel</FieldName>
            <FieldType>PackageModel</FieldType>
        </Field>
        <Field>
            <FieldName>patternType</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>patternType</FieldName>
            <FieldType>?</FieldType>
        </Field>
        <Field>
            <FieldName>bindingId</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>isPositional</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>context</FieldName>
            <FieldType>ExpressionTyperContext</FieldType>
        </Field>
        <Field>
            <FieldName>prefixExpressions</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>prefixExpressions</FieldName>
            <FieldType>Expression</FieldType>
        </Field>
        <Field>
            <FieldName>logger</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
        <Field>
            <FieldName>expressionCursor</FieldName>
            <FieldType>Expression</FieldType>
        </Field>
        <Field>
            <FieldName>typeCursor</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>typeCursor</FieldName>
            <FieldType>?</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ExpressionTyper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruleContext</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>patternType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bindingId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isPositional</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ExpressionTyper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruleContext</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>patternType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bindingId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isPositional</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>ExpressionTyperContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toTypedExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypedExpressionResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drlxExpr</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Optional&lt;TypedExpression&gt; [typedExpression=toTypedExpressionRec(drlxExpr)]</InnerVar>
                <InnerVar>TypedExpressionResult [typedExpressionResult=new TypedExpressionResult(typedExpression,context)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>logger;debug;["Typed expression Input: drlxExpr = {} , patternType = {} ,declarations = {}", PrintUtil.toDrlx(drlxExpr), patternType, context.getUsedDeclarations()]</InnerMethodInvoke>
                <InnerMethodInvoke>logger;debug;["Typed expression Output: {}", typedExpressionResult]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toTypedExpressionRec</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypedExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drlxExpr</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [typeCursor=patternType]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOperatorSpec</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>OperatorSpec</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drlxExpr</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightExpressions</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expressionOperator</ParamName>
                    <ParamType>SimpleName</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [operator=expressionOperator.asString()]</InnerVar>
                <InnerVar>OperatorSpec [opSpec=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toTypedExpressionFromMethodCallOrField</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypedExpressionResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drlxExpr</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Node&gt; [childrenNodes=flattenScope(drlxExpr)]</InnerVar>
                <InnerVar>Node [firstChild=childrenNodes.get(0)]</InnerVar>
                <InnerVar>boolean [isInLineCast=firstChild instanceof InlineCastExpr]</InnerVar>
                <InnerVar>Class&lt;?&gt; [originalTypeCursor]</InnerVar>
                <InnerVar>Node [firstNode]</InnerVar>
                <InnerVar>Optional&lt;TypedExpressionCursor&gt; [teCursor=processFirstNode(drlxExpr,childrenNodes,firstNode,isInLineCast,originalTypeCursor)]</InnerVar>
                <InnerVar>Expression [previous]</InnerVar>
                <InnerVar>Class&lt;?&gt; [typeCursor]</InnerVar>
                <InnerVar>List&lt;Node&gt; [childrenWithoutFirst=childrenNodes.subList(1,childrenNodes.size())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>extractPrefixExpressions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drlxExpr</ParamName>
                    <ParamType>NullSafeFieldAccessExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>previous</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BinaryExpr [prefixExpression=new BinaryExpr(previous,new NullLiteralExpr(),BinaryExpr.Operator.NOT_EQUALS)]</InnerVar>
                <InnerVar>Expression [scope=drlxExpr.getScope()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>prefixExpressions;add;[prefixExpression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processFirstNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypedExpressionCursor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drlxExpr</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>childNodes</ParamName>
                    <ParamType>Node</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>firstNode</ParamName>
                    <ParamType>Node</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isInLineCast</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>originalTypeCursor</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Optional&lt;TypedExpressionCursor&gt; [result]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>result;ifPresent;[te -&gt; {
  if (drlxExpr instanceof NullSafeFieldAccessExpr) {
    extractPrefixExpressions((NullSafeFieldAccessExpr)drlxExpr,te.expressionCursor);
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>binaryExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypedExpressionCursor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>binaryExpr</ParamName>
                    <ParamType>BinaryExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TypedExpressionResult [left=toTypedExpression(binaryExpr.getLeft())]</InnerVar>
                <InnerVar>TypedExpressionResult [right=toTypedExpression(binaryExpr.getRight())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>binaryExpr;setLeft;[left.getTypedExpression().get().getExpression()]</InnerMethodInvoke>
                <InnerMethodInvoke>binaryExpr;setRight;[right.getTypedExpression().get().getExpression()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>castExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypedExpressionCursor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>firstNode</ParamName>
                    <ParamType>CastExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>drlxExpr</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>childNodes</ParamName>
                    <ParamType>Node</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isInLineCast</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>originalTypeCursor</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>originalTypeCursorFromInlineCast</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inlineCast</ParamName>
                    <ParamType>InlineCastExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [originalTypeCursor]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stringLiteralExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypedExpressionCursor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>firstNode</ParamName>
                    <ParamType>StringLiteralExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TypedExpressionCursor [teCursor]</InnerVar>
                <InnerVar>Class&lt;?&gt; [typeCursor=String.class]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>methodCallExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypedExpressionCursor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methodCallExpr</ParamName>
                    <ParamType>MethodCallExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>originalTypeCursor</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scope</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class[] [argsType=new Class[methodCallExpr.getArguments().size()]]</InnerVar>
                <InnerVar>Class&lt;?&gt; [type=ClassUtil.findMethod(originalTypeCursor,methodCallExpr.getNameAsString(),argsType).getReturnType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>methodCallExpr;setScope;[scope]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>arrayCreationExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypedExpressionCursor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arrayCreationExpr</ParamName>
                    <ParamType>ArrayCreationExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Optional&lt;ArrayInitializerExpr&gt; [optInit=arrayCreationExpr.getInitializer()]</InnerVar>
                <InnerVar>Class&lt;?&gt; [type=getClassFromContext(ruleContext.getTypeResolver(),arrayCreationExpr.getElementType().asString() + "[]")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fieldAccessExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypedExpressionCursor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>firstNode</ParamName>
                    <ParamType>FieldAccessExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>originalTypeCursor</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TypedExpressionCursor [teCursor]</InnerVar>
                <InnerVar>Class&lt;?&gt; [tc4=originalTypeCursor]</InnerVar>
                <InnerVar>String [firstName=firstNode.getName().getIdentifier()]</InnerVar>
                <InnerVar>Method [firstAccessor=ClassUtils.getAccessor(tc4,firstName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nameExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypedExpressionCursor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drlxExpr</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>firstNode</ParamName>
                    <ParamType>NameExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isInLineCast</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>originalTypeCursor</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Optional&lt;TypedExpressionCursor&gt; [teCursor]</InnerVar>
                <InnerVar>String [firstName=firstNode.getName().getIdentifier()]</InnerVar>
                <InnerVar>Optional&lt;DeclarationSpec&gt; [declarationById=ruleContext.getDeclarationById(firstName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>thisExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypedExpressionCursor</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drlxExpr</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>childNodes</ParamName>
                    <ParamType>Node</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isInLineCast</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>originalTypeCursor</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TypedExpressionCursor [teCursor]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addCastToExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeCursor</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>previous</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isInLineCast</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ReferenceType [castType=JavaParser.parseClassOrInterfaceType(typeCursor.getName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addCastToExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>castType</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>previous</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isInLineCast</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFieldName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drlxExpr</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldName</ParamName>
                    <ParamType>SimpleName</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findLeftLeafOfNameExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>Node</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flattenScope</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Node</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expressionWithScope</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Node&gt; [res=new ArrayList&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TypedExpressionCursor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expressionCursor</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeCursor</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>