<Class>
    <Id>2387</Id>
    <Package>org.drools.modelcompiler.builder.generator.visitor.accumulate</Package>
    <ClassName>AccumulateVisitorFlowDSL</ClassName>
    <SuperClass>AccumulateVisitor</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>newBindingResults</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>newBindingResults</FieldName>
            <FieldType>NewBinding</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>AccumulateVisitorFlowDSL</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>modelGeneratorVisitor</ParamName>
                    <ParamType>ModelGeneratorVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageModel</ParamName>
                    <ParamType>PackageModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildBinding</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodCallExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bindingName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>usedDeclaration</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodCallExpr [bindDSL=new MethodCallExpr(null,BIND_CALL)]</InnerVar>
                <InnerVar>MethodCallExpr [bindAsDSL=new MethodCallExpr(bindDSL,BIND_AS_CALL)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>bindDSL;addArgument;[toVar(bindingName)]</InnerMethodInvoke>
                <InnerMethodInvoke>usedDeclaration.stream().map(d -&gt; new NameExpr(toVar(d)));forEach;[bindAsDSL::addArgument]</InnerMethodInvoke>
                <InnerMethodInvoke>bindAsDSL;addArgument;[buildConstraintExpression(expression,usedDeclaration)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processNewBinding</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>optNewBinding</ParamName>
                    <ParamType>NewBinding</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>optNewBinding;ifPresent;[newBinding -&gt; {
  final Optional&lt;String&gt; patterBinding=newBinding.patternBinding;
  final List&lt;Expression&gt; allExpressions=context.getExpressions();
  final MethodCallExpr newBindingExpression=newBinding.bindExpression;
  replaceBindingWithPatternBinding(newBindingExpression,findLastPattern(allExpressions));
  newBindingResults.add(newBinding);
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findLastPattern</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodCallExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expressions</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;MethodCallExpr&gt; [collect=expressions.stream().flatMap(e -&gt; e.findAll(MethodCallExpr.class,expr -&gt; expr.getName().asString().equals("expr")).stream()).collect(Collectors.toList())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceBindingWithPatternBinding</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bindExpression</ParamName>
                    <ParamType>MethodCallExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lastPattern</ParamName>
                    <ParamType>MethodCallExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [bindingId=lastPattern.getArgument(1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>bindExpression.findFirst(NameExpr.class,e -&gt; e.equals(bindingId));ifPresent;[name -&gt; {
  LambdaExpr lambda=(LambdaExpr)bindExpression.getArgument(bindExpression.getArguments().size() - 1);
  if (lambda.getParameters().size() &gt; 1) {
    String formalArg=fromVar(name.getNameAsString());
    for (    Parameter param : lambda.getParameters()) {
      if (param.getNameAsString().equals(formalArg)) {
        lambda.getParameters().remove(param);
        lambda.getParameters().add(0,param);
        break;
      }
    }
  }
  bindExpression.getArguments().remove(name);
  bindExpression.getArguments().add(0,name);
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>postVisit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>newBindingResults;forEach;[e -&gt; context.getExpressions().add(0,e.bindExpression)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>