<Class>
    <Id>3447</Id>
    <Package>org.kie.dmn.feel.parser.feel11</Package>
    <ClassName>FEELParser</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>REUSABLE_KEYWORDS</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>REUSABLE_KEYWORDS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DIGITS_PATTERN</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>eventsManager</FieldName>
            <FieldType>FEELEventListenersManager</FieldType>
        </Field>
        <Field>
            <FieldName>errors</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>errors</FieldName>
            <FieldType>FEELEvent</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>parse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FEEL_1_1Parser</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>eventsManager</ParamName>
                    <ParamType>FEELEventListenersManager</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inputVariableTypes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inputVariables</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>additionalFunctions</ParamName>
                    <ParamType>FEELFunction</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>profiles</ParamName>
                    <ParamType>FEELProfile</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ANTLRInputStream [input=new ANTLRInputStream(source)]</InnerVar>
                <InnerVar>FEEL_1_1Lexer [lexer=new FEEL_1_1Lexer(input)]</InnerVar>
                <InnerVar>CommonTokenStream [tokens=new CommonTokenStream(lexer)]</InnerVar>
                <InnerVar>FEEL_1_1Parser [parser=new FEEL_1_1Parser(tokens)]</InnerVar>
                <InnerVar>ParserHelper [parserHelper=new ParserHelper(eventsManager)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>additionalFunctions;forEach;[f -&gt; parserHelper.getSymbolTable().getBuiltInScope().define(f.getSymbol())]</InnerMethodInvoke>
                <InnerMethodInvoke>profiles.stream().filter(KieExtendedFEELProfile.class::isInstance);forEach;[dc -&gt; parserHelper.setFeatDMN12EnhancedForLoopEnabled(true)]</InnerMethodInvoke>
                <InnerMethodInvoke>parser;setHelper;[parserHelper]</InnerMethodInvoke>
                <InnerMethodInvoke>parser;setErrorHandler;[new FEELErrorHandler()]</InnerMethodInvoke>
                <InnerMethodInvoke>parser;removeErrorListeners;[]</InnerMethodInvoke>
                <InnerMethodInvoke>parser;addErrorListener;[new FEELParserErrorListener(eventsManager)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;defineVariables;[inputVariableTypes, inputVariables, parser]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isVariableNamePartValid</MethodName>
            <MethodComment>/** 
 * Either namePart is a string of digits, or it must be a valid name itself 
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>namePart</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isVariableNameValid</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkVariableName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FEELEvent</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ANTLRInputStream [input=new ANTLRInputStream(source)]</InnerVar>
                <InnerVar>FEEL_1_1Lexer [lexer=new FEEL_1_1Lexer(input)]</InnerVar>
                <InnerVar>CommonTokenStream [tokens=new CommonTokenStream(lexer)]</InnerVar>
                <InnerVar>FEEL_1_1Parser [parser=new FEEL_1_1Parser(tokens)]</InnerVar>
                <InnerVar>FEELParserErrorListener [errorChecker=new FEELParserErrorListener(null)]</InnerVar>
                <InnerVar>FEEL_1_1Parser.NameDefinitionContext [nameDef=parser.nameDefinition()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>parser;setHelper;[new ParserHelper()]</InnerMethodInvoke>
                <InnerMethodInvoke>parser;setErrorHandler;[new FEELErrorHandler()]</InnerMethodInvoke>
                <InnerMethodInvoke>parser;removeErrorListeners;[]</InnerMethodInvoke>
                <InnerMethodInvoke>parser;addErrorListener;[errorChecker]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>defineVariables</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>inputVariableTypes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inputVariables</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parser</ParamName>
                    <ParamType>FEEL_1_1Parser</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>inputVariableTypes;forEach;[(name,type) -&gt; {
  parser.getHelper().defineVariable(name,type);
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>inputVariables;forEach;[(name,value) -&gt; {
  parser.getHelper().defineVariable(name);
  if (value instanceof Map) {
    try {
      parser.getHelper().pushName(name);
      parser.getHelper().pushScope();
      defineVariables(Collections.EMPTY_MAP,(Map&lt;String,Object&gt;)value,parser);
    }
  finally {
      parser.getHelper().popScope();
      parser.getHelper().popName();
    }
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reportFailedPredicate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>recognizer</ParamName>
                    <ParamType>Parser</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>FailedPredicateException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>FEELParserErrorListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>eventsManager</ParamName>
                    <ParamType>FEELEventListenersManager</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>syntaxError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>recognizer</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offendingSymbol</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>line</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charPositionInLine</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>RecognitionException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SyntaxErrorEvent [error]</InnerVar>
                <InnerVar>CommonToken [token=(CommonToken)offendingSymbol]</InnerVar>
                <InnerVar>int [tokenIndex=token.getTokenIndex()]</InnerVar>
                <InnerVar>Parser [parser=(Parser)recognizer]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasErrors</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getErrors</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FEELEvent</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateInvalidVariableError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SyntaxErrorEvent</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>offendingSymbol</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>line</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>charPositionInLine</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>RecognitionException</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>token</ParamName>
                    <ParamType>CommonToken</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [chars=token.getText().length() == 1 ? "character" : "sequence of characters"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>