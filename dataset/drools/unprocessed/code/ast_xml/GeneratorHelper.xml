<Class>
    <Id>1016</Id>
    <Package>org.drools.core.rule.builder.dialect.asm</Package>
    <ClassName>GeneratorHelper</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>INVOKER_SERIAL_UID</FieldName>
            <FieldType>Long</FieldType>
        </Field>
        <Field>
            <FieldName>declaration</FieldName>
            <FieldType>Declaration</FieldType>
        </Field>
        <Field>
            <FieldName>originalIndex</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>rootDistance</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>data</FieldName>
            <FieldType>InvokerDataProvider</FieldType>
        </Field>
        <Field>
            <FieldName>objAstorePos</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>matchDeclarationsToTuple</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DeclarationMatcher</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>declarations</ParamName>
                    <ParamType>Declaration[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;DeclarationMatcher&gt; [matchers=new ArrayList&lt;DeclarationMatcher&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Collections;sort;[matchers]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DeclarationMatcher</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>originalIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declaration</ParamName>
                    <ParamType>Declaration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOriginalIndex</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRootDistance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDeclaration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Declaration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compareTo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassLoader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassLoader</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>workingMemory</ParamName>
                    <ParamType>WorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createInvokerClassGenerator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassGenerator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stub</ParamName>
                    <ParamType>InvokerStub</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>workingMemory</ParamName>
                    <ParamType>WorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [className=stub.getPackageName() + "." + stub.getGeneratedInvokerClassName()]</InnerVar>
                <InnerVar>ClassLoader [classLoader=getClassLoader(stub,workingMemory)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createInvokerClassGenerator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassGenerator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>InvokerDataProvider</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeResolver</ParamName>
                    <ParamType>TypeResolver</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassGenerator [generator=new ClassGenerator(className,classLoader,typeResolver).addStaticField(ACC_PRIVATE + ACC_FINAL,"serialVersionUID",Long.TYPE,INVOKER_SERIAL_UID).addDefaultConstructor()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>generator.addMethod(ACC_PUBLIC,"hashCode",generator.methodDescr(Integer.TYPE),new ClassGenerator.MethodBody(){
  public void body(  MethodVisitor mv){
    push(data.hashCode());
    mv.visitInsn(IRETURN);
  }
}
).addMethod(ACC_PUBLIC,"getMethodBytecode",generator.methodDescr(List.class),new GetMethodBytecodeMethod(data));addMethod;[ACC_PUBLIC, "equals", generator.methodDescr(Boolean.TYPE,Object.class), new EqualsMethod()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;push;[data.hashCode()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[IRETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeResolver</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypeResolver</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stub</ParamName>
                    <ParamType>InvokerStub</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>workingMemory</ParamName>
                    <ParamType>WorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InternalKnowledgePackage [pkg=workingMemory.getKnowledgeBase().getPackage(stub.getPackageName())]</InnerVar>
                <InnerVar>TypeResolver [typeResolver=pkg == null ? null : pkg.getTypeResolver()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GetMethodBytecodeMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>InvokerDataProvider</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeVirtual;[Object.class, "getClass", Class.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;push;[data.getRuleClassName()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;push;[data.getPackageName()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;push;[data.getMethodName()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;push;[data.getInternalRuleClassName() + ".class"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeStatic;[RuleImpl.class, "getMethodBytecode", List.class, Class.class, String.class, String.class, String.class, String.class]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Label [l1=new Label()]</InnerVar>
                <InnerVar>Label [l2=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFNULL, l1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;instanceOf;[CompiledInvoker.class]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFNE, l2]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[l1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ICONST_0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[IRETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[l2]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeThis;["getMethodBytecode", List.class]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;cast;[CompiledInvoker.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeInterface;[CompiledInvoker.class, "getMethodBytecode", List.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeStatic;[MethodComparator.class, "compareBytecode", Boolean.TYPE, List.class, List.class]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[IRETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>storeObjectFromDeclaration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>declaration</ParamName>
                    <ParamType>Declaration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>registry</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>storeObjectFromDeclaration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>declaration</ParamName>
                    <ParamType>Declaration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declarationType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>registry</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [readMethod=declaration.getNativeReadMethodName()]</InnerVar>
                <InnerVar>boolean [isObject=readMethod.equals("getValue")]</InnerVar>
                <InnerVar>String [expectedTypeDescr=typeDescr(declarationType)]</InnerVar>
                <InnerVar>boolean [needsPrimitive=!(expectedTypeDescr.startsWith("L") || expectedTypeDescr.startsWith("["))]</InnerVar>
                <InnerVar>String [returnedType=isObject ? "Ljava/lang/Object;" : typeDescr(declaration.getTypeName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, Declaration.class.getName().replace('.','/'), readMethod, "(L" + InternalWorkingMemory.class.getName().replace('.','/') + ";Ljava/lang/Object;)"+ returnedType]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>traverseTuplesUntilDeclaration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Tuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>currentTuple</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declarOffset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tupleReg</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>traverseTuplesUntilDeclarationWithOr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>declarIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declarReg</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tupleReg</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declarOffsetReg</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Label [whileStart=new Label()]</InnerVar>
                <InnerVar>Label [whileExit=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, declarReg]</InnerMethodInvoke>
                <InnerMethodInvoke>null;push;[declarIndex]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[AALOAD]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeVirtual;[Declaration.class, "getPattern", Pattern.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeVirtual;[Pattern.class, "getOffset", Integer.TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ISTORE, declarOffsetReg]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[whileStart]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, tupleReg]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeInterface;[Tuple.class, "getIndex", Integer.TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ILOAD, declarOffsetReg]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IF_ICMPLE, whileExit]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, tupleReg]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeInterface;[Tuple.class, "getParent", Tuple.class]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, tupleReg]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, whileStart]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[whileExit]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseDeclarations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>declarations</ParamName>
                    <ParamType>Declaration[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declarReg</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tupleReg</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wmReg</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>readLocalsFromTuple</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int[] [declarationsParamsPos=new int[declarations.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseGlobals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>globals</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globalTypes</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wmReg</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodDescr</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>storeObjectFromDeclaration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>declaration</ParamName>
                    <ParamType>Declaration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declarationType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>