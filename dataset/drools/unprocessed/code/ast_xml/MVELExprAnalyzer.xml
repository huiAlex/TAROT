<Class>
    <Id>1892</Id>
    <Package>org.drools.compiler.rule.builder.dialect.mvel</Package>
    <ClassName>MVELExprAnalyzer</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MVELExprAnalyzer  /** 
 * Expression analyzer.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>MVELExprAnalyzer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>analyzeExpression</MethodName>
            <MethodComment>/** 
 * Analyze an expression.
 * @param expr The expression to analyze.
 * @param availableIdentifiers Total set of declarations available.
 * @return The &lt;code&gt;Set&lt;/code&gt; of declarations used by the expression.
 * @throws RecognitionException If an error occurs in the parser.
 */
</MethodComment>
            <ReturnType>MVELAnalysisResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>PackageBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>availableIdentifiers</ParamName>
                    <ParamType>BoundIdentifiers</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>localTypes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>contextIdentifier</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>kcontextClass</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MVELDialect [dialect=(MVELDialect)context.getDialect("mvel")]</InnerVar>
                <InnerVar>ParserConfiguration [conf=context.getMVELDialectRuntimeData().getParserConfiguration()]</InnerVar>
                <InnerVar>ParserContext [parserContext1=new ParserContext(conf)]</InnerVar>
                <InnerVar>Class&lt;?&gt; [returnType]</InnerVar>
                <InnerVar>Set&lt;String&gt; [requiredInputs=new HashSet&lt;String&gt;()]</InnerVar>
                <InnerVar>HashMap&lt;String,Class&lt;?&gt;&gt; [variables=(HashMap&lt;String,Class&lt;?&gt;&gt;)((Map)parserContext1.getVariables())]</InnerVar>
                <InnerVar>ParserContext [parserContext2=new ParserContext(conf)]</InnerVar>
                <InnerVar>boolean [typesafe=context.isTypesafe()]</InnerVar>
                <InnerVar>MVELAnalysisResult [result=analyze(requiredInputs,availableIdentifiers)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>conf;setClassLoader;[context.getKnowledgeBuilder().getRootClassLoader()]</InnerMethodInvoke>
                <InnerMethodInvoke>parserContext1;setStrictTypeEnforcement;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>parserContext1;setStrongTyping;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>parserContext1;setInterceptors;[dialect.getInterceptors()]</InnerMethodInvoke>
                <InnerMethodInvoke>requiredInputs;addAll;[parserContext1.getInputs().keySet()]</InnerMethodInvoke>
                <InnerMethodInvoke>parserContext2;setStrictTypeEnforcement;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>parserContext2;setStrongTyping;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>parserContext2;setInterceptors;[dialect.getInterceptors()]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setReturnType;[returnType]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setMvelVariables;[variables]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setTypesafe;[typesafe]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>analyze</MethodName>
            <MethodComment>/** 
 * Analyse an expression.
 * @throws RecognitionException If an error occurs in the parser.
 */
</MethodComment>
            <ReturnType>MVELAnalysisResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>identifiers</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>availableIdentifiers</ParamName>
                    <ParamType>BoundIdentifiers</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MVELAnalysisResult [result=new MVELAnalysisResult()]</InnerVar>
                <InnerVar>Set&lt;String&gt; [notBound=new HashSet&lt;String&gt;(identifiers)]</InnerVar>
                <InnerVar>Map&lt;String,Class&lt;?&gt;&gt; [usedDecls=new HashMap&lt;String,Class&lt;?&gt;&gt;()]</InnerVar>
                <InnerVar>Map&lt;String,Class&lt;?&gt;&gt; [usedGlobals=new HashMap&lt;String,Class&lt;?&gt;&gt;()]</InnerVar>
                <InnerVar>Map&lt;String,EvaluatorWrapper&gt; [usedOperators=new HashMap&lt;String,EvaluatorWrapper&gt;()]</InnerVar>
                <InnerVar>BoundIdentifiers [boundIdentifiers=new BoundIdentifiers(usedDecls,availableIdentifiers.getContext(),usedOperators,availableIdentifiers.getThisClass())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>result;setIdentifiers;[identifiers]</InnerMethodInvoke>
                <InnerMethodInvoke>notBound;remove;["this"]</InnerMethodInvoke>
                <InnerMethodInvoke>boundIdentifiers;setGlobals;[usedGlobals]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setBoundIdentifiers;[boundIdentifiers]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setNotBoundedIdentifiers;[notBound]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExpressionType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>PackageBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declCls</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>RuleConditionElement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MVELDialectRuntimeData [data=(MVELDialectRuntimeData)context.getPkg().getDialectRuntimeRegistry().getDialectData("mvel")]</InnerVar>
                <InnerVar>ParserConfiguration [conf=data.getParserConfiguration()]</InnerVar>
                <InnerVar>ParserContext [pctx=new ParserContext(conf)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>conf;setClassLoader;[context.getKnowledgeBuilder().getRootClassLoader()]</InnerMethodInvoke>
                <InnerMethodInvoke>pctx;setStrongTyping;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>pctx;setStrictTypeEnforcement;[true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>