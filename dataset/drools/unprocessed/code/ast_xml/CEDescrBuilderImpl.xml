<Class>
    <Id>1885</Id>
    <Package>org.drools.compiler.lang.api.impl</Package>
    <ClassName>CEDescrBuilderImpl</ClassName>
    <SuperClass>BaseDescrBuilderImpl</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>CEDescrBuilder</SuperInterface>
        <SuperInterface>P</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CEDescrBuilderImpl  /** 
 * An implementation for the CEDescrBuilder
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>CEDescrBuilderImpl</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>P</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>and</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}
 */
</MethodComment>
            <ReturnType>CEDescrBuilder&lt;P,T&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>AndDescr [andDescr=new AndDescr()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((ConditionalElementDescr)descr);addDescr;[andDescr]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>or</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}
 */
</MethodComment>
            <ReturnType>CEDescrBuilder&lt;P,T&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>OrDescr [orDescr=new OrDescr()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((ConditionalElementDescr)descr);addDescr;[orDescr]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>not</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}
 */
</MethodComment>
            <ReturnType>CEDescrBuilder&lt;P,T&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CEDescrBuilder&lt;CEDescrBuilder&lt;P,T&gt;,NotDescr&gt; [not=new CEDescrBuilderImpl&lt;CEDescrBuilder&lt;P,T&gt;,NotDescr&gt;(this,new NotDescr())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((ConditionalElementDescr)descr);addDescr;[not.getDescr()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exists</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}
 */
</MethodComment>
            <ReturnType>CEDescrBuilder&lt;P,T&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CEDescrBuilder&lt;CEDescrBuilder&lt;P,T&gt;,ExistsDescr&gt; [exists=new CEDescrBuilderImpl&lt;CEDescrBuilder&lt;P,T&gt;,ExistsDescr&gt;(this,new ExistsDescr())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((ConditionalElementDescr)descr);addDescr;[exists.getDescr()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forall</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}
 */
</MethodComment>
            <ReturnType>CEDescrBuilder&lt;P,T&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ForallDescrBuilder&lt;CEDescrBuilder&lt;P,T&gt;&gt; [forall=new ForallDescrBuilderImpl&lt;CEDescrBuilder&lt;P,T&gt;&gt;(this)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((ConditionalElementDescr)descr);addDescr;[forall.getDescr()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>accumulate</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}
 */
</MethodComment>
            <ReturnType>CEDescrBuilder&lt;P,T&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>PatternDescrBuilder&lt;CEDescrBuilder&lt;P,T&gt;&gt; [pdb=pattern("Object[]").isQuery(false)]</InnerVar>
                <InnerVar>AccumulateDescrBuilder&lt;CEDescrBuilder&lt;P,T&gt;&gt; [accumulate=new AccumulateDescrBuilderImpl&lt;CEDescrBuilder&lt;P,T&gt;&gt;(this)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>pdb.getDescr();setSource;[accumulate.getDescr()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eval</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}
 */
</MethodComment>
            <ReturnType>CEDescrBuilder&lt;P,T&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>EvalDescrBuilder&lt;CEDescrBuilder&lt;P,T&gt;&gt; [eval=new EvalDescrBuilderImpl&lt;CEDescrBuilder&lt;P,T&gt;&gt;(this)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((ConditionalElementDescr)descr);addDescr;[eval.getDescr()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pattern</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}
 */
</MethodComment>
            <ReturnType>CEDescrBuilder&lt;P,T&gt;</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PatternDescrBuilder&lt;CEDescrBuilder&lt;P,T&gt;&gt; [pattern=new PatternDescrBuilderImpl&lt;CEDescrBuilder&lt;P,T&gt;&gt;(this,type)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((ConditionalElementDescr)descr);addDescr;[pattern.getDescr()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pattern</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}
 */
</MethodComment>
            <ReturnType>CEDescrBuilder&lt;P,T&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>PatternDescrBuilder&lt;CEDescrBuilder&lt;P,T&gt;&gt; [pattern=new PatternDescrBuilderImpl&lt;CEDescrBuilder&lt;P,T&gt;&gt;(this)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((ConditionalElementDescr)descr);addDescr;[pattern.getDescr()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newAnnotation</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}
 */
</MethodComment>
            <ReturnType>CEDescrBuilder&lt;P,T&gt;</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AnnotationDescrBuilder&lt;CEDescrBuilder&lt;P,T&gt;&gt; [annotation=new AnnotationDescrBuilderImpl&lt;CEDescrBuilder&lt;P,T&gt;&gt;(this,name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>descr;addAnnotation;[annotation.getDescr()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>namedConsequence</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}
 */
</MethodComment>
            <ReturnType>CEDescrBuilder&lt;P,T&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>NamedConsequenceDescrBuilder&lt;CEDescrBuilder&lt;P,T&gt;&gt; [namedConsequence=new NamedConsequenceDescrBuilderImpl&lt;CEDescrBuilder&lt;P,T&gt;&gt;(this)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((ConditionalElementDescr)descr);addDescr;[namedConsequence.getDescr()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>conditionalBranch</MethodName>
            <MethodComment>/** 
 * {@inheritDoc}
 */
</MethodComment>
            <ReturnType>CEDescrBuilder&lt;P,T&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ConditionalBranchDescrBuilder&lt;CEDescrBuilder&lt;P,T&gt;&gt; [conditionalBranch=new ConditionalBranchDescrBuilderImpl&lt;CEDescrBuilder&lt;P,T&gt;&gt;(this)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((ConditionalElementDescr)descr);addDescr;[conditionalBranch.getDescr()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>