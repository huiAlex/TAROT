<Class>
    <Id>1210</Id>
    <Package>org.drools.core.factmodel.traits</Package>
    <ClassName>AbstractProxyClassBuilderImpl</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>TraitProxyClassBuilder</SuperInterface>
        <SuperInterface>Serializable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>trait</FieldName>
            <FieldType>ClassDefinition</FieldType>
        </Field>
        <Field>
            <FieldName>proxyBaseClass</FieldName>
            <FieldType>Class</FieldType>
        </Field>
        <Field>
            <FieldName>proxyBaseClass</FieldName>
            <FieldType>?</FieldType>
        </Field>
        <Field>
            <FieldName>traitRegistry</FieldName>
            <FieldType>TraitRegistry</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getTrait</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassDefinition</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>trait</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>baseClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>traitRegistry</ParamName>
                    <ParamType>TraitRegistry</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>helpBuildClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>internalProxy</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>descrCore</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mask</ParamName>
                    <ParamType>BitSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SecurityException</ExceptionType>
                <ExceptionType>IllegalArgumentException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
                <ExceptionType>NoSuchMethodException</ExceptionType>
                <ExceptionType>IllegalAccessException</ExceptionType>
                <ExceptionType>InvocationTargetException</ExceptionType>
                <ExceptionType>InstantiationException</ExceptionType>
                <ExceptionType>NoSuchFieldException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildShadowMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trait</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>m</ParamName>
                    <ParamType>Method</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=cw.visitMethod(ACC_PUBLIC,m.getName(),Type.getMethodDescriptor(m),null,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, BuildUtils.getInternalType(TraitFactory.getProxyName(trait,core)), "getCore", Type.getMethodDescriptor(Type.getType(core.getDefinedClass())), false]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, Type.getInternalName(core.getDefinedClass()), m.getName(), Type.getMethodDescriptor(m), core.getDefinedClass().isInterface()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[BuildUtils.returnType(m.getReturnType().getName())]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shedField</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fld</ParamName>
                    <ParamType>FieldDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>proxyName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hardField</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>j</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FieldDefinition [coreField=core.getFieldByAlias(fld.resolveAlias())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, BuildUtils.getInternalType(proxyName), "object", Type.getDescriptor(core.getDefinedClass())]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[CHECKCAST, Type.getInternalName(TraitableBean.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(TraitableBean.class), "_getFieldTMS", Type.getMethodDescriptor(Type.getType(TraitFieldTMS.class)), true]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLdcInsn;[fld.resolveAlias()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(TraitFieldTMS.class), "shedField", Type.getMethodDescriptor(Type.getType(Object.class),Type.getType(String.class),Type.getType(TraitType.class),Type.getType(Class.class),Type.getType(Class.class)), true]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, j]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fixPrimitive</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>coreField</ParamName>
                    <ParamType>FieldDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>j</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildHardSetter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>FieldDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>masterName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trait</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>setterName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>accessMode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=cw.visitMethod(accessMode,setterName,"(" + Type.getDescriptor(field.getType()) + ")V",null,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>TraitFactory;invokeInjector;[mv, masterName, core, field, false, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[RETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synchFieldLogical</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fld</ParamName>
                    <ParamType>FieldDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>proxyName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>j</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, BuildUtils.getInternalType(proxyName), "object", Type.getDescriptor(core.getDefinedClass())]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[CHECKCAST, Type.getInternalName(TraitableBean.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(TraitableBean.class), "_getFieldTMS", Type.getMethodDescriptor(Type.getType(TraitFieldTMS.class)), true]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLdcInsn;[fld.resolveAlias()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ILOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(TraitFieldTMS.class), "donField", Type.getMethodDescriptor(Type.getType(Object.class),Type.getType(String.class),Type.getType(TraitType.class),Type.getType(String.class),Type.getType(Class.class),Type.BOOLEAN_TYPE), true]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, j]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, j]</InnerMethodInvoke>
                <InnerMethodInvoke>null;fixPrimitive;[mv, fld, j]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, BuildUtils.getInternalType(proxyName), BuildUtils.setterName(fld.getName(),fld.getTypeName()), "(" + BuildUtils.getTypeDescriptor(fld.getTypeName()) + ")"+ Type.getDescriptor(void.class), false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synchField</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fld</ParamName>
                    <ParamType>FieldDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>proxyName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Label [l0=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, BuildUtils.getInternalType(proxyName), BuildUtils.getterName(fld.getName(),fld.getTypeName()), "()" + BuildUtils.getTypeDescriptor(fld.getTypeName()), false]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLdcInsn;[fld.getInitExpr()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESTATIC, Type.getInternalName(MVEL.class), "eval", Type.getMethodDescriptor(Type.getType(Object.class),Type.getType(String.class),Type.getType(Class.class)), false]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, BuildUtils.getInternalType(proxyName), BuildUtils.setterName(fld.getName(),fld.getTypeName()), "(" + BuildUtils.getTypeDescriptor(fld.getTypeName()) + ")"+ Type.getDescriptor(void.class), false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildSynchFields</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>proxyName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trait</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>logicalSetter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>FieldDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>masterName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [fieldType=field.getTypeName()]</InnerVar>
                <InnerVar>int [reg=1 + BuildUtils.sizeOf(fieldType)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, BuildUtils.getInternalType(masterName), "object", Type.getDescriptor(core.getDefinedClass())]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[CHECKCAST, Type.getInternalName(TraitableBean.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(TraitableBean.class), "_getFieldTMS", Type.getMethodDescriptor(Type.getType(TraitFieldTMS.class)), true]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, reg]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, reg]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLdcInsn;[field.resolveAlias()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(TraitFieldTMS.class), "set", Type.getMethodDescriptor(Type.getType(Object.class),Type.getType(String.class),Type.getType(Object.class),Type.getType(Class.class)), true]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildLogicalGetter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>FieldDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>proxy</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [fieldName=field.getName()]</InnerVar>
                <InnerVar>String [fieldType=field.getTypeName()]</InnerVar>
                <InnerVar>String [getter=BuildUtils.getterName(fieldName,fieldType)]</InnerVar>
                <InnerVar>MethodVisitor [mv=cw.visitMethod(ACC_PUBLIC,getter,"()" + BuildUtils.getTypeDescriptor(fieldType),null,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, BuildUtils.getInternalType(proxy), "object", Type.getDescriptor(core.getDefinedClass())]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[CHECKCAST, Type.getInternalName(TraitableBean.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(TraitableBean.class), "_getFieldTMS", Type.getMethodDescriptor(Type.getType(TraitFieldTMS.class)), true]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLdcInsn;[field.resolveAlias()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(TraitFieldTMS.class), "get", Type.getMethodDescriptor(Type.getType(Object.class),Type.getType(String.class),Type.getType(Class.class)), true]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>helpSet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>FieldDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>masterName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FieldDefinition [hardField=core.getFieldByAlias(field.resolveAlias())]</InnerVar>
                <InnerVar>boolean [isHardField=field.getTypeName().equals(hardField.getTypeName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildKeyedEqualityMethods</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trait</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>proxy</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [proxyType=BuildUtils.getInternalType(proxy)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;buildKeyedEquals;[cw, trait, proxyType]</InnerMethodInvoke>
                <InnerMethodInvoke>null;buildKeyedHashCode;[cw, trait, proxyType]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildKeyedHashCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trait</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>proxyType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildKeyedEquals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trait</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>proxyType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildEqualityMethods</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>proxy</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>core</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPossibleConstructor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Class</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>klass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arg</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Constructor[] [ctors=klass.getConstructors()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>NoSuchMethodException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>