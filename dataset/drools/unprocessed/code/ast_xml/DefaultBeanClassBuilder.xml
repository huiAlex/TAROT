<Class>
    <Id>189</Id>
    <Package>org.drools.core.factmodel</Package>
    <ClassName>DefaultBeanClassBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Opcodes</SuperInterface>
        <SuperInterface>BeanClassBuilder</SuperInterface>
        <SuperInterface>Serializable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DefaultBeanClassBuilder  /** 
 * A builder to dynamically build simple Javabean(TM) classes
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>debug</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DefaultBeanClassBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DefaultBeanClassBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>debug</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildClass</MethodName>
            <MethodComment>/** 
 * Dynamically builds, defines and loads a class based on the given class definition
 * @param classDef the class definition object structure
 * @return the Class instance for the given class definition
 * @throws IOException
 * @throws InvocationTargetException
 * @throws IllegalAccessException
 * @throws NoSuchMethodException
 * @throws ClassNotFoundException
 * @throws IllegalArgumentException
 * @throws SecurityException
 * @throws NoSuchFieldException
 * @throws InstantiationException
 */
</MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassWriter [cw=this.buildClassHeader(classLoader,classDef)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this;buildFields;[cw, classDef]</InnerMethodInvoke>
                <InnerMethodInvoke>this;buildConstructors;[cw, classDef]</InnerMethodInvoke>
                <InnerMethodInvoke>this;buildGettersAndSetters;[cw, classDef]</InnerMethodInvoke>
                <InnerMethodInvoke>this;buildEqualityMethods;[cw, classDef]</InnerMethodInvoke>
                <InnerMethodInvoke>this;buildToString;[cw, classDef]</InnerMethodInvoke>
                <InnerMethodInvoke>cw;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SecurityException</ExceptionType>
                <ExceptionType>IllegalArgumentException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
                <ExceptionType>NoSuchMethodException</ExceptionType>
                <ExceptionType>IllegalAccessException</ExceptionType>
                <ExceptionType>InvocationTargetException</ExceptionType>
                <ExceptionType>InstantiationException</ExceptionType>
                <ExceptionType>NoSuchFieldException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildSerializationMethods</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildGettersAndSetters</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildEqualityMethods</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [hasKey=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildFields</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>implementReactivity</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [LEFT_TUPLES_FIELD_NAME="_lts"]</InnerVar>
                <InnerVar>String [TYPE_NAME=BuildUtils.getInternalType(classDef.getClassName())]</InnerVar>
                <InnerVar>FieldVisitor [fv]</InnerVar>
                <InnerVar>MethodVisitor [mv]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildConstructors</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;FieldDefinition&gt; [keys=new LinkedList&lt;FieldDefinition&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildTraitMap</MethodName>
            <MethodComment>/** 
 * A traitable class is a special class with support for dynamic properties and types. This method builds the trait map, containing the references to the proxies for each trait carried by an object at a given time.
 * @param cw
 * @param classDef
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FieldVisitor [fv=cw.visitField(ACC_PRIVATE,TraitableBean.TRAITSET_FIELD_NAME,Type.getDescriptor(Map.class),"Ljava/util/Map&lt;Ljava/lang/String;Lorg/drools/core/factmodel/traits/Thing;&gt;;",null)]</InnerVar>
                <InnerVar>MethodVisitor [mv]</InnerVar>
                <InnerVar>Label [l0=new Label()]</InnerVar>
                <InnerVar>Label [l5=new Label()]</InnerVar>
                <InnerVar>Label [l4=new Label()]</InnerVar>
                <InnerVar>Label [l99=new Label()]</InnerVar>
                <InnerVar>Label [l3=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fv;visitEnd;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, BuildUtils.getInternalType(classDef.getName()), TraitableBean.TRAITSET_FIELD_NAME, Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[PUTFIELD, BuildUtils.getInternalType(classDef.getName()), TraitableBean.TRAITSET_FIELD_NAME, Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[RETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, BuildUtils.getInternalType(classDef.getName()), "_getTraitMap", Type.getMethodDescriptor(Type.getType(Map.class),new Type[]{})]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(Map.class), "put", Type.getMethodDescriptor(Type.getType(Object.class),new Type[]{Type.getType(Object.class),Type.getType(Object.class)})]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[POP]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[RETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, BuildUtils.getInternalType(classDef.getName()), "_getTraitMap", Type.getMethodDescriptor(Type.getType(Map.class),new Type[]{})]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(Map.class), "get", Type.getMethodDescriptor(Type.getType(Object.class),new Type[]{Type.getType(Object.class)})]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[CHECKCAST, Type.getInternalName(Thing.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, BuildUtils.getInternalType(classDef.getName()), "_getTraitMap", Type.getMethodDescriptor(Type.getType(Map.class),new Type[]{})]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFNONNULL, l0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ICONST_0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[IRETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[l0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, BuildUtils.getInternalType(classDef.getName()), "_getTraitMap", Type.getMethodDescriptor(Type.getType(Map.class),new Type[]{})]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(Map.class), "containsKey", Type.getMethodDescriptor(Type.getType(boolean.class),new Type[]{Type.getType(Object.class)})]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[IRETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, BuildUtils.getInternalType(classDef.getName()), TraitableBean.TRAITSET_FIELD_NAME, Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFNULL, l5]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, BuildUtils.getInternalType(classDef.getName()), TraitableBean.TRAITSET_FIELD_NAME, Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(Map.class), "isEmpty", Type.getMethodDescriptor(Type.BOOLEAN_TYPE,new Type[]{})]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFNE, l5]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ICONST_1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, l4]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[l5]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ICONST_0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[l4]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[IRETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, BuildUtils.getInternalType(classDef.getName()), "_getTraitMap", Type.getMethodDescriptor(Type.getType(Map.class),new Type[]{})]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[CHECKCAST, Type.getInternalName(TraitTypeMap.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, Type.getInternalName(TraitTypeMap.class), "removeCascade", Type.getMethodDescriptor(Type.getType(Collection.class),new Type[]{Type.getType(String.class)})]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, BuildUtils.getInternalType(classDef.getName()), "_getTraitMap", Type.getMethodDescriptor(Type.getType(Map.class),new Type[]{})]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[CHECKCAST, Type.getInternalName(TraitTypeMap.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, Type.getInternalName(TraitTypeMap.class), "removeCascade", Type.getMethodDescriptor(Type.getType(Collection.class),new Type[]{Type.getType(BitSet.class)})]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, BuildUtils.getInternalType(classDef.getName()), "_getTraitMap", Type.getMethodDescriptor(Type.getType(Map.class),new Type[]{})]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(Map.class), "keySet", Type.getMethodDescriptor(Type.getType(Set.class),new Type[]{})]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, BuildUtils.getInternalType(classDef.getName()), TraitableBean.TRAITSET_FIELD_NAME, Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[CHECKCAST, Type.getInternalName(TraitTypeMap.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, Type.getInternalName(TraitTypeMap.class), "setBottomCode", Type.getMethodDescriptor(Type.getType(void.class),new Type[]{Type.getType(BitSet.class)})]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[RETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, BuildUtils.getInternalType(classDef.getName()), TraitableBean.TRAITSET_FIELD_NAME, Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFNULL, l99]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, BuildUtils.getInternalType(classDef.getName()), TraitableBean.TRAITSET_FIELD_NAME, Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[CHECKCAST, Type.getInternalName(TraitTypeMap.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, Type.getInternalName(TraitTypeMap.class), "getMostSpecificTraits", Type.getMethodDescriptor(Type.getType(Collection.class),new Type[]{})]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[l99]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESTATIC, Type.getInternalName(Collections.class), "emptySet", Type.getMethodDescriptor(Type.getType(Set.class),new Type[]{})]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESTATIC, Type.getInternalName(Collections.class), "unmodifiableCollection", Type.getMethodDescriptor(Type.getType(Collection.class),new Type[]{Type.getType(Collection.class)})]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, BuildUtils.getInternalType(classDef.getName()), TraitableBean.TRAITSET_FIELD_NAME, Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFNONNULL, l3]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ACONST_NULL]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[l3]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, BuildUtils.getInternalType(classDef.getName()), TraitableBean.TRAITSET_FIELD_NAME, Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[CHECKCAST, Type.getInternalName(TraitTypeMap.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEVIRTUAL, Type.getInternalName(TraitTypeMap.class), "getCurrentTypeCode", Type.getMethodDescriptor(Type.getType(BitSet.class),new Type[]{})]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildDynamicPropertyMap</MethodName>
            <MethodComment>/** 
 * A traitable class is a special class with support for dynamic properties and types. This method builds the property map, containing the key/values pairs to implement any property defined in a trait interface but not supported by the traited class fields.
 * @param cw
 * @param def
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>def</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FieldVisitor [fv=cw.visitField(Opcodes.ACC_PRIVATE,TraitableBean.MAP_FIELD_NAME,Type.getDescriptor(Map.class),"Ljava/util/Map&lt;Ljava/lang/String;Ljava/lang/Object;&gt;;",null)]</InnerVar>
                <InnerVar>MethodVisitor [mv=cw.visitMethod(Opcodes.ACC_PUBLIC,"_getDynamicProperties",Type.getMethodDescriptor(Type.getType(Map.class),new Type[]{}),"()Ljava/util/Map&lt;Ljava/lang/String;Ljava/lang/Object;&gt;;",null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fv;visitEnd;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, BuildUtils.getInternalType(def.getName()), TraitableBean.MAP_FIELD_NAME, Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[PUTFIELD, BuildUtils.getInternalType(def.getName()), TraitableBean.MAP_FIELD_NAME, Type.getDescriptor(Map.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[RETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildFieldTMS</MethodName>
            <MethodComment>/** 
 * A traitable class is a special class with support for dynamic properties and types. A traitable class in logical mode provides additional control over the values and type(s) of its fields.
 * @param cw
 * @param def
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassWriter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>def</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FieldVisitor [fv=cw.visitField(Opcodes.ACC_PRIVATE,TraitableBean.FIELDTMS_FIELD_NAME,Type.getDescriptor(TraitFieldTMS.class),null,null)]</InnerVar>
                <InnerVar>MethodVisitor [mv=cw.visitMethod(Opcodes.ACC_PUBLIC,"_getFieldTMS",Type.getMethodDescriptor(Type.getType(TraitFieldTMS.class),new Type[]{}),null,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fv;visitEnd;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, BuildUtils.getInternalType(def.getName()), TraitableBean.FIELDTMS_FIELD_NAME, Type.getDescriptor(TraitFieldTMS.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[PUTFIELD, BuildUtils.getInternalType(def.getName()), TraitableBean.FIELDTMS_FIELD_NAME, Type.getDescriptor(TraitFieldTMS.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[RETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildClassHeader</MethodName>
            <MethodComment>/** 
 * Defines the class header for the given class definition
 */
</MethodComment>
            <ReturnType>ClassWriter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [reactive=classDef.isReactive()]</InnerVar>
                <InnerVar>String[] [original=classDef.getInterfaces()]</InnerVar>
                <InnerVar>int [interfacesNr=original.length + (reactive ? 2 : 1)]</InnerVar>
                <InnerVar>String[] [interfaces=new String[interfacesNr]]</InnerVar>
                <InnerVar>int [classModifiers=Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER]</InnerVar>
                <InnerVar>ClassWriter [cw=createClassWriter(classLoader,classModifiers,BuildUtils.getInternalType(classDef.getClassName()),null,BuildUtils.getInternalType(classDef.getSuperClass()),interfaces)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;buildClassAnnotations;[classDef, cw]</InnerMethodInvoke>
                <InnerMethodInvoke>cw;visitSource;[classDef.getClassName() + ".java", null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildField</MethodName>
            <MethodComment>/** 
 * Creates the field defined by the given FieldDefinition
 * @param cw
 * @param fieldDef
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldDef</ParamName>
                    <ParamType>FieldDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FieldVisitor [fv=cw.visitField(Opcodes.ACC_PROTECTED,fieldDef.getName(),BuildUtils.getTypeDescriptor(fieldDef.getTypeName()),null,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;buildFieldAnnotations;[fieldDef, fv]</InnerMethodInvoke>
                <InnerMethodInvoke>fv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildDefaultConstructor</MethodName>
            <MethodComment>/** 
 * Creates a default constructor for the class
 * @param cw
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=cw.visitMethod(Opcodes.ACC_PUBLIC,"&lt;init&gt;",Type.getMethodDescriptor(Type.VOID_TYPE,new Type[]{}),null,null)]</InnerVar>
                <InnerVar>Label [l0=null]</InnerVar>
                <InnerVar>boolean [hasObjects=defaultConstructorStart(mv,classDef)]</InnerVar>
                <InnerVar>Label [l1=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[Opcodes.RETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>defaultConstructorStart</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [sup=""]</InnerVar>
                <InnerVar>boolean [hasObjects=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[Opcodes.ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[Opcodes.INVOKESPECIAL, sup, "&lt;init&gt;", Type.getMethodDescriptor(Type.VOID_TYPE,new Type[]{})]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initFieldWithDefaultValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>FieldDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [val=BuildUtils.getDefaultValue(field)]</InnerVar>
                <InnerVar>boolean [hasObjects=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initializeDynamicTypeStructures</MethodName>
            <MethodComment>/** 
 * Initializes the trait map and dynamic property map to empty values
 * @param mv
 * @param classDef
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildConstructorWithFields</MethodName>
            <MethodComment>/** 
 * Creates a constructor that takes and assigns values to all fields in the order they are declared.
 * @param cw
 * @param classDef
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldDefs</ParamName>
                    <ParamType>FieldDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Type[] [params=new Type[fieldDefs.size()]]</InnerVar>
                <InnerVar>int [index=0]</InnerVar>
                <InnerVar>MethodVisitor [mv=cw.visitMethod(Opcodes.ACC_PUBLIC,"&lt;init&gt;",Type.getMethodDescriptor(Type.VOID_TYPE,params),null,null)]</InnerVar>
                <InnerVar>Label [l0=null]</InnerVar>
                <InnerVar>Label [l1=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitCode;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;fieldConstructorStart;[mv, classDef, fieldDefs]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[Opcodes.RETURN]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMaxs;[0, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitEnd;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fieldConstructorStart</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldDefs</ParamName>
                    <ParamType>FieldDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [sup=""]</InnerVar>
                <InnerVar>int [index=1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[Opcodes.ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[Opcodes.INVOKESPECIAL, sup, "&lt;init&gt;", Type.getMethodDescriptor(Type.VOID_TYPE,new Type[]{})]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildSetMethod</MethodName>
            <MethodComment>/** 
 * Creates the set method for the given field definition
 * @param cw
 * @param classDef
 * @param fieldDef
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldDef</ParamName>
                    <ParamType>FieldDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildGetMethod</MethodName>
            <MethodComment>/** 
 * Creates the get method for the given field definition
 * @param cw
 * @param classDef
 * @param fieldDef
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldDef</ParamName>
                    <ParamType>FieldDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildEquals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildSystemHashCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildHashCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildToString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildFieldsToString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>previous</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [first=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildFieldToString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>FieldDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>first</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;appendToStringBuilder;[mv, field.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;appendToStringBuilder;[mv, "="]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>appendToStringBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitLdcInsn;[s]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[Opcodes.INVOKEVIRTUAL, Type.getInternalName(StringBuilder.class), "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildClassAnnotations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cw</ParamName>
                    <ParamType>ClassVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildFieldAnnotations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fieldDef</ParamName>
                    <ParamType>FieldDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fv</ParamName>
                    <ParamType>FieldVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addAnnotationAttribute</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ad</ParamName>
                    <ParamType>AnnotationDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>av</ParamName>
                    <ParamType>AnnotationVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitFieldOrGetter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>FieldDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateTraitableField</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>ClassDefinition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldDef</ParamName>
                    <ParamType>FieldDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [fieldType=fieldDef.getTypeName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitFieldInsn;[GETFIELD, BuildUtils.getInternalType(classDef.getClassName()), TraitableBean.FIELDTMS_FIELD_NAME, Type.getDescriptor(TraitFieldTMS.class)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLdcInsn;[fieldDef.resolveAlias()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKEINTERFACE, Type.getInternalName(TraitFieldTMS.class), "set", Type.getMethodDescriptor(Type.getType(Object.class),new Type[]{Type.getType(String.class),Type.getType(Object.class),Type.getType(Class.class)})]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>