<Class>
    <Id>496</Id>
    <Package>org.drools.core.reteoo.compiled</Package>
    <ClassName>DeclarationsHandler</ClassName>
    <SuperClass>AbstractCompilerHandler</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DeclarationsHandler  /** 
 * This handler is used to create the member declarations section of a generated subclass of a  {@link CompiledNetwork}. Currently we only create member variables for the following types of nodes: &lt;p/&gt; &lt;li&gt;Non-hashed  {@link AlphaNode}s&lt;/li&gt; &lt;li&gt; {@link LeftInputAdapterNode}s&lt;/li&gt; &lt;li&gt; {@link BetaNode}s&lt;/li&gt; &lt;li&gt;A  {@link Map} for each set of hashed {@link AlphaNode}s. The keys are the hashed values, and the values are the IDs of the alphas&lt;/li&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>PRIVATE_MODIFIER</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>currentHashedAlpha</FieldName>
            <FieldType>HashedAlphasDeclaration</FieldType>
        </Field>
        <Field>
            <FieldName>builder</FieldName>
            <FieldType>StringBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>hashedAlphaDeclarations</FieldName>
            <FieldType>Collection</FieldType>
        </Field>
        <Field>
            <FieldName>hashedAlphaDeclarations</FieldName>
            <FieldType>HashedAlphasDeclaration</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DeclarationsHandler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getVariableDeclaration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>alphaNode</ParamName>
                    <ParamType>AlphaNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [variableType=getVariableType(alphaNode)]</InnerVar>
                <InnerVar>String [variableName=getVariableName(alphaNode)]</InnerVar>
                <InnerVar>String [comment=alphaNode.toString()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContextVariableDeclaration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>alphaNode</ParamName>
                    <ParamType>AlphaNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [variableType=ContextEntry.class]</InnerVar>
                <InnerVar>String [variableName=getContextVariableName(alphaNode)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getVariableDeclaration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sink</ParamName>
                    <ParamType>Sink</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [declarationType=getVariableType(sink)]</InnerVar>
                <InnerVar>String [variableName=getVariableName(sink)]</InnerVar>
                <InnerVar>String [comment=sink.toString()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getVariableDeclaration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fieldReader</ParamName>
                    <ParamType>ClassFieldReader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [declarationType=Map.class]</InnerVar>
                <InnerVar>Class&lt;?&gt; [createType=HashMap.class]</InnerVar>
                <InnerVar>String [variableName=getVariableName(fieldReader)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getHashedAlphaDeclarations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>HashedAlphasDeclaration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startNonHashedAlphaNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>alphaNode</ParamName>
                    <ParamType>AlphaNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder.append(getVariableDeclaration(alphaNode));append;[NEWLINE]</InnerMethodInvoke>
                <InnerMethodInvoke>builder.append(getContextVariableDeclaration(alphaNode));append;[NEWLINE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startBetaNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>betaNode</ParamName>
                    <ParamType>BetaNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder.append(getVariableDeclaration(betaNode));append;[NEWLINE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startLeftInputAdapterNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leftInputAdapterNode</ParamName>
                    <ParamType>LeftInputAdapterNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder.append(getVariableDeclaration(leftInputAdapterNode));append;[NEWLINE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startHashedAlphaNodes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>hashedFieldReader</ParamName>
                    <ParamType>ClassFieldReader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>hashedAlphaDeclarations;add;[currentHashedAlpha]</InnerMethodInvoke>
                <InnerMethodInvoke>builder.append(getVariableDeclaration(hashedFieldReader));append;[NEWLINE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startHashedAlphaNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>hashedAlpha</ParamName>
                    <ParamType>AlphaNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hashedValue</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>currentHashedAlpha;add;[hashedValue, String.valueOf(hashedAlpha.getId())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>