<Class>
    <Id>3103</Id>
    <Package>org.drools.workbench.models.testscenarios.backend</Package>
    <ClassName>RuleUnit</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RuleUnit  /** 
 * A class with some utilities for testing rules.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getKieSession</MethodName>
            <MethodComment>/** 
 * Return a wm ready to go based on the rules in a drl at the specified uri (in the classpath).
 */
</MethodComment>
            <ReturnType>KieSession</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uri</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>KieServices [ks=KieServices.Factory.get()]</InnerVar>
                <InnerVar>KieFileSystem [kfs=ks.newKieFileSystem().write(ResourceFactory.newClassPathResource(uri,getClass())).writeKModuleXML(createKieProjectWithPackages(ks).toXML())]</InnerVar>
                <InnerVar>KieBuilder [builder=ks.newKieBuilder(kfs).buildAll()]</InnerVar>
                <InnerVar>List&lt;Message&gt; [results=builder.getResults().getMessages()]</InnerVar>
                <InnerVar>KieSession [ksession=ks.newKieContainer(ks.getRepository().getDefaultReleaseId()).newKieSession()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertTrue;[results.toString(), results.isEmpty()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>DroolsParserException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createKieProjectWithPackages</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KieModuleModel</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ks</ParamName>
                    <ParamType>KieServices</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>KieModuleModel [kproj=ks.newKieModuleModel()]</InnerVar>
                <InnerVar>KieBaseModel [kieBaseModel1=kproj.newKieBaseModel("KBase1").setEventProcessingMode(EventProcessingOption.STREAM).addPackage("*").setDefault(true)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>kieBaseModel1.newKieSessionModel("KSession1").setType(KieSessionModel.KieSessionType.STATEFUL).setClockType(ClockTypeOption.get("pseudo"));setDefault;[true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>