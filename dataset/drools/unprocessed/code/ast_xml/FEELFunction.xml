<Class>
    <Id>3</Id>
    <Package>org.kie.dmn.feel.runtime</Package>
    <ClassName>FEELFunction</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>FEELFunction  /** 
 * An interface for all FEEL functions, custom or built-in
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment>/** 
 * Returns the name of the function
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSymbol</MethodName>
            <MethodComment>/** 
 * Returns the Symbol of the function
 * @return
 */
</MethodComment>
            <ReturnType>Symbol</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParameterNames</MethodName>
            <MethodComment>/** 
 * Returns the parameter names for each supported signature.
 * @return a List of Lists of Strings with the parameter names. Fora function with multiple signatures, each element of the list returns the names of the parameters of one signature. E.g.: the substring function has 2 supported signatures: substring( string, start position ) substring( string, start position, length ) So this method will return: { { "string", "start position" }, { "string", "start position", "length" } }
 */
</MethodComment>
            <ReturnType>List&lt;String&gt;</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invokeReflectively</MethodName>
            <MethodComment>/** 
 * Invokes the function reflectively based on the parameters
 * @param ctx
 * @param params
 * @return
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>EvaluationContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>