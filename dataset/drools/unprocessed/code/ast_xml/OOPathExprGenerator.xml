<Class>
    <Id>2243</Id>
    <Package>org.drools.modelcompiler.builder.generator</Package>
    <ClassName>OOPathExprGenerator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>context</FieldName>
            <FieldType>RuleContext</FieldType>
        </Field>
        <Field>
            <FieldName>packageModel</FieldName>
            <FieldType>PackageModel</FieldType>
        </Field>
        <Field>
            <FieldName>expressionBuilder</FieldName>
            <FieldType>AbstractExpressionBuilder</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>OOPathExprGenerator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageModel</ParamName>
                    <ParamType>PackageModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>originalClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>originalBind</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>patternParseResult</ParamName>
                    <ParamType>DrlxParseSuccess</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>OOPathExpr [ooPathExpr=(OOPathExpr)patternParseResult.getExpr()]</InnerVar>
                <InnerVar>Class&lt;?&gt; [previousClass=originalClass]</InnerVar>
                <InnerVar>String [previousBind=originalBind]</InnerVar>
                <InnerVar>Map&lt;String,List&lt;DrlxParseResult&gt;&gt; [ooPathConditionExpressions=new LinkedHashMap&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ooPathConditionExpressions;forEach;[context.isPatternDSL() ? this::toPatternExpr : this::toFlowExpr]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toPatternExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bindingId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>list</ParamName>
                    <ParamType>DrlxParseResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodCallExpr [patternExpr=new MethodCallExpr(null,"pattern")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>patternExpr;addArgument;[toVar(bindingId)]</InnerMethodInvoke>
                <InnerMethodInvoke>context;addExpression;[patternExpr]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toFlowExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bindingId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>list</ParamName>
                    <ParamType>DrlxParseResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;DrlxParseSuccess&gt; [value=list.stream().filter(r -&gt; r instanceof DrlxParseSuccess).map(DrlxParseSuccess.class::cast).collect(Collectors.toList())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>