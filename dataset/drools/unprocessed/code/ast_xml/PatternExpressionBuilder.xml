<Class>
    <Id>2906</Id>
    <Package>org.drools.modelcompiler.builder.generator.expression</Package>
    <ClassName>PatternExpressionBuilder</ClassName>
    <SuperClass>AbstractExpressionBuilder</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>ALPHA_INDEXED_BY_CALL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BETA_INDEXED_BY_CALL</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PatternExpressionBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildExpressionWithIndexing</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drlxParseResult</ParamName>
                    <ParamType>DrlxParseSuccess</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [exprId=drlxParseResult.getExprId()]</InnerVar>
                <InnerVar>MethodCallExpr [exprDSL=new MethodCallExpr(null,EXPR_CALL)]</InnerVar>
                <InnerVar>MethodCallExpr [finalExprDSL=exprDSL]</InnerVar>
                <InnerVar>Optional&lt;MethodCallExpr&gt; [indexedByExpr=buildIndexedBy(drlxParseResult)]</InnerVar>
                <InnerVar>Optional&lt;MethodCallExpr&gt; [reactOnDSL=buildReactOn(drlxParseResult)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>indexedByExpr;ifPresent;[finalExprDSL::addArgument]</InnerMethodInvoke>
                <InnerMethodInvoke>reactOnDSL;ifPresent;[finalExprDSL::addArgument]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodCallExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drlxParseResult</ParamName>
                    <ParamType>DrlxParseSuccess</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>exprDSL</ParamName>
                    <ParamType>MethodCallExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;String&gt; [usedDeclarationsWithUnification=new ArrayList&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>usedDeclarationsWithUnification;addAll;[drlxParseResult.getUsedDeclarations()]</InnerMethodInvoke>
                <InnerMethodInvoke>usedDeclarationsWithUnification.stream().filter(s -&gt; !(drlxParseResult.isSkipThisAsParam() &amp;&amp; s.equals(drlxParseResult.getPatternBinding()))).map(x -&gt; QueryGenerator.substituteBindingWithQueryParameter(context,x));forEach;[exprDSL::addArgument]</InnerMethodInvoke>
                <InnerMethodInvoke>exprDSL;addArgument;[buildConstraintExpression(drlxParseResult,drlxParseResult.getExpr())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildReactOn</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodCallExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drlxParseResult</ParamName>
                    <ParamType>DrlxParseSuccess</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildBinding</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodCallExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drlxParseResult</ParamName>
                    <ParamType>DrlxParseSuccess</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodCallExpr [bindDSL=new MethodCallExpr(null,BIND_CALL)]</InnerVar>
                <InnerVar>Expression [constraintExpression=drlxParseResult.getExpr() instanceof EnclosedExpr ? buildConstraintExpression(drlxParseResult,((EnclosedExpr)drlxParseResult.getExpr()).getInner()) : buildConstraintExpression(drlxParseResult,drlxParseResult.getUsedDeclarationsOnLeft(),DrlxParseUtil.findLeftLeafOfMethodCall(drlxParseResult.getLeft().getExpression()))]</InnerVar>
                <InnerVar>Optional&lt;MethodCallExpr&gt; [methodCallExpr=buildReactOn(drlxParseResult)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>bindDSL;addArgument;[constraintExpression]</InnerMethodInvoke>
                <InnerMethodInvoke>methodCallExpr;ifPresent;[bindDSL::addArgument]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildConstraintExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drlxParseResult</ParamName>
                    <ParamType>DrlxParseSuccess</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildConstraintExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drlxParseResult</ParamName>
                    <ParamType>DrlxParseSuccess</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>usedDeclarations</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildIndexedBy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodCallExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drlxParseResult</ParamName>
                    <ParamType>DrlxParseSuccess</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>IndexUtil.ConstraintType [decodeConstraintType=drlxParseResult.getDecodeConstraintType()]</InnerVar>
                <InnerVar>TypedExpression [left=drlxParseResult.getLeft()]</InnerVar>
                <InnerVar>TypedExpression [right=drlxParseResult.getRight()]</InnerVar>
                <InnerVar>Class&lt;?&gt; [indexType=Stream.of(left,right).map(TypedExpression::getType).filter(Objects::nonNull).findFirst().get()]</InnerVar>
                <InnerVar>ClassExpr [indexedBy_indexedClass=new ClassExpr(JavaParser.parseType(indexType.getCanonicalName()))]</InnerVar>
                <InnerVar>FieldAccessExpr [indexedBy_constraintType=new FieldAccessExpr(new NameExpr("org.drools.model.Index.ConstraintType"),decodeConstraintType.toString())]</InnerVar>
                <InnerVar>LambdaExpr [indexedBy_leftOperandExtractor=new LambdaExpr()]</InnerVar>
                <InnerVar>boolean [leftContainsThis=left.getExpression().toString().contains("_this")]</InnerVar>
                <InnerVar>MethodCallExpr [indexedByDSL=new MethodCallExpr(null,drlxParseResult.isBetaNode() ? BETA_INDEXED_BY_CALL : ALPHA_INDEXED_BY_CALL)]</InnerVar>
                <InnerVar>Collection&lt;String&gt; [usedDeclarations=drlxParseResult.getUsedDeclarations()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>indexedBy_leftOperandExtractor;addParameter;[new Parameter(new UnknownType(),"_this")]</InnerMethodInvoke>
                <InnerMethodInvoke>indexedBy_leftOperandExtractor;setBody;[new ExpressionStmt(leftContainsThis ? left.getExpression() : right.getExpression())]</InnerMethodInvoke>
                <InnerMethodInvoke>indexedByDSL;addArgument;[indexedBy_indexedClass]</InnerMethodInvoke>
                <InnerMethodInvoke>indexedByDSL;addArgument;[indexedBy_constraintType]</InnerMethodInvoke>
                <InnerMethodInvoke>indexedByDSL;addArgument;["" + indexIdGenerator.getFieldId(drlxParseResult.getPatternType(),left.getFieldName())]</InnerMethodInvoke>
                <InnerMethodInvoke>indexedByDSL;addArgument;[indexedBy_leftOperandExtractor]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateLambdaWithoutParameters</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>usedDeclarations</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>skipFirstParamAsThis</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LambdaExpr [lambdaExpr=new LambdaExpr()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>lambdaExpr;setEnclosingParameters;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>usedDeclarations.stream().map(s -&gt; new Parameter(new UnknownType(),s));forEach;[lambdaExpr::addParameter]</InnerMethodInvoke>
                <InnerMethodInvoke>lambdaExpr;setBody;[new ExpressionStmt(expr)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>