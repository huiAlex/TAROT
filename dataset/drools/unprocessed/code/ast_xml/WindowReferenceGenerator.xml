<Class>
    <Id>504</Id>
    <Package>org.drools.modelcompiler.builder.generator</Package>
    <ClassName>WindowReferenceGenerator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>packageModel</FieldName>
            <FieldType>PackageModel</FieldType>
        </Field>
        <Field>
            <FieldName>typeResolver</FieldName>
            <FieldType>TypeResolver</FieldType>
        </Field>
        <Field>
            <FieldName>windowType</FieldName>
            <FieldType>Window.Type</FieldType>
        </Field>
        <Field>
            <FieldName>duration</FieldName>
            <FieldType>TemporalLiteralChunkExpr</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>WindowReferenceGenerator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>packageModel</ParamName>
                    <ParamType>PackageModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeResolver</ParamName>
                    <ParamType>TypeResolver</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sourceDescr</ParamName>
                    <ParamType>PatternSourceDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addWindowReferences</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kbuilder</ParamName>
                    <ParamType>KnowledgeBuilderImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>windowReferences</ParamName>
                    <ParamType>WindowDeclarationDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addField</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kbuilder</ParamName>
                    <ParamType>KnowledgeBuilderImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageModel</ParamName>
                    <ParamType>PackageModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>WindowDeclarationDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [windowName=toVar(descr.getName())]</InnerVar>
                <InnerVar>MethodCallExpr [initializer=new MethodCallExpr(null,"window")]</InnerVar>
                <InnerVar>PatternDescr [pattern=descr.getPattern()]</InnerVar>
                <InnerVar>ParsedBehavior [behavior=pattern.getBehaviors().stream().map(this::parseTypeFromBehavior).findFirst().orElseThrow(RuntimeException::new)]</InnerVar>
                <InnerVar>WindowDefinition.Type [windowType=behavior.windowType]</InnerVar>
                <InnerVar>TimeUnit [timeUnit=behavior.duration.getTimeUnit()]</InnerVar>
                <InnerVar>Class&lt;?&gt; [initClass=DrlxParseUtil.getClassFromContext(typeResolver,pattern.getObjectType())]</InnerVar>
                <InnerVar>Type [initType=JavaParser.parseType(initClass.getCanonicalName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>initializer;addArgument;[new NameExpr(windowType.getDeclaringClass().getCanonicalName() + "." + windowType.toString())]</InnerMethodInvoke>
                <InnerMethodInvoke>initializer;addArgument;[new IntegerLiteralExpr(behavior.duration.getValue())]</InnerMethodInvoke>
                <InnerMethodInvoke>initializer;addArgument;[new NameExpr(timeUnit.getDeclaringClass().getCanonicalName() + "." + timeUnit.name())]</InnerMethodInvoke>
                <InnerMethodInvoke>initializer;addArgument;[new ClassExpr(initType)]</InnerMethodInvoke>
                <InnerMethodInvoke>parseConditions(kbuilder,packageModel,pattern,initClass);forEach;[initializer::addArgument]</InnerMethodInvoke>
                <InnerMethodInvoke>packageModel;addAllWindowReferences;[windowName, initializer]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseConditions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kbuilder</ParamName>
                    <ParamType>KnowledgeBuilderImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageModel</ParamName>
                    <ParamType>PackageModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <ParamType>PatternDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>patternType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;? extends BaseDescr&gt; [descrs=pattern.getConstraint().getDescrs()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onSuccess</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drlxParseResult</ParamName>
                    <ParamType>DrlxParseSuccess</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onFail</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>failure</ParamName>
                    <ParamType>DrlxParseFail</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseTypeFromBehavior</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ParsedBehavior</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>BehaviorDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>WindowDefinition.Type [windowType=Window.Type.valueOf(descr.getSubType().toUpperCase())]</InnerVar>
                <InnerVar>TemporalLiteralChunkExpr [duration=parseDuration(descr.getParameters().get(0))]</InnerVar>
                <InnerVar>ParsedBehavior [parsedBehavior=new ParsedBehavior()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseDuration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TemporalLiteralChunkExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>duration</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TemporalLiteralExpr [te=DrlxParser.parseTemporalLiteral(duration)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>