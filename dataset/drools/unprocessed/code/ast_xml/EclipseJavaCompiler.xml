<Class>
    <Id>1063</Id>
    <Package>org.drools.compiler.commons.jci.compilers</Package>
    <ClassName>EclipseJavaCompiler</ClassName>
    <SuperClass>AbstractJavaCompiler</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>EclipseJavaCompiler  /** 
 * Eclipse compiler implementation
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>prefix</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>defaultSettings</FieldName>
            <FieldType>EclipseJavaCompilerSettings</FieldType>
        </Field>
        <Field>
            <FieldName>clazzName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>fileName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>typeName</FieldName>
            <FieldType>char[]</FieldType>
        </Field>
        <Field>
            <FieldName>packageName</FieldName>
            <FieldType>char[][]</FieldType>
        </Field>
        <Field>
            <FieldName>reader</FieldName>
            <FieldType>ResourceReader</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>EclipseJavaCompiler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>EclipseJavaCompiler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pSettings</ParamName>
                    <ParamType>Map</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>EclipseJavaCompiler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pSettings</ParamName>
                    <ParamType>EclipseJavaCompilerSettings</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>prefix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPrefix</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prefix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPathName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fullPath</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>CompilationUnit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pReader</ParamName>
                    <ParamType>ResourceReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pSourceFile</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [dot=clazzName.lastIndexOf('.')]</InnerVar>
                <InnerVar>StringTokenizer [izer=new StringTokenizer(clazzName,".")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFileName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>char[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContents</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>char[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>byte[] [content=reader.getBytes(fileName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMainTypeName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>char[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPackageName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>char[][]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ignoreOptionalProblems</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>org.drools.compiler.commons.jci.compilers.CompilationResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pSourceFiles</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pReader</ParamName>
                    <ParamType>ResourceReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pStore</ParamName>
                    <ParamType>ResourceStore</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pClassLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pSettings</ParamName>
                    <ParamType>JavaCompilerSettings</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Collection [problems=new ArrayList()]</InnerVar>
                <InnerVar>ICompilationUnit[] [compilationUnits=new ICompilationUnit[pSourceFiles.length]]</InnerVar>
                <InnerVar>IErrorHandlingPolicy [policy=DefaultErrorHandlingPolicies.proceedWithAllProblems()]</InnerVar>
                <InnerVar>IProblemFactory [problemFactory=new DefaultProblemFactory(Locale.getDefault())]</InnerVar>
                <InnerVar>INameEnvironment [nameEnvironment=new INameEnvironment(){
  public NameEnvironmentAnswer findType(  final char[][] pCompoundTypeName){
    final StringBuilder result=new StringBuilder();
    for (int i=0; i &lt; pCompoundTypeName.length; i++) {
      if (i != 0) {
        result.append('.');
      }
      result.append(pCompoundTypeName[i]);
    }
    return findType(result.toString());
  }
  public NameEnvironmentAnswer findType(  final char[] pTypeName,  final char[][] pPackageName){
    final StringBuilder result=new StringBuilder();
    for (int i=0; i &lt; pPackageName.length; i++) {
      result.append(pPackageName[i]);
      result.append('.');
    }
    result.append(pTypeName);
    return findType(result.toString());
  }
  private NameEnvironmentAnswer findType(  final String pClazzName){
    final String resourceName=ClassUtils.convertClassToResourcePath(pClazzName);
    final byte[] clazzBytes=pStore.read(resourceName);
    if (clazzBytes != null) {
      try {
        return createNameEnvironmentAnswer(pClazzName,clazzBytes);
      }
 catch (      final ClassFormatException e) {
        throw new RuntimeException("ClassFormatException in loading class '" + pClazzName + "' with JCI.");
      }
    }
    InputStream is=null;
    ByteArrayOutputStream baos=null;
    try {
      is=pClassLoader.getResourceAsStream(resourceName);
      if (is == null) {
        return null;
      }
      if (ClassUtils.isWindows() || ClassUtils.isOSX()) {
        try {
          pClassLoader.loadClass(pClazzName);
        }
 catch (        ClassNotFoundException e) {
          return null;
        }
catch (        NoClassDefFoundError e) {
          return null;
        }
      }
      final byte[] buffer=new byte[8192];
      baos=new ByteArrayOutputStream(buffer.length);
      int count;
      while ((count=is.read(buffer,0,buffer.length)) &gt; 0) {
        baos.write(buffer,0,count);
      }
      baos.flush();
      return createNameEnvironmentAnswer(pClazzName,baos.toByteArray());
    }
 catch (    final IOException e) {
      throw new RuntimeException("could not read class",e);
    }
catch (    final ClassFormatException e) {
      throw new RuntimeException("wrong class format",e);
    }
 finally {
      try {
        if (baos != null) {
          baos.close();
        }
      }
 catch (      final IOException oe) {
        throw new RuntimeException("could not close output stream",oe);
      }
      try {
        if (is != null) {
          is.close();
        }
      }
 catch (      final IOException ie) {
        throw new RuntimeException("could not close input stream",ie);
      }
    }
  }
  private NameEnvironmentAnswer createNameEnvironmentAnswer(  final String pClazzName,  final byte[] clazzBytes) throws ClassFormatException {
    final char[] fileName=pClazzName.toCharArray();
    final ClassFileReader classFileReader=new ClassFileReader(clazzBytes,fileName,true);
    return new NameEnvironmentAnswer(classFileReader,null);
  }
  private boolean isSourceAvailable(  final String pClazzName,  final ResourceReader pReader){
    final String javaSource=pClazzName.replace('.','/') + ".java";
    final String classSource=pClazzName.replace('.','/') + ".class";
    return pReader.isAvailable(prefix + javaSource) || pReader.isAvailable(prefix + classSource);
  }
  private boolean isPackage(  final String pClazzName){
    InputStream is=null;
    try {
      is=pClassLoader.getResourceAsStream(ClassUtils.convertClassToResourcePath(pClazzName));
      if (is != null) {
        if (ClassUtils.isWindows() || ClassUtils.isOSX()) {
          try {
            Class cls=pClassLoader.loadClass(pClazzName);
            if (cls != null) {
              return false;
            }
          }
 catch (          ClassNotFoundException e) {
            return true;
          }
catch (          NoClassDefFoundError e) {
            return true;
          }
        }
      }
      boolean result=is == null &amp;&amp; !isSourceAvailable(pClazzName,pReader);
      return result;
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException e) {
          throw new RuntimeException("Unable to close stream for resource: " + pClazzName);
        }
      }
    }
  }
  public boolean isPackage(  char[][] parentPackageName,  char[] pPackageName){
    final StringBuilder result=new StringBuilder();
    if (parentPackageName != null) {
      for (int i=0; i &lt; parentPackageName.length; i++) {
        if (i != 0) {
          result.append('.');
        }
        result.append(parentPackageName[i]);
      }
    }
    if (parentPackageName != null &amp;&amp; parentPackageName.length &gt; 0) {
      result.append('.');
    }
    result.append(pPackageName);
    return isPackage(result.toString());
  }
  public void cleanup(){
  }
}
]</InnerVar>
                <InnerVar>ICompilerRequestor [compilerRequestor=new ICompilerRequestor(){
  public void acceptResult(  final CompilationResult pResult){
    if (pResult.hasProblems()) {
      final IProblem[] iproblems=pResult.getProblems();
      for (int i=0; i &lt; iproblems.length; i++) {
        final IProblem iproblem=iproblems[i];
        final CompilationProblem problem=new EclipseCompilationProblem(iproblem);
        if (problemHandler != null) {
          problemHandler.handle(problem);
        }
        problems.add(problem);
      }
    }
    if (!pResult.hasErrors()) {
      final ClassFile[] clazzFiles=pResult.getClassFiles();
      for (int i=0; i &lt; clazzFiles.length; i++) {
        final ClassFile clazzFile=clazzFiles[i];
        final char[][] compoundName=clazzFile.getCompoundName();
        final StringBuilder clazzName=new StringBuilder();
        for (int j=0; j &lt; compoundName.length; j++) {
          if (j != 0) {
            clazzName.append('.');
          }
          clazzName.append(compoundName[j]);
        }
        pStore.write(clazzName.toString().replace('.','/') + ".class",clazzFile.getBytes());
      }
    }
  }
}
]</InnerVar>
                <InnerVar>Map [settingsMap=new EclipseJavaCompilerSettings(pSettings).toNativeSettings()]</InnerVar>
                <InnerVar>CompilerOptions [compilerOptions=new CompilerOptions(settingsMap)]</InnerVar>
                <InnerVar>Compiler [compiler=new Compiler(nameEnvironment,policy,compilerOptions,compilerRequestor,problemFactory)]</InnerVar>
                <InnerVar>CompilationProblem[] [result=new CompilationProblem[problems.size()]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>compiler;compile;[compilationUnits]</InnerMethodInvoke>
                <InnerMethodInvoke>problems;toArray;[result]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEndColumn</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEndLine</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFileName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMessage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStartColumn</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStartLine</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>NameEnvironmentAnswer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pCompoundTypeName</ParamName>
                    <ParamType>char[][]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [result=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>NameEnvironmentAnswer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pTypeName</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pPackageName</ParamName>
                    <ParamType>char[][]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [result=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>result;append;[pTypeName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>NameEnvironmentAnswer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pClazzName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [resourceName=ClassUtils.convertClassToResourcePath(pClazzName)]</InnerVar>
                <InnerVar>byte[] [clazzBytes=pStore.read(resourceName)]</InnerVar>
                <InnerVar>InputStream [is=null]</InnerVar>
                <InnerVar>ByteArrayOutputStream [baos=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createNameEnvironmentAnswer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>NameEnvironmentAnswer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pClazzName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clazzBytes</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char[] [fileName=pClazzName.toCharArray()]</InnerVar>
                <InnerVar>ClassFileReader [classFileReader=new ClassFileReader(clazzBytes,fileName,true)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassFormatException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSourceAvailable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pClazzName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pReader</ParamName>
                    <ParamType>ResourceReader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [javaSource=pClazzName.replace('.','/') + ".java"]</InnerVar>
                <InnerVar>String [classSource=pClazzName.replace('.','/') + ".class"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isPackage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pClazzName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InputStream [is=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isPackage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parentPackageName</ParamName>
                    <ParamType>char[][]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pPackageName</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [result=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>result;append;[pPackageName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cleanup</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>acceptResult</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pResult</ParamName>
                    <ParamType>CompilationResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dumpUnits</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>compilationUnits</ParamName>
                    <ParamType>ICompilationUnit[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>ResourceReader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createDefaultSettings</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>JavaCompilerSettings</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>