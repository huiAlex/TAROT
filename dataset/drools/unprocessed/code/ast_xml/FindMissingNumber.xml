<Class>
    <Id>2492</Id>
    <Package>org.drools.verifier.misc</Package>
    <ClassName>FindMissingNumber</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>MIN_NUMBER_OF_RESTRICTIONS</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>testForPattern</MethodName>
            <MethodComment>/** 
 * Test if the values in constraints are in pattern.
 * @param restrictions
 * @return false if can't find a pattern or constraints list is null or sizeof the list is under 3.
 */
</MethodComment>
            <ReturnType>Number</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>restrictions</ParamName>
                    <ParamType>NumberRestriction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BigDecimal[] [numbers=new BigDecimal[restrictions.size()]]</InnerVar>
                <InnerVar>int [index=0]</InnerVar>
                <InnerVar>Number [missingNumber=findSumPattern(numbers)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Arrays;sort;[numbers]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findSumPattern</MethodName>
            <MethodComment>/** 
 * Looks for sum pattern, on each step x is added or removed. -x is the same as +(-x) so this works for both.
 * @param numbers
 * @return true if pattern is found.
 */
</MethodComment>
            <ReturnType>Number</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numbers</ParamName>
                    <ParamType>BigDecimal[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BigDecimal [gap=null]</InnerVar>
                <InnerVar>Number [missingNumber=null]</InnerVar>
                <InnerVar>BigDecimal [a=numbers[0]]</InnerVar>
                <InnerVar>BigDecimal [b=numbers[1]]</InnerVar>
                <InnerVar>BigDecimal [c=numbers[2]]</InnerVar>
                <InnerVar>BigDecimal [d=numbers[3]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findMultiplicationPattern</MethodName>
            <MethodComment>/** 
 * Looks for multiplication pattern, on each step x multiplied or divided. *x is the same as *(1/x) so this works for both.
 * @param numbers
 * @return true if pattern is found.
 */
</MethodComment>
            <ReturnType>Number</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numbers</ParamName>
                    <ParamType>BigDecimal[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>