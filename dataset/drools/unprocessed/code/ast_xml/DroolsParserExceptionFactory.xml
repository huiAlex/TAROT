<Class>
    <Id>1229</Id>
    <Package>org.drools.compiler.lang</Package>
    <ClassName>DroolsParserExceptionFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DroolsParserExceptionFactory  /** 
 * Helper class that generates DroolsParserException with user friendly error messages.
 * @see DroolsParserException
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MISMATCHED_TOKEN_MESSAGE_COMPLETE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MISMATCHED_TOKEN_MESSAGE_PART</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MISMATCHED_TREE_NODE_MESSAGE_COMPLETE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MISMATCHED_TREE_NODE_MESSAGE_PART</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>NO_VIABLE_ALT_MESSAGE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>EARLY_EXIT_MESSAGE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MISMATCHED_SET_MESSAGE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MISMATCHED_NOT_SET_MESSAGE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>FAILED_PREDICATE_MESSAGE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TRAILING_SEMI_COLON_NOT_ALLOWED_MESSAGE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PARSER_LOCATION_MESSAGE_COMPLETE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PARSER_LOCATION_MESSAGE_PART</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>UNEXPECTED_EXCEPTION</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>paraphrases</FieldName>
            <FieldType>Stack</FieldType>
        </Field>
        <Field>
            <FieldName>paraphrases</FieldName>
            <FieldType>Map&lt;DroolsParaphraseTypes,String&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>tokenNames</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>languageLevel</FieldName>
            <FieldType>LanguageLevelOption</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DroolsParserExceptionFactory</MethodName>
            <MethodComment>/** 
 * DroolsParserErrorMessages constructor.
 * @param tokenNames tokenNames generated by ANTLR
 * @param paraphrases paraphrases parser structure
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>paraphrases</ParamName>
                    <ParamType>Map&lt;DroolsParaphraseTypes,String&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>languageLevel</ParamName>
                    <ParamType>LanguageLevelOption</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createTrailingSemicolonException</MethodName>
            <MethodComment>/** 
 * This method creates a DroolsParserException for trailing semicolon exception, full of information.
 * @param line line number
 * @param column column position
 * @param offset char offset
 * @return DroolsParserException filled.
 */
</MethodComment>
            <ReturnType>DroolsParserException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>line</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [message=String.format(TRAILING_SEMI_COLON_NOT_ALLOWED_MESSAGE,line,column,formatParserLocation())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createDroolsException</MethodName>
            <MethodComment>/** 
 * This method creates a DroolsParserException full of information.
 * @param e original exception
 * @return DroolsParserException filled.
 */
</MethodComment>
            <ReturnType>DroolsParserException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>RecognitionException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;String&gt; [codeAndMessage=createErrorMessage(e)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createErrorMessage</MethodName>
            <MethodComment>/** 
 * This will take a RecognitionException, and create a sensible error message out of it
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>RecognitionException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;String&gt; [codeAndMessage=new ArrayList&lt;String&gt;(2)]</InnerVar>
                <InnerVar>String [message]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createDroolsException</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DroolsParserException</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Exception</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>token</ParamName>
                    <ParamType>Token</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringWriter [sw=new StringWriter()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>e;printStackTrace;[new PrintWriter(sw)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expectedTokensAsString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>set</ParamName>
                    <ParamType>BitSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [buf=new StringBuilder()]</InnerVar>
                <InnerVar>int [i=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>buf;append;["{ "]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;[" }"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>formatParserLocation</MethodName>
            <MethodComment>/** 
 * This will take Paraphrases stack, and create a sensible location
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>StringBuilder [sb=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLocationName</MethodName>
            <MethodComment>/** 
 * Returns a string based on Paraphrase Type
 * @param type Paraphrase Type
 * @return a string representing the
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>DroolsParaphraseTypes</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBetterToken</MethodName>
            <MethodComment>/** 
 * Helper method that creates a user friendly token definition
 * @param token token
 * @return user friendly token definition
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>token</ParamName>
                    <ParamType>Token</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBetterToken</MethodName>
            <MethodComment>/** 
 * Helper method that creates a user friendly token definition
 * @param tokenType token type
 * @return user friendly token definition
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tokenType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>