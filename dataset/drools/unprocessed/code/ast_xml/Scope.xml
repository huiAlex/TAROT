<Class>
    <Id>2443</Id>
    <Package>org.kie.dmn.feel.lang</Package>
    <ClassName>Scope</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>BUILT_IN</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GLOBAL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>LOCAL</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment>/** 
 * Returns the scope name
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParentScope</MethodName>
            <MethodComment>/** 
 * Returns the enclosing (parent) scope
 * @return
 */
</MethodComment>
            <ReturnType>Scope</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addChildScope</MethodName>
            <MethodComment>/** 
 * Adds an enclosed (child) scope
 * @param scope
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scope</ParamName>
                    <ParamType>Scope</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getChildScopes</MethodName>
            <MethodComment>/** 
 * Gets a map of all children scopes. The key of the map is the string name of the children scope and the value is the scope itself.
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>define</MethodName>
            <MethodComment>/** 
 * Defines a new symbol in this scope
 * @param symbol
 * @return
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>symbol</ParamName>
                    <ParamType>Symbol</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resolve</MethodName>
            <MethodComment>/** 
 * Searches and returns a symbol with the given id if it exists. The search is recursive up, so if a symbol is not found in the current scope, the algorithm searches the parent scopes all the way to the root built-in scope.
 * @param id
 * @return
 */
</MethodComment>
            <ReturnType>Symbol</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resolve</MethodName>
            <MethodComment>/** 
 * Searches and returns a symbol with the given qualified name if it exists. The search is recursive up, so if a symbol is not found in the current scope, the algorith searches the parend scopes all the way to the root built-in scope.
 * @param qualifiedName
 * @return
 */
</MethodComment>
            <ReturnType>Symbol</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>qualifiedName</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>start</MethodName>
            <MethodComment>/** 
 * This method is used during context-aware parsing to find multi-token symbols iteratively. It is used in conjunction with the #followUp method below.
 * @param token
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>token</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>followUp</MethodName>
            <MethodComment>/** 
 * This method is used during context-aware parsing to find multi-token symbols iteratively. It is used in conjunction with the #start method above.
 * @param token
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>token</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isPredict</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSymbols</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getType</MethodName>
            <MethodComment>/** 
 * maybe null.
 */
</MethodComment>
            <ReturnType>Type</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>