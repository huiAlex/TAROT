<Class>
    <Id>3504</Id>
    <Package>org.drools.modelcompiler.builder.generator.visitor</Package>
    <ClassName>EvalVisitor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>context</FieldName>
            <FieldType>RuleContext</FieldType>
        </Field>
        <Field>
            <FieldName>packageModel</FieldName>
            <FieldType>PackageModel</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>EvalVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageModel</ParamName>
                    <ParamType>PackageModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>EvalDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [expression=descr.getContent().toString()]</InnerVar>
                <InnerVar>DrlxParseResult [drlxParseResult=new ConstraintParser(context,packageModel).drlxParse(null,null,expression)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>drlxParseResult;accept;[drlxParseSuccess -&gt; {
  Expression rewriteExprAsLambdaWithoutThisParam=DrlxParseUtil.generateLambdaWithoutParameters(drlxParseSuccess.getUsedDeclarations(),drlxParseSuccess.getExpr(),true);
  drlxParseSuccess.setExpr(rewriteExprAsLambdaWithoutThisParam);
  drlxParseSuccess.setStatic(true);
  new FlowExpressionBuilder(context).processExpression(drlxParseSuccess);
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>