<Class>
    <Id>1707</Id>
    <Package>org.drools.compiler.rule.builder.dialect.asm</Package>
    <ClassName>ASMEvalStubBuilder</ClassName>
    <SuperClass>AbstractASMEvalBuilder</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>createEvalBytecode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruleContext</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>vars</ParamName>
                    <ParamType>Map</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InvokerDataProvider [data=new InvokerContext(vars)]</InnerVar>
                <InnerVar>ClassGenerator [generator=InvokerGenerator.createInvokerStubGenerator(data,ruleContext)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;createStubEval;[generator, data, vars]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createStubEval</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>generator</ParamName>
                    <ParamType>ClassGenerator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>InvokerDataProvider</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>vars</ParamName>
                    <ParamType>Map</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>generator.setInterfaces(EvalStub.class,CompiledInvoker.class);addField;[ACC_PRIVATE + ACC_VOLATILE, "eval", EvalExpression.class]</InnerMethodInvoke>
                <InnerMethodInvoke>generator.addMethod(ACC_PUBLIC,"createContext",generator.methodDescr(Object.class),new ClassGenerator.MethodBody(){
  public void body(  MethodVisitor mv){
    mv.visitInsn(ACONST_NULL);
    mv.visitInsn(ARETURN);
  }
}
).addMethod(ACC_PUBLIC,"clone",generator.methodDescr(EvalExpression.class),new ClassGenerator.MethodBody(){
  public void body(  MethodVisitor mv){
    String internalClassName=generator.getClassName().replace('.','/');
    mv.visitTypeInsn(NEW,internalClassName);
    mv.visitInsn(DUP);
    mv.visitMethodInsn(INVOKESPECIAL,internalClassName,"&lt;init&gt;","()V",false);
    mv.visitInsn(ARETURN);
  }
}
).addMethod(ACC_PUBLIC,"replaceDeclaration",generator.methodDescr(null,Declaration.class,Declaration.class)).addMethod(ACC_PUBLIC,"evaluate",generator.methodDescr(Boolean.TYPE,Tuple.class,Declaration[].class,WorkingMemory.class,Object.class),new String[]{"java/lang/Exception"},new ClassGenerator.MethodBody(){
  public void body(  MethodVisitor mv){
    Label syncStart=new Label();
    Label syncEnd=new Label();
    Label l1=new Label();
    Label l2=new Label();
    mv.visitTryCatchBlock(syncStart,l1,l2,null);
    Label l3=new Label();
    mv.visitTryCatchBlock(l2,l3,l2,null);
    getFieldFromThis("eval",EvalExpression.class);
    mv.visitJumpInsn(IFNONNULL,syncEnd);
    mv.visitVarInsn(ALOAD,0);
    mv.visitInsn(DUP);
    mv.visitVarInsn(ASTORE,5);
    mv.visitInsn(MONITORENTER);
    mv.visitLabel(syncStart);
    getFieldFromThis("eval",EvalExpression.class);
    Label ifNotInitialized=new Label();
    mv.visitJumpInsn(IFNONNULL,ifNotInitialized);
    mv.visitVarInsn(ALOAD,0);
    mv.visitVarInsn(ALOAD,1);
    mv.visitVarInsn(ALOAD,2);
    mv.visitVarInsn(ALOAD,3);
    invokeStatic(EvalGenerator.class,"generate",null,EvalStub.class,Tuple.class,Declaration[].class,WorkingMemory.class);
    mv.visitLabel(ifNotInitialized);
    mv.visitVarInsn(ALOAD,5);
    mv.visitInsn(MONITOREXIT);
    mv.visitLabel(l1);
    mv.visitJumpInsn(GOTO,syncEnd);
    mv.visitLabel(l2);
    mv.visitVarInsn(ASTORE,6);
    mv.visitVarInsn(ALOAD,5);
    mv.visitInsn(MONITOREXIT);
    mv.visitLabel(l3);
    mv.visitVarInsn(ALOAD,6);
    mv.visitInsn(ATHROW);
    mv.visitLabel(syncEnd);
    getFieldFromThis("eval",EvalExpression.class);
    mv.visitVarInsn(ALOAD,1);
    mv.visitVarInsn(ALOAD,2);
    mv.visitVarInsn(ALOAD,3);
    mv.visitVarInsn(ALOAD,4);
    invokeInterface(EvalExpression.class,"evaluate",Boolean.TYPE,Tuple.class,Declaration[].class,WorkingMemory.class,Object.class);
    mv.visitInsn(IRETURN);
  }
}
);addMethod;[ACC_PUBLIC, "setEval", generator.methodDescr(null,EvalExpression.class), new ClassGenerator.MethodBody(){
  public void body(  MethodVisitor mv){
    putFieldInThisFromRegistry("eval",EvalExpression.class,1);
    mv.visitInsn(RETURN);
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitInsn;[ACONST_NULL]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [internalClassName=generator.getClassName().replace('.','/')]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitTypeInsn;[NEW, internalClassName]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[DUP]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESPECIAL, internalClassName, "&lt;init&gt;", "()V", false]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Label [syncStart=new Label()]</InnerVar>
                <InnerVar>Label [syncEnd=new Label()]</InnerVar>
                <InnerVar>Label [l1=new Label()]</InnerVar>
                <InnerVar>Label [l2=new Label()]</InnerVar>
                <InnerVar>Label [l3=new Label()]</InnerVar>
                <InnerVar>Label [ifNotInitialized=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitTryCatchBlock;[syncStart, l1, l2, null]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTryCatchBlock;[l2, l3, l2, null]</InnerMethodInvoke>
                <InnerMethodInvoke>null;getFieldFromThis;["eval", EvalExpression.class]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFNONNULL, syncEnd]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[DUP]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, 5]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[MONITORENTER]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[syncStart]</InnerMethodInvoke>
                <InnerMethodInvoke>null;getFieldFromThis;["eval", EvalExpression.class]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFNONNULL, ifNotInitialized]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 3]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeStatic;[EvalGenerator.class, "generate", null, EvalStub.class, Tuple.class, Declaration[].class, WorkingMemory.class]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[ifNotInitialized]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 5]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[MONITOREXIT]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[l1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, syncEnd]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[l2]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, 6]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 5]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[MONITOREXIT]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[l3]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 6]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ATHROW]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[syncEnd]</InnerMethodInvoke>
                <InnerMethodInvoke>null;getFieldFromThis;["eval", EvalExpression.class]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 3]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 4]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeInterface;[EvalExpression.class, "evaluate", Boolean.TYPE, Tuple.class, Declaration[].class, WorkingMemory.class, Object.class]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[IRETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;putFieldInThisFromRegistry;["eval", EvalExpression.class, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[RETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>