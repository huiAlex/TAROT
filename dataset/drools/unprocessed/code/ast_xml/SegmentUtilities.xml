<Class>
    <Id>904</Id>
    <Package>org.drools.core.phreak</Package>
    <ClassName>SegmentUtilities</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>NOT_NODE_BIT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>JOIN_NODE_BIT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>REACTIVE_EXISTS_NODE_BIT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PASSIVE_EXISTS_NODE_BIT</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>createSegmentMemory</MethodName>
            <MethodComment>/** 
 * Initialises the NodeSegment memory for all nodes in the segment.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tupleSource</ParamName>
                    <ParamType>LeftTupleSource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Memory [mem=wm.getNodeMemory((MemoryFactory)tupleSource)]</InnerVar>
                <InnerVar>SegmentMemory [smem=mem.getSegmentMemory()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createSegmentMemory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SegmentMemory</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tupleSource</ParamName>
                    <ParamType>LeftTupleSource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mem</ParamName>
                    <ParamType>Memory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LeftTupleSource [segmentRoot=tupleSource]</InnerVar>
                <InnerVar>int [nodeTypesInSegment=0]</InnerVar>
                <InnerVar>SegmentMemory [smem=restoreSegmentFromPrototype(wm,segmentRoot,nodeTypesInSegment)]</InnerVar>
                <InnerVar>long [nodePosMask=1]</InnerVar>
                <InnerVar>long [allLinkedTestMask=0]</InnerVar>
                <InnerVar>boolean [updateNodeBit=true]</InnerVar>
                <InnerVar>LeftTupleSource [pathRoot=segmentRoot]</InnerVar>
                <InnerVar>int [ruleSegmentPosMask=1]</InnerVar>
                <InnerVar>int [counter=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>smem;setAllLinkedMaskTest;[allLinkedTestMask]</InnerMethodInvoke>
                <InnerMethodInvoke>smem;setSegmentPosMaskBit;[ruleSegmentPosMask]</InnerMethodInvoke>
                <InnerMethodInvoke>smem;setPos;[counter]</InnerMethodInvoke>
                <InnerMethodInvoke>((KnowledgeBaseImpl)wm.getKnowledgeBase());registerSegmentPrototype;[segmentRoot, smem]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>restoreSegmentFromPrototype</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SegmentMemory</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segmentRoot</ParamName>
                    <ParamType>LeftTupleSource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodeTypesInSegment</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SegmentMemory [smem=wm.getKnowledgeBase().createSegmentFromPrototype(wm,segmentRoot)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processQueryNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryNode</ParamName>
                    <ParamType>QueryElementNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segmentRoot</ParamName>
                    <ParamType>LeftTupleSource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smem</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodePosMask</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SegmentMemory [querySmem=getQuerySegmentMemory(wm,segmentRoot,queryNode)]</InnerVar>
                <InnerVar>QueryElementNodeMemory [queryNodeMem=smem.createNodeMemory(queryNode,wm)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>queryNodeMem;setNodePosMaskBit;[nodePosMask]</InnerMethodInvoke>
                <InnerMethodInvoke>queryNodeMem;setQuerySegmentMemory;[querySmem]</InnerMethodInvoke>
                <InnerMethodInvoke>queryNodeMem;setSegmentMemory;[smem]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQuerySegmentMemory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SegmentMemory</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segmentRoot</ParamName>
                    <ParamType>LeftTupleSource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>queryNode</ParamName>
                    <ParamType>QueryElementNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LeftInputAdapterNode [liaNode=getQueryLiaNode(queryNode.getQueryElement().getQueryName(),getQueryOtn(segmentRoot))]</InnerVar>
                <InnerVar>LiaNodeMemory [liam=wm.getNodeMemory(liaNode)]</InnerVar>
                <InnerVar>SegmentMemory [querySmem=liam.getSegmentMemory()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processFromNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tupleSource</ParamName>
                    <ParamType>MemoryFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smem</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>smem.createNodeMemory(tupleSource,wm);setSegmentMemory;[smem]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processReactiveFromNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tupleSource</ParamName>
                    <ParamType>MemoryFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smem</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodePosMask</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FromNode.FromMemory [mem=((FromNode.FromMemory)smem.createNodeMemory(tupleSource,wm))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mem;setSegmentMemory;[smem]</InnerMethodInvoke>
                <InnerMethodInvoke>mem;setNodePosMaskBit;[nodePosMask]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processBranchNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tupleSource</ParamName>
                    <ParamType>ConditionalBranchNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smem</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConditionalBranchMemory [branchMem=smem.createNodeMemory(tupleSource,wm)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>branchMem;setSegmentMemory;[smem]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processEvalNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tupleSource</ParamName>
                    <ParamType>EvalConditionNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smem</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>EvalMemory [evalMem=smem.createNodeMemory(tupleSource,wm)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>evalMem;setSegmentMemory;[smem]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processTimerNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tupleSource</ParamName>
                    <ParamType>TimerNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smem</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodePosMask</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TimerNodeMemory [tnMem=smem.createNodeMemory(tupleSource,wm)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tnMem;setNodePosMaskBit;[nodePosMask]</InnerMethodInvoke>
                <InnerMethodInvoke>tnMem;setSegmentMemory;[smem]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processLiaNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tupleSource</ParamName>
                    <ParamType>LeftInputAdapterNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smem</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodePosMask</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>allLinkedTestMask</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LiaNodeMemory [liaMemory=smem.createNodeMemory(tupleSource,wm)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>liaMemory;setSegmentMemory;[smem]</InnerMethodInvoke>
                <InnerMethodInvoke>liaMemory;setNodePosMaskBit;[nodePosMask]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processBetaNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>betaNode</ParamName>
                    <ParamType>BetaNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smem</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodePosMask</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>allLinkedTestMask</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>updateNodeBit</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BetaMemory [bm=NodeTypeEnums.AccumulateNode == betaNode.getType() ? ((AccumulateMemory)smem.createNodeMemory(betaNode,wm)).getBetaMemory() : (BetaMemory)smem.createNodeMemory(betaNode,wm)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>bm;setSegmentMemory;[smem]</InnerMethodInvoke>
                <InnerMethodInvoke>bm;setNodePosMaskBit;[nodePosMask]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createRiaSegmentMemory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RightInputAdapterNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>betaNode</ParamName>
                    <ParamType>BetaNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RightInputAdapterNode [riaNode=(RightInputAdapterNode)betaNode.getRightInput()]</InnerVar>
                <InnerVar>LeftTupleSource [subnetworkLts=riaNode.getLeftTupleSource()]</InnerVar>
                <InnerVar>Memory [rootSubNetwokrMem=wm.getNodeMemory((MemoryFactory)subnetworkLts)]</InnerVar>
                <InnerVar>SegmentMemory [subNetworkSegmentMemory=rootSubNetwokrMem.getSegmentMemory()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>canBeDisabled</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>betaNode</ParamName>
                    <ParamType>BetaNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createChildSegments</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smem</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sinkProp</ParamName>
                    <ParamType>LeftTupleSinkPropagator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createChildSegment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SegmentMemory</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Memory [memory=wm.getNodeMemory((MemoryFactory)node)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createChildSegmentForTerminalNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SegmentMemory</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>memory</ParamName>
                    <ParamType>Memory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SegmentMemory [childSmem=new SegmentMemory(node)]</InnerVar>
                <InnerVar>PathMemory [pmem=NodeTypeEnums.isTerminalNode(node) ? (PathMemory)memory : ((RiaNodeMemory)memory).getRiaPathMemory()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>childSmem;setPos;[pmem.getSegmentMemories().length - 1]</InnerMethodInvoke>
                <InnerMethodInvoke>pmem;setSegmentMemory;[childSmem.getPos(), childSmem]</InnerMethodInvoke>
                <InnerMethodInvoke>pmem;setSegmentMemory;[childSmem]</InnerMethodInvoke>
                <InnerMethodInvoke>childSmem;addPathMemory;[pmem]</InnerMethodInvoke>
                <InnerMethodInvoke>childSmem;setTipNode;[node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inSubNetwork</MethodName>
            <MethodComment>/** 
 * Is the LeftTupleSource a node in the sub network for the RightInputAdapterNode To be in the same network, it must be a node is after the two output of the parent and before the rianode.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>riaNode</ParamName>
                    <ParamType>RightInputAdapterNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leftTupleSource</ParamName>
                    <ParamType>LeftTupleSource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LeftTupleSource [startTupleSource=riaNode.getStartTupleSource()]</InnerVar>
                <InnerVar>LeftTupleSource [parent=riaNode.getLeftTupleSource()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateRiaAndTerminalMemory</MethodName>
            <MethodComment>/** 
 * This adds the segment memory to the terminal node or ria node's list of memories. In the case of the terminal node this allows it to know that all segments from the tip to root are linked. In the case of the ria node its all the segments up to the start of the subnetwork. This is because the rianode only cares if all of it's segments are linked, then it sets the bit of node it is the right input for.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lt</ParamName>
                    <ParamType>LeftTupleSource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>originalLt</ParamName>
                    <ParamType>LeftTupleSource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smem</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fromPrototype</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodeTypesInSegment</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkSegmentBoundary</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lt</ParamName>
                    <ParamType>LeftTupleSource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodeTypesInSegment</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkEagerSegmentCreation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lt</ParamName>
                    <ParamType>LeftTupleSource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodeTypesInSegment</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isRootNode</MethodName>
            <MethodComment>/** 
 * Returns whether the node is the root of a segment. Lians are always the root of a segment. node cannot be null. The result should discount any removingRule. That means it gives you the result as if the rule had already been removed from the network.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>removingTN</ParamName>
                    <ParamType>TerminalNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTipNode</MethodName>
            <MethodComment>/** 
 * Returns whether the node is the tip of a segment. EndNodes (rtn and rian) are always the tip of a segment. node cannot be null. The result should discount any removingRule. That means it gives you the result as if the rule had already been removed from the network.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>removingTN</ParamName>
                    <ParamType>TerminalNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNonTerminalTipNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>removingTN</ParamName>
                    <ParamType>TerminalNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LeftTupleSinkPropagator [sinkPropagator=node.getSinkPropagator()]</InnerVar>
                <InnerVar>int [count=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sinkNotExclusivelyAssociatedWithTerminal</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>removingTN</ParamName>
                    <ParamType>TerminalNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sink</ParamName>
                    <ParamType>LeftTupleSinkNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasTerminalNodesDifferentThan</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>LeftTupleSinkNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tn</ParamName>
                    <ParamType>TerminalNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LeftTupleSinkPropagator [sinkPropagator=node.getSinkPropagator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQueryOtn</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ObjectTypeNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lts</ParamName>
                    <ParamType>LeftTupleSource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LeftInputAdapterNode [liaNode=(LeftInputAdapterNode)lts]</InnerVar>
                <InnerVar>ObjectSource [os=liaNode.getObjectSource()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQueryLiaNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LeftInputAdapterNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>queryOtn</ParamName>
                    <ParamType>ObjectTypeNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateNodeTypesMask</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>NetworkNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mask</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mask</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bit</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>