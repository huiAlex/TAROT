<Class>
    <Id>2123</Id>
    <Package>org.drools.compiler.lang.dsl</Package>
    <ClassName>DSLMapParser</ClassName>
    <SuperClass>Parser</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>tokenNames</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>EOF</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COLON</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMMA</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DOT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>EOL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>EQUALS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>EscapeSequence</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>IdentifierPart</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LEFT_CURLY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LEFT_SQUARE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LITERAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MISC</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RIGHT_CURLY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RIGHT_SQUARE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>VT_ANY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>VT_CONDITION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>VT_CONSEQUENCE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>VT_DSL_GRAMMAR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>VT_ENTRY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>VT_ENTRY_KEY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>VT_ENTRY_VAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>VT_KEYWORD</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>VT_LITERAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>VT_META</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>VT_PATTERN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>VT_QUAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>VT_SCOPE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>VT_SPACE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>VT_VAR_DEF</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>VT_VAR_REF</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>WS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>adaptor</FieldName>
            <FieldType>TreeAdaptor</FieldType>
        </Field>
        <Field>
            <FieldName>errors</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>errors</FieldName>
            <FieldType>ParserError</FieldType>
        </Field>
        <Field>
            <FieldName>namePat</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>tree</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>tree</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>tree</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>tree</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>tree</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>tree</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>tree</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>tree</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>tree</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>tree</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>tree</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>tree</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>tree</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>tree</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>tree</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>tree</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>tree</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>tree</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>tree</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>tree</FieldName>
            <FieldType>Object</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_statement_in_mapping_file275</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_entry_in_statement306</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_EOL_in_statement314</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_scope_section_in_entry336</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_meta_section_in_entry338</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_key_section_in_entry341</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_EQUALS_in_entry343</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_value_section_in_entry345</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_EOL_in_entry349</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_EOF_in_entry351</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_LEFT_SQUARE_in_scope_section412</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_condition_key_in_scope_section425</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_consequence_key_in_scope_section439</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_keyword_key_in_scope_section453</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_any_key_in_scope_section467</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_RIGHT_SQUARE_in_scope_section483</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_LEFT_SQUARE_in_meta_section530</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_LITERAL_in_meta_section532</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_RIGHT_SQUARE_in_meta_section535</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_key_sentence_in_key_section568</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_variable_definition_in_key_sentence608</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_key_chunk_in_key_sentence618</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_literal_in_key_chunk646</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_value_sentence_in_value_section664</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_variable_reference_in_value_sentence703</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_value_chunk_in_value_sentence713</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_literal_in_value_chunk742</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_EQUALS_in_value_chunk744</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_COMMA_in_value_chunk746</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_DOT_in_value_chunk748</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_LEFT_CURLY_in_variable_definition809</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_LITERAL_in_variable_definition827</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_COLON_in_variable_definition832</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_LITERAL_in_variable_definition836</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_COLON_in_variable_definition840</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_pattern_in_variable_definition844</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_RIGHT_CURLY_in_variable_definition853</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_literal_in_pattern1290</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_DOT_in_pattern1304</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_MISC_in_pattern1318</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_LEFT_CURLY_in_pattern1332</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_literal_in_pattern1334</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_RIGHT_CURLY_in_pattern1336</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_LEFT_SQUARE_in_pattern1350</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_pattern_in_pattern1352</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_RIGHT_SQUARE_in_pattern1354</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_LEFT_CURLY_in_variable_reference1389</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_variable_reference_expr_in_variable_reference1409</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_RIGHT_CURLY_in_variable_reference1413</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_LITERAL_in_condition_key1599</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_LITERAL_in_consequence_key1631</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_LITERAL_in_keyword_key1663</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_LITERAL_in_any_key1695</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_meta_section_in_synpred3_DSLMap338</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_condition_key_in_synpred6_DSLMap425</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_consequence_key_in_synpred7_DSLMap439</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_keyword_key_in_synpred8_DSLMap453</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_literal_in_synpred12_DSLMap646</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_literal_in_synpred15_DSLMap742</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_EQUALS_in_synpred16_DSLMap744</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_COMMA_in_synpred17_DSLMap746</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_DOT_in_synpred18_DSLMap748</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_COLON_in_synpred22_DSLMap832</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_LITERAL_in_synpred22_DSLMap836</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_literal_in_synpred24_DSLMap1290</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_LEFT_SQUARE_in_synpred28_DSLMap1350</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_pattern_in_synpred28_DSLMap1352</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
        <Field>
            <FieldName>FOLLOW_RIGHT_SQUARE_in_synpred28_DSLMap1354</FieldName>
            <FieldType>BitSet</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getDelegates</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Parser[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DSLMapParser</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>TokenStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DSLMapParser</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>TokenStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>state</ParamName>
                    <ParamType>RecognizerSharedState</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTreeAdaptor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>adaptor</ParamName>
                    <ParamType>TreeAdaptor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTreeAdaptor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TreeAdaptor</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTokenNames</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGrammarFileName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reportError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ex</ParamName>
                    <ParamType>RecognitionException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>errors;add;[new ParserError("DSL parser error",ex.line,ex.charPositionInLine)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getErrors</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ParserError</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>emitErrorMessage</MethodName>
            <MethodComment>/** 
 * Override this method to not output mesages 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>msg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isIdentifier</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>Token</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [nameString=name.getText()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validateLT</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>LTNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [text2Validate=input.LT(LTNumber).getText()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validateIdentifierKey</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTree</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mapping_file</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapParser.mapping_file_return</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DSLMapParser.mapping_file_return [retval=new DSLMapParser.mapping_file_return()]</InnerVar>
                <InnerVar>Object [root_0=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [statement1=null]</InnerVar>
                <InnerVar>RewriteRuleSubtreeStream [stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTree</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>statement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapParser.statement_return</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DSLMapParser.statement_return [retval=new DSLMapParser.statement_return()]</InnerVar>
                <InnerVar>Object [root_0=null]</InnerVar>
                <InnerVar>Token [EOL3=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [entry2=null]</InnerVar>
                <InnerVar>Object [EOL3_tree=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTree</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>entry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapParser.entry_return</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DSLMapParser.entry_return [retval=new DSLMapParser.entry_return()]</InnerVar>
                <InnerVar>Object [root_0=null]</InnerVar>
                <InnerVar>Token [EQUALS7=null]</InnerVar>
                <InnerVar>Token [EOL9=null]</InnerVar>
                <InnerVar>Token [EOF10=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [scope_section4=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [meta_section5=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [key_section6=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [value_section8=null]</InnerVar>
                <InnerVar>Object [EQUALS7_tree=null]</InnerVar>
                <InnerVar>Object [EOL9_tree=null]</InnerVar>
                <InnerVar>Object [EOF10_tree=null]</InnerVar>
                <InnerVar>RewriteRuleTokenStream [stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS")]</InnerVar>
                <InnerVar>RewriteRuleTokenStream [stream_EOL=new RewriteRuleTokenStream(adaptor,"token EOL")]</InnerVar>
                <InnerVar>RewriteRuleTokenStream [stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF")]</InnerVar>
                <InnerVar>RewriteRuleSubtreeStream [stream_meta_section=new RewriteRuleSubtreeStream(adaptor,"rule meta_section")]</InnerVar>
                <InnerVar>RewriteRuleSubtreeStream [stream_key_section=new RewriteRuleSubtreeStream(adaptor,"rule key_section")]</InnerVar>
                <InnerVar>RewriteRuleSubtreeStream [stream_scope_section=new RewriteRuleSubtreeStream(adaptor,"rule scope_section")]</InnerVar>
                <InnerVar>RewriteRuleSubtreeStream [stream_value_section=new RewriteRuleSubtreeStream(adaptor,"rule value_section")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTree</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>scope_section</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapParser.scope_section_return</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DSLMapParser.scope_section_return [retval=new DSLMapParser.scope_section_return()]</InnerVar>
                <InnerVar>Object [root_0=null]</InnerVar>
                <InnerVar>Token [LEFT_SQUARE11=null]</InnerVar>
                <InnerVar>Token [RIGHT_SQUARE12=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [value1=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [value2=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [value3=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [value4=null]</InnerVar>
                <InnerVar>Object [LEFT_SQUARE11_tree=null]</InnerVar>
                <InnerVar>Object [RIGHT_SQUARE12_tree=null]</InnerVar>
                <InnerVar>RewriteRuleTokenStream [stream_RIGHT_SQUARE=new RewriteRuleTokenStream(adaptor,"token RIGHT_SQUARE")]</InnerVar>
                <InnerVar>RewriteRuleTokenStream [stream_LEFT_SQUARE=new RewriteRuleTokenStream(adaptor,"token LEFT_SQUARE")]</InnerVar>
                <InnerVar>RewriteRuleSubtreeStream [stream_any_key=new RewriteRuleSubtreeStream(adaptor,"rule any_key")]</InnerVar>
                <InnerVar>RewriteRuleSubtreeStream [stream_condition_key=new RewriteRuleSubtreeStream(adaptor,"rule condition_key")]</InnerVar>
                <InnerVar>RewriteRuleSubtreeStream [stream_keyword_key=new RewriteRuleSubtreeStream(adaptor,"rule keyword_key")]</InnerVar>
                <InnerVar>RewriteRuleSubtreeStream [stream_consequence_key=new RewriteRuleSubtreeStream(adaptor,"rule consequence_key")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTree</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>meta_section</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapParser.meta_section_return</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DSLMapParser.meta_section_return [retval=new DSLMapParser.meta_section_return()]</InnerVar>
                <InnerVar>Object [root_0=null]</InnerVar>
                <InnerVar>Token [LEFT_SQUARE13=null]</InnerVar>
                <InnerVar>Token [LITERAL14=null]</InnerVar>
                <InnerVar>Token [RIGHT_SQUARE15=null]</InnerVar>
                <InnerVar>Object [LEFT_SQUARE13_tree=null]</InnerVar>
                <InnerVar>Object [LITERAL14_tree=null]</InnerVar>
                <InnerVar>Object [RIGHT_SQUARE15_tree=null]</InnerVar>
                <InnerVar>RewriteRuleTokenStream [stream_RIGHT_SQUARE=new RewriteRuleTokenStream(adaptor,"token RIGHT_SQUARE")]</InnerVar>
                <InnerVar>RewriteRuleTokenStream [stream_LITERAL=new RewriteRuleTokenStream(adaptor,"token LITERAL")]</InnerVar>
                <InnerVar>RewriteRuleTokenStream [stream_LEFT_SQUARE=new RewriteRuleTokenStream(adaptor,"token LEFT_SQUARE")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTree</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>key_section</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapParser.key_section_return</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DSLMapParser.key_section_return [retval=new DSLMapParser.key_section_return()]</InnerVar>
                <InnerVar>Object [root_0=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [ks=null]</InnerVar>
                <InnerVar>RewriteRuleSubtreeStream [stream_key_sentence=new RewriteRuleSubtreeStream(adaptor,"rule key_sentence")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTree</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>key_sentence</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapParser.key_sentence_return</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DSLMapParser.key_sentence_return [retval=new DSLMapParser.key_sentence_return()]</InnerVar>
                <InnerVar>Object [root_0=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [cb=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [variable_definition16=null]</InnerVar>
                <InnerVar>RewriteRuleSubtreeStream [stream_key_chunk=new RewriteRuleSubtreeStream(adaptor,"rule key_chunk")]</InnerVar>
                <InnerVar>String [text=""]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTree</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>key_chunk</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapParser.key_chunk_return</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DSLMapParser.key_chunk_return [retval=new DSLMapParser.key_chunk_return()]</InnerVar>
                <InnerVar>Object [root_0=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [literal17=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTree</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>value_section</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapParser.value_section_return</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DSLMapParser.value_section_return [retval=new DSLMapParser.value_section_return()]</InnerVar>
                <InnerVar>Object [root_0=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [value_sentence18=null]</InnerVar>
                <InnerVar>RewriteRuleSubtreeStream [stream_value_sentence=new RewriteRuleSubtreeStream(adaptor,"rule value_sentence")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTree</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>value_sentence</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapParser.value_sentence_return</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DSLMapParser.value_sentence_return [retval=new DSLMapParser.value_sentence_return()]</InnerVar>
                <InnerVar>Object [root_0=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [vc=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [variable_reference19=null]</InnerVar>
                <InnerVar>RewriteRuleSubtreeStream [stream_value_chunk=new RewriteRuleSubtreeStream(adaptor,"rule value_chunk")]</InnerVar>
                <InnerVar>String [text=""]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTree</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>value_chunk</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapParser.value_chunk_return</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DSLMapParser.value_chunk_return [retval=new DSLMapParser.value_chunk_return()]</InnerVar>
                <InnerVar>Object [root_0=null]</InnerVar>
                <InnerVar>Token [EQUALS21=null]</InnerVar>
                <InnerVar>Token [COMMA22=null]</InnerVar>
                <InnerVar>Token [DOT23=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [literal20=null]</InnerVar>
                <InnerVar>Object [EQUALS21_tree=null]</InnerVar>
                <InnerVar>Object [COMMA22_tree=null]</InnerVar>
                <InnerVar>Object [DOT23_tree=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTree</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>literal</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapParser.literal_return</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DSLMapParser.literal_return [retval=new DSLMapParser.literal_return()]</InnerVar>
                <InnerVar>Object [root_0=null]</InnerVar>
                <InnerVar>Token [set24=null]</InnerVar>
                <InnerVar>Object [set24_tree=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTree</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>variable_definition</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapParser.variable_definition_return</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DSLMapParser.variable_definition_return [retval=new DSLMapParser.variable_definition_return()]</InnerVar>
                <InnerVar>Object [root_0=null]</InnerVar>
                <InnerVar>Token [lc=null]</InnerVar>
                <InnerVar>Token [name=null]</InnerVar>
                <InnerVar>Token [q=null]</InnerVar>
                <InnerVar>Token [rc=null]</InnerVar>
                <InnerVar>Token [COLON25=null]</InnerVar>
                <InnerVar>Token [COLON26=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [pat=null]</InnerVar>
                <InnerVar>Object [lc_tree=null]</InnerVar>
                <InnerVar>Object [name_tree=null]</InnerVar>
                <InnerVar>Object [q_tree=null]</InnerVar>
                <InnerVar>Object [rc_tree=null]</InnerVar>
                <InnerVar>Object [COLON25_tree=null]</InnerVar>
                <InnerVar>Object [COLON26_tree=null]</InnerVar>
                <InnerVar>RewriteRuleTokenStream [stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON")]</InnerVar>
                <InnerVar>RewriteRuleTokenStream [stream_LITERAL=new RewriteRuleTokenStream(adaptor,"token LITERAL")]</InnerVar>
                <InnerVar>RewriteRuleTokenStream [stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY")]</InnerVar>
                <InnerVar>RewriteRuleTokenStream [stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY")]</InnerVar>
                <InnerVar>RewriteRuleSubtreeStream [stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern")]</InnerVar>
                <InnerVar>String [text=""]</InnerVar>
                <InnerVar>boolean [hasSpaceBefore=false]</InnerVar>
                <InnerVar>boolean [hasSpaceAfter=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTree</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pattern</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapParser.pattern_return</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DSLMapParser.pattern_return [retval=new DSLMapParser.pattern_return()]</InnerVar>
                <InnerVar>Object [root_0=null]</InnerVar>
                <InnerVar>Token [DOT28=null]</InnerVar>
                <InnerVar>Token [MISC29=null]</InnerVar>
                <InnerVar>Token [LEFT_CURLY30=null]</InnerVar>
                <InnerVar>Token [RIGHT_CURLY32=null]</InnerVar>
                <InnerVar>Token [LEFT_SQUARE33=null]</InnerVar>
                <InnerVar>Token [RIGHT_SQUARE35=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [literal27=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [literal31=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [pattern34=null]</InnerVar>
                <InnerVar>Object [DOT28_tree=null]</InnerVar>
                <InnerVar>Object [MISC29_tree=null]</InnerVar>
                <InnerVar>Object [LEFT_CURLY30_tree=null]</InnerVar>
                <InnerVar>Object [RIGHT_CURLY32_tree=null]</InnerVar>
                <InnerVar>Object [LEFT_SQUARE33_tree=null]</InnerVar>
                <InnerVar>Object [RIGHT_SQUARE35_tree=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTree</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>variable_reference</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapParser.variable_reference_return</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DSLMapParser.variable_reference_return [retval=new DSLMapParser.variable_reference_return()]</InnerVar>
                <InnerVar>Object [root_0=null]</InnerVar>
                <InnerVar>Token [lc=null]</InnerVar>
                <InnerVar>Token [rc=null]</InnerVar>
                <InnerVar>ParserRuleReturnScope [name=null]</InnerVar>
                <InnerVar>Object [lc_tree=null]</InnerVar>
                <InnerVar>Object [rc_tree=null]</InnerVar>
                <InnerVar>RewriteRuleTokenStream [stream_RIGHT_CURLY=new RewriteRuleTokenStream(adaptor,"token RIGHT_CURLY")]</InnerVar>
                <InnerVar>RewriteRuleTokenStream [stream_LEFT_CURLY=new RewriteRuleTokenStream(adaptor,"token LEFT_CURLY")]</InnerVar>
                <InnerVar>RewriteRuleSubtreeStream [stream_variable_reference_expr=new RewriteRuleSubtreeStream(adaptor,"rule variable_reference_expr")]</InnerVar>
                <InnerVar>boolean [hasSpaceBefore=false]</InnerVar>
                <InnerVar>boolean [hasSpaceAfter=false]</InnerVar>
                <InnerVar>String [text=""]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTree</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>variable_reference_expr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapParser.variable_reference_expr_return</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DSLMapParser.variable_reference_expr_return [retval=new DSLMapParser.variable_reference_expr_return()]</InnerVar>
                <InnerVar>Object [root_0=null]</InnerVar>
                <InnerVar>Token [set36=null]</InnerVar>
                <InnerVar>Object [set36_tree=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTree</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>condition_key</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapParser.condition_key_return</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DSLMapParser.condition_key_return [retval=new DSLMapParser.condition_key_return()]</InnerVar>
                <InnerVar>Object [root_0=null]</InnerVar>
                <InnerVar>Token [value=null]</InnerVar>
                <InnerVar>Object [value_tree=null]</InnerVar>
                <InnerVar>RewriteRuleTokenStream [stream_LITERAL=new RewriteRuleTokenStream(adaptor,"token LITERAL")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTree</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>consequence_key</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapParser.consequence_key_return</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DSLMapParser.consequence_key_return [retval=new DSLMapParser.consequence_key_return()]</InnerVar>
                <InnerVar>Object [root_0=null]</InnerVar>
                <InnerVar>Token [value=null]</InnerVar>
                <InnerVar>Object [value_tree=null]</InnerVar>
                <InnerVar>RewriteRuleTokenStream [stream_LITERAL=new RewriteRuleTokenStream(adaptor,"token LITERAL")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTree</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>keyword_key</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapParser.keyword_key_return</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DSLMapParser.keyword_key_return [retval=new DSLMapParser.keyword_key_return()]</InnerVar>
                <InnerVar>Object [root_0=null]</InnerVar>
                <InnerVar>Token [value=null]</InnerVar>
                <InnerVar>Object [value_tree=null]</InnerVar>
                <InnerVar>RewriteRuleTokenStream [stream_LITERAL=new RewriteRuleTokenStream(adaptor,"token LITERAL")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTree</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>any_key</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapParser.any_key_return</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DSLMapParser.any_key_return [retval=new DSLMapParser.any_key_return()]</InnerVar>
                <InnerVar>Object [root_0=null]</InnerVar>
                <InnerVar>Token [value=null]</InnerVar>
                <InnerVar>Object [value_tree=null]</InnerVar>
                <InnerVar>RewriteRuleTokenStream [stream_LITERAL=new RewriteRuleTokenStream(adaptor,"token LITERAL")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred3_DSLMap_fragment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred6_DSLMap_fragment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ParserRuleReturnScope [value1=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred7_DSLMap_fragment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ParserRuleReturnScope [value2=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred8_DSLMap_fragment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>ParserRuleReturnScope [value3=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred12_DSLMap_fragment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred15_DSLMap_fragment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred16_DSLMap_fragment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred17_DSLMap_fragment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred18_DSLMap_fragment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred22_DSLMap_fragment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Token [q=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred24_DSLMap_fragment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred28_DSLMap_fragment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred3_DSLMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [start=input.mark()]</InnerVar>
                <InnerVar>boolean [success=!state.failed]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>input;rewind;[start]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred12_DSLMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [start=input.mark()]</InnerVar>
                <InnerVar>boolean [success=!state.failed]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>input;rewind;[start]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred7_DSLMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [start=input.mark()]</InnerVar>
                <InnerVar>boolean [success=!state.failed]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>input;rewind;[start]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred8_DSLMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [start=input.mark()]</InnerVar>
                <InnerVar>boolean [success=!state.failed]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>input;rewind;[start]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred6_DSLMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [start=input.mark()]</InnerVar>
                <InnerVar>boolean [success=!state.failed]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>input;rewind;[start]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred28_DSLMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [start=input.mark()]</InnerVar>
                <InnerVar>boolean [success=!state.failed]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>input;rewind;[start]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred15_DSLMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [start=input.mark()]</InnerVar>
                <InnerVar>boolean [success=!state.failed]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>input;rewind;[start]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred18_DSLMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [start=input.mark()]</InnerVar>
                <InnerVar>boolean [success=!state.failed]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>input;rewind;[start]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred17_DSLMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [start=input.mark()]</InnerVar>
                <InnerVar>boolean [success=!state.failed]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>input;rewind;[start]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred22_DSLMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [start=input.mark()]</InnerVar>
                <InnerVar>boolean [success=!state.failed]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>input;rewind;[start]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred16_DSLMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [start=input.mark()]</InnerVar>
                <InnerVar>boolean [success=!state.failed]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>input;rewind;[start]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synpred24_DSLMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [start=input.mark()]</InnerVar>
                <InnerVar>boolean [success=!state.failed]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>input;rewind;[start]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>