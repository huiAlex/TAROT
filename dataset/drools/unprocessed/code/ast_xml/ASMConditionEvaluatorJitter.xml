<Class>
    <Id>748</Id>
    <Package>org.drools.core.rule.constraint</Package>
    <ClassName>ASMConditionEvaluatorJitter</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>LEFT_OPERAND</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RIGHT_OPERAND</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ARGUMENTS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>condition</FieldName>
            <FieldType>Condition</FieldType>
        </Field>
        <Field>
            <FieldName>declarations</FieldName>
            <FieldType>Declaration[]</FieldType>
        </Field>
        <Field>
            <FieldName>tuple</FieldName>
            <FieldType>Tuple</FieldType>
        </Field>
        <Field>
            <FieldName>operators</FieldName>
            <FieldType>EvaluatorWrapper[]</FieldType>
        </Field>
        <Field>
            <FieldName>declPositions</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>jitEvaluator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ConditionEvaluator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>condition</ParamName>
                    <ParamType>Condition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declarations</ParamName>
                    <ParamType>Declaration[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operators</ParamName>
                    <ParamType>EvaluatorWrapper[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tuple</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassGenerator [generator=new ClassGenerator(getUniqueClassName(),classLoader).setInterfaces(ConditionEvaluator.class).addStaticField(ACC_PRIVATE | ACC_FINAL,"EXPRESSION",String.class,expression).addField(ACC_PRIVATE | ACC_FINAL,"declarations",Declaration[].class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>generator;addMethod;[ACC_PUBLIC, "evaluate", generator.methodDescr(boolean.class,InternalFactHandle.class,InternalWorkingMemory.class,Tuple.class), new EvaluateMethodGenerator(condition,declarations,operators,tuple)]</InnerMethodInvoke>
                <InnerMethodInvoke>generator;addField;[ACC_PRIVATE | ACC_FINAL, "operators", EvaluatorWrapper[].class]</InnerMethodInvoke>
                <InnerMethodInvoke>generator;addDefaultConstructor;[new ClassGenerator.MethodBody(){
  public void body(  MethodVisitor mv){
    putFieldInThisFromRegistry("declarations",Declaration[].class,1);
    putFieldInThisFromRegistry("operators",EvaluatorWrapper[].class,2);
    mv.visitInsn(RETURN);
  }
}
, Declaration[].class, EvaluatorWrapper[].class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;putFieldInThisFromRegistry;["declarations", Declaration[].class, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[RETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;putFieldInThisFromRegistry;["declarations", Declaration[].class, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;putFieldInThisFromRegistry;["operators", EvaluatorWrapper[].class, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[RETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUniqueClassName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUniqueName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prefix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>EvaluateMethodGenerator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>condition</ParamName>
                    <ParamType>Condition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declarations</ParamName>
                    <ParamType>Declaration[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operators</ParamName>
                    <ParamType>EvaluatorWrapper[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leftTuple</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;jitArguments;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;jitOperators;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;jitCondition;[condition]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[IRETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitArguments</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;GeneratorHelper.DeclarationMatcher&gt; [declarationMatchers=matchDeclarationsToTuple(declarations)]</InnerVar>
                <InnerVar>Tuple [currentTuple=tuple]</InnerVar>
                <InnerVar>int [decPos=ARGUMENTS]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 3]</InnerMethodInvoke>
                <InnerMethodInvoke>null;store;[4, Tuple.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitOperators</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 3]</InnerMethodInvoke>
                <InnerMethodInvoke>null;getFieldFromThis;["operators", EvaluatorWrapper[].class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeStatic;[EvaluatorHelper.class, "initOperators", void.class, InternalFactHandle.class, InternalWorkingMemory.class, Tuple.class, EvaluatorWrapper[].class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitCondition</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>condition</ParamName>
                    <ParamType>Condition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitSingleCondition</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>singleCondition</ParamName>
                    <ParamType>SingleCondition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitCombinedCondition</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>combinedCondition</ParamName>
                    <ParamType>CombinedCondition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [isAnd=combinedCondition.isAnd()]</InnerVar>
                <InnerVar>Label [shortcut=new Label()]</InnerVar>
                <InnerVar>Label [noShortcut=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitInsn;[isAnd ? ICONST_1 : ICONST_0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, noShortcut]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[shortcut]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[isAnd ? ICONST_0 : ICONST_1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[noShortcut]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitUnary</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>singleCondition</ParamName>
                    <ParamType>SingleCondition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;jitExpression;[singleCondition.getLeft()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitBinary</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>singleCondition</ParamName>
                    <ParamType>SingleCondition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [left=singleCondition.getLeft()]</InnerVar>
                <InnerVar>Expression [right=singleCondition.getRight()]</InnerVar>
                <InnerVar>Class&lt;?&gt; [commonType=singleCondition.getOperation().needsSameType() ? findCommonClass(left.getType(),!left.canBeNull(),right.getType(),!right.canBeNull(),singleCondition.getOperation().isEquality()) : null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitMatches</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>singleCondition</ParamName>
                    <ParamType>SingleCondition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [matchingString=((FixedExpression)singleCondition.getRight()).getValue().toString()]</InnerVar>
                <InnerVar>String [patternVariableName=getUniqueName("pattern")]</InnerVar>
                <InnerVar>Label [notNullLabel=jitLeftIsNull(singleCondition.getLeft().getType() == String.class ? jitNullSafeOperationStart() : jitNullSafeCoercion(singleCondition.getLeft().getType(),String.class))]</InnerVar>
                <InnerVar>Label [nullEvaluation=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getClassGenerator();addStaticField;[ACC_PRIVATE | ACC_FINAL, patternVariableName, Pattern.class, null]</InnerMethodInvoke>
                <InnerMethodInvoke>getClassGenerator();addStaticInitBlock;[new ClassGenerator.MethodBody(){
  @Override public void body(  MethodVisitor mv){
    mv.visitLdcInsn(matchingString);
    invokeStatic(Pattern.class,"compile",Pattern.class,String.class);
    putStaticField(patternVariableName,Pattern.class);
  }
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>null;jitExpression;[singleCondition.getLeft(), String.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;store;[LEFT_OPERAND, singleCondition.getLeft().getType()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ICONST_0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, nullEvaluation]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[notNullLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>null;getStaticField;[patternVariableName, Pattern.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;load;[LEFT_OPERAND]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeVirtual;[Pattern.class, "matcher", Matcher.class, CharSequence.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeVirtual;[Matcher.class, "matches", boolean.class]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[nullEvaluation]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitLdcInsn;[matchingString]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeStatic;[Pattern.class, "compile", Pattern.class, String.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;putStaticField;[patternVariableName, Pattern.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitInstanceof</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>singleCondition</ParamName>
                    <ParamType>SingleCondition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [value=(Class&lt;?&gt;)((FixedExpression)singleCondition.getRight()).getValue()]</InnerVar>
                <InnerVar>String [internalClassName=internalName(value)]</InnerVar>
                <InnerVar>Expression [left=singleCondition.getLeft()]</InnerVar>
                <InnerVar>Class&lt;?&gt; [leftType=isDeclarationExpression(left) ? convertFromPrimitiveType(left.getType()) : left.getType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;jitExpression;[left, leftType]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[INSTANCEOF, internalClassName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitPrimitiveBinary</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>singleCondition</ParamName>
                    <ParamType>SingleCondition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>left</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>right</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Label [nullArg=new Label()]</InnerVar>
                <InnerVar>Label [nonNullArg=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;ensureNotNullArgs;[left, right, nullArg]</InnerMethodInvoke>
                <InnerMethodInvoke>null;jitExpression;[left, type]</InnerMethodInvoke>
                <InnerMethodInvoke>null;castExpressionResultToPrimitive;[left, type]</InnerMethodInvoke>
                <InnerMethodInvoke>null;jitExpression;[right, type]</InnerMethodInvoke>
                <InnerMethodInvoke>null;castExpressionResultToPrimitive;[right, type]</InnerMethodInvoke>
                <InnerMethodInvoke>null;jitPrimitiveOperation;[singleCondition.getOperation(), type]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, nonNullArg]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[nullArg]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ICONST_0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[nonNullArg]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ensureNotNullArgs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>left</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>right</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nullArg</ParamName>
                    <ParamType>Label</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;ensureNotNullArgs;[left, nullArg]</InnerMethodInvoke>
                <InnerMethodInvoke>null;ensureNotNullArgs;[right, nullArg]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ensureNotNullArgs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exp</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nullArg</ParamName>
                    <ParamType>Label</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ensureNotNullInAritmeticExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>aritmeticExpression</ParamName>
                    <ParamType>AritmeticExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nullArg</ParamName>
                    <ParamType>Label</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>castExpressionResultToPrimitive</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitObjectBinary</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>singleCondition</ParamName>
                    <ParamType>SingleCondition</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>left</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>right</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [leftType=isDeclarationExpression(left) ? convertFromPrimitiveType(left.getType()) : left.getType()]</InnerVar>
                <InnerVar>Class&lt;?&gt; [rightType=isDeclarationExpression(right) ? convertFromPrimitiveType(right.getType()) : right.getType()]</InnerVar>
                <InnerVar>Label [shortcutEvaluation=new Label()]</InnerVar>
                <InnerVar>BooleanOperator [operation=singleCondition.getOperation()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;jitExpression;[left, type != null ? type : leftType]</InnerMethodInvoke>
                <InnerMethodInvoke>null;store;[LEFT_OPERAND, leftType]</InnerMethodInvoke>
                <InnerMethodInvoke>null;jitExpression;[right, type != null ? type : rightType]</InnerMethodInvoke>
                <InnerMethodInvoke>null;store;[RIGHT_OPERAND, rightType]</InnerMethodInvoke>
                <InnerMethodInvoke>null;prepareLeftOperand;[operation, type, leftType, rightType, shortcutEvaluation]</InnerMethodInvoke>
                <InnerMethodInvoke>null;prepareRightOperand;[right, type, rightType, shortcutEvaluation]</InnerMethodInvoke>
                <InnerMethodInvoke>null;load;[LEFT_OPERAND]</InnerMethodInvoke>
                <InnerMethodInvoke>null;load;[RIGHT_OPERAND]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[shortcutEvaluation]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findComparingClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findComparingClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>originalType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findComparingParameterClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>interfaze</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findComparingClassOnSuperInterfaces</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rawType</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareLeftOperand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>BooleanOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leftType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>shortcutEvaluation</ParamName>
                    <ParamType>Label</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Label [notNullLabel=jitLeftIsNull(type == null || leftType == type ? jitNullSafeOperationStart() : jitNullSafeCoercion(leftType,type))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, shortcutEvaluation]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[notNullLabel]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareRightOperand</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>right</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>shortcutEvaluation</ParamName>
                    <ParamType>Label</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Label [nullLabel=new Label()]</InnerVar>
                <InnerVar>Label [notNullLabel=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;load;[RIGHT_OPERAND]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFNULL, nullLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, notNullLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[nullLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ICONST_0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, shortcutEvaluation]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[notNullLabel]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkNullEquality</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Label [rightNullLabel=new Label()]</InnerVar>
                <InnerVar>Label [rightNotNullLabel=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;load;[RIGHT_OPERAND]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFNULL, rightNullLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ICONST_0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, rightNotNullLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[rightNullLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ICONST_1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[rightNotNullLabel]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitNullSafeOperationStart</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Label</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Label [nullLabel=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;load;[LEFT_OPERAND]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFNULL, nullLabel]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitNullSafeCoercion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Label</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fromType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>toType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Label [nullLabel=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;load;[LEFT_OPERAND]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFNULL, nullLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>null;castOrCoerceTo;[LEFT_OPERAND, fromType, toType, nullLabel]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitLeftIsNull</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Label</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nullLabel</ParamName>
                    <ParamType>Label</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Label [notNullLabel=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, notNullLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[nullLabel]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>castOrCoerceTo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>regNr</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fromType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>toType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nullLabel</ParamName>
                    <ParamType>Label</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Label [nonInstanceOfLabel=new Label()]</InnerVar>
                <InnerVar>Label [endOfCoercionLabel=new Label()]</InnerVar>
                <InnerVar>boolean [isNumber=Number.class.isAssignableFrom(toType)]</InnerVar>
                <InnerVar>Label [tryOk=null]</InnerVar>
                <InnerVar>Label [inCatch=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;load;[regNr]</InnerMethodInvoke>
                <InnerMethodInvoke>null;instanceOf;[toType]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFEQ, nonInstanceOfLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>null;load;[regNr]</InnerMethodInvoke>
                <InnerMethodInvoke>null;cast;[toType]</InnerMethodInvoke>
                <InnerMethodInvoke>null;store;[regNr, toType]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, endOfCoercionLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[nonInstanceOfLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[endOfCoercionLabel]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>canBeCoercedByStringConstructor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>coerceByConstructor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fromType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>toType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;invokeVirtual;[fromType, "toString", String.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>castOrCoercePrimitive</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>regNr</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fromType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>toType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;load;[regNr]</InnerMethodInvoke>
                <InnerMethodInvoke>null;store;[regNr, toType]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exp</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exp</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>requiredClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitCastExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exp</ParamName>
                    <ParamType>CastExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;jitExpression;[exp.expression, Object.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;cast;[exp.expression instanceof FixedExpression ? ((FixedExpression)exp.expression).getTypeAsPrimitive() : exp.expression.getType(), exp.getType()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitArrayCreationExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exp</ParamName>
                    <ParamType>ArrayCreationExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;createArray;[exp.getComponentType(), exp.items.size()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitEvaluatedExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exp</ParamName>
                    <ParamType>EvaluatedExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>firstInvocation</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>currentClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Iterator&lt;Invocation&gt; [invocations=exp.invocations.iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitVariableExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exp</ParamName>
                    <ParamType>VariableExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;jitReadVariable;[exp.variableName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitReadVariable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>variableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitAritmeticExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>aritmeticExpression</ParamName>
                    <ParamType>AritmeticExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [operationType=aritmeticExpression.getType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;jitAritmeticOperation;[operationType, aritmeticExpression.operator]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitStringConcat</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>left</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>right</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;invokeConstructor;[StringBuilder.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;jitExpression;[left, String.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeVirtual;[StringBuilder.class, "append", StringBuilder.class, getTypeForAppend(left.getType())]</InnerMethodInvoke>
                <InnerMethodInvoke>null;jitExpression;[right, String.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeVirtual;[StringBuilder.class, "append", StringBuilder.class, getTypeForAppend(right.getType())]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeVirtual;[StringBuilder.class, "toString", String.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeForAppend</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitExpressionToPrimitiveType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>primitiveType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;jitExpression;[expression, primitiveType]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isDeclarationExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitAritmeticOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>operationType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operator</ParamName>
                    <ParamType>AritmeticOperator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitInvocation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>invocation</ParamName>
                    <ParamType>Invocation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>currentClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>firstInvocation</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitMethodInvocation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>invocation</ParamName>
                    <ParamType>MethodInvocation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>currentClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>firstInvocation</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Method [method=invocation.getMethod()]</InnerVar>
                <InnerVar>int [argumentCounter=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;invoke;[method]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitConstructorInvocation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>invocation</ParamName>
                    <ParamType>ConstructorInvocation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Constructor [constructor=invocation.getConstructor()]</InnerVar>
                <InnerVar>Class&lt;?&gt; [clazz=invocation.getReturnType()]</InnerVar>
                <InnerVar>int [argumentCounter=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitTypeInsn;[NEW, internalName(clazz)]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[DUP]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeSpecial;[clazz, "&lt;init&gt;", null, constructor.getParameterTypes()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitArrayAccessInvocation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>invocation</ParamName>
                    <ParamType>ArrayAccessInvocation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;cast;[invocation.getArrayType()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;jitExpression;[invocation.getIndex(), int.class]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[getCodeForType(invocation.getReturnType(),IALOAD)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitArrayLenghtInvocation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;invokeStatic;[EvaluatorHelper.class, "arrayLenght", int.class, Object.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitListAccessInvocation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>invocation</ParamName>
                    <ParamType>ListAccessInvocation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;jitExpression;[invocation.getIndex(), int.class]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeInterface;[List.class, "get", Object.class, int.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitMapAccessInvocation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>invocation</ParamName>
                    <ParamType>MapAccessInvocation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>firstInvocation</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [keyClass=jitExpression(invocation.getKey(),invocation.getKeyType())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;invokeInterface;[Map.class, "get", Object.class, Object.class]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitFieldAccessInvocation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>invocation</ParamName>
                    <ParamType>FieldAccessInvocation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>currentClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>firstInvocation</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Field [field=invocation.getField()]</InnerVar>
                <InnerVar>boolean [isStatic=(field.getModifiers() &amp; Modifier.STATIC) != 0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;readField;[field]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitPrimitiveOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>BooleanOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [opCode=toOpCode(op,type)]</InnerVar>
                <InnerVar>Label [trueBranchLabel=new Label()]</InnerVar>
                <InnerVar>Label [returnLabel=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitJumpInsn;[opCode, trueBranchLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ICONST_0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, returnLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[trueBranchLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ICONST_1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[returnLabel]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>jitNegation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Label [trueBranch=new Label()]</InnerVar>
                <InnerVar>Label [falseBranch=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFNE, trueBranch]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ICONST_1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, falseBranch]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[trueBranch]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ICONST_0]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[falseBranch]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toOpCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>BooleanOperator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findCommonClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>class1</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>primitive1</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>class2</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>primitive2</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forEquality</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [result=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isCoercibleToString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findCommonClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>class1</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>class2</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>canBePrimitive</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>