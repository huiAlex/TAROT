<Class>
    <Id>2298</Id>
    <Package>org.drools.testcoverage.common.util</Package>
    <ClassName>PropertiesUtil</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PropertiesUtil  /** 
 * Provides utility methods to obtain relevant properties and directories for a test.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>LOGGER</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
        <Field>
            <FieldName>BUILD_PROPS_SEARCH_PARENT_DIR_LIMIT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>properties</FieldName>
            <FieldType>Properties</FieldType>
        </Field>
        <Field>
            <FieldName>basedir</FieldName>
            <FieldType>File</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PropertiesUtil</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBasedir</MethodName>
            <MethodComment>/** 
 * Gets the base directory of the test execution that was specified by System property &lt;code&gt;basedir&lt;/code&gt;. Method expects the property to be set.
 * @return the basedir directory
 */
</MethodComment>
            <ReturnType>File</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTempDir</MethodName>
            <MethodComment>/** 
 * Returns location of directory for temporary files
 * @return directory to save temporary files to
 */
</MethodComment>
            <ReturnType>File</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>File [tempDir]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLogDir</MethodName>
            <MethodComment>/** 
 * Returns the directory to store log files.
 * @return directory to store log files to
 */
</MethodComment>
            <ReturnType>File</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProperty</MethodName>
            <MethodComment>/** 
 * Retrieves the property value.
 * @param key name of the property
 * @return Property value or &lt;code&gt;null&lt;/code&gt; if undefined.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProperty</MethodName>
            <MethodComment>/** 
 * Retrieves the property value.
 * @param key name of the property
 * @param defaultValue value to return if property is undefined
 * @return Property value or &lt;code&gt;defaultValue&lt;/code&gt; if undefined.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defaultValue</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProperties</MethodName>
            <MethodComment>/** 
 * Get all properties defined in build.properties file.
 * @throws IllegalStateException when reading the property fails
 * @return properties from build.properties
 */
</MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createProperties</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Properties</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>File [propFile=getPropertiesFile(getBasedir().getAbsoluteFile(),BUILD_PROPS_SEARCH_PARENT_DIR_LIMIT)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertTrue;["Couldn't find build.properties at " + propFile.getAbsolutePath(), propFile.exists()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPropertiesFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>File</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dir</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentDirLimit</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>File [propFile=new File(dir,"build.properties")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>LOGGER;debug;["Searching for 'build.properties', parent search limit is {}.", parentDirLimit]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertTrue;["build.properties file not found before reaching the limit for searching parent directories.", parentDirLimit &gt;= 0 &amp;&amp; dir != null]</InnerMethodInvoke>
                <InnerMethodInvoke>LOGGER;debug;["- searching dir: {}", dir.getAbsolutePath()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>