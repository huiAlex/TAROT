<Class>
    <Id>3232</Id>
    <Package>org.drools.core.phreak</Package>
    <ClassName>AddRemoveRule</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
        <Field>
            <FieldName>ADD_STRATEGY</FieldName>
            <FieldType>ExistingPathStrategy</FieldType>
        </Field>
        <Field>
            <FieldName>REMOVE_STRATEGY</FieldName>
            <FieldType>ExistingPathStrategy</FieldType>
        </Field>
        <Field>
            <FieldName>segmentMemory</FieldName>
            <FieldType>SegmentMemory</FieldType>
        </Field>
        <Field>
            <FieldName>pathMemory</FieldName>
            <FieldType>PathMemory</FieldType>
        </Field>
        <Field>
            <FieldName>subjectPmem</FieldName>
            <FieldType>PathMemory</FieldType>
        </Field>
        <Field>
            <FieldName>subjectPmems</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>subjectPmems</FieldName>
            <FieldType>PathMemory</FieldType>
        </Field>
        <Field>
            <FieldName>otherPmems</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>otherPmems</FieldName>
            <FieldType>PathMemory</FieldType>
        </Field>
        <Field>
            <FieldName>subjectEndNode</FieldName>
            <FieldType>PathEndNode</FieldType>
        </Field>
        <Field>
            <FieldName>subjectSplit</FieldName>
            <FieldType>LeftTupleNode</FieldType>
        </Field>
        <Field>
            <FieldName>subjectEndNodes</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>subjectEndNodes</FieldName>
            <FieldType>PathEndNode</FieldType>
        </Field>
        <Field>
            <FieldName>subjectSplits</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>subjectSplits</FieldName>
            <FieldType>LeftTupleNode</FieldType>
        </Field>
        <Field>
            <FieldName>otherEndNodes</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>otherEndNodes</FieldName>
            <FieldType>PathEndNode</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>addRule</MethodName>
            <MethodComment>/** 
 * This method is called after the rule nodes have been added to the network For add tuples are processed after the segments and pmems have been adjusted
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tn</ParamName>
                    <ParamType>TerminalNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wms</ParamName>
                    <ParamType>InternalWorkingMemory[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>kBase</ParamName>
                    <ParamType>InternalKnowledgeBase</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [hasProtos=kBase.hasSegmentPrototypes()]</InnerVar>
                <InnerVar>boolean [hasWms=wms.length &gt; 0]</InnerVar>
                <InnerVar>RuleImpl [rule=tn.getRule()]</InnerVar>
                <InnerVar>LeftTupleNode [firstSplit=getNetworkSplitPoint(tn)]</InnerVar>
                <InnerVar>PathEndNodes [pathEndNodes=getPathEndNodes(kBase,firstSplit,tn,rule,hasProtos,hasWms)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeRule</MethodName>
            <MethodComment>/** 
 * This method is called before the rule nodes are removed from the network. For remove tuples are processed before the segments and pmems have been adjusted
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tn</ParamName>
                    <ParamType>TerminalNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wms</ParamName>
                    <ParamType>InternalWorkingMemory[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>kBase</ParamName>
                    <ParamType>InternalKnowledgeBase</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [hasProtos=kBase.hasSegmentPrototypes()]</InnerVar>
                <InnerVar>boolean [hasWms=wms.length &gt; 0]</InnerVar>
                <InnerVar>RuleImpl [rule=tn.getRule()]</InnerVar>
                <InnerVar>LeftTupleNode [firstSplit=getNetworkSplitPoint(tn)]</InnerVar>
                <InnerVar>PathEndNodes [pathEndNodes=getPathEndNodes(kBase,firstSplit,tn,rule,hasProtos,hasWms)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSegmenMemories</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SegmentMemory[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmem</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>adjustSegment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smemsToNotify</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smem</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smemSplitAdjustAmount</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleSplit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmem</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>prevSmems</ParamName>
                    <ParamType>SegmentMemory[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smems</ParamName>
                    <ParamType>SegmentMemory[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>prevSmemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentNode</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tn</ParamName>
                    <ParamType>TerminalNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>visited</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smemsToNotify</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodeToSegmentMap</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processSegmentMemories</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>smems</ParamName>
                    <ParamType>SegmentMemory[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pmem</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>incSmemIndex1</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>smemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>incSmemIndex2</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>smemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>incPrevSmemIndex1</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prevSmemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>incPrevSmemIndex2</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prevSmemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSegmenMemories</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SegmentMemory[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmem</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>adjustSegment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smemsToNotify</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smem</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smemSplitAdjustAmount</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>smemsToNotify;add;[smem]</InnerMethodInvoke>
                <InnerMethodInvoke>smem;unlinkSegment;[wm]</InnerMethodInvoke>
                <InnerMethodInvoke>null;correctSegmentMemoryAfterSplitOnAdd;[smem, smemSplitAdjustAmount]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleSplit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmem</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>prevSmems</ParamName>
                    <ParamType>SegmentMemory[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smems</ParamName>
                    <ParamType>SegmentMemory[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>prevSmemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentNode</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tn</ParamName>
                    <ParamType>TerminalNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>visited</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smemsToNotify</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodeToSegmentMap</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processSegmentMemories</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>smems</ParamName>
                    <ParamType>SegmentMemory[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pmem</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>incSmemIndex1</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>smemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>incPrevSmemIndex1</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prevSmemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>incSmemIndex2</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>smemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>incPrevSmemIndex2</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prevSmemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSegmenMemories</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SegmentMemory[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmem</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>adjustSegment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smemsToNotify</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smem</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smemSplitAdjustAmount</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>smemsToNotify;add;[smem]</InnerMethodInvoke>
                <InnerMethodInvoke>smem;unlinkSegment;[wm]</InnerMethodInvoke>
                <InnerMethodInvoke>null;correctSegmentMemoryAfterSplitOnRemove;[smem, smemSplitAdjustAmount]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleSplit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmem</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>prevSmems</ParamName>
                    <ParamType>SegmentMemory[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smems</ParamName>
                    <ParamType>SegmentMemory[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>prevSmemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentNode</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tn</ParamName>
                    <ParamType>TerminalNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>visited</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smemsToNotify</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodeToSegmentMap</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SegmentMemory [sm1=smems[smemIndex]]</InnerVar>
                <InnerVar>SegmentMemory [sm2=prevSmems[prevSmemIndex]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;correctMemoryOnSplitsChanged;[parentNode, tn, wm]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processSegmentMemories</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>smems</ParamName>
                    <ParamType>SegmentMemory[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pmem</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>incSmemIndex1</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>smemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>incPrevSmemIndex1</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prevSmemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>incSmemIndex2</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>smemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>incPrevSmemIndex2</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prevSmemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>handleExistingPaths</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SegmentMemory</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tn</ParamName>
                    <ParamType>TerminalNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>prevSmemsLookup</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pmems</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>strategy</ParamName>
                    <ParamType>ExistingPathStrategy</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;SegmentMemory&gt; [smemsToNotify=new HashSet&lt;SegmentMemory&gt;()]</InnerVar>
                <InnerVar>Set&lt;SegmentMemory&gt; [visitedSegments=new HashSet&lt;SegmentMemory&gt;()]</InnerVar>
                <InnerVar>Set&lt;LeftTupleNode&gt; [visitedNodes=new HashSet&lt;LeftTupleNode&gt;()]</InnerVar>
                <InnerVar>Map&lt;LeftTupleNode,SegmentMemory&gt; [nodeToSegmentMap=new HashMap&lt;LeftTupleNode,SegmentMemory&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addNewPaths</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smemsToNotify</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pmems</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;LeftTupleNode&gt; [visited=new HashSet&lt;LeftTupleNode&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeNewPaths</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pmems</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Integer&gt; [visitedNodes=new HashSet&lt;Integer&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSplit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSplit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>removingTN</ParamName>
                    <ParamType>TerminalNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Flushed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segmentMemory</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pathMemory</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flushStagedTuples</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tn</ParamName>
                    <ParamType>TerminalNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pmem</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pathEndNodes</ParamName>
                    <ParamType>PathEndNodes</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Flushed&gt; [flushed=new ArrayList&lt;Flushed&gt;()]</InnerVar>
                <InnerVar>int [flushCount=1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flushStagedTuples</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>splitStartNode</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pmem</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [smemIndex=getSegmentPos(splitStartNode)]</InnerVar>
                <InnerVar>SegmentMemory[] [smems=pmem.getSegmentMemories()]</InnerVar>
                <InnerVar>SegmentMemory [sm=null]</InnerVar>
                <InnerVar>int [length=smems.length]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flushLeftTupleIfNecessary</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sm</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>streamMode</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flushLeftTupleIfNecessary</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sm</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leftTuple</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>streamMode</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stagedType</ParamName>
                    <ParamType>short</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PathMemory [pmem=streamMode ? sm.getPathMemories().get(0) : sm.getFirstDataDrivenPathMemory()]</InnerVar>
                <InnerVar>TupleSets&lt;LeftTuple&gt; [leftTupleSets=new TupleSetsImpl&lt;LeftTuple&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;forceFlushLeftTuple;[pmem, sm, wm, leftTupleSets]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forceFlushLeftTuple</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmem</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sm</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leftTupleSets</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SegmentMemory[] [smems=pmem.getSegmentMemories()]</InnerVar>
                <InnerVar>LeftTupleNode [node]</InnerVar>
                <InnerVar>Memory [mem]</InnerVar>
                <InnerVar>long [bit=1]</InnerVar>
                <InnerVar>PathMemory [rtnPmem=NodeTypeEnums.isTerminalNode(pmem.getPathEndNode()) ? pmem : wm.getNodeMemory((AbstractTerminalNode)pmem.getPathEndNode().getPathEndNodes()[0])]</InnerVar>
                <InnerVar>InternalAgenda [agenda=pmem.getActualAgenda(wm)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>new RuleNetworkEvaluator();outerEval;[pmem, node, bit, mem, smems, sm.getPos(), leftTupleSets, agenda, new LinkedList&lt;StackEntry&gt;(), true, rtnPmem.getOrCreateRuleAgendaItem(agenda).getRuleExecutor()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reInitPathMemories</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PathMemory</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pathMems</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>removingTN</ParamName>
                    <ParamType>TerminalNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;PathMemory,SegmentMemory[]&gt; [previousSmems=new HashMap&lt;PathMemory,SegmentMemory[]&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>notifySegments</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>smems</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>correctMemoryOnSplitsChanged</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>splitStart</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>removingTN</ParamName>
                    <ParamType>TerminalNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>correctSegmentMemoryAfterSplitOnAdd</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sm</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;correctSegmentMemoryAfterSplitOnAdd;[sm, 1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>correctSegmentMemoryAfterSplitOnAdd</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sm</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>i</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sm;setPos;[sm.getPos() + i]</InnerMethodInvoke>
                <InnerMethodInvoke>sm;setSegmentPosMaskBit;[sm.getSegmentPosMaskBit() &lt;&lt; i]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>correctSegmentMemoryAfterSplitOnRemove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sm</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>i</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sm;setPos;[sm.getPos() - i]</InnerMethodInvoke>
                <InnerMethodInvoke>sm;setSegmentPosMaskBit;[sm.getSegmentPosMaskBit() &gt;&gt; i]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSegmentPos</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lts</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [counter=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insertLiaFacts</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>startNode</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropagationContextFactory [pctxFactory=wm.getKnowledgeBase().getConfiguration().getComponentFactory().getPropagationContextFactory()]</InnerVar>
                <InnerVar>PropagationContext [pctx=pctxFactory.createPropagationContext(wm.getNextPropagationIdCounter(),PropagationContext.Type.RULE_ADDITION,null,null,null)]</InnerVar>
                <InnerVar>LeftInputAdapterNode [lian=(LeftInputAdapterNode)startNode]</InnerVar>
                <InnerVar>RightTupleSinkAdapter [liaAdapter=new RightTupleSinkAdapter(lian)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>lian.getObjectSource();updateSink;[liaAdapter, pctx, wm]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insertFacts</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>endNodes</ParamName>
                    <ParamType>PathEndNodes</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wms</ParamName>
                    <ParamType>InternalWorkingMemory[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;LeftTupleNode&gt; [visited=new HashSet&lt;LeftTupleNode&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deleteRightInputData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>LeftTupleSink</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deleteFactsFromRightInput</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bn</ParamName>
                    <ParamType>BetaNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ObjectSource [source=bn.getRightInput()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unlinkRightTuples</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rightTuple</ParamName>
                    <ParamType>RightTuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processLeftTuples</MethodName>
            <MethodComment>/** 
 * Populates the SegmentMemory with staged LeftTuples. If the parent is not a Beta or From node, it iterates up to find the first node with memory. If necessary It traverses to the LiaNode's ObjectTypeNode. It then iterates the LeftTuple chains, where an existing LeftTuple is staged as delete. Or a new LeftTuple is created and staged as an insert.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>insert</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>Rule</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Memory [memory=wm.getNodeMemories().peekNodeMemory(node)]</InnerVar>
                <InnerVar>SegmentMemory [sm=memory.getSegmentMemory()]</InnerVar>
                <InnerVar>LeftInputAdapterNode [lian=(LeftInputAdapterNode)node]</InnerVar>
                <InnerVar>ObjectSource [os=lian.getObjectSource()]</InnerVar>
                <InnerVar>ObjectTypeNode [otn=(ObjectTypeNode)os]</InnerVar>
                <InnerVar>ObjectTypeNodeMemory [omem=wm.getNodeMemory(otn)]</InnerVar>
                <InnerVar>Iterator&lt;InternalFactHandle&gt; [it=omem.iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitChild</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>insert</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>Rule</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>it</ParamName>
                    <ParamType>FastIterator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lt</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitChild</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lt</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>insert</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>Rule</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LeftTuple [prevLt=null]</InnerVar>
                <InnerVar>LeftTupleSinkNode [sink=lt.getTupleSink()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insertPeerRightTuple</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lt</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>Rule</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>insert</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LeftTuple [prevLt=null]</InnerVar>
                <InnerVar>RightInputAdapterNode [rian=lt.getTupleSink()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insertPeerLeftTuple</MethodName>
            <MethodComment>/** 
 * Create all missing peers
 */
</MethodComment>
            <ReturnType>LeftTuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lt</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>LeftTupleSinkNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LeftInputAdapterNode.LiaNodeMemory [liaMem=null]</InnerVar>
                <InnerVar>LeftTuple [peer=node.createPeer(lt)]</InnerVar>
                <InnerVar>Memory [memory=wm.getNodeMemories().peekNodeMemory(node)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterateLeftTuple</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lt</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deleteLeftTuple</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>removingLt</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>removingLt2</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>prevLt</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [isFirstLt=prevLt == null]</InnerVar>
                <InnerVar>LeftTuple [nextPeerLt=(removingLt2 == null) ? removingLt.getPeer() : removingLt2.getPeer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNetworkSplitPoint</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LeftTupleNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>splitSegment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SegmentMemory</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sm1</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>splitNode</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LeftTupleNode [childNode=splitNode.getSinkPropagator().getFirstLeftTupleSink()]</InnerVar>
                <InnerVar>SegmentMemory [sm2=new SegmentMemory(childNode)]</InnerVar>
                <InnerVar>int [pos=nodeSegmentPosition(sm1,splitNode)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>wm.getNodeMemories().peekNodeMemory(childNode);setSegmentMemory;[sm2]</InnerMethodInvoke>
                <InnerMethodInvoke>sm1;add;[sm2]</InnerMethodInvoke>
                <InnerMethodInvoke>sm2;setPos;[sm1.getPos()]</InnerMethodInvoke>
                <InnerMethodInvoke>sm2;setSegmentPosMaskBit;[sm1.getSegmentPosMaskBit()]</InnerMethodInvoke>
                <InnerMethodInvoke>sm2;setLinkedNodeMask;[sm1.getLinkedNodeMask()]</InnerMethodInvoke>
                <InnerMethodInvoke>sm2;mergePathMemories;[sm1]</InnerMethodInvoke>
                <InnerMethodInvoke>sm2;setTipNode;[sm1.getTipNode()]</InnerMethodInvoke>
                <InnerMethodInvoke>sm1;setTipNode;[splitNode]</InnerMethodInvoke>
                <InnerMethodInvoke>null;splitNodeMemories;[sm1, sm2, pos]</InnerMethodInvoke>
                <InnerMethodInvoke>null;splitBitMasks;[sm1, sm2, pos]</InnerMethodInvoke>
                <InnerMethodInvoke>null;correctSegmentMemoryAfterSplitOnAdd;[sm2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mergeSegment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sm1</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sm2</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sm1;setTipNode;[sm2.getTipNode()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;mergeNodeMemories;[sm1, sm2]</InnerMethodInvoke>
                <InnerMethodInvoke>null;mergeBitMasks;[sm1, sm2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>splitBitMasks</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sm1</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sm2</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [splitPos=pos + 1]</InnerVar>
                <InnerVar>long [currentAllLinkedMaskTest=sm1.getAllLinkedMaskTest()]</InnerVar>
                <InnerVar>long [currentLinkedNodeMask=sm1.getLinkedNodeMask()]</InnerVar>
                <InnerVar>long [mask=(1L &lt;&lt; splitPos) - 1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sm1;setAllLinkedMaskTest;[mask &amp; currentAllLinkedMaskTest]</InnerMethodInvoke>
                <InnerMethodInvoke>sm1;setLinkedNodeMask;[sm1.getLinkedNodeMask() &amp; sm1.getAllLinkedMaskTest()]</InnerMethodInvoke>
                <InnerMethodInvoke>sm2;setAllLinkedMaskTest;[mask]</InnerMethodInvoke>
                <InnerMethodInvoke>sm2;setLinkedNodeMask;[mask &amp; (currentLinkedNodeMask &gt;&gt; splitPos)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mergeBitMasks</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sm1</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sm2</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LinkedList&lt;Memory&gt; [smNodeMemories2=sm2.getNodeMemories()]</InnerVar>
                <InnerVar>long [mask=sm2.getAllLinkedMaskTest() &lt;&lt; smNodeMemories2.size()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sm1;setAllLinkedMaskTest;[mask &amp; sm1.getAllLinkedMaskTest()]</InnerMethodInvoke>
                <InnerMethodInvoke>sm1;setLinkedNodeMask;[mask &amp; sm1.getLinkedNodeMask()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>splitNodeMemories</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sm1</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sm2</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LinkedList&lt;Memory&gt; [smNodeMemories1=sm1.getNodeMemories()]</InnerVar>
                <InnerVar>LinkedList&lt;Memory&gt; [smNodeMemories2=sm2.getNodeMemories()]</InnerVar>
                <InnerVar>Memory [mem=smNodeMemories1.getFirst()]</InnerVar>
                <InnerVar>int [nodePosMask=1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mergeNodeMemories</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sm1</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sm2</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LinkedList&lt;Memory&gt; [smNodeMemories1=sm1.getNodeMemories()]</InnerVar>
                <InnerVar>LinkedList&lt;Memory&gt; [smNodeMemories2=sm2.getNodeMemories()]</InnerVar>
                <InnerVar>int [nodePosMask=1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nodeSegmentPosition</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sm1</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>splitNode</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LeftTupleNode [lt=splitNode]</InnerVar>
                <InnerVar>int [nodePos=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPathEndMemories</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PathEndNodeMemories</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pathEndNodes</ParamName>
                    <ParamType>PathEndNodes</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PathEndNodeMemories [tnMems=new PathEndNodeMemories()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPathEndNodes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PathEndNodes</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kBase</ParamName>
                    <ParamType>InternalKnowledgeBase</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lt</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tn</ParamName>
                    <ParamType>TerminalNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>processedRule</ParamName>
                    <ParamType>Rule</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hasProtos</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hasWms</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PathEndNodes [endNodes=new PathEndNodes()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>endNodes.subjectEndNodes;add;[(PathEndNode)tn]</InnerMethodInvoke>
                <InnerMethodInvoke>null;collectPathEndNodes;[kBase, lt, endNodes, tn, processedRule, hasProtos, hasWms, hasProtos &amp;&amp; isSplit(lt)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>collectPathEndNodes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kBase</ParamName>
                    <ParamType>InternalKnowledgeBase</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lt</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>endNodes</ParamName>
                    <ParamType>PathEndNodes</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tn</ParamName>
                    <ParamType>TerminalNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>processedRule</ParamName>
                    <ParamType>Rule</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hasProtos</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hasWms</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isBelowNewSplit</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invalidateRootNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kBase</ParamName>
                    <ParamType>InternalKnowledgeBase</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lt</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>kBase;invalidateSegmentPrototype;[lt]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>