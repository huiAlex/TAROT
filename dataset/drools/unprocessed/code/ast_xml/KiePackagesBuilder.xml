<Class>
    <Id>1843</Id>
    <Package>org.drools.modelcompiler</Package>
    <ClassName>KiePackagesBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>JAVA_CLASS_OBJECT_TYPE</FieldName>
            <FieldType>ObjectType</FieldType>
        </Field>
        <Field>
            <FieldName>configuration</FieldName>
            <FieldType>RuleBaseConfiguration</FieldType>
        </Field>
        <Field>
            <FieldName>packages</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>packages</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>objectTypeCache</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>objectTypeCache</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>models</FieldName>
            <FieldType>Collection</FieldType>
        </Field>
        <Field>
            <FieldName>models</FieldName>
            <FieldType>Model</FieldType>
        </Field>
        <Field>
            <FieldName>chainedProperties</FieldName>
            <FieldType>ChainedProperties</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>KiePackagesBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>KieBaseConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>moduleClassLoader</ParamName>
                    <ParamType>ProjectClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>KiePackagesBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>KieBaseConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>models</ParamName>
                    <ParamType>Model</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>moduleClassLoader</ParamName>
                    <ParamType>ProjectClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addModel</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>Model</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>models;add;[model]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>build</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CanonicalKiePackages</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createKiePackage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KnowledgePackageImpl</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>KnowledgePackageImpl [kpkg=new KnowledgePackageImpl(name)]</InnerVar>
                <InnerVar>TypeResolver [typeResolver=new ClassTypeResolver(new HashSet&lt;&gt;(kpkg.getImports().keySet()),configuration.getClassLoader(),name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>kpkg;setClassFieldAccessorCache;[new ClassFieldAccessorCache(configuration.getClassLoader())]</InnerMethodInvoke>
                <InnerMethodInvoke>typeResolver;addImport;[name + ".*"]</InnerMethodInvoke>
                <InnerMethodInvoke>kpkg;setTypeResolver;[typeResolver]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compileRule</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RuleImpl</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pkg</ParamName>
                    <ParamType>KnowledgePackageImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>Rule</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RuleImpl [ruleImpl=new RuleImpl(rule.getName())]</InnerVar>
                <InnerVar>RuleContext [ctx=new RuleContext(this,pkg,ruleImpl)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ruleImpl;setPackage;[pkg.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setRuleAttributes;[rule, ruleImpl]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setRuleMetaAttributes;[rule, ruleImpl]</InnerMethodInvoke>
                <InnerMethodInvoke>ruleImpl;setPackage;[rule.getPackage()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;populateLHS;[ctx, pkg, rule.getView()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;processConsequences;[ctx, rule]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setRuleAttributes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>Rule</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ruleImpl</ParamName>
                    <ParamType>RuleImpl</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Boolean [noLoop=setAttribute(rule,Rule.Attribute.NO_LOOP,ruleImpl::setNoLoop)]</InnerVar>
                <InnerVar>Boolean [lockOnActive=setAttribute(rule,Rule.Attribute.LOCK_ON_ACTIVE,ruleImpl::setLockOnActive)]</InnerVar>
                <InnerVar>String [agendaGroup=setAttribute(rule,Rule.Attribute.AGENDA_GROUP,ruleImpl::setAgendaGroup)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setAttribute;[rule, Rule.Attribute.AUTO_FOCUS, ruleImpl::setAutoFocus]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setAttribute;[rule, Rule.Attribute.ENABLED, e -&gt; ruleImpl.setEnabled(new EnabledBoolean(e))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setAttribute;[rule, Rule.Attribute.SALIENCE, s -&gt; ruleImpl.setSalience(new SalienceInteger(s))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setAttribute;[rule, Rule.Attribute.RULEFLOW_GROUP, rfg -&gt; {
  ruleImpl.setRuleFlowGroup(rfg);
  if (agendaGroup == null) {
    ruleImpl.setAgendaGroup(rfg);
  }
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setAttribute;[rule, Rule.Attribute.ACTIVATION_GROUP, ruleImpl::setActivationGroup]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setAttribute;[rule, Rule.Attribute.DURATION, t -&gt; ruleImpl.setTimer(parseTimer(t))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setAttribute;[rule, Rule.Attribute.TIMER, t -&gt; ruleImpl.setTimer(parseTimer(t))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setAttribute;[rule, Rule.Attribute.CALENDARS, ruleImpl::setCalendars]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setAttribute;[rule, Rule.Attribute.DATE_EFFECTIVE, ruleImpl::setDateEffective]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setAttribute;[rule, Rule.Attribute.DATE_EXPIRES, ruleImpl::setDateExpires]</InnerMethodInvoke>
                <InnerMethodInvoke>ruleImpl;setEager;[ruleImpl.isEager() || noLoop != null || lockOnActive != null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setAttribute</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>Rule</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attribute</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consumer</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T [value=rule.getAttribute(attribute)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setRuleMetaAttributes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>Rule</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ruleImpl</ParamName>
                    <ParamType>RuleImpl</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseTimer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>org.drools.core.time.impl.Timer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compileQuery</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>QueryImpl</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pkg</ParamName>
                    <ParamType>KnowledgePackageImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>query</ParamName>
                    <ParamType>Query</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>QueryImpl [queryImpl=new QueryImpl(query.getName())]</InnerVar>
                <InnerVar>RuleContext [ctx=new RuleContext(this,pkg,queryImpl)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>queryImpl;setPackage;[query.getPackage()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addQueryPattern;[query, queryImpl, ctx]</InnerMethodInvoke>
                <InnerMethodInvoke>null;populateLHS;[ctx, pkg, query.getView()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addQueryPattern</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>query</ParamName>
                    <ParamType>Query</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>queryImpl</ParamName>
                    <ParamType>QueryImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Pattern [pattern=new Pattern(ctx.getNextPatternIndex(),0,ClassObjectType.DroolsQuery_ObjectType,null)]</InnerVar>
                <InnerVar>InternalReadAccessor [extractor=new LambdaReadAccessor(DroolsQuery.class,q -&gt; ((DroolsQuery)q).getName())]</InnerVar>
                <InnerVar>QueryNameConstraint [constraint=new QueryNameConstraint(extractor,query.getName())]</InnerVar>
                <InnerVar>Variable&lt;?&gt;[] [args=query.getArguments()]</InnerVar>
                <InnerVar>Declaration[] [declarations=new Declaration[args.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>pattern;addConstraint;[constraint]</InnerMethodInvoke>
                <InnerMethodInvoke>queryImpl.getLhs();addChild;[pattern]</InnerMethodInvoke>
                <InnerMethodInvoke>queryImpl;setParameters;[declarations]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processConsequences</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>Rule</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processConsequence</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consequence</ParamName>
                    <ParamType>Consequence</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Variable[] [consequenceVars=consequence.getDeclarations()]</InnerVar>
                <InnerVar>String[] [requiredDeclarations=new String[consequenceVars.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ctx.getRule();setRequiredDeclarationsForConsequence;[name, requiredDeclarations]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>populateLHS</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pkg</ParamName>
                    <ParamType>KnowledgePackageImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>view</ParamName>
                    <ParamType>View</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GroupElement [lhs=ctx.getRule().getLhs()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addSubConditions;[ctx, lhs, view.getSubConditions()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>requiresLeftActivation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rce</ParamName>
                    <ParamType>RuleConditionElement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUnitVariable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Variable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pkg</ParamName>
                    <ParamType>KnowledgePackageImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>view</ParamName>
                    <ParamType>View</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [unitClassName=ctx.getRule().getRuleUnitClassName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>conditionToElement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RuleConditionElement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>group</ParamName>
                    <ParamType>GroupElement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>condition</ParamName>
                    <ParamType>Condition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildEval</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>EvalCondition</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>eval</ParamName>
                    <ParamType>EvalImpl</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Declaration[] [declarations=Stream.of(eval.getExpr().getVariables()).map(ctx::getDeclaration).toArray(Declaration[]::new)]</InnerVar>
                <InnerVar>EvalExpression [evalExpr=new LambdaEvalExpression(declarations,eval.getExpr())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildConditionalConsequence</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ConditionalBranch</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consequence</ParamName>
                    <ParamType>ConditionalNamedConsequenceImpl</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>EvalCondition [evalCondition]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addSubConditions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RuleConditionElement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ge</ParamName>
                    <ParamType>GroupElement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>subconditions</ParamName>
                    <ParamType>Condition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildQueryPattern</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RuleConditionElement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>queryPattern</ParamName>
                    <ParamType>QueryCallPattern</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Pattern [pattern=new Pattern(ctx.getNextPatternIndex(),0,ClassObjectType.ObjectArray_ObjectType,null)]</InnerVar>
                <InnerVar>InternalReadAccessor [arrayReader=new SelfReferenceClassFieldReader(Object[].class)]</InnerVar>
                <InnerVar>QueryArgument[] [arguments=new QueryArgument[queryPattern.getArguments().length]]</InnerVar>
                <InnerVar>List&lt;Integer&gt; [varIndexList=new ArrayList&lt;&gt;()]</InnerVar>
                <InnerVar>List&lt;Declaration&gt; [requiredDeclarations=new ArrayList&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildPattern</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Pattern</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>group</ParamName>
                    <ParamType>GroupElement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>condition</ParamName>
                    <ParamType>Condition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>org.drools.model.Pattern&lt;?&gt; [modelPattern=(org.drools.model.Pattern)condition]</InnerVar>
                <InnerVar>Pattern [pattern=addPatternForVariable(ctx,group,modelPattern.getPatternVariable())]</InnerVar>
                <InnerVar>Declaration [queryArgDecl=ctx.getQueryDeclaration(modelPattern.getPatternVariable())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addConstraintsToPattern;[ctx, pattern, modelPattern, modelPattern.getConstraint()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addFieldsToPatternWatchlist;[pattern, modelPattern.getWatchedProps()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildAccumulate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Accumulate</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>accPattern</ParamName>
                    <ParamType>AccumulatePattern</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>RuleConditionElement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <ParamType>Pattern</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>usedVariableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>binding</ParamName>
                    <ParamType>Binding</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AccumulateFunction[] [accFunctions=accPattern.getAccumulateFunctions()]</InnerVar>
                <InnerVar>Accumulate [accumulate]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createAccumulator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Accumulator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>usedVariableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>binding</ParamName>
                    <ParamType>Binding</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>functionClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createLegacyAccumulator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Accumulator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>functionClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Accumulator [accumulator]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createLambdaAccumulator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Accumulator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>usedVariableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>binding</ParamName>
                    <ParamType>Binding</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>functionClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>org.kie.api.runtime.rule.AccumulateFunction [accFunction1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addPatternForVariable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Pattern</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>group</ParamName>
                    <ParamType>GroupElement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>patternVariable</ParamName>
                    <ParamType>Variable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Pattern [pattern=new Pattern(ctx.getNextPatternIndex(),0,getObjectType(patternVariable),patternVariable.getName(),true)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ctx;registerPattern;[patternVariable, pattern]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createWindowReference</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>window</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>WindowDeclaration [windowDeclaration=new WindowDeclaration(window.getName(),ctx.getPkg().getName())]</InnerVar>
                <InnerVar>Variable&lt;T&gt; [variable=declarationOf(window.getPatternType())]</InnerVar>
                <InnerVar>Pattern [windowPattern=new Pattern(0,getClassObjectType(window.getPatternType()),variable.getName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>windowDeclaration;setPattern;[windowPattern]</InnerMethodInvoke>
                <InnerMethodInvoke>windowPattern;addBehavior;[createWindow(window)]</InnerMethodInvoke>
                <InnerMethodInvoke>ctx.getPkg();addWindowDeclaration;[windowDeclaration]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createWindow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Behavior</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>window</ParamName>
                    <ParamType>WindowDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addConstraintsToPattern</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <ParamType>Pattern</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>modelPattern</ParamName>
                    <ParamType>org.drools.model.Pattern</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraint</ParamName>
                    <ParamType>Constraint</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addFieldsToPatternWatchlist</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <ParamType>Pattern</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fields</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getKiePackages</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KiePackage</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getObjectType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ObjectType</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>patternVariable</ParamName>
                    <ParamType>Variable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPrototypeObjectType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ObjectType</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>prototype</ParamName>
                    <ParamType>Prototype</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassObjectType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ObjectType</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>patternClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>