<Class>
    <Id>2699</Id>
    <Package>org.drools.compiler.rule.builder.dialect.java</Package>
    <ClassName>JavaExprAnalyzer</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>JavaExprAnalyzer  /** 
 * Expression analyzer.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>JavaExprAnalyzer</MethodName>
            <MethodComment>/** 
 * Construct.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>analyzeExpression</MethodName>
            <MethodComment>/** 
 * Analyze an expression.
 * @param expr The expression to analyze.
 * @param availableIdentifiers Total set of declarations available.
 * @return The &lt;code&gt;Set&lt;/code&gt; of declarations used by the expression.
 * @throws RecognitionException If an error occurs in the parser.
 */
</MethodComment>
            <ReturnType>JavaAnalysisResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>availableIdentifiers</ParamName>
                    <ParamType>BoundIdentifiers</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>JavaParser [parser=parse(expr)]</InnerVar>
                <InnerVar>JavaAnalysisResult [result=new JavaAnalysisResult()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>parser;conditionalOrExpression;[]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setAnalyzedExpr;[expr]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setIdentifiers;[new HashSet&lt;String&gt;(parser.getIdentifiers())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>analyzeBlock</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>JavaAnalysisResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>availableIdentifiers</ParamName>
                    <ParamType>BoundIdentifiers</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>JavaParser [parser=parse("{" + expr + "}")]</InnerVar>
                <InnerVar>JavaAnalysisResult [result=new JavaAnalysisResult()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>parser;block;[]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setAnalyzedExpr;[expr]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setIdentifiers;[new HashSet&lt;String&gt;(parser.getIdentifiers())]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setLocalVariables;[new HashMap&lt;String,JavaLocalDeclarationDescr&gt;()]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setBlockDescrs;[parser.getRootBlockDescr()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>JavaParser</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CharStream [charStream=new ANTLRStringStream(expr)]</InnerVar>
                <InnerVar>JavaLexer [lexer=new JavaLexer(charStream)]</InnerVar>
                <InnerVar>TokenStream [tokenStream=new CommonTokenStream(lexer)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>analyze</MethodName>
            <MethodComment>/** 
 * Analyze an expression.
 * @param availableIdentifiers Total set of declarations available.
 * @param result The AST for the expression.
 * @return The &lt;code&gt;Set&lt;/code&gt; of declarations used by the expression.
 * @throws RecognitionException If an error occurs in the parser.
 */
</MethodComment>
            <ReturnType>JavaAnalysisResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>JavaAnalysisResult</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>availableIdentifiers</ParamName>
                    <ParamType>BoundIdentifiers</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;String&gt; [identifiers=result.getIdentifiers()]</InnerVar>
                <InnerVar>Set&lt;String&gt; [notBound=new HashSet&lt;String&gt;(identifiers)]</InnerVar>
                <InnerVar>Map&lt;String,Class&lt;?&gt;&gt; [usedDecls=new HashMap&lt;String,Class&lt;?&gt;&gt;()]</InnerVar>
                <InnerVar>Map&lt;String,Class&lt;?&gt;&gt; [usedGlobals=new HashMap&lt;String,Class&lt;?&gt;&gt;()]</InnerVar>
                <InnerVar>Map&lt;String,EvaluatorWrapper&gt; [usedOperators=new HashMap&lt;String,EvaluatorWrapper&gt;()]</InnerVar>
                <InnerVar>BoundIdentifiers [boundIdentifiers=new BoundIdentifiers(usedDecls,availableIdentifiers.getContext(),usedOperators,availableIdentifiers.getThisClass())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>boundIdentifiers;setGlobals;[usedGlobals]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setBoundIdentifiers;[boundIdentifiers]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setNotBoundedIdentifiers;[notBound]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>