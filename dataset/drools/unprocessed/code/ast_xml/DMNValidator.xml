<Class>
    <Id>1519</Id>
    <Package>org.kie.dmn.validation</Package>
    <ClassName>DMNValidator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>validate</MethodName>
            <MethodComment>/** 
 * Validate the model and return the results. This is the same as invoking method
 * @{link #validate( Definitions dmnModel, Validation... options ) }with option &lt;code&gt;Validation.VALIDATE_MODEL&lt;/code&gt;
 * @param dmnModel the model to validate
 * @return returns a list of messages from the validation, or an emptylist otherwise.
 */
</MethodComment>
            <ReturnType>DMNMessage</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dmnModel</ParamName>
                    <ParamType>Definitions</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validate</MethodName>
            <MethodComment>/** 
 * Validate the model and return the results. The options field defines which validations to apply. E.g.: &lt;code&gt;validate( dmnModel, VALIDATE_MODEL, VALIDATE_COMPILATION )&lt;/code&gt; &lt;b&gt;IMPORTANT:&lt;/b&gt; this method does not support VALIDATE_SCHEMA. In order to validate the schema, please use one of the other signatures of this method, like @{link #validate(Reader reader, Validation... options)}.
 * @param dmnModel the model to validate
 * @param options selects which validations to apply
 * @return returns a list of messages from the validation, or an emptylist otherwise.
 */
</MethodComment>
            <ReturnType>DMNMessage</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dmnModel</ParamName>
                    <ParamType>Definitions</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>options</ParamName>
                    <ParamType>Validation</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validate</MethodName>
            <MethodComment>/** 
 * Validate the model and return the results. This is the same as invoking method
 * @{link #validate( File xmlFile, Validation... options )}with option &lt;code&gt;Validation.VALIDATE_MODEL&lt;/code&gt;
 * @param xmlFile the file to validate
 * @return returns a list of messages from the validation, or an emptylist otherwise.
 */
</MethodComment>
            <ReturnType>DMNMessage</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xmlFile</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validate</MethodName>
            <MethodComment>/** 
 * Validate the model and return the results. The options field defines which validations to apply. E.g.: &lt;code&gt;validate( xmlFile, VALIDATE_MODEL, VALIDATE_COMPILATION )&lt;/code&gt;
 * @param xmlFile the model to validate
 * @param options selects which validations to apply
 * @return returns a list of messages from the validation, or an emptylist otherwise.
 */
</MethodComment>
            <ReturnType>DMNMessage</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xmlFile</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>options</ParamName>
                    <ParamType>Validation</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validate</MethodName>
            <MethodComment>/** 
 * Validate the model and return the results. This is the same as invoking method
 * @{link #validate( Reader reader, Validation... options )}with option &lt;code&gt;Validation.VALIDATE_MODEL&lt;/code&gt;
 * @param reader a reader for the model to validate
 * @return returns a list of messages from the validation, or an emptylist otherwise.
 */
</MethodComment>
            <ReturnType>DMNMessage</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>Reader</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validate</MethodName>
            <MethodComment>/** 
 * Validate the model and return the results. The options field defines which validations to apply. E.g.: &lt;code&gt;validate( reader, VALIDATE_MODEL, VALIDATE_COMPILATION )&lt;/code&gt;
 * @param reader the model to validate
 * @param options selects which validations to apply
 * @return returns a list of messages from the validation, or an emptylist otherwise.
 */
</MethodComment>
            <ReturnType>DMNMessage</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>Reader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>options</ParamName>
                    <ParamType>Validation</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dispose</MethodName>
            <MethodComment>/** 
 * Release all resources associated with this DMNValidator.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>