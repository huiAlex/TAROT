<Class>
    <Id>2883</Id>
    <Package>org.drools.core.reteoo.builder</Package>
    <ClassName>ReteooRuleBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>RuleBuilder</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>utils</FieldName>
            <FieldType>BuildUtils</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ReteooRuleBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.utils;addBuilder;[GroupElement.class, new GroupElementBuilder()]</InnerMethodInvoke>
                <InnerMethodInvoke>this.utils;addBuilder;[Pattern.class, new PatternBuilder()]</InnerMethodInvoke>
                <InnerMethodInvoke>this.utils;addBuilder;[EvalCondition.class, new EvalBuilder()]</InnerMethodInvoke>
                <InnerMethodInvoke>this.utils;addBuilder;[QueryElement.class, new QueryElementBuilder()]</InnerMethodInvoke>
                <InnerMethodInvoke>this.utils;addBuilder;[From.class, new FromBuilder()]</InnerMethodInvoke>
                <InnerMethodInvoke>this.utils;addBuilder;[Collect.class, new CollectBuilder()]</InnerMethodInvoke>
                <InnerMethodInvoke>this.utils;addBuilder;[Accumulate.class, new AccumulateBuilder()]</InnerMethodInvoke>
                <InnerMethodInvoke>this.utils;addBuilder;[Timer.class, new TimerBuilder()]</InnerMethodInvoke>
                <InnerMethodInvoke>this.utils;addBuilder;[Forall.class, new ForallBuilder()]</InnerMethodInvoke>
                <InnerMethodInvoke>this.utils;addBuilder;[EntryPointId.class, new EntryPointBuilder()]</InnerMethodInvoke>
                <InnerMethodInvoke>this.utils;addBuilder;[WindowReference.class, new WindowReferenceBuilder()]</InnerMethodInvoke>
                <InnerMethodInvoke>this.utils;addBuilder;[NamedConsequence.class, new NamedConsequenceBuilder()]</InnerMethodInvoke>
                <InnerMethodInvoke>this.utils;addBuilder;[ConditionalBranch.class, new ConditionalBranchBuilder()]</InnerMethodInvoke>
                <InnerMethodInvoke>this.utils;addBuilder;[XpathConstraint.class, new ReactiveFromBuilder()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addRule</MethodName>
            <MethodComment>/** 
 * Creates the corresponting Rete network for the given &lt;code&gt;Rule&lt;/code&gt; and adds it to the given rule base.
 * @param rule The rule to add.
 * @param kBase The rulebase to add the rule to.
 * @return a List&lt;BaseNode&gt; of terminal nodes for the rule             
 * @throws InvalidPatternException
 */
</MethodComment>
            <ReturnType>TerminalNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>RuleImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>kBase</ParamName>
                    <ParamType>InternalKnowledgeBase</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;TerminalNode&gt; [nodes=new ArrayList&lt;TerminalNode&gt;()]</InnerVar>
                <InnerVar>GroupElement[] [subrules=rule.getTransformedLhs(kBase.getConfiguration().getComponentFactory().getLogicTransformerFactory().getLogicTransformer(),kBase.getGlobals())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InvalidPatternException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addSubRule</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TerminalNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>BuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>subrule</ParamName>
                    <ParamType>GroupElement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>subruleIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>RuleImpl</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ReteooComponentBuilder [builder=this.utils.getBuilderFor(subrule)]</InnerVar>
                <InnerVar>ActivationListenerFactory [factory=context.getKnowledgeBase().getConfiguration().getActivationListenerFactory(rule.getActivationListener())]</InnerVar>
                <InnerVar>TerminalNode [terminal=factory.createActivationListener(context.getNextId(),context.getTupleSource(),rule,subrule,subruleIndex,context)]</InnerVar>
                <InnerVar>BaseNode [baseTerminalNode=(BaseNode)terminal]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>context;setSubRule;[subrule]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;build;[context, this.utils, subrule]</InnerMethodInvoke>
                <InnerMethodInvoke>baseTerminalNode;networkUpdated;[new UpdateContext()]</InnerMethodInvoke>
                <InnerMethodInvoke>baseTerminalNode;attach;[context]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setPathEndNodes;[context]</InnerMethodInvoke>
                <InnerMethodInvoke>AddRemoveRule;addRule;[terminal, context.getWorkingMemories(), context.getKnowledgeBase()]</InnerMethodInvoke>
                <InnerMethodInvoke>context.getNodes();add;[baseTerminalNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InvalidPatternException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPathEndNodes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>BuildContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PathEndNode[] [pathEndNodes=context.getPathEndNodes().toArray(new PathEndNode[context.getPathEndNodes().size()])]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addInitialFactPattern</MethodName>
            <MethodComment>/** 
 * Adds a query pattern to the given subrule
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>subrule</ParamName>
                    <ParamType>GroupElement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Pattern [pattern=new Pattern(0,ClassObjectType.InitialFact_ObjectType)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>subrule;addChild;[0, pattern]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addEntryPoint</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>kBase</ParamName>
                    <ParamType>InternalKnowledgeBase</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BuildContext [context=new BuildContext(kBase)]</InnerVar>
                <InnerVar>EntryPointId [ep=new EntryPointId(id)]</InnerVar>
                <InnerVar>ReteooComponentBuilder [builder=utils.getBuilderFor(ep)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder;build;[context, utils, ep]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addWindowNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>WindowNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>window</ParamName>
                    <ParamType>WindowDeclaration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>kBase</ParamName>
                    <ParamType>InternalKnowledgeBase</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BuildContext [context=new BuildContext(kBase)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>context;setTupleMemoryEnabled;[!kBase.getConfiguration().isSequential()]</InnerMethodInvoke>
                <InnerMethodInvoke>context;setObjectTypeNodeMemoryEnabled;[!kBase.getConfiguration().isSequential()]</InnerMethodInvoke>
                <InnerMethodInvoke>WindowBuilder.INSTANCE;build;[context, this.utils, window]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>