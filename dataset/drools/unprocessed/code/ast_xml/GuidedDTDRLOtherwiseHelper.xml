<Class>
    <Id>1789</Id>
    <Package>org.drools.workbench.models.guided.dtable.backend.util</Package>
    <ClassName>GuidedDTDRLOtherwiseHelper</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GuidedDTDRLOtherwiseHelper  /** 
 * Utility class to build Field Constraints for cells with "Otherwise" values
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>EqualsOtherwiseBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>constructSingleFieldConstraint</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FieldConstraint</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>ConditionCol52</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnData</ParamName>
                    <ParamType>DTCellValue52</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SingleFieldConstraint [sfc=new SingleFieldConstraint(c.getFactField())]</InnerVar>
                <InnerVar>List&lt;String&gt; [consumedValues=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>StringBuilder [value=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sfc;setConstraintValueType;[c.getConstraintValueType()]</InnerMethodInvoke>
                <InnerMethodInvoke>sfc;setFieldType;[c.getFieldType()]</InnerMethodInvoke>
                <InnerMethodInvoke>sfc;setOperator;["not in"]</InnerMethodInvoke>
                <InnerMethodInvoke>value;append;["( "]</InnerMethodInvoke>
                <InnerMethodInvoke>value;delete;[value.lastIndexOf(","), value.length() - 1]</InnerMethodInvoke>
                <InnerMethodInvoke>value;append;[")"]</InnerMethodInvoke>
                <InnerMethodInvoke>sfc;setValue;[value.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>NotEqualsOtherwiseBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>constructSingleFieldConstraint</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SingleFieldConstraint</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>ConditionCol52</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnData</ParamName>
                    <ParamType>DTCellValue52</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SingleFieldConstraint [sfc=new SingleFieldConstraint(c.getFactField())]</InnerVar>
                <InnerVar>List&lt;String&gt; [consumedValues=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>StringBuilder [value=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sfc;setConstraintValueType;[c.getConstraintValueType()]</InnerMethodInvoke>
                <InnerMethodInvoke>sfc;setFieldType;[c.getFieldType()]</InnerMethodInvoke>
                <InnerMethodInvoke>sfc;setOperator;["in"]</InnerMethodInvoke>
                <InnerMethodInvoke>value;append;["( "]</InnerMethodInvoke>
                <InnerMethodInvoke>value;delete;[value.lastIndexOf(","), value.length() - 1]</InnerMethodInvoke>
                <InnerMethodInvoke>value;append;[")"]</InnerMethodInvoke>
                <InnerMethodInvoke>sfc;setValue;[value.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeFieldConstraint</MethodName>
            <MethodComment>/** 
 * Build a Field Constraint
 * @param c Condition Column that contains the "Otherwise" cell
 * @param allColumns All Decision Table columns. Decision Tables have animplied "and" between multiple SingleFieldConstraints for the same Fact field. OtherwiseBuilders for less-than, greater-than etc need access to other Condition Columns bound to the same Fact and Field to construct a CompositeFieldConstraint.
 * @param data Decision Table values
 * @return
 */
</MethodComment>
            <ReturnType>FieldConstraint</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>ConditionCol52</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>allColumns</ParamName>
                    <ParamType>BaseColumn</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>List&lt;DTCellValue52&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeFieldConstraint</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FieldConstraint</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>ConditionCol52</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>allColumns</ParamName>
                    <ParamType>BaseColumn</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>List&lt;DTCellValue52&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [index=allColumns.indexOf(c)]</InnerVar>
                <InnerVar>List&lt;DTCellValue52&gt; [columnData=extractColumnData(data,index)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>constructSingleFieldConstraint</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FieldConstraint</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>ConditionCol52</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnData</ParamName>
                    <ParamType>DTCellValue52</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBuilder</MethodName>
            <MethodComment>/** 
 * Retrieve the correct OtherwiseBuilder for the given column
 * @param c
 * @return
 */
</MethodComment>
            <ReturnType>OtherwiseBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>ConditionCol52</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>extractColumnData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DTCellValue52</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>List&lt;DTCellValue52&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;DTCellValue52&gt; [columnData=new ArrayList&lt;DTCellValue52&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GuidedDTDRLOtherwiseHelper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>