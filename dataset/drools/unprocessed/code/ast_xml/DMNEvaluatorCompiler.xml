<Class>
    <Id>1714</Id>
    <Package>org.kie.dmn.core.compiler</Package>
    <ClassName>DMNEvaluatorCompiler</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>logger</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
        <Field>
            <FieldName>feel</FieldName>
            <FieldType>DMNFEELHelper</FieldType>
        </Field>
        <Field>
            <FieldName>compiler</FieldName>
            <FieldType>DMNCompilerImpl</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DMNEvaluatorCompiler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>compiler</ParamName>
                    <ParamType>DMNCompilerImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>feel</ParamName>
                    <ParamType>DMNFEELHelper</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compileExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DMNExpressionEvaluator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>DMNCompilerContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>DMNModelImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>DMNBaseNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>exprName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compileInvocation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DMNExpressionEvaluator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>DMNCompilerContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>DMNModelImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>DMNBaseNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>Invocation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Invocation [invocation=expression]</InnerVar>
                <InnerVar>String [functionName=((LiteralExpression)invocation.getExpression()).getText()]</InnerVar>
                <InnerVar>DMNInvocationEvaluator [invEval=new DMNInvocationEvaluator(node.getName(),node.getSource(),functionName,invocation,null,feel.newFEELInstance())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compileRelation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DMNExpressionEvaluator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>DMNCompilerContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>DMNModelImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>DMNBaseNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>relationName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>Relation</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Relation [relationDef=expression]</InnerVar>
                <InnerVar>DMNRelationEvaluator [relationEval=new DMNRelationEvaluator(node.getName(),node.getSource(),relationDef)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compileList</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DMNExpressionEvaluator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>DMNCompilerContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>DMNModelImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>DMNBaseNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>listName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>org.kie.dmn.model.v1_1.List</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>org.kie.dmn.model.v1_1.List [listDef=expression]</InnerVar>
                <InnerVar>DMNListEvaluator [listEval=new DMNListEvaluator(node.getName(),node.getSource(),listDef)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compileContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DMNExpressionEvaluator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>DMNCompilerContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>DMNModelImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>DMNBaseNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>contextName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>Context</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Context [ctxDef=expression]</InnerVar>
                <InnerVar>DMNContextEvaluator [ctxEval=new DMNContextEvaluator(node.getName(),ctxDef)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ctx;enterFrame;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compileFunctionDefinition</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DMNExpressionEvaluator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>DMNCompilerContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>DMNModelImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>DMNBaseNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>functionName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>FunctionDefinition</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FunctionDefinition [funcDef=expression]</InnerVar>
                <InnerVar>String [kindStr=funcDef.getAdditionalAttributes().get(FunctionDefinition.KIND_QNAME)]</InnerVar>
                <InnerVar>FunctionDefinition.Kind [kind=kindStr != null ? FunctionDefinition.Kind.determineFromString(kindStr) : FunctionDefinition.Kind.FEEL]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stripQuotes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>trim</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resolveNamespaceForTypeRef</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeRef</ParamName>
                    <ParamType>QName</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fromElement</ParamName>
                    <ParamType>DMNElement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compileDecisionTable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DMNExpressionEvaluator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>DMNCompilerContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>DMNModelImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>DMNBaseNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dtName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dt</ParamName>
                    <ParamType>DecisionTable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>java.util.List&lt;DTInputClause&gt; [inputs=new ArrayList&lt;&gt;()]</InnerVar>
                <InnerVar>int [index=0]</InnerVar>
                <InnerVar>java.util.List&lt;DTOutputClause&gt; [outputs=new ArrayList&lt;&gt;()]</InnerVar>
                <InnerVar>boolean [hasOutputValues=false]</InnerVar>
                <InnerVar>java.util.List&lt;DTDecisionRule&gt; [rules=new ArrayList&lt;&gt;()]</InnerVar>
                <InnerVar>String [policy=dt.getHitPolicy().value() + (dt.getAggregation() != null ? " " + dt.getAggregation().value() : "")]</InnerVar>
                <InnerVar>org.kie.dmn.feel.runtime.decisiontables.HitPolicy [hp=org.kie.dmn.feel.runtime.decisiontables.HitPolicy.fromString(policy)]</InnerVar>
                <InnerVar>java.util.List&lt;String&gt; [parameterNames=new ArrayList&lt;&gt;()]</InnerVar>
                <InnerVar>FEEL [feelInstance=feel.newFEELInstance()]</InnerVar>
                <InnerVar>DecisionTableImpl [dti=new DecisionTableImpl(dtName,parameterNames,inputs,outputs,rules,hp,feelInstance)]</InnerVar>
                <InnerVar>DTInvokerFunction [dtf=new DTInvokerFunction(dti)]</InnerVar>
                <InnerVar>DMNDTExpressionEvaluator [dtee=new DMNDTExpressionEvaluator(node,feelInstance,dtf)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>recurseUpToInferTypeRef</MethodName>
            <MethodComment>/** 
 * Utility method for DecisionTable with only 1 output, to infer typeRef from parent
 * @param model used for reporting errors
 * @param originalElement the original OutputClause[0] single output for which the DecisionTable parameter recursionIdx is being processed for inferring the typeRef
 * @param recursionIdx start of the recursion is the DecisionTable model node itself
 * @return the inferred `typeRef` or null in case of errors. Errors are reported with standard notification mechanism via MsgUtil.reportMessage
 */
</MethodComment>
            <ReturnType>QName</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>DMNModelImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>originalElement</ParamName>
                    <ParamType>OutputClause</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>recursionIdx</ParamName>
                    <ParamType>DMNElement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>variableTypeRefOrErrIfNull</MethodName>
            <MethodComment>/** 
 * Utility method to have a error message is reported if a DMN Variable is missing typeRef. 
 * @param model used for reporting errors 
 * @param variable the variable to extract typeRef
 * @return the `variable.typeRef` or null in case of errors. Errors are reported with standard notification mechanism via MsgUtil.reportMessage
 */
</MethodComment>
            <ReturnType>QName</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>DMNModelImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>variable</ParamName>
                    <ParamType>InformationItem</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compileLiteralExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DMNExpressionEvaluator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>DMNCompilerContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>DMNModelImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>DMNBaseNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>exprName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>LiteralExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DMNLiteralExpressionEvaluator [evaluator=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>textToUnaryTestList</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>UnaryTest</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>DMNCompilerContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>DMNModelImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>element</ParamName>
                    <ParamType>DMNElement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errorMsg</ParamName>
                    <ParamType>Msg.Message</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>msgParams</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>