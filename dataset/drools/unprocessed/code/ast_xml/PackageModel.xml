<Class>
    <Id>2148</Id>
    <Package>org.drools.modelcompiler.builder</Package>
    <ClassName>PackageModel</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>logger</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
        <Field>
            <FieldName>RULES_FILE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>RULES_PER_CLASS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RULES_DECLARATION_PER_CLASS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>name</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>isPattern</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>dialectCompiletimeRegistry</FieldName>
            <FieldType>DialectCompiletimeRegistry</FieldType>
        </Field>
        <Field>
            <FieldName>rulesFileName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>imports</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>imports</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>globals</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>globals</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ruleMethods</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>ruleMethods</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>queryMethods</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>queryMethods</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>queryDefWithType</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>queryDefWithType</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>windowReferences</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>windowReferences</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>queryVariables</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>queryVariables</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>functions</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>functions</FieldName>
            <FieldType>MethodDeclaration</FieldType>
        </Field>
        <Field>
            <FieldName>generatedPOJOs</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>generatedPOJOs</FieldName>
            <FieldType>ClassOrInterfaceDeclaration</FieldType>
        </Field>
        <Field>
            <FieldName>generatedAccumulateClasses</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>generatedAccumulateClasses</FieldName>
            <FieldType>GeneratedClassWithPackage</FieldType>
        </Field>
        <Field>
            <FieldName>typeMetaDataExpressions</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>typeMetaDataExpressions</FieldName>
            <FieldType>Expression</FieldType>
        </Field>
        <Field>
            <FieldName>exprIdGenerator</FieldName>
            <FieldType>DRLIdGenerator</FieldType>
        </Field>
        <Field>
            <FieldName>configuration</FieldName>
            <FieldType>KnowledgeBuilderConfigurationImpl</FieldType>
        </Field>
        <Field>
            <FieldName>accumulateFunctions</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>accumulateFunctions</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>pkg</FieldName>
            <FieldType>InternalKnowledgePackage</FieldType>
        </Field>
        <Field>
            <FieldName>WINDOW_REFERENCE_TYPE</FieldName>
            <FieldType>Type</FieldType>
        </Field>
        <Field>
            <FieldName>mainRuleClass</FieldName>
            <FieldType>CompilationUnit</FieldType>
        </Field>
        <Field>
            <FieldName>splitted</FieldName>
            <FieldType>Collection</FieldType>
        </Field>
        <Field>
            <FieldName>splitted</FieldName>
            <FieldType>CompilationUnit</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PackageModel</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>configuration</ParamName>
                    <ParamType>KnowledgeBuilderConfigurationImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isPattern</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dialectCompiletimeRegistry</ParamName>
                    <ParamType>DialectCompiletimeRegistry</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRulesFileName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateRulesFileName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConfiguration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KnowledgeBuilderConfigurationImpl</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExprIdGenerator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DRLIdGenerator</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addImports</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>imports</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.imports;addAll;[imports]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getImports</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addGlobals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>values</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,Class&lt;?&gt;&gt; [transformed]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>globals;putAll;[transformed]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGlobals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addTypeMetaDataExpressions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeMetaDataExpression</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>typeMetaDataExpressions;add;[typeMetaDataExpression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putRuleMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ruleMethod</ParamName>
                    <ParamType>MethodDeclaration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.ruleMethods;put;[methodName, ruleMethod]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putQueryMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryMethod</ParamName>
                    <ParamType>MethodDeclaration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.queryMethods;put;[queryMethod.getNameAsString(), queryMethod]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQueryMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodDeclaration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putQueryVariable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qp</ParamName>
                    <ParamType>QueryParameter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.queryVariables;computeIfAbsent;[queryName, k -&gt; new ArrayList&lt;&gt;()]</InnerMethodInvoke>
                <InnerMethodInvoke>this.queryVariables.get(queryName);add;[qp]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>queryVariables</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>QueryParameter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQueryDefWithType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addAllFunctions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>functions</ParamName>
                    <ParamType>MethodDeclaration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.functions;addAll;[functions]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addGeneratedPOJO</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pojo</ParamName>
                    <ParamType>ClassOrInterfaceDeclaration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.generatedPOJOs;add;[pojo]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGeneratedPOJOsSource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassOrInterfaceDeclaration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addGeneratedAccumulateClasses</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>GeneratedClassWithPackage</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.generatedAccumulateClasses;add;[clazz]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGeneratedAccumulateClasses</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>GeneratedClassWithPackage</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addAllWindowReferences</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>windowMethod</ParamName>
                    <ParamType>MethodCallExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.windowReferences;put;[methodName, windowMethod]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWindowReferences</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFunctions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodDeclaration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAccumulateFunctions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setInternalKnowledgePackage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pkg</ParamName>
                    <ParamType>InternalKnowledgePackage</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPkg</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InternalKnowledgePackage</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDialectCompiletimeRegistry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DialectCompiletimeRegistry</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>RuleSourceResult</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mainRuleClass</ParamName>
                    <ParamType>CompilationUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMainRuleClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CompilationUnit</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>with</MethodName>
            <MethodComment>/** 
 * Append additional class to source results.
 * @param additionalCU 
 */
</MethodComment>
            <ReturnType>RuleSourceResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>additionalCU</ParamName>
                    <ParamType>CompilationUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>splitted;add;[additionalCU]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSplitted</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CompilationUnit</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRulesSource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RuleSourceResult</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CompilationUnit [cu=new CompilationUnit()]</InnerVar>
                <InnerVar>ClassOrInterfaceDeclaration [rulesClass=cu.addClass(rulesFileName)]</InnerVar>
                <InnerVar>BodyDeclaration&lt;?&gt; [dateFormatter=JavaParser.parseBodyDeclaration("public final static DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(DateUtils.getDateFormatMask());\n")]</InnerVar>
                <InnerVar>BodyDeclaration&lt;?&gt; [getNameMethod=JavaParser.parseBodyDeclaration("    @Override\n" + "        public String getName() {\n" + "        return \"" + name + "\";\n"+ "    }\n")]</InnerVar>
                <InnerVar>BodyDeclaration&lt;?&gt; [getRulesMethod=JavaParser.parseBodyDeclaration("    @Override\n" + "    public List&lt;Rule&gt; getRules() {\n" + "        return rules;\n"+ "    }\n")]</InnerVar>
                <InnerVar>StringBuilder [sb=new StringBuilder("\n")]</InnerVar>
                <InnerVar>JavadocComment [exprIdComment=new JavadocComment(sb.toString())]</InnerVar>
                <InnerVar>BodyDeclaration&lt;?&gt; [getGlobalsMethod=JavaParser.parseBodyDeclaration("    @Override\n" + "    public List&lt;Global&gt; getGlobals() {\n" + "        return globals;\n"+ "    }\n")]</InnerVar>
                <InnerVar>BodyDeclaration&lt;?&gt; [getQueriesMethod=JavaParser.parseBodyDeclaration("    @Override\n" + "    public List&lt;Query&gt; getQueries() {\n" + "        return queries;\n"+ "    }\n")]</InnerVar>
                <InnerVar>BodyDeclaration&lt;?&gt; [getTypeMetaDataMethod=JavaParser.parseBodyDeclaration("    @Override\n" + "    public List&lt;TypeMetaData&gt; getTypeMetaDatas() {\n" + "        return typeMetaDatas;\n"+ "    }\n")]</InnerVar>
                <InnerVar>InitializerDeclaration [rulesListInitializer=new InitializerDeclaration()]</InnerVar>
                <InnerVar>BlockStmt [rulesListInitializerBody=new BlockStmt()]</InnerVar>
                <InnerVar>RuleSourceResult [results=new RuleSourceResult(cu)]</InnerVar>
                <InnerVar>int [ruleCount=ruleMethods.size()]</InnerVar>
                <InnerVar>boolean [requiresMultipleRulesLists=ruleCount &gt;= RULES_DECLARATION_PER_CLASS - 1]</InnerVar>
                <InnerVar>MethodCallExpr [rules=buildRulesField(rulesClass)]</InnerVar>
                <InnerVar>int [count=-1]</InnerVar>
                <InnerVar>Map&lt;Integer,ClassOrInterfaceDeclaration&gt; [splitted=new LinkedHashMap&lt;&gt;()]</InnerVar>
                <InnerVar>BodyDeclaration&lt;?&gt; [rulesList=requiresMultipleRulesLists ? JavaParser.parseBodyDeclaration("List&lt;Rule&gt; rules = new ArrayList&lt;&gt;(" + ruleCount + ");") : JavaParser.parseBodyDeclaration("List&lt;Rule&gt; rules = rulesList;")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cu;setPackageDeclaration;[name]</InnerMethodInvoke>
                <InnerMethodInvoke>null;manageImportForCompilationUnit;[cu]</InnerMethodInvoke>
                <InnerMethodInvoke>rulesClass;addImplementedType;[Model.class]</InnerMethodInvoke>
                <InnerMethodInvoke>rulesClass;addMember;[dateFormatter]</InnerMethodInvoke>
                <InnerMethodInvoke>rulesClass;addMember;[getNameMethod]</InnerMethodInvoke>
                <InnerMethodInvoke>rulesClass;addMember;[getRulesMethod]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;["With the following expression ID:\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;[exprIdGenerator.toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;["\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>getRulesMethod;setComment;[exprIdComment]</InnerMethodInvoke>
                <InnerMethodInvoke>rulesClass;addMember;[getGlobalsMethod]</InnerMethodInvoke>
                <InnerMethodInvoke>rulesClass;addMember;[getQueriesMethod]</InnerMethodInvoke>
                <InnerMethodInvoke>rulesClass;addMember;[getTypeMetaDataMethod]</InnerMethodInvoke>
                <InnerMethodInvoke>rulesListInitializer;setBody;[rulesListInitializerBody]</InnerMethodInvoke>
                <InnerMethodInvoke>queryMethods.values();forEach;[rulesClass::addMember]</InnerMethodInvoke>
                <InnerMethodInvoke>null;buildArtifactsDeclaration;[queryMethods.keySet(), rulesClass, rulesListInitializerBody, "Query", "queries", false]</InnerMethodInvoke>
                <InnerMethodInvoke>null;buildArtifactsDeclaration;[windowReferences.keySet(), rulesClass, rulesListInitializerBody, "WindowReference", "windowReferences", false]</InnerMethodInvoke>
                <InnerMethodInvoke>null;buildArtifactsDeclaration;[getGlobals().keySet(), rulesClass, rulesListInitializerBody, "Global", "globals", true]</InnerMethodInvoke>
                <InnerMethodInvoke>functions;forEach;[rulesClass::addMember]</InnerMethodInvoke>
                <InnerMethodInvoke>rulesClass;addMember;[rulesList]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildArtifactsDeclaration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>artifacts</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rulesClass</ParamName>
                    <ParamType>ClassOrInterfaceDeclaration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rulesListInitializerBody</ParamName>
                    <ParamType>BlockStmt</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>needsToVar</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addInitStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rulesListInitializerBody</ParamName>
                    <ParamType>BlockStmt</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NameExpr [rulesFieldName=new NameExpr(fieldName)]</InnerVar>
                <InnerVar>MethodCallExpr [add=new MethodCallExpr(rulesFieldName,"add")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>add;addArgument;[expr]</InnerMethodInvoke>
                <InnerMethodInvoke>rulesListInitializerBody;addStatement;[add]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addRulesList</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rulesListInitializerBody</ParamName>
                    <ParamType>BlockStmt</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>listName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodCallExpr [add=new MethodCallExpr(new NameExpr("rules"),"addAll")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>add;addArgument;[listName]</InnerMethodInvoke>
                <InnerMethodInvoke>rulesListInitializerBody;addStatement;[add]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildRulesField</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodCallExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>results</ParamName>
                    <ParamType>RuleSourceResult</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompilationUnit [cu=new CompilationUnit()]</InnerVar>
                <InnerVar>String [currentRulesMethodClassName=rulesFileName + "Rules" + index]</InnerVar>
                <InnerVar>ClassOrInterfaceDeclaration [rulesClass=cu.addClass(currentRulesMethodClassName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>results;with;[cu]</InnerMethodInvoke>
                <InnerMethodInvoke>cu;setPackageDeclaration;[name]</InnerMethodInvoke>
                <InnerMethodInvoke>cu;addImport;[JavaParser.parseImport("import " + Arrays.class.getCanonicalName() + ";")]</InnerMethodInvoke>
                <InnerMethodInvoke>cu;addImport;[JavaParser.parseImport("import " + List.class.getCanonicalName() + ";")]</InnerMethodInvoke>
                <InnerMethodInvoke>cu;addImport;[JavaParser.parseImport("import " + Rule.class.getCanonicalName() + ";")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildRulesField</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodCallExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rulesClass</ParamName>
                    <ParamType>ClassOrInterfaceDeclaration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodCallExpr [rulesInit=new MethodCallExpr(null,"Arrays.asList")]</InnerVar>
                <InnerVar>ClassOrInterfaceType [rulesType=new ClassOrInterfaceType(null,new SimpleName("List"),new NodeList&lt;Type&gt;(new ClassOrInterfaceType(null,"Rule")))]</InnerVar>
                <InnerVar>VariableDeclarator [rulesVar=new VariableDeclarator(rulesType,"rulesList",rulesInit)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rulesClass;addMember;[new FieldDeclaration(EnumSet.of(Modifier.PUBLIC,Modifier.STATIC),rulesVar)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>manageImportForCompilationUnit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cu</ParamName>
                    <ParamType>CompilationUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cu;addImport;[JavaParser.parseImport("import java.util.*;")]</InnerMethodInvoke>
                <InnerMethodInvoke>cu;addImport;[JavaParser.parseImport("import org.drools.model.*;")]</InnerMethodInvoke>
                <InnerMethodInvoke>cu;addImport;[JavaParser.parseImport("import org.drools.model.Index.ConstraintType;")]</InnerMethodInvoke>
                <InnerMethodInvoke>cu;addImport;[JavaParser.parseImport("import java.time.*;")]</InnerMethodInvoke>
                <InnerMethodInvoke>cu;addImport;[JavaParser.parseImport("import java.time.format.*;")]</InnerMethodInvoke>
                <InnerMethodInvoke>cu;addImport;[JavaParser.parseImport("import java.text.*;")]</InnerMethodInvoke>
                <InnerMethodInvoke>cu;addImport;[JavaParser.parseImport("import org.drools.core.util.*;")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addGlobalField</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classDeclaration</ParamName>
                    <ParamType>ClassOrInterfaceDeclaration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globalName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>globalClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassOrInterfaceType [varType=JavaParser.parseClassOrInterfaceType(Global.class.getCanonicalName())]</InnerVar>
                <InnerVar>Type [declType=DrlxParseUtil.classToReferenceType(globalClass)]</InnerVar>
                <InnerVar>MethodCallExpr [declarationOfCall=new MethodCallExpr(null,"globalOf")]</InnerVar>
                <InnerVar>FieldDeclaration [field=classDeclaration.addField(varType,toVar(globalName),Modifier.PUBLIC,Modifier.STATIC,Modifier.FINAL)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>varType;setTypeArguments;[DrlxParseUtil.classToReferenceType(globalClass)]</InnerMethodInvoke>
                <InnerMethodInvoke>declarationOfCall;addArgument;[new ClassExpr(declType)]</InnerMethodInvoke>
                <InnerMethodInvoke>declarationOfCall;addArgument;[new StringLiteralExpr(packageName)]</InnerMethodInvoke>
                <InnerMethodInvoke>declarationOfCall;addArgument;[new StringLiteralExpr(globalName)]</InnerMethodInvoke>
                <InnerMethodInvoke>field.getVariables().get(0);setInitializer;[declarationOfCall]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>logRule</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>logger;debug;["====="]</InnerMethodInvoke>
                <InnerMethodInvoke>logger;debug;[source]</InnerMethodInvoke>
                <InnerMethodInvoke>logger;debug;["====="]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addAccumulateFunctions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>accumulateFunctions</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasDeclaration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>