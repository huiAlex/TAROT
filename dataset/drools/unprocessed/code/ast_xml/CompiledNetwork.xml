<Class>
    <Id>1602</Id>
    <Package>org.drools.core.reteoo.compiled</Package>
    <ClassName>CompiledNetwork</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ObjectSink</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CompiledNetwork  /** 
 * This is the base type for all generated classes that that represent a "compiled" portion of the RETE network. By compiled we mean IF statements, switch statements, etc. as opposed to nodes, propagators, etc.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>objectTypeNode</FieldName>
            <FieldType>ObjectTypeNode</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getId</MethodName>
            <MethodComment>/** 
 * Returns the unique id that represents the node in the Rete network
 * @return unique int value
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPartitionId</MethodName>
            <MethodComment>/** 
 * Returns the partition ID to which this node belongs to
 * @return partition id
 */
</MethodComment>
            <ReturnType>RuleBasePartitionId</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeExternal</MethodName>
            <MethodComment>/** 
 * The object implements the writeExternal method to save its contents by calling the methods of DataOutput for its primitive values or calling the writeObject method of ObjectOutput for objects, strings, and arrays.
 * @param out the stream to write the object to
 * @throws java.io.IOException Includes any I/O exceptions that may occur
 * @serialData Overriding methods should use this tag to describethe data layout of this Externalizable object. List the sequence of element types and, if possible, relate the element to a public/protected field and/or method of this Externalizable class.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readExternal</MethodName>
            <MethodComment>/** 
 * The object implements the readExternal method to restore its contents by calling the methods of DataInput for primitive types and readObject for objects, strings and arrays.  The readExternal method must read the values in the same sequence and with the same types as were written by writeExternal.
 * @param in the stream to read data from in order to restore the object
 * @throws java.io.IOException    if I/O errors occur
 * @throws ClassNotFoundException If the class for an object beingrestored cannot be found.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>ObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setObjectTypeNode</MethodName>
            <MethodComment>/** 
 * Sets the OTN for this network. Calling this method will set all variables in the generated subclasses by walking the  {@link org.kie.reteoo.ObjectTypeNode} using a {@link ObjectTypeNodeParser}.
 * @param objectTypeNode node for whom this network was created
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>objectTypeNode</ParamName>
                    <ParamType>ObjectTypeNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NodeReferenceSetter [setter=new NodeReferenceSetter()]</InnerVar>
                <InnerVar>ObjectTypeNodeParser [parser=new ObjectTypeNodeParser(objectTypeNode)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>parser;accept;[setter]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setNetworkNodeReference</MethodName>
            <MethodComment>/** 
 * Generated subclasses need to implement this method to set member variables based on the specified NetworkNode.
 * @param networkNode node to set to set
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>networkNode</ParamName>
                    <ParamType>NetworkNode</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startNonHashedAlphaNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>alphaNode</ParamName>
                    <ParamType>AlphaNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setNetworkNodeReference;[alphaNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startBetaNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>betaNode</ParamName>
                    <ParamType>BetaNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setNetworkNodeReference;[betaNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startLeftInputAdapterNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leftInputAdapterNode</ParamName>
                    <ParamType>LeftInputAdapterNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setNetworkNodeReference;[leftInputAdapterNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startHashedAlphaNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>hashedAlpha</ParamName>
                    <ParamType>AlphaNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hashedValue</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setNetworkNodeReference;[hashedAlpha]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>