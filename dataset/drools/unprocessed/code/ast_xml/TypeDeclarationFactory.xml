<Class>
    <Id>3115</Id>
    <Package>org.drools.compiler.builder.impl</Package>
    <ClassName>TypeDeclarationFactory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>kbuilder</FieldName>
            <FieldType>KnowledgeBuilderImpl</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>TypeDeclarationFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kbuilder</ParamName>
                    <ParamType>KnowledgeBuilderImpl</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processTypeDeclaration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypeDeclaration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pkgRegistry</ParamName>
                    <ParamType>PackageRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeDescr</ParamName>
                    <ParamType>AbstractClassTypeDeclarationDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TypeDeclaration [type=kbuilder.getTypeBuilder().getExistingTypeDeclaration(typeDescr.getFullTypeName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;processTypeAnnotations;[typeDescr, type]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processTypeAnnotations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeDescr</ParamName>
                    <ParamType>AbstractClassTypeDeclarationDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>TypeDeclaration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processAnnotations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeDescr</ParamName>
                    <ParamType>AbstractClassTypeDeclarationDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>TypeDeclaration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Role [role=typeDescr.getTypedAnnotation(Role.class)]</InnerVar>
                <InnerVar>TypeSafe [typeSafe=typeDescr.getTypedAnnotation(TypeSafe.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>type;setDynamic;[typeDescr.hasAnnotation(PropertyChangeSupport.class)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkRedeclaration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeDescr</ParamName>
                    <ParamType>AbstractClassTypeDeclarationDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>TypeDeclaration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pkgRegistry</ParamName>
                    <ParamType>PackageRegistry</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TypeDeclaration [previousTypeDeclaration=kbuilder.getPackageRegistry(typeDescr.getNamespace()).getPackage().getTypeDeclaration(typeDescr.getTypeName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mergeTypeDeclarations</MethodName>
            <MethodComment>/** 
 * Merges all the missing FactFields from oldDefinition into newDeclaration.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>oldDeclaration</ParamName>
                    <ParamType>TypeDeclaration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newDeclaration</ParamName>
                    <ParamType>TypeDeclaration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>newDeclaration;setTypeClass;[oldDeclaration.getTypeClass()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compareTypeDeclarations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>oldDeclaration</ParamName>
                    <ParamType>TypeDeclaration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newDeclaration</ParamName>
                    <ParamType>TypeDeclaration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;FactField&gt; [oldFields=oldDeclaration.getTypeClassDef().getFields()]</InnerVar>
                <InnerVar>Map&lt;String,FactField&gt; [newFieldsMap=new HashMap&lt;String,FactField&gt;()]</InnerVar>
                <InnerVar>boolean [allFieldsInOldDeclarationAreStillPresent=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IncompatibleClassChangeError</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nullSafeEqualityComparison</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c1</ParamName>
                    <ParamType>Comparable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>c2</ParamName>
                    <ParamType>Comparable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reportDeclarationDiff</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypeDeclarationError</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cfi</ParamName>
                    <ParamType>ClassFieldInspector</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeDescr</ParamName>
                    <ParamType>AbstractClassTypeDeclarationDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;String&gt; [existing=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>List&lt;String&gt; [declared=new ArrayList&lt;String&gt;(typeDescr.getFields().keySet())]</InnerVar>
                <InnerVar>List&lt;String&gt; [deltas=new ArrayList&lt;String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Collections;sort;[existing]</InnerMethodInvoke>
                <InnerMethodInvoke>Collections;sort;[declared]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>