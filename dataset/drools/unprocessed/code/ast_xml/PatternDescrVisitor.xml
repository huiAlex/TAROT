<Class>
    <Id>1880</Id>
    <Package>org.drools.verifier.visitor</Package>
    <ClassName>PatternDescrVisitor</ClassName>
    <SuperClass>ConditionalElementDescrVisitor</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>objectType</FieldName>
            <FieldType>ObjectType</FieldType>
        </Field>
        <Field>
            <FieldName>pattern</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>workingMemory</FieldName>
            <FieldType>WorkingMemory</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PatternDescrVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>VerifierData</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>VerifierRule</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>solvers</ParamName>
                    <ParamType>Solvers</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>PatternDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>VerifierComponent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>orderNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;visitPatternDescr;[descr, parent, orderNumber]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownDescriptionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>PatternDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>orderNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;visitPatternDescr;[descr, null, orderNumber]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownDescriptionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitPatternDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Pattern</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>PatternDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>VerifierComponent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>orderNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>pattern;setObjectTypePath;[objectType.getPath()]</InnerMethodInvoke>
                <InnerMethodInvoke>pattern;setName;[objectType.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>pattern;setPatternNot;[solvers.getRuleSolver().isChildNot()]</InnerMethodInvoke>
                <InnerMethodInvoke>pattern;setPatternExists;[solvers.getRuleSolver().isExists()]</InnerMethodInvoke>
                <InnerMethodInvoke>pattern;setPatternForall;[solvers.getRuleSolver().isForall()]</InnerMethodInvoke>
                <InnerMethodInvoke>pattern;setOrderNumber;[orderNumber]</InnerMethodInvoke>
                <InnerMethodInvoke>solvers;startPatternSolver;[pattern]</InnerMethodInvoke>
                <InnerMethodInvoke>null;visit;[descr.getConstraint()]</InnerMethodInvoke>
                <InnerMethodInvoke>solvers;endPatternSolver;[]</InnerMethodInvoke>
                <InnerMethodInvoke>data;add;[pattern]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownDescriptionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>VerifierComponent</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownDescriptionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>ExprConstraintDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ExprConstraintDescrVisitor [exprConstraintDescrVisitor=new ExprConstraintDescrVisitor(pattern,data,orderNumber,solvers)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>exprConstraintDescrVisitor;visit;[descr]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitPredicateDescr</MethodName>
            <MethodComment>/** 
 * End leaf
 * @param descr
 * @return
 */
</MethodComment>
            <ReturnType>PatternEval</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>PredicateDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PatternEval [predicate=new PatternEval(pattern)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>predicate;setContent;[descr.getContent().toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>predicate;setClassMethodName;[descr.getClassMethodName()]</InnerMethodInvoke>
                <InnerMethodInvoke>predicate;setOrderNumber;[orderNumber.next()]</InnerMethodInvoke>
                <InnerMethodInvoke>predicate;setParentPath;[pattern.getPath()]</InnerMethodInvoke>
                <InnerMethodInvoke>predicate;setParentType;[pattern.getVerifierComponentType()]</InnerMethodInvoke>
                <InnerMethodInvoke>data;add;[predicate]</InnerMethodInvoke>
                <InnerMethodInvoke>solvers;addPatternComponent;[predicate]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitBindingDescr</MethodName>
            <MethodComment>/** 
 * End
 * @param descr
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>BindingDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Field [field=new Field(descr)]</InnerVar>
                <InnerVar>FieldVariable [fieldVariable=new FieldVariable(pattern)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>field;setName;[descr.getExpression()]</InnerMethodInvoke>
                <InnerMethodInvoke>field;setObjectTypeName;[objectType.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>field;setObjectTypePath;[objectType.getPath()]</InnerMethodInvoke>
                <InnerMethodInvoke>data;add;[field]</InnerMethodInvoke>
                <InnerMethodInvoke>fieldVariable;setParentPath;[field.getPath()]</InnerMethodInvoke>
                <InnerMethodInvoke>fieldVariable;setName;[descr.getVariable()]</InnerMethodInvoke>
                <InnerMethodInvoke>fieldVariable;setOrderNumber;[orderNumber.next()]</InnerMethodInvoke>
                <InnerMethodInvoke>data;add;[fieldVariable]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitFieldConstraintDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>FieldConstraintDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FieldConstraintDescrVisitor [visitor=new FieldConstraintDescrVisitor(data,pattern,solvers,orderNumber.next())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>visitor;visitFieldConstraintDescr;[descr]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownDescriptionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitEntryPointDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>EntryPointDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>EntryPoint [entryPoint=data.getEntryPointByEntryId(descr.getEntryId())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>pattern;setSourcePath;[entryPoint.getPath()]</InnerMethodInvoke>
                <InnerMethodInvoke>pattern;setSourceType;[entryPoint.getVerifierComponentType()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownDescriptionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitFromDescr</MethodName>
            <MethodComment>/** 
 * End leaf
 * @param descr
 * @return
 * @throws UnknownDescriptionException
 */
</MethodComment>
            <ReturnType>VerifierFromDescr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>FromDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>VerifierFromDescr [from=new VerifierFromDescr(pattern)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>from;setParentPath;[rule.getPath()]</InnerMethodInvoke>
                <InnerMethodInvoke>from;setParentType;[rule.getVerifierComponentType()]</InnerMethodInvoke>
                <InnerMethodInvoke>data;add;[from]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownDescriptionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitCollectDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>VerifierCollectDescr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>CollectDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>VerifierCollectDescr [collect=new VerifierCollectDescr(pattern)]</InnerVar>
                <InnerVar>PatternDescrVisitor [visitor=new PatternDescrVisitor(data,rule,solvers)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>collect;setClassMethodName;[descr.getClassMethodName()]</InnerMethodInvoke>
                <InnerMethodInvoke>visitor;visit;[descr.getInputPattern(), collect, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>collect;setParentPath;[rule.getPath()]</InnerMethodInvoke>
                <InnerMethodInvoke>collect;setParentType;[rule.getVerifierComponentType()]</InnerMethodInvoke>
                <InnerMethodInvoke>data;add;[collect]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownDescriptionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitAccumulateDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>VerifierAccumulateDescr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>AccumulateDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>VerifierAccumulateDescr [accumulate=new VerifierAccumulateDescr(pattern)]</InnerVar>
                <InnerVar>PatternDescrVisitor [visitor=new PatternDescrVisitor(data,rule,solvers)]</InnerVar>
                <InnerVar>Pattern [parentPattern=visitor.visitPatternDescr(descr.getInputPattern(),null,0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>accumulate;setInitCode;[descr.getInitCode()]</InnerMethodInvoke>
                <InnerMethodInvoke>accumulate;setActionCode;[descr.getActionCode()]</InnerMethodInvoke>
                <InnerMethodInvoke>accumulate;setReverseCode;[descr.getReverseCode()]</InnerMethodInvoke>
                <InnerMethodInvoke>accumulate;setResultCode;[descr.getResultCode()]</InnerMethodInvoke>
                <InnerMethodInvoke>accumulate;setClassName;[descr.getClassName()]</InnerMethodInvoke>
                <InnerMethodInvoke>accumulate;setExternalFunction;[descr.isExternalFunction()]</InnerMethodInvoke>
                <InnerMethodInvoke>accumulate;setFunctionIdentifier;[descr.getFunctions().get(0).getFunction()]</InnerMethodInvoke>
                <InnerMethodInvoke>accumulate;setExpression;[descr.getFunctions().get(0).getParams()[0]]</InnerMethodInvoke>
                <InnerMethodInvoke>accumulate;setParentPath;[parentPattern.getPath()]</InnerMethodInvoke>
                <InnerMethodInvoke>accumulate;setParentType;[parentPattern.getVerifierComponentType()]</InnerMethodInvoke>
                <InnerMethodInvoke>data;add;[accumulate]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownDescriptionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitAndDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>AndDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PatternOperatorDescr [operatorDescr=new PatternOperatorDescr(pattern,OperatorDescrType.AND)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>operatorDescr;setOrderNumber;[orderNumber.next()]</InnerMethodInvoke>
                <InnerMethodInvoke>operatorDescr;setParentPath;[getParent().getPath()]</InnerMethodInvoke>
                <InnerMethodInvoke>operatorDescr;setParentType;[getParent().getVerifierComponentType()]</InnerMethodInvoke>
                <InnerMethodInvoke>data;add;[operatorDescr]</InnerMethodInvoke>
                <InnerMethodInvoke>solvers;startOperator;[OperatorDescrType.AND]</InnerMethodInvoke>
                <InnerMethodInvoke>null;visit;[descr.getDescrs()]</InnerMethodInvoke>
                <InnerMethodInvoke>solvers;endOperator;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownDescriptionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitOrDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>OrDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PatternOperatorDescr [operatorDescr=new PatternOperatorDescr(pattern,OperatorDescrType.OR)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>operatorDescr;setOrderNumber;[orderNumber.next()]</InnerMethodInvoke>
                <InnerMethodInvoke>data;add;[operatorDescr]</InnerMethodInvoke>
                <InnerMethodInvoke>solvers;startOperator;[OperatorDescrType.OR]</InnerMethodInvoke>
                <InnerMethodInvoke>null;visit;[descr.getDescrs()]</InnerMethodInvoke>
                <InnerMethodInvoke>solvers;endOperator;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownDescriptionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>