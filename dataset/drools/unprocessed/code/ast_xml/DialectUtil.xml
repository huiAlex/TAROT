<Class>
    <Id>3124</Id>
    <Package>org.drools.compiler.rule.builder.dialect</Package>
    <ClassName>DialectUtil</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>NON_ALPHA_REGEX</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>LINE_BREAK_FINDER</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getUniqueLegalName</MethodName>
            <MethodComment>/** 
 * Takes a given name and makes sure that its legal and doesn't already exist. If the file exists it increases counter appender untill it is unique.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>packageName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>seed</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ext</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>prefix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>src</ParamName>
                    <ParamType>ResourceReader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [newName=prefix + "_" + normalizeRuleName(name)]</InnerVar>
                <InnerVar>String [fileName=packageName.replace('.','/') + "/" + newName]</InnerVar>
                <InnerVar>int [counter=-1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fixBlockDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>analysis</ParamName>
                    <ParamType>JavaAnalysisResult</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>decls</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;JavaBlockDescr&gt; [blocks=buildBlockDescrs(new ArrayList&lt;JavaBlockDescr&gt;(),analysis.getBlockDescrs())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fixBlockDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>analysis</ParamName>
                    <ParamType>JavaAnalysisResult</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>decls</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>blocks</ParamName>
                    <ParamType>JavaBlockDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MVELDialect [mvel=(MVELDialect)context.getDialect("mvel")]</InnerVar>
                <InnerVar>String [originalCode=analysis.getAnalyzedExpr()]</InnerVar>
                <InnerVar>BoundIdentifiers [bindings=analysis.getBoundIdentifiers()]</InnerVar>
                <InnerVar>StringBuilder [consequence=new StringBuilder()]</InnerVar>
                <InnerVar>int [lastAdded=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Collections;sort;[blocks, new Comparator&lt;JavaBlockDescr&gt;(){
  public int compare(  JavaBlockDescr o1,  JavaBlockDescr o2){
    return o1.getStart() - o2.getStart();
  }
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>consequence;append;[originalCode.substring(lastAdded)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o1</ParamName>
                    <ParamType>JavaBlockDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>o2</ParamName>
                    <ParamType>JavaBlockDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildBlockDescrs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>JavaBlockDescr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descrs</ParamName>
                    <ParamType>JavaBlockDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentBlock</ParamName>
                    <ParamType>JavaContainerBlockDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setContainerBlockInputs</MethodName>
            <MethodComment>/** 
 * This code is not currently used, it's commented out in method caller. This is because we couldn't get this to work and will have to wait until MVEL supports genercs (mdp).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>descrs</ParamName>
                    <ParamType>JavaBlockDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentBlock</ParamName>
                    <ParamType>JavaContainerBlockDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>originalCode</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bindings</ParamName>
                    <ParamType>BoundIdentifiers</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentVars</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [consequence=new StringBuilder()]</InnerVar>
                <InnerVar>int [lastAdded=0]</InnerVar>
                <InnerVar>MacroProcessor [macroProcessor=new MacroProcessor()]</InnerVar>
                <InnerVar>Map&lt;String,Macro&gt; [macros=new HashMap&lt;String,Macro&gt;(MVELConsequenceBuilder.macros)]</InnerVar>
                <InnerVar>String [mvelCode=macroProcessor.parse(consequence.toString())]</InnerVar>
                <InnerVar>Map&lt;String,Class&lt;?&gt;&gt; [inputs=getInputs(context,mvelCode,bindings,parentVars)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>consequence;append;[originalCode.substring(lastAdded)]</InnerMethodInvoke>
                <InnerMethodInvoke>macros;put;["modify", new Macro(){
  public String doMacro(){
    return "with  ";
  }
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>macroProcessor;setMacros;[macros]</InnerMethodInvoke>
                <InnerMethodInvoke>inputs;putAll;[parentVars]</InnerMethodInvoke>
                <InnerMethodInvoke>parentBlock;setInputs;[inputs]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doMacro</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInputs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>code</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bindings</ParamName>
                    <ParamType>BoundIdentifiers</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentVars</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MVELDialect [mvel=(MVELDialect)context.getDialect("mvel")]</InnerVar>
                <InnerVar>MVELAnalysisResult [mvelAnalysis=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addWhiteSpaces</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>original</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consequence</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>start</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>end</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stripTryDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>originalCode</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consequence</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>block</ParamName>
                    <ParamType>JavaTryBlockDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addWhiteSpaces;[originalCode, consequence, consequence.length(), block.getTextStart() - offset]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addWhiteSpaces;[originalCode, consequence, consequence.length(), block.getEnd() - offset]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>stripBlockDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>originalCode</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consequence</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>block</ParamName>
                    <ParamType>JavaBlockDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addWhiteSpaces;[originalCode, consequence, consequence.length(), block.getEnd() - offset]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rewriteInterfacePoint</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>originalCode</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consequence</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ep</ParamName>
                    <ParamType>JavaInterfacePointsDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [originalBlock=originalCode.substring(ep.getStart() - 1,ep.getEnd())]</InnerVar>
                <InnerVar>int [end=originalBlock.indexOf("]")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>consequence;append;["drools.get"]</InnerMethodInvoke>
                <InnerMethodInvoke>consequence;append;[ep.getId()]</InnerMethodInvoke>
                <InnerMethodInvoke>consequence;append;[" )"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addLineBreaks;[consequence, originalBlock.substring(0,end)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rewriteDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>originalCode</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mvel</ParamName>
                    <ParamType>MVELDialect</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consequence</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>JavaBlockDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bindings</ParamName>
                    <ParamType>BoundIdentifiers</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>decls</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [typeSafety=context.isTypesafe()]</InnerVar>
                <InnerVar>Map&lt;String,Class&lt;?&gt;&gt; [localTypes=d.getInputs()]</InnerVar>
                <InnerVar>MVELAnalysisResult [mvelAnalysis=(MVELAnalysisResult)mvel.analyzeBlock(context,d.getTargetExpression(),bindings,localTypes,"drools",KnowledgeHelper.class)]</InnerVar>
                <InnerVar>Class [ret=mvelAnalysis.getReturnType()]</InnerVar>
                <InnerVar>String [retString=ClassUtils.canonicalName(ret)]</InnerVar>
                <InnerVar>String [declrString]</InnerVar>
                <InnerVar>String [obj=declrString]</InnerVar>
                <InnerVar>Declaration [declr=decls.get(declrString)]</InnerVar>
                <InnerVar>String [originalBlock=originalCode.substring(d.getStart() - 1,d.getEnd())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>context;setTypesafe;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>context;setTypesafe;[typeSafety]</InnerMethodInvoke>
                <InnerMethodInvoke>consequence;append;["{ "]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rewriteModifyDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>JavaBlockDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>originalBlock</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consequence</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declr</ParamName>
                    <ParamType>Declaration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;String&gt; [settableProperties=null]</InnerVar>
                <InnerVar>Class&lt;?&gt; [typeClass=findModifiedClass(context,d,declr)]</InnerVar>
                <InnerVar>TypeDeclaration [typeDeclaration=typeClass == null ? null : context.getKnowledgeBuilder().getTypeDeclaration(typeClass)]</InnerVar>
                <InnerVar>boolean [isPropertyReactive=typeDeclaration != null &amp;&amp; typeDeclaration.isPropertyReactive()]</InnerVar>
                <InnerVar>ConsequenceMetaData.Statement [statement=null]</InnerVar>
                <InnerVar>BitMask [modificationMask=isPropertyReactive ? getEmptyPropertyReactiveMask(settableProperties.size()) : allSetButTraitBitMask()]</InnerVar>
                <InnerVar>int [end=originalBlock.indexOf("{")]</InnerVar>
                <InnerVar>int [start=end + 1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addLineBreaks;[consequence, originalBlock.substring(0,end)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addLineBreaks;[consequence, originalBlock.substring(end)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;appendUpdateStatement;[consequence, declr, obj, modificationMask, typeClass]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rewriteUpdateDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>JavaBlockDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consequence</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declr</ParamName>
                    <ParamType>Declaration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BitMask [modificationMask=AllSetBitMask.get()]</InnerVar>
                <InnerVar>Class&lt;?&gt; [typeClass=findModifiedClass(context,d,declr)]</InnerVar>
                <InnerVar>TypeDeclaration [typeDeclaration=typeClass == null ? null : context.getKnowledgeBuilder().getTypeDeclaration(typeClass)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;appendUpdateStatement;[consequence, declr, obj, modificationMask, typeClass]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>appendUpdateStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>consequence</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declr</ParamName>
                    <ParamType>Declaration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>modificationMask</ParamName>
                    <ParamType>BitMask</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeClass</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [isInternalFact=declr == null || declr.isInternalFact()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>consequence.append("drools.update( ").append(obj).append(isInternalFact ? "__Handle2__, " : "__Handle__, ").append(modificationMask.getInstancingStatement()).append(", ").append(typeClass != null ? typeClass.getCanonicalName() : "java.lang.Object").append(".class");append;[" ); }"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseModifiedProperties</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BitMask</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <ParamType>ConsequenceMetaData.Statement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>settableProperties</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeDeclaration</ParamName>
                    <ParamType>TypeDeclaration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyReactive</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>modificationMask</ParamName>
                    <ParamType>BitMask</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>exprStr</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [endMethodName=exprStr.indexOf('(')]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateModificationMask</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BitMask</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>settableProperties</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyReactive</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>modificationMask</ParamName>
                    <ParamType>BitMask</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findModifiedClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>JavaBlockDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declr</ParamName>
                    <ParamType>Declaration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [targetId=d.getTargetExpression().trim()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findDeclarationClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>JavaBlockDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [inputClass=d.getInputs() == null ? null : d.getInputs().get(statement)]</InnerVar>
                <InnerVar>List&lt;JavaLocalDeclarationDescr&gt; [localDeclarationDescrs=d.getInScopeLocalVars()]</InnerVar>
                <InnerVar>String [className=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findClassByName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [namespace=context.getRuleDescr().getNamespace()]</InnerVar>
                <InnerVar>KnowledgeBuilderImpl [packageBuilder=context.getKnowledgeBuilder()]</InnerVar>
                <InnerVar>Class&lt;?&gt; [clazz=null]</InnerVar>
                <InnerVar>Set&lt;String&gt; [imports=new HashSet&lt;String&gt;()]</InnerVar>
                <InnerVar>List&lt;PackageDescr&gt; [pkgDescrs=packageBuilder.getPackageDescrs(namespace)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findFunctionReturnedClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [functionName=statement.substring(0,statement.indexOf('('))]</InnerVar>
                <InnerVar>FunctionDescr [function=lookupFunction(context,functionName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rewriteDeleteDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>d</ParamName>
                    <ParamType>JavaBlockDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consequence</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declr</ParamName>
                    <ParamType>Declaration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [typeClass=findModifiedClass(context,d,declr)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseInsertDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>block</ParamName>
                    <ParamType>JavaBlockDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [expr=block.getTargetExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addLineBreaks</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>consequence</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>chunk</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Matcher [m=LINE_BREAK_FINDER.matcher(chunk)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copyErrorLocation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Exception</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>BaseDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lookupFunction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FunctionDescr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>functionName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [packageName=context.getRule().getPackageName()]</InnerVar>
                <InnerVar>List&lt;PackageDescr&gt; [pkgDescrs=context.getKnowledgeBuilder().getPackageDescrs(packageName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>normalizeRuleName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [normalized=name.replace(' ','_')]</InnerVar>
                <InnerVar>StringBuilder [sb=new StringBuilder(normalized.length())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>