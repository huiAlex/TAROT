<Class>
    <Id>1882</Id>
    <Package>org.drools.core.reteoo</Package>
    <ClassName>PathEndNode</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>LeftTupleNode</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>allLinkedTestMask</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>smemCount</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getPathNodes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LeftTupleNode[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasPathNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPathEndNodes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pathEndNodes</ParamName>
                    <ParamType>PathEndNode[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPathEndNodes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PathEndNode[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPathMemSpec</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PathMemSpec</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resetPathMemSpec</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>removingTN</ParamName>
                    <ParamType>TerminalNode</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>PathMemSpec</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>allLinkedTestMask</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smemCount</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>calculatePathMemSpec</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PathMemSpec</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>startTupleSource</ParamName>
                    <ParamType>LeftTupleSource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>calculatePathMemSpec</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PathMemSpec</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>startTupleSource</ParamName>
                    <ParamType>LeftTupleSource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>removingTN</ParamName>
                    <ParamType>TerminalNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [counter=1]</InnerVar>
                <InnerVar>long [allLinkedTestMask=0]</InnerVar>
                <InnerVar>LeftTupleSource [tupleSource=getLeftTupleSource()]</InnerVar>
                <InnerVar>boolean [updateBitInNewSegment=true]</InnerVar>
                <InnerVar>boolean [updateAllLinkedTest=!hasConditionalBranchNode(tupleSource)]</InnerVar>
                <InnerVar>boolean [subnetworkBoundaryCrossed=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasConditionalBranchNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tupleSource</ParamName>
                    <ParamType>LeftTupleSource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>