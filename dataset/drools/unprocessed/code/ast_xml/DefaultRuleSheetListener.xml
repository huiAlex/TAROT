<Class>
    <Id>1391</Id>
    <Package>org.drools.decisiontable.parser</Package>
    <ClassName>DefaultRuleSheetListener</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>RuleSheetListener</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DefaultRuleSheetListener  /** 
 * An object of this class is prepared to receive calls passing it the contents of a spreadsheet containing one or more decision tables. Each of these tables is then expanded into a set of similar rules, varying to a degree with respect to the patterns and actions. A "rule set" starts with some overall definitions such as imports, globals, functions and queries. A table is identifed by a cell beginning with the text "RuleTable". The first row after the table identifier defines the column type: either a pattern of the condition or an action for the consequence, or an attribute. The second row contains optional pattern type declarations. If cells in this row are merged, then all snippets below the merged stretch become part of the same pattern, as separate constraints. The third row identifies the java code block associated with the condition or consequence. This code block should include one or more parameter markers for the insertion of values defined in cells of that column. The third row is available for comments on the purpose of the column. All subsequent rows identify rules with the set, providing values to be inserted where there are markers in the code snippets defined in the third row, or for the attribute identified by the column header. href="mailto:michael.neale@gmail.com"&gt; Michael Neale &lt;/a&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>QUERIES_TAG</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>FUNCTIONS_TAG</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DECLARES_TAG</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>IMPORT_TAG</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SEQUENTIAL_FLAG</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ESCAPE_QUOTES_FLAG</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MIN_SALIENCE_TAG</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MAX_SALIENCE_TAG</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>NUMERIC_DISABLED_FLAG</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>VARIABLES_TAG</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>RULE_TABLE_TAG</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>RULESET_TAG</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ACTION_ROW</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>OBJECT_TYPE_ROW</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>CODE_ROW</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LABEL_ROW</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>_isInRuleTable</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>_ruleRow</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>_ruleStartColumn</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>_ruleStartRow</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>_currentRule</FieldName>
            <FieldType>Rule</FieldType>
        </Field>
        <Field>
            <FieldName>_currentRulePrefix</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>_currentSequentialFlag</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>_currentEscapeQuotesFlag</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>_currentNumericDisabledFlag</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>_currentSalience</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>_minSalienceTag</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>_actions</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>_actions</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>_cellComments</FieldName>
            <FieldType>HashMap</FieldType>
        </Field>
        <Field>
            <FieldName>_cellComments</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>_ruleList</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>_ruleList</FieldName>
            <FieldType>Rule</FieldType>
        </Field>
        <Field>
            <FieldName>sourceBuilders</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>sourceBuilders</FieldName>
            <FieldType>SourceBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>_propertiesListener</FieldName>
            <FieldType>PropertiesSheetListener</FieldType>
        </Field>
        <Field>
            <FieldName>showPackage</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>worksheetName</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DefaultRuleSheetListener</MethodName>
            <MethodComment>/** 
 * Constructor.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>DefaultRuleSheetListener</MethodName>
            <MethodComment>/** 
 * Constructor.
 * @param showPackage if true, the rule set name is passed to the resulting package
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>showPackage</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setWorksheetName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>worksheetName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProperties</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CaseInsensitiveMap</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRuleSet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Package</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addRule</MethodName>
            <MethodComment>/** 
 * Add a new rule to the current list of rules
 * @param newRule
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newRule</ParamName>
                    <ParamType>Rule</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this._ruleList;add;[newRule]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildRuleSet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Package</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String [defaultPackageName="rule_table"]</InnerVar>
                <InnerVar>String [rulesetName=getProperties().getSingleProperty(RULESET_TAG,defaultPackageName)]</InnerVar>
                <InnerVar>Package [ruleset=new Package((showPackage) ? rulesetName : null)]</InnerVar>
                <InnerVar>List&lt;Import&gt; [importList=RuleSheetParserUtil.getImportList(getProperties().getProperty(IMPORT_TAG))]</InnerVar>
                <InnerVar>List&lt;Global&gt; [variableList=RuleSheetParserUtil.getVariableList(getProperties().getProperty(VARIABLES_TAG))]</InnerVar>
                <InnerVar>List&lt;String&gt; [functions=getProperties().getProperty(FUNCTIONS_TAG)]</InnerVar>
                <InnerVar>List&lt;String&gt; [queries=getProperties().getProperty(QUERIES_TAG)]</InnerVar>
                <InnerVar>List&lt;String&gt; [declarations=getProperties().getProperty(DECLARES_TAG)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startSheet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finishSheet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this._propertiesListener;finishSheet;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;finishRuleTable;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;flushRule;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newRow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rowNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columns</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flushRule</MethodName>
            <MethodComment>/** 
 * This makes sure that the rules have all their components added. As when there are merged/spanned cells, they may be left out.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newCell</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mergedColStart</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initRuleTable</MethodName>
            <MethodComment>/** 
 * This gets called each time a "new" rule table is found.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [headCell=RuleSheetParserUtil.rc2name(this._ruleStartRow,this._ruleStartColumn)]</InnerVar>
                <InnerVar>String [ruleCell=RuleSheetParserUtil.rc2name(this._ruleRow,this._ruleStartColumn)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;preInitRuleTable;[row, column, value]</InnerMethodInvoke>
                <InnerMethodInvoke>this._ruleList;add;[this._currentRule]</InnerMethodInvoke>
                <InnerMethodInvoke>null;postInitRuleTable;[row, column, value]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>preInitRuleTable</MethodName>
            <MethodComment>/** 
 * Called before rule table initialisation. Subclasses may override this method to do additional processing.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCurrentRule</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Rule</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>postInitRuleTable</MethodName>
            <MethodComment>/** 
 * Called after rule table initialisation. Subclasses may override this method to do additional processing.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFlagValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defaultValue</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNumericValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defaultValue</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finishRuleTable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processNonRuleCell</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [testVal=value.trim().toLowerCase()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processRuleCell</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mergedColStart</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [trimVal=value.trim()]</InnerVar>
                <InnerVar>String [testVal=trimVal.toLowerCase()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>objectTypeRow</MethodName>
            <MethodComment>/** 
 * This is for handling a row where an object declaration may appear, this is the row immediately above the snippets. It may be blank, but there has to be a row here. Merged cells have "special meaning" which is why this is so freaking hard. A future refactor may be to move away from an "event" based listener.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mergedColStart</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ActionType [action=getActionForColumn(row,column)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>codeRow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ActionType [actionType=getActionForColumn(row,column)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>actionType;addTemplate;[row, column, value]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>labelRow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ActionType [actionType=getActionForColumn(row,column)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getActionForColumn</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ActionType</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ActionType [actionType=this._actions.get(column)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextDataCell</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ActionType [actionType=getActionForColumn(row,column)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createNewRuleForRow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Rule</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>headCell</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ruleCell</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Integer [salience=null]</InnerVar>
                <InnerVar>int [spreadsheetRow=row + 1]</InnerVar>
                <InnerVar>String [name=this._currentRulePrefix + "_" + spreadsheetRow]</InnerVar>
                <InnerVar>Rule [rule=new Rule(name,salience,spreadsheetRow)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rule;setComment;[" rule values at " + ruleCell + ", header at "+ headCell]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isCellValueEmpty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNumericDisabled</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>