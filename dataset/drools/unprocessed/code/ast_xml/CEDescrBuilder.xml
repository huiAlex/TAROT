<Class>
    <Id>3469</Id>
    <Package>org.drools.compiler.lang.api</Package>
    <ClassName>CEDescrBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>AnnotatedDescrBuilder</SuperInterface>
        <SuperInterface>CEDescrBuilder&lt;P,T&gt;</SuperInterface>
        <SuperInterface>PatternContainerDescrBuilder</SuperInterface>
        <SuperInterface>CEDescrBuilder&lt;P,T&gt;</SuperInterface>
        <SuperInterface>DescrBuilder</SuperInterface>
        <SuperInterface>P</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CEDescrBuilder  /** 
 * A descriptor builder for Conditional Elements
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>and</MethodName>
            <MethodComment>/** 
 * Creates a set of AND'ed Conditional Elements
 * @return a descriptor builder for the AND'ed set of CEs
 */
</MethodComment>
            <ReturnType>CEDescrBuilder&lt;P,T&gt;</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>or</MethodName>
            <MethodComment>/** 
 * Creates a set of OR'ed Conditional Elements
 * @return a descriptor builder for the OR'ed set of CEs
 */
</MethodComment>
            <ReturnType>CEDescrBuilder&lt;P,T&gt;</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>not</MethodName>
            <MethodComment>/** 
 * Creates a set of NOT'ed Conditional Elements
 * @return a descriptor builder for the NOT'ed set of CEs
 */
</MethodComment>
            <ReturnType>CEDescrBuilder&lt;P,T&gt;</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>exists</MethodName>
            <MethodComment>/** 
 * Creates a set of EXIST'ed Conditional Elements
 * @return a descriptor builder for the EXIST'ed set of CEs
 */
</MethodComment>
            <ReturnType>CEDescrBuilder&lt;P,T&gt;</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forall</MethodName>
            <MethodComment>/** 
 * Defines a FORALL Conditional Element
 * @return a descriptor builder for the FORALL CE
 */
</MethodComment>
            <ReturnType>CEDescrBuilder&lt;P,T&gt;</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>accumulate</MethodName>
            <MethodComment>/** 
 * Defines a top level ACCUMULATE CE
 * @return the accumulate descriptor builder
 */
</MethodComment>
            <ReturnType>CEDescrBuilder&lt;P,T&gt;</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eval</MethodName>
            <MethodComment>/** 
 * Defines an EVAL Conditional Elements
 * @return a descriptor builder for the EVAL CE
 */
</MethodComment>
            <ReturnType>CEDescrBuilder&lt;P,T&gt;</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>namedConsequence</MethodName>
            <MethodComment>/** 
 * Defines a Named Consequence Conditional Elements
 * @return a descriptor builder for the Named Consequence CE
 */
</MethodComment>
            <ReturnType>CEDescrBuilder&lt;P,T&gt;</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>conditionalBranch</MethodName>
            <MethodComment>/** 
 * Defines a Conditional Branch Conditional Elements
 * @return a descriptor builder for the Conditional Branch CE
 */
</MethodComment>
            <ReturnType>CEDescrBuilder&lt;P,T&gt;</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>