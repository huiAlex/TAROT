<Class>
    <Id>2609</Id>
    <Package>org.drools.compiler.lang.dsl</Package>
    <ClassName>DSLTokenizedMappingFile</ClassName>
    <SuperClass>DSLMappingFile</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>nl</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>commentPat</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>entryPat</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>lineLengths</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>lineLengths</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>optionSet</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>optionSet</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DSLTokenizedMappingFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readFile</MethodName>
            <MethodComment>/** 
 * Read a DSL file and convert it to a String. Comment lines are removed. Split lines are joined, inserting a space for an EOL, but maintaining the original number of lines by inserting EOLs. Options are recognized. Keeps track of original line lengths for fixing parser error messages.
 * @param reader for the DSL file data
 * @return the transformed DSL file
 * @throws IOException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>Reader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LineNumberReader [lnr=new LineNumberReader(reader)]</InnerVar>
                <InnerVar>StringBuilder [sb=new StringBuilder()]</InnerVar>
                <InnerVar>int [nlCount=0]</InnerVar>
                <InnerVar>boolean [inEntry=false]</InnerVar>
                <InnerVar>String [line]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>lineLengths;add;[null]</InnerMethodInvoke>
                <InnerMethodInvoke>lnr;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseAndLoad</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dsl</ParamName>
                    <ParamType>Reader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;ParserError&gt; [errors=new ArrayList&lt;ParserError&gt;()]</InnerVar>
                <InnerVar>String [text=readFile(dsl)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setErrors;[errors]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildFileMapping</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapping</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>errors</ParamName>
                    <ParamType>ParserError</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dsl</ParamName>
                    <ParamType>Reader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ANTLRReaderStream [reader=new ANTLRReaderStream(dsl)]</InnerVar>
                <InnerVar>DSLMapWalker [walker=buildFileMappingWalker(errors,reader)]</InnerVar>
                <InnerVar>DSLMapping [mapping=walker.mapping_file()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildFileMappingWalker</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DSLMapWalker</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>errors</ParamName>
                    <ParamType>ParserError</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stream</ParamName>
                    <ParamType>CharStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DSLMapLexer [lexer=new DSLMapLexer(stream)]</InnerVar>
                <InnerVar>CommonTokenStream [tokens=new CommonTokenStream()]</InnerVar>
                <InnerVar>DSLMapParser [parser=new DSLMapParser(tokens)]</InnerVar>
                <InnerVar>DSLMapParser.mapping_file_return [example=parser.mapping_file()]</InnerVar>
                <InnerVar>CommonTree [tree=(CommonTree)example.getTree()]</InnerVar>
                <InnerVar>CommonTreeNodeStream [nodes=new CommonTreeNodeStream(tree)]</InnerVar>
                <InnerVar>DSLMapWalker [walker=new DSLMapWalker(nodes)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tokens;setTokenSource;[lexer]</InnerMethodInvoke>
                <InnerMethodInvoke>errors;addAll;[lexer.getErrors()]</InnerMethodInvoke>
                <InnerMethodInvoke>errors;addAll;[parser.getErrors()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>RecognitionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>