<Class>
    <Id>1079</Id>
    <Package>org.drools.template.parser</Package>
    <ClassName>DefaultTemplateRuleBase</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>TemplateRuleBase</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DefaultTemplateRuleBase  /** 
 * Create a rule base for the set of rule templates in the TemplateContainer. These rules are used internally by the engine to generate the actual decision table rules based on which columns have been filled in. &lt;p/&gt; Basically, if a rule template requires columns A and B then the template rule base will generate a rule with columns A and B as the LHS and a RHS which triggers the rule to be generated. ie. rule "template1" when r : Row() column1 : Column(name == "column1") Cell(row == r, column == column1) column2 : Column(name == "column2") Cell(row == r, column == column2, value == "xyz") then generator.generate( "template1", r); end
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>kBase</FieldName>
            <FieldType>InternalKnowledgeBase</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DefaultTemplateRuleBase</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tc</ParamName>
                    <ParamType>TemplateContainer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newStatefulSession</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KieSession</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDTRules</MethodName>
            <MethodComment>/** 
 * @param templates
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>templates</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>org.drools.template.model.Package [p=new org.drools.template.model.Package(DefaultTemplateRuleBase.class.getPackage().getName())]</InnerVar>
                <InnerVar>int [i=1]</InnerVar>
                <InnerVar>DRLOutput [out=new DRLOutput()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addImports;[p]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addGlobals;[p]</InnerMethodInvoke>
                <InnerMethodInvoke>p;renderDRL;[out]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createTemplateRule</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>org.drools.template.model.Package</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>RuleTemplate</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Rule [rule=new Rule(template.getName(),null,index)]</InnerVar>
                <InnerVar>Condition [condition=new Condition()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>condition;setSnippet;["r : Row()"]</InnerMethodInvoke>
                <InnerMethodInvoke>rule;addCondition;[condition]</InnerMethodInvoke>
                <InnerMethodInvoke>null;createColumnConditions;[template, rule]</InnerMethodInvoke>
                <InnerMethodInvoke>rule;addConsequence;[createConsequence(template)]</InnerMethodInvoke>
                <InnerMethodInvoke>p;addRule;[rule]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createColumnConditions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>RuleTemplate</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>Rule</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addGlobals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>org.drools.template.model.Package</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Global [global=new Global()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>global;setClassName;[DefaultGenerator.class.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>global;setIdentifier;["generator"]</InnerMethodInvoke>
                <InnerMethodInvoke>p;addVariable;[global]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addImports</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>org.drools.template.model.Package</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Import [drlImport1=new Import()]</InnerVar>
                <InnerVar>Import [drlImport2=new Import()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>drlImport1;setClassName;[Map.class.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>drlImport2;setClassName;[HashMap.class.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>p;addImport;[drlImport1]</InnerMethodInvoke>
                <InnerMethodInvoke>p;addImport;[drlImport2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createConsequence</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Consequence</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>RuleTemplate</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [action=new StringBuffer()]</InnerVar>
                <InnerVar>Consequence [consequence=new Consequence()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>action;append;["generator.generate( \""]</InnerMethodInvoke>
                <InnerMethodInvoke>action.append(template.getName());append;["\", r);"]</InnerMethodInvoke>
                <InnerMethodInvoke>consequence;setSnippet;[action.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readKnowledgeBase</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InternalKnowledgeBase</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drl</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>