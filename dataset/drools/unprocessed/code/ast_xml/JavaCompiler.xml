<Class>
    <Id>2717</Id>
    <Package>org.drools.compiler.commons.jci.compilers</Package>
    <ClassName>JavaCompiler</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>JavaCompiler  /** 
 * The general compiler interface. All compilers implementing this interface should read the resources from the reader and store the java class files into the ResourceStore. The actual compilation language does not matter. But the contract is that the result of the compilation will be a class file. If possible the compiler should notify the optional CompilationProblemHandler as soon as a problem is found.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>setCompilationProblemHandler</MethodName>
            <MethodComment>/** 
 * Set the the handler that gets the notification of an error or warning as soon as this information is available from the compiler. Note: Some compilers might not support this feature.
 * @param pHandler
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pHandler</ParamName>
                    <ParamType>CompilationProblemHandler</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createDefaultSettings</MethodName>
            <MethodComment>/** 
 * factory method to create the underlying default settings
 */
</MethodComment>
            <ReturnType>JavaCompilerSettings</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment>/** 
 * uses the default compiler settings and the current classloader
 */
</MethodComment>
            <ReturnType>CompilationResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pResourcePaths</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pReader</ParamName>
                    <ParamType>ResourceReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pStore</ParamName>
                    <ParamType>ResourceStore</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment>/** 
 * uses the default compiler settings
 */
</MethodComment>
            <ReturnType>CompilationResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pResourcePaths</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pReader</ParamName>
                    <ParamType>ResourceReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pStore</ParamName>
                    <ParamType>ResourceStore</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pClassLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment>/** 
 * Compiles the java resources "some/path/to/MyJava.java" read through the ResourceReader and then stores the resulting classes in the ResourceStore under "some/path/to/MyJava.class". Note: As these are resource path you always have to use "/"  The result of the compilation run including detailed error information is returned as CompilationResult. If you need to get notified already during the compilation process you can register a CompilationProblemHandler. Note: Not all compilers might support this notification mechanism.
 * @param pResourcePaths
 * @param pReader
 * @param pStore
 * @param pClassLoader
 * @param pSettings
 * @return always a CompilationResult
 */
</MethodComment>
            <ReturnType>CompilationResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pResourcePaths</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pReader</ParamName>
                    <ParamType>ResourceReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pStore</ParamName>
                    <ParamType>ResourceStore</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pClassLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pSettings</ParamName>
                    <ParamType>JavaCompilerSettings</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>