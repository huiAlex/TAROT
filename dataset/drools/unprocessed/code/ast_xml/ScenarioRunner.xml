<Class>
    <Id>358</Id>
    <Package>org.drools.workbench.models.testscenarios.backend</Package>
    <ClassName>ScenarioRunner</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ScenarioRunner  /** 
 * This actually runs the test scenarios.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>ksession</FieldName>
            <FieldType>KieSession</FieldType>
        </Field>
        <Field>
            <FieldName>maximumAmountOfRuleFirings</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>workingMemoryWrapper</FieldName>
            <FieldType>TestScenarioKSessionWrapper</FieldType>
        </Field>
        <Field>
            <FieldName>factPopulatorFactory</FieldName>
            <FieldType>FactPopulatorFactory</FieldType>
        </Field>
        <Field>
            <FieldName>factPopulator</FieldName>
            <FieldType>FactPopulator</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ScenarioRunner</MethodName>
            <MethodComment>/** 
 * This constructor is normally used by Guvnor for running tests on a users request.
 * @param ksession A populated type resolved to be used to resolve the types inthe scenario. &lt;p/&gt; For info on how to invoke this, see ContentPackageAssemblerTest.testPackageWithRuleflow in guvnor-webapp This requires that the classloader for the thread context be set appropriately. The PackageBuilder can provide a suitable TypeResolver for a given package header, and the Package config can provide a classloader.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ksession</ParamName>
                    <ParamType>KieSession</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ScenarioRunner</MethodName>
            <MethodComment>/** 
 * @param ksession                   A populated type resolved to be used to resolve the types inthe scenario.
 * @param maximumAmountOfRuleFirings Limit for amount of rules that can fire. To prevent infinite loops.
 * @throws ClassNotFoundException
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ksession</ParamName>
                    <ParamType>KieSession</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maximumAmountOfRuleFirings</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scenario</ParamName>
                    <ParamType>Scenario</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,Object&gt; [populatedData=new HashMap&lt;String,Object&gt;()]</InnerVar>
                <InnerVar>Map&lt;String,Object&gt; [globalData=new HashMap&lt;String,Object&gt;()]</InnerVar>
                <InnerVar>KieBase [kieBase=ksession.getKieBase()]</InnerVar>
                <InnerVar>ClassLoader [classloader2=((InternalKnowledgeBase)kieBase).getRootClassLoader()]</InnerVar>
                <InnerVar>ClassTypeResolver [resolver=new ClassTypeResolver(getImports(scenario),classloader2)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>scenario;setLastRunResult;[new Date()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;populateGlobals;[scenario.getGlobals()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;applyFixtures;[scenario.getFixtures(), createScenarioSettings(scenario)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
                <ExceptionType>IllegalAccessException</ExceptionType>
                <ExceptionType>InstantiationException</ExceptionType>
                <ExceptionType>InvocationTargetException</ExceptionType>
                <ExceptionType>NoSuchMethodException</ExceptionType>
                <ExceptionType>InvalidClockTypeException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>scenarioUsesTimeWalk</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scenario</ParamName>
                    <ParamType>Scenario</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getImports</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scenario</ParamName>
                    <ParamType>Scenario</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;String&gt; [imports=new HashSet&lt;String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>imports;addAll;[scenario.getImports().getImportStrings()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createScenarioSettings</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ScenarioSettings</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scenario</ParamName>
                    <ParamType>Scenario</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ScenarioSettings [scenarioSettings=new ScenarioSettings()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>scenarioSettings;setRuleList;[scenario.getRules()]</InnerMethodInvoke>
                <InnerMethodInvoke>scenarioSettings;setInclusive;[scenario.isInclusive()]</InnerMethodInvoke>
                <InnerMethodInvoke>scenarioSettings;setMaxRuleFirings;[getMaxRuleFirings(scenario)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMaxRuleFirings</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scenario</ParamName>
                    <ParamType>Scenario</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>applyFixtures</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fixtures</ParamName>
                    <ParamType>Fixture</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scenarioSettings</ParamName>
                    <ParamType>ScenarioSettings</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>factPopulator;populate;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
                <ExceptionType>InstantiationException</ExceptionType>
                <ExceptionType>IllegalAccessException</ExceptionType>
                <ExceptionType>InvocationTargetException</ExceptionType>
                <ExceptionType>NoSuchMethodException</ExceptionType>
                <ExceptionType>InvalidClockTypeException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>populateGlobals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>globals</ParamName>
                    <ParamType>FactData</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>factPopulator;populate;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
                <ExceptionType>InstantiationException</ExceptionType>
                <ExceptionType>IllegalAccessException</ExceptionType>
                <ExceptionType>InvocationTargetException</ExceptionType>
                <ExceptionType>NoSuchMethodException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>