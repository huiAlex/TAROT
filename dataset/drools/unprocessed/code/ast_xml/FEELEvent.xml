<Class>
    <Id>2357</Id>
    <Package>org.kie.dmn.api.feel.runtime.events</Package>
    <ClassName>FEELEvent</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>FEELEvent  /** 
 * An interface for FEEL related events
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getSeverity</MethodName>
            <MethodComment>/** 
 * Returns the severity of the event
 * @return
 */
</MethodComment>
            <ReturnType>Severity</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMessage</MethodName>
            <MethodComment>/** 
 * Returns a human readable message about the event
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSourceException</MethodName>
            <MethodComment>/** 
 * In case the event relates to an exception, returns the caught Throwable
 * @return
 */
</MethodComment>
            <ReturnType>Throwable</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLine</MethodName>
            <MethodComment>/** 
 * In case the event refers to the source code, returns the line in the source code where the event was generated or -1 if it does not refer to a source code line. The line is 1-based. I.e., the first line is 1, second line is 2, etc.
 * @return
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getColumn</MethodName>
            <MethodComment>/** 
 * In case the event refers to the source code, returns the character in the line of the the source code where the event was generated or -1 if it does not refer to a source code character. The column is 0-based. I.e. the first character in the line is 0, the second is 1, and so on.
 * @return
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOffendingSymbol</MethodName>
            <MethodComment>/** 
 * In case the event refers to a symbol in the source code, this method returns the offending symbol, as an ANTLR CommonToken instance. Otherwise, it returns null.
 * @return
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>