<Class>
    <Id>3298</Id>
    <Package>org.drools.compiler.lang.api</Package>
    <ClassName>AccumulateDescrBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>DescrBuilder</SuperInterface>
        <SuperInterface>P</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AccumulateDescrBuilder  /** 
 * A descriptor builder for Accumulate
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>source</MethodName>
            <MethodComment>/** 
 * Defines the source CE for the Accumulate CE. It is always an AND descriptor that contains one or more Patterns and other CEs. 
 * @return the CEDescrBuilder for the source CE
 */
</MethodComment>
            <ReturnType>AccumulateDescrBuilder&lt;P&gt;</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>function</MethodName>
            <MethodComment>/** 
 * For accumulate CEs that use accumulate functions, this call instantiate one accumulate function call. Example: ... accumulate( X(), $sum : sum( $value ) ) Requires the call to this method with parameters: function( "sum", "$sum", new String[] { "$value" } ) Please note that accumulate supports multiple function calls  and this method should be called for each function call. Accumulate uses either accumulate functions or the custom code blocks (init/action/reverse/result). It is not possible to mix them.
 * @param name the name of the function being called. Mandatory non-null parameter.
 * @param bind the name of the bound variable if there is one. Null if no binding should be made.
 * @param isUnification true if the bound variable is expected to unify with the result of the acc function. false otherwise
 * @param parameters the array of parameters to the function.
 * @return itself, so that it can be used as a fluent API
 */
</MethodComment>
            <ReturnType>P</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bind</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isUnification</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment>/** 
 * For accumulate CEs that use custom code blocks, this call sets the content of the init code block. Please node that the use of custom code blocks is discouraged, as they are usually a bad practice. Accumulate uses either accumulate functions or the custom code blocks (init/action/reverse/result). It is not possible to mix them.
 * @param block the code for this block
 * @return itself, so that it can be used as a fluent API
 */
</MethodComment>
            <ReturnType>P</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>block</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>action</MethodName>
            <MethodComment>/** 
 * For accumulate CEs that use custom code blocks, this call sets the content of the action code block. Please node that the use of custom code blocks is discouraged, as they are usually a bad practice. Accumulate uses either accumulate functions or the custom code blocks (init/action/reverse/result). It is not possible to mix them.
 * @param block the code for this block
 * @return itself, so that it can be used as a fluent API
 */
</MethodComment>
            <ReturnType>P</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>block</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reverse</MethodName>
            <MethodComment>/** 
 * For accumulate CEs that use custom code blocks, this call sets the content of the reverse code block. Please node that the use of custom code blocks is discouraged, as they are usually a bad practice. Accumulate uses either accumulate functions or the custom code blocks (init/action/reverse/result). It is not possible to mix them.
 * @param block the code for this block
 * @return itself, so that it can be used as a fluent API
 */
</MethodComment>
            <ReturnType>P</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>block</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>result</MethodName>
            <MethodComment>/** 
 * For accumulate CEs that use custom code blocks, this call sets the content of the result expression. Please node that the use of custom code blocks is discouraged, as they are usually a bad practice. Accumulate uses either accumulate functions or the custom code blocks (init/action/reverse/result). It is not possible to mix them.
 * @param expr the return expr
 * @return itself, so that it can be used as a fluent API
 */
</MethodComment>
            <ReturnType>P</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>end</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>P</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>constraint</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>P</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constr</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>