<Class>
    <Id>829</Id>
    <Package>org.drools.compiler.util</Package>
    <ClassName>TimerUtils</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TimerUtils  /** 
 * Utility class providing methods for coping with timing issues, such as {@link java.lang.Thread#sleep(long,int)} inaccuracy, on certain OS.&lt;p/&gt; Inspired by http://stackoverflow.com/questions/824110/accurate-sleep-for-java-on-windows and http://andy-malakov.blogspot.cz/2010/06/alternative-to-threadsleep.html.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>SLEEP_PRECISION</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>SPIN_YIELD_PRECISION</FieldName>
            <FieldType>long</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>TimerUtils</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sleepMillis</MethodName>
            <MethodComment>/** 
 * Sleeps for specified amount of time in milliseconds.
 * @param duration the amount of milliseconds to wait
 * @throws InterruptedException if the current thread gets interrupted
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>duration</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;sleepNanos;[TimeUnit.MILLISECONDS.toNanos(duration)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sleepNanos</MethodName>
            <MethodComment>/** 
 * Sleeps for specified amount of time in nanoseconds.
 * @param nanoDuration the amount of nanoseconds to wait
 * @throws InterruptedException if the current thread gets interrupted
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nanoDuration</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [end=System.nanoTime() + nanoDuration]</InnerVar>
                <InnerVar>long [timeLeft=nanoDuration]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InterruptedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>