<Class>
    <Id>1449</Id>
    <Package>org.drools.compiler.rule.builder.dialect.java</Package>
    <ClassName>JavaDialect</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Dialect</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>ID</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>EXPRESSION_DIALECT_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PATTERN_BUILDER</FieldName>
            <FieldType>PatternBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>QUERY_BUILDER</FieldName>
            <FieldType>QueryBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>SALIENCE_BUILDER</FieldName>
            <FieldType>SalienceBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>ENABLED_BUILDER</FieldName>
            <FieldType>EnabledBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>ACCUMULATE_BUILDER</FieldName>
            <FieldType>JavaAccumulateBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>EVAL_BUILDER</FieldName>
            <FieldType>RuleConditionBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>PREDICATE_BUILDER</FieldName>
            <FieldType>PredicateBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>RETURN_VALUE_BUILDER</FieldName>
            <FieldType>ReturnValueBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>CONSEQUENCE_BUILDER</FieldName>
            <FieldType>ConsequenceBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>RULE_CLASS_BUILDER</FieldName>
            <FieldType>JavaRuleClassBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>FROM_BUILDER</FieldName>
            <FieldType>MVELFromBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>FUNCTION_BUILDER</FieldName>
            <FieldType>JavaFunctionBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>COLLECT_BUIDER</FieldName>
            <FieldType>CollectBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>FORALL_BUILDER</FieldName>
            <FieldType>ForallBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>ENTRY_POINT_BUILDER</FieldName>
            <FieldType>EntryPointBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>WINDOW_REFERENCE_BUILDER</FieldName>
            <FieldType>WindowReferenceBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>GE_BUILDER</FieldName>
            <FieldType>GroupElementBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>NAMED_CONSEQUENCE_BUILDER</FieldName>
            <FieldType>NamedConsequenceBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>CONDITIONAL_BRANCH_BUILDER</FieldName>
            <FieldType>ConditionalBranchBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>builders</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>builders</FieldName>
            <FieldType>Class&lt;?&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>analyzer</FieldName>
            <FieldType>JavaExprAnalyzer</FieldType>
        </Field>
        <Field>
            <FieldName>configuration</FieldName>
            <FieldType>JavaDialectConfiguration</FieldType>
        </Field>
        <Field>
            <FieldName>compiler</FieldName>
            <FieldType>JavaCompiler</FieldType>
        </Field>
        <Field>
            <FieldName>pkg</FieldName>
            <FieldType>InternalKnowledgePackage</FieldType>
        </Field>
        <Field>
            <FieldName>rootClassLoader</FieldName>
            <FieldType>ClassLoader</FieldType>
        </Field>
        <Field>
            <FieldName>pkgConf</FieldName>
            <FieldType>KnowledgeBuilderConfigurationImpl</FieldType>
        </Field>
        <Field>
            <FieldName>generatedClassList</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>generatedClassList</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>src</FieldName>
            <FieldType>MemoryResourceReader</FieldType>
        </Field>
        <Field>
            <FieldName>packageStoreWrapper</FieldName>
            <FieldType>PackageStore</FieldType>
        </Field>
        <Field>
            <FieldName>errorHandlers</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>errorHandlers</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>results</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>results</FieldName>
            <FieldType>KnowledgeBuilderResult</FieldType>
        </Field>
        <Field>
            <FieldName>packageRegistry</FieldName>
            <FieldType>PackageRegistry</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>JavaDialect</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rootClassLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pkgConf</ParamName>
                    <ParamType>KnowledgeBuilderConfigurationImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pkgRegistry</ParamName>
                    <ParamType>PackageRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pkg</ParamName>
                    <ParamType>InternalKnowledgePackage</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>JavaDialectRuntimeData [data=(JavaDialectRuntimeData)pkg.getDialectRuntimeRegistry().getDialectData(ID)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;loadCompiler;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;reinitBuilder;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reinitBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builders;put;[CollectDescr.class, COLLECT_BUIDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[ForallDescr.class, FORALL_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[AndDescr.class, GE_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[OrDescr.class, GE_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[NotDescr.class, GE_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[ExistsDescr.class, GE_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[PatternDescr.class, PATTERN_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[QueryDescr.class, QUERY_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[FromDescr.class, FROM_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[AccumulateDescr.class, ACCUMULATE_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[EvalDescr.class, EVAL_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[EntryPointDescr.class, ENTRY_POINT_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[WindowReferenceDescr.class, WINDOW_REFERENCE_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[NamedConsequenceDescr.class, NAMED_CONSEQUENCE_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[ConditionalBranchDescr.class, CONDITIONAL_BRANCH_BUILDER]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBuilders</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Class&lt;?&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruleDescr</ParamName>
                    <ParamType>RuleDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [ruleClassName=DialectUtil.getUniqueLegalName(this.pkg.getName(),ruleDescr.getName(),ruleDescr.getConsequence().hashCode(),"java","Rule",this.src)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ruleDescr;setClassName;[StringUtils.ucFirst(ruleClassName)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>processDescr</ParamName>
                    <ParamType>ProcessDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [processDescrClassName=DialectUtil.getUniqueLegalName(this.pkg.getName(),processDescr.getName(),processDescr.getProcessId().hashCode(),"java","Process",this.src)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>processDescr;setClassName;[StringUtils.ucFirst(processDescrClassName)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExpressionDialectName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>analyzeExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AnalysisResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>PackageBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>BaseDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>content</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>availableIdentifiers</ParamName>
                    <ParamType>BoundIdentifiers</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>analyzeExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AnalysisResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>PackageBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>BaseDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>content</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>availableIdentifiers</ParamName>
                    <ParamType>BoundIdentifiers</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>localTypes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>JavaAnalysisResult [result=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>analyzeBlock</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AnalysisResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>PackageBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>BaseDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>availableIdentifiers</ParamName>
                    <ParamType>BoundIdentifiers</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>JavaAnalysisResult [result=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeResolver</MethodName>
            <MethodComment>/** 
 * Returns the current type resolver instance
 * @return
 */
</MethodComment>
            <ReturnType>TypeResolver</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RuleConditionBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPatternBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PatternBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQueryBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>QueryBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSalienceBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SalienceBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEnabledBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>EnabledBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAccumulateBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AccumulateBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEvalBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RuleConditionBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPredicateBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PredicateBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReturnValueBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ReturnValueBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConsequenceBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ConsequenceBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRuleClassBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RuleClassBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFunctionBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FunctionBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFromBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FromBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEntryPointBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>EntryPointBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compileAll</MethodName>
            <MethodComment>/** 
 * This actually triggers the compiling of all the resources. Errors are mapped back to the element that originally generated the semantic code.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>String[] [classes=new String[this.generatedClassList.size()]]</InnerVar>
                <InnerVar>File [dumpDir=this.configuration.getPackageBuilderConfiguration().getDumpDir()]</InnerVar>
                <InnerVar>CompilationResult [result=this.compiler.compile(classes,this.src,this.packageStoreWrapper,rootClassLoader)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.generatedClassList;toArray;[classes]</InnerMethodInvoke>
                <InnerMethodInvoke>this.generatedClassList;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>this.errorHandlers;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dumpResources</MethodName>
            <MethodComment>/** 
 * @param classes
 * @param dumpDir
 * @throws IOException
 * @throws FileNotFoundException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classes</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dumpDir</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addRule</MethodName>
            <MethodComment>/** 
 * This will add the rule for compiling later on. It will not actually call the compiler
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RuleImpl [rule=context.getRule()]</InnerVar>
                <InnerVar>RuleDescr [ruleDescr=context.getRuleDescr()]</InnerVar>
                <InnerVar>RuleClassBuilder [classBuilder=context.getDialect().getRuleClassBuilder()]</InnerVar>
                <InnerVar>String [ruleClass=classBuilder.buildRule(context)]</InnerVar>
                <InnerVar>JavaDialectRuntimeData [data=(JavaDialectRuntimeData)this.pkg.getDialectRuntimeRegistry().getDialectData(ID)]</InnerVar>
                <InnerVar>String [name=this.pkg.getName() + "." + StringUtils.ucFirst(ruleDescr.getClassName())]</InnerVar>
                <InnerVar>LineMappings [mapping=new LineMappings(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addClassCompileTask;[this.pkg.getName() + "." + ruleDescr.getClassName(), ruleDescr, ruleClass, this.src, new RuleErrorHandler(ruleDescr,rule,"Rule Compilation error")]</InnerMethodInvoke>
                <InnerMethodInvoke>mapping;setStartLine;[ruleDescr.getConsequenceLine()]</InnerMethodInvoke>
                <InnerMethodInvoke>mapping;setOffset;[ruleDescr.getConsequenceOffset()]</InnerMethodInvoke>
                <InnerMethodInvoke>this.pkg.getDialectRuntimeRegistry().getLineMappings();put;[name, mapping]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addFunction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>functionDescr</ParamName>
                    <ParamType>FunctionDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeResolver</ParamName>
                    <ParamType>TypeResolver</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>Resource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [functionClassName=this.pkg.getName() + "." + StringUtils.ucFirst(functionDescr.getName())]</InnerVar>
                <InnerVar>Function [function=new Function(functionDescr.getNamespace(),functionDescr.getName(),ID)]</InnerVar>
                <InnerVar>String [functionSrc=getFunctionBuilder().build(this.pkg,functionDescr,typeResolver,this.pkg.getDialectRuntimeRegistry().getLineMappings(),this.results)]</InnerVar>
                <InnerVar>LineMappings [mapping=new LineMappings(functionClassName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>functionDescr;setClassName;[functionClassName]</InnerMethodInvoke>
                <InnerMethodInvoke>this.pkg;addStaticImport;[functionClassName + "." + functionDescr.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>this.pkg;addFunction;[function]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addClassCompileTask;[functionClassName, functionDescr, functionSrc, this.src, new FunctionErrorHandler(functionDescr,"Function Compilation error")]</InnerMethodInvoke>
                <InnerMethodInvoke>mapping;setStartLine;[functionDescr.getLine()]</InnerMethodInvoke>
                <InnerMethodInvoke>mapping;setOffset;[functionDescr.getOffset()]</InnerMethodInvoke>
                <InnerMethodInvoke>this.pkg.getDialectRuntimeRegistry().getLineMappings();put;[functionClassName, mapping]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>preCompileAddFunction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>functionDescr</ParamName>
                    <ParamType>FunctionDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeResolver</ParamName>
                    <ParamType>TypeResolver</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [functionClassName=this.pkg.getName() + "." + StringUtils.ucFirst(functionDescr.getName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.pkg;addStaticImport;[functionClassName + "." + functionDescr.getName()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>postCompileAddFunction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>functionDescr</ParamName>
                    <ParamType>FunctionDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeResolver</ParamName>
                    <ParamType>TypeResolver</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [functionClassName=this.pkg.getName() + "." + StringUtils.ucFirst(functionDescr.getName())]</InnerVar>
                <InnerVar>ImportDescr [importDescr=new ImportDescr(functionClassName + "." + functionDescr.getName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>importDescr;setResource;[functionDescr.getResource()]</InnerMethodInvoke>
                <InnerMethodInvoke>importDescr;setNamespace;[functionDescr.getNamespace()]</InnerMethodInvoke>
                <InnerMethodInvoke>this.packageRegistry;addStaticImport;[importDescr]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addSrc</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resourceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>content</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>src;add;[resourceName, content]</InnerMethodInvoke>
                <InnerMethodInvoke>this.errorHandlers;put;[resourceName, new SrcErrorHandler("Src compile error")]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addClassName;[resourceName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addClassCompileTask</MethodName>
            <MethodComment>/** 
 * This adds a compile "task" for when the compiler of semantics (JCI) is called later on with compileAll()\ which actually does the compiling. The ErrorHandler is required to map the errors back to the element that caused it.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>BaseDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>src</ParamName>
                    <ParamType>MemoryResourceReader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>handler</ParamName>
                    <ParamType>ErrorHandler</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [fileName=className.replace('.','/') + ".java"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.errorHandlers;put;[fileName, handler]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addClassName;[fileName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addClassName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [found=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadCompiler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addImport</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>importDescr</ParamName>
                    <ParamType>ImportDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addStaticImport</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>importDescr</ParamName>
                    <ParamType>ImportDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResults</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KnowledgeBuilderResult</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearResults</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.results;clear;[]</InnerMethodInvoke>
                <InnerMethodInvoke>this.errorHandlers;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getId</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPackageRegistry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PackageRegistry</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>