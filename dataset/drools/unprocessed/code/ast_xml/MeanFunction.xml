<Class>
    <Id>1409</Id>
    <Package>org.kie.dmn.feel.runtime.functions</Package>
    <ClassName>MeanFunction</ClassName>
    <SuperClass>BaseFEELFunction</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>sum</FieldName>
            <FieldType>SumFunction</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>MeanFunction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invoke</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BigDecimal</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>list</ParamName>
                    <ParamType>List</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FEELFnResult&lt;BigDecimal&gt; [s=sum.invoke(list)]</InnerVar>
                <InnerVar>Function&lt;FEELEvent,FEELFnResult&lt;BigDecimal&gt;&gt; [ifLeft=(event) -&gt; {
  return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR,"list","unable to sum the elements which is required to calculate the mean"));
}
]</InnerVar>
                <InnerVar>Function&lt;BigDecimal,FEELFnResult&lt;BigDecimal&gt;&gt; [ifRight=(sum) -&gt; {
  try {
    return FEELFnResult.ofResult(sum.divide(BigDecimal.valueOf(list.size()),MathContext.DECIMAL128));
  }
 catch (  Exception e) {
    return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR,"unable to perform division to calculate the mean",e));
  }
}
]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invoke</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BigDecimal</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>single</ParamName>
                    <ParamType>Number</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BigDecimal [result=EvalHelper.getBigDecimalOrNull(single)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invoke</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BigDecimal</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>list</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>