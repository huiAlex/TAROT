<Class>
    <Id>2415</Id>
    <Package>org.drools.verifier.visitor</Package>
    <ClassName>RuleDescrVisitor</ClassName>
    <SuperClass>ConditionalElementDescrVisitor</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>rulePackage</FieldName>
            <FieldType>RulePackage</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>RuleDescrVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>VerifierData</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rulePackage</ParamName>
                    <ParamType>RulePackage</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitRuleDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>RuleDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Consequence [consequence=visitConsequence(rule,descr.getConsequence())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rule;setName;[descr.getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>rule;setConsequencePath;[consequence.getPath()]</InnerMethodInvoke>
                <InnerMethodInvoke>rule;setConsequenceType;[consequence.getConsequenceType()]</InnerMethodInvoke>
                <InnerMethodInvoke>rule;setLineNumber;[descr.getLine()]</InnerMethodInvoke>
                <InnerMethodInvoke>data;add;[rule]</InnerMethodInvoke>
                <InnerMethodInvoke>rulePackage.getRules();add;[rule]</InnerMethodInvoke>
                <InnerMethodInvoke>solvers;startRuleSolver;[rule]</InnerMethodInvoke>
                <InnerMethodInvoke>null;visitAndDescr;[descr.getLhs()]</InnerMethodInvoke>
                <InnerMethodInvoke>solvers;endRuleSolver;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addSubItems;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownDescriptionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>VerifierComponent</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownDescriptionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitNamedConsequence</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consequence</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitPattern</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>NamedConsequenceDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitPattern</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>ConditionalBranchDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitNotDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>NotDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>solvers;startNot;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;visit;[descr.getDescrs()]</InnerMethodInvoke>
                <InnerMethodInvoke>solvers;endNot;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownDescriptionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitForallDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>ForallDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>solvers;startForall;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;visit;[descr.getDescrs()]</InnerMethodInvoke>
                <InnerMethodInvoke>solvers;endForall;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownDescriptionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitExistsDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>ExistsDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>solvers;startExists;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;visit;[descr.getDescrs()]</InnerMethodInvoke>
                <InnerMethodInvoke>solvers;endExists;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownDescriptionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitEvalDescr</MethodName>
            <MethodComment>/** 
 * End leaf
 * @param descr
 * @return
 */
</MethodComment>
            <ReturnType>RuleEval</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>EvalDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RuleEval [eval=new RuleEval(rule)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>eval;setContent;[descr.getContent().toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>eval;setClassMethodName;[descr.getClassMethodName()]</InnerMethodInvoke>
                <InnerMethodInvoke>eval;setOrderNumber;[orderNumber.next()]</InnerMethodInvoke>
                <InnerMethodInvoke>eval;setParentPath;[rule.getPath()]</InnerMethodInvoke>
                <InnerMethodInvoke>eval;setParentType;[rule.getVerifierComponentType()]</InnerMethodInvoke>
                <InnerMethodInvoke>solvers;addRuleComponent;[eval]</InnerMethodInvoke>
                <InnerMethodInvoke>data;add;[eval]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitConsequence</MethodName>
            <MethodComment>/** 
 * Creates verifier object from rule consequence. Currently only supports text based consequences.
 * @param o Consequence object.
 * @return Verifier object that implements the Consequence interface.
 */
</MethodComment>
            <ReturnType>Consequence</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>VerifierComponent</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TextConsequence [consequence=new TextConsequence(rule)]</InnerVar>
                <InnerVar>String [text=o.toString()]</InnerVar>
                <InnerVar>StringBuffer [buffer=new StringBuffer(text)]</InnerVar>
                <InnerVar>int [commentIndex=buffer.indexOf("//")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>consequence;setText;[text]</InnerMethodInvoke>
                <InnerMethodInvoke>consequence;setParentPath;[parent.getPath()]</InnerMethodInvoke>
                <InnerMethodInvoke>consequence;setParentType;[parent.getVerifierComponentType()]</InnerMethodInvoke>
                <InnerMethodInvoke>data;add;[consequence]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitPattern</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>PatternDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PatternDescrVisitor [visitor=new PatternDescrVisitor(data,rule,solvers)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>visitor;visit;[descr, orderNumber.next()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownDescriptionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addSubItems</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitAndDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>AndDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RuleOperatorDescr [operatorDescr=new RuleOperatorDescr(descr,rule,OperatorDescrType.AND)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>operatorDescr;setOrderNumber;[orderNumber.next()]</InnerMethodInvoke>
                <InnerMethodInvoke>operatorDescr;setParentPath;[getParent().getPath()]</InnerMethodInvoke>
                <InnerMethodInvoke>operatorDescr;setParentType;[getParent().getVerifierComponentType()]</InnerMethodInvoke>
                <InnerMethodInvoke>data;add;[operatorDescr]</InnerMethodInvoke>
                <InnerMethodInvoke>solvers;startOperator;[OperatorDescrType.AND]</InnerMethodInvoke>
                <InnerMethodInvoke>null;visit;[descr.getDescrs()]</InnerMethodInvoke>
                <InnerMethodInvoke>solvers;endOperator;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownDescriptionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitOrDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>OrDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RuleOperatorDescr [operatorDescr=new RuleOperatorDescr(descr,rule,OperatorDescrType.OR)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>operatorDescr;setOrderNumber;[orderNumber.next()]</InnerMethodInvoke>
                <InnerMethodInvoke>data;add;[operatorDescr]</InnerMethodInvoke>
                <InnerMethodInvoke>solvers;startOperator;[OperatorDescrType.OR]</InnerMethodInvoke>
                <InnerMethodInvoke>null;visit;[descr.getDescrs()]</InnerMethodInvoke>
                <InnerMethodInvoke>solvers;endOperator;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>UnknownDescriptionException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>