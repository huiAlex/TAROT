<Class>
    <Id>2135</Id>
    <Package>org.drools.core.rule</Package>
    <ClassName>RuleConditionElement</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>RuleComponent</SuperInterface>
        <SuperInterface>Externalizable</SuperInterface>
        <SuperInterface>Cloneable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getInnerDeclarations</MethodName>
            <MethodComment>/** 
 * Returns a Map of declarations that are visible inside this conditional element
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOuterDeclarations</MethodName>
            <MethodComment>/** 
 * Returns a Map of declarations that are visible outside this conditional element. 
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resolveDeclaration</MethodName>
            <MethodComment>/** 
 * Resolves the given identifier in the current scope and returns the Declaration object for the declaration. Returns null if identifier can not be resolved.
 * @param identifier
 * @return
 */
</MethodComment>
            <ReturnType>Declaration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>identifier</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clone</MethodName>
            <MethodComment>/** 
 * Returns a clone from itself
 * @return
 */
</MethodComment>
            <ReturnType>RuleConditionElement</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNestedElements</MethodName>
            <MethodComment>/** 
 * Returs a list of RuleConditionElement's that are nested inside the current element
 * @return
 */
</MethodComment>
            <ReturnType>? extends RuleConditionElement</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isPatternScopeDelimiter</MethodName>
            <MethodComment>/** 
 * Returns true in case this RuleConditionElement delimits a pattern visibility scope. For instance, AND CE is not a scope delimiter, while  NOT CE is a scope delimiter
 * @return
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>