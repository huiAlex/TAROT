<Class>
    <Id>1407</Id>
    <Package>org.drools.compiler.rule.builder.dialect.mvel</Package>
    <ClassName>MVELDialect</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Dialect</SuperInterface>
        <SuperInterface>Externalizable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>id</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>EXPRESSION_DIALECT_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PATTERN_BUILDER</FieldName>
            <FieldType>PatternBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>QUERY_BUILDER</FieldName>
            <FieldType>QueryBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>ACCUMULATE_BUILDER</FieldName>
            <FieldType>MVELAccumulateBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>SALIENCE_BUILDER</FieldName>
            <FieldType>SalienceBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>ENABLED_BUILDER</FieldName>
            <FieldType>EnabledBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>EVAL_BUILDER</FieldName>
            <FieldType>MVELEvalBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>RETURN_VALUE_BUILDER</FieldName>
            <FieldType>MVELReturnValueBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>CONSEQUENCE_BUILDER</FieldName>
            <FieldType>MVELConsequenceBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>FROM_BUILDER</FieldName>
            <FieldType>MVELFromBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>FUNCTION_BUILDER</FieldName>
            <FieldType>JavaFunctionBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>COLLECT_BUILDER</FieldName>
            <FieldType>CollectBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>FORALL_BUILDER</FieldName>
            <FieldType>ForallBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>ENTRY_POINT_BUILDER</FieldName>
            <FieldType>EntryPointBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>WINDOW_REFERENCE_BUILDER</FieldName>
            <FieldType>WindowReferenceBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>GE_BUILDER</FieldName>
            <FieldType>GroupElementBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>NAMED_CONSEQUENCE_BUILDER</FieldName>
            <FieldType>NamedConsequenceBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>CONDITIONAL_BRANCH_BUILDER</FieldName>
            <FieldType>ConditionalBranchBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>builders</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>builders</FieldName>
            <FieldType>Class&lt;?&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>interceptors</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>results</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>results</FieldName>
            <FieldType>KnowledgeBuilderResult</FieldType>
        </Field>
        <Field>
            <FieldName>src</FieldName>
            <FieldType>MemoryResourceReader</FieldType>
        </Field>
        <Field>
            <FieldName>pkg</FieldName>
            <FieldType>InternalKnowledgePackage</FieldType>
        </Field>
        <Field>
            <FieldName>configuration</FieldName>
            <FieldType>MVELDialectConfiguration</FieldType>
        </Field>
        <Field>
            <FieldName>packageRegistry</FieldName>
            <FieldType>PackageRegistry</FieldType>
        </Field>
        <Field>
            <FieldName>strictMode</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>languageLevel</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>data</FieldName>
            <FieldType>MVELDialectRuntimeData</FieldType>
        </Field>
        <Field>
            <FieldName>rootClassLoader</FieldName>
            <FieldType>ClassLoader</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>MVELDialect</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rootClassLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pkgConf</ParamName>
                    <ParamType>KnowledgeBuilderConfigurationImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pkgRegistry</ParamName>
                    <ParamType>PackageRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pkg</ParamName>
                    <ParamType>InternalKnowledgePackage</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>MVELDialect</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rootClassLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pkgConf</ParamName>
                    <ParamType>KnowledgeBuilderConfigurationImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pkgRegistry</ParamName>
                    <ParamType>PackageRegistry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pkg</ParamName>
                    <ParamType>InternalKnowledgePackage</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setLanguageLevel;[this.configuration.getLangLevel()]</InnerMethodInvoke>
                <InnerMethodInvoke>this;addImport;[new ImportDescr("java.lang.*")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readExternal</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>ObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeExternal</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;writeObject;[results]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[src]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[pkg]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[packageRegistry]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[configuration]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeBoolean;[strictMode]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[data]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLanguageLevel</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>languageLevel</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;reinitBuilder;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reinitBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builders;put;[AndDescr.class, GE_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[OrDescr.class, GE_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[NotDescr.class, GE_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[ExistsDescr.class, GE_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[PatternDescr.class, PATTERN_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[FromDescr.class, FROM_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[QueryDescr.class, QUERY_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[AccumulateDescr.class, ACCUMULATE_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[EvalDescr.class, EVAL_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[CollectDescr.class, COLLECT_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[ForallDescr.class, FORALL_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[FunctionDescr.class, FUNCTION_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[EntryPointDescr.class, ENTRY_POINT_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[WindowReferenceDescr.class, WINDOW_REFERENCE_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[NamedConsequenceDescr.class, NAMED_CONSEQUENCE_BUILDER]</InnerMethodInvoke>
                <InnerMethodInvoke>builders;put;[ConditionalBranchDescr.class, CONDITIONAL_BRANCH_BUILDER]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruleDescr</ParamName>
                    <ParamType>RuleDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [pkgName=this.pkg == null ? "" : this.pkg.getName()]</InnerVar>
                <InnerVar>String [ruleClassName=DialectUtil.getUniqueLegalName(pkgName,ruleDescr.getName(),ruleDescr.getConsequence().hashCode(),"mvel","Rule",this.src)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ruleDescr;setClassName;[StringUtils.ucFirst(ruleClassName)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>processDescr</ParamName>
                    <ParamType>ProcessDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [processDescrClassName=DialectUtil.getUniqueLegalName(this.pkg.getName(),processDescr.getName(),processDescr.getProcessId().hashCode(),"mvel","Process",this.src)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>processDescr;setClassName;[StringUtils.ucFirst(processDescrClassName)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExpressionDialectName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addRule</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RuleDescr [ruleDescr=context.getRuleDescr()]</InnerVar>
                <InnerVar>String [name=this.pkg.getName() + "." + StringUtils.ucFirst(ruleDescr.getClassName())]</InnerVar>
                <InnerVar>LineMappings [mapping=new LineMappings(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mapping;setStartLine;[ruleDescr.getConsequenceLine()]</InnerMethodInvoke>
                <InnerMethodInvoke>mapping;setOffset;[ruleDescr.getConsequenceOffset()]</InnerMethodInvoke>
                <InnerMethodInvoke>context.getPkg().getDialectRuntimeRegistry().getLineMappings();put;[name, mapping]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addFunction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>functionDescr</ParamName>
                    <ParamType>FunctionDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeResolver</ParamName>
                    <ParamType>TypeResolver</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>Resource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>preCompileAddFunction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>functionDescr</ParamName>
                    <ParamType>FunctionDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeResolver</ParamName>
                    <ParamType>TypeResolver</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>postCompileAddFunction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>functionDescr</ParamName>
                    <ParamType>FunctionDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeResolver</ParamName>
                    <ParamType>TypeResolver</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addImport</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>importDescr</ParamName>
                    <ParamType>ImportDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [importEntry=importDescr.getTarget()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addStaticImport</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>importDescr</ParamName>
                    <ParamType>ImportDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [staticImportEntry=importDescr.getTarget()]</InnerVar>
                <InnerVar>int [index=staticImportEntry.lastIndexOf('.')]</InnerVar>
                <InnerVar>String [className=staticImportEntry.substring(0,index)]</InnerVar>
                <InnerVar>String [methodName=staticImportEntry.substring(index + 1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.results;add;[new ImportError(importDescr,-1)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addStaticPackageImport</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>importDescr</ParamName>
                    <ParamType>ImportDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [staticImportEntry=importDescr.getTarget()]</InnerVar>
                <InnerVar>int [index=staticImportEntry.lastIndexOf('.')]</InnerVar>
                <InnerVar>String [className=staticImportEntry.substring(0,index)]</InnerVar>
                <InnerVar>Class [cls=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isStrictMode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setStrictMode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>strictMode</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compileAll</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>analyzeExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AnalysisResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>PackageBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>BaseDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>content</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>availableIdentifiers</ParamName>
                    <ParamType>BoundIdentifiers</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>analyzeExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AnalysisResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>PackageBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>BaseDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>content</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>availableIdentifiers</ParamName>
                    <ParamType>BoundIdentifiers</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>localTypes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AnalysisResult [result=null]</InnerVar>
                <InnerVar>BaseDescr [temp=context.getParentDescr()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>context;setParentDescr;[descr]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>analyzeBlock</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AnalysisResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>PackageBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>BaseDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>availableIdentifiers</ParamName>
                    <ParamType>BoundIdentifiers</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>analyzeBlock</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AnalysisResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>PackageBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>availableIdentifiers</ParamName>
                    <ParamType>BoundIdentifiers</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>localTypes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>contextIndeifier</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>kcontextClass</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMVELCompilationUnit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MVELCompilationUnit</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>analysis</ParamName>
                    <ParamType>AnalysisResult</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>previousDeclarations</ParamName>
                    <ParamType>Declaration[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>localDeclarations</ParamName>
                    <ParamType>Declaration[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>otherInputVariables</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>PackageBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>contextIndeifier</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>kcontextClass</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>readLocalsFromTuple</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scope</ParamName>
                    <ParamType>MVELCompilationUnit.Scope</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,Class&gt; [resolvedInputs=new LinkedHashMap&lt;String,Class&gt;()]</InnerVar>
                <InnerVar>List&lt;String&gt; [ids=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>List&lt;String&gt; [strList=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>String[] [globalIdentifiers=strList.toArray(new String[strList.size()])]</InnerVar>
                <InnerVar>EvaluatorWrapper[] [operators=new EvaluatorWrapper[strList.size()]]</InnerVar>
                <InnerVar>String[] [otherIdentifiers=strList.toArray(new String[strList.size()])]</InnerVar>
                <InnerVar>String[] [inputIdentifiers=new String[resolvedInputs.size()]]</InnerVar>
                <InnerVar>String[] [inputTypes=new String[resolvedInputs.size()]]</InnerVar>
                <InnerVar>int [i=0]</InnerVar>
                <InnerVar>String [name]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ids;add;[contextIndeifier]</InnerMethodInvoke>
                <InnerMethodInvoke>resolvedInputs;put;[contextIndeifier, kcontextClass]</InnerMethodInvoke>
                <InnerMethodInvoke>ids;add;["kcontext"]</InnerMethodInvoke>
                <InnerMethodInvoke>resolvedInputs;put;["kcontext", kcontextClass]</InnerMethodInvoke>
                <InnerMethodInvoke>strList;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>EngineElementBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBuilders</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Class&lt;?&gt;</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPatternBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PatternBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQueryBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>QueryBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAccumulateBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AccumulateBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConsequenceBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ConsequenceBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEvalBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RuleConditionBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFromBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FromBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEntryPointBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>EntryPointBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPredicateBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PredicateBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSalienceBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SalienceBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEnabledBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>EnabledBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResults</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KnowledgeBuilderResult</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearResults</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.results;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReturnValueBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ReturnValueBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRuleClassBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RuleClassBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeResolver</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypeResolver</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInterceptors</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Map</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getId</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPackageRegistry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PackageRegistry</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>