<Class>
    <Id>2224</Id>
    <Package>org.drools.core.reteoo.compiled</Package>
    <ClassName>SetNodeReferenceHandler</ClassName>
    <SuperClass>AbstractCompilerHandler</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SetNodeReferenceHandler  /** 
 * This handler is used to create the member variable assignment statements section of a generated subclass of a {@link CompiledNetwork#setNetworkNodeReference(org.kie.common.NetworkNode)}. Currently we only need to create member variable assignments for the following types of nodes: &lt;p/&gt; &lt;li&gt;Non-hashed  {@link AlphaNode}s&lt;/li&gt; &lt;li&gt; {@link LeftInputAdapterNode}s&lt;/li&gt; &lt;li&gt; {@link BetaNode}s&lt;/li&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>PARAM_TYPE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PARAM_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SET_NETWORK_NODE_REFERENCE_SIGNATURE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>builder</FieldName>
            <FieldType>StringBuilder</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SetNodeReferenceHandler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>StringBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getVariableAssignmentStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sink</ParamName>
                    <ParamType>Sink</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodeVariableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [variableType=getVariableType(sink)]</InnerVar>
                <InnerVar>String [assignmentStatement]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getVariableAssignmentStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>alphaNode</ParamName>
                    <ParamType>AlphaNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodeVariableName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [variableType=getVariableType(alphaNode)]</InnerVar>
                <InnerVar>String [assignmentStatement]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContextVariableAssignmentStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>alphaNode</ParamName>
                    <ParamType>AlphaNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [contextVariableName=getContextVariableName(alphaNode)]</InnerVar>
                <InnerVar>String [alphaVariableName=getVariableName(alphaNode)]</InnerVar>
                <InnerVar>String [assignmentStatement]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startObjectTypeNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>objectTypeNode</ParamName>
                    <ParamType>ObjectTypeNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder.append(SET_NETWORK_NODE_REFERENCE_SIGNATURE);append;[NEWLINE]</InnerMethodInvoke>
                <InnerMethodInvoke>builder.append("switch (").append(PARAM_NAME).append(".getId()) {");append;[NEWLINE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>endObjectTypeNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>objectTypeNode</ParamName>
                    <ParamType>ObjectTypeNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder.append("}");append;[NEWLINE]</InnerMethodInvoke>
                <InnerMethodInvoke>builder.append("}");append;[NEWLINE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startNonHashedAlphaNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>alphaNode</ParamName>
                    <ParamType>AlphaNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder.append("case ").append(alphaNode.getId()).append(": ");append;[NEWLINE]</InnerMethodInvoke>
                <InnerMethodInvoke>builder.append(getVariableAssignmentStatement(alphaNode,PARAM_NAME));append;[NEWLINE]</InnerMethodInvoke>
                <InnerMethodInvoke>builder.append(getContextVariableAssignmentStatement(alphaNode));append;[NEWLINE]</InnerMethodInvoke>
                <InnerMethodInvoke>builder.append("break;");append;[NEWLINE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startBetaNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>betaNode</ParamName>
                    <ParamType>BetaNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder.append("case ").append(betaNode.getId()).append(": ");append;[NEWLINE]</InnerMethodInvoke>
                <InnerMethodInvoke>builder.append(getVariableAssignmentStatement(betaNode,PARAM_NAME));append;[NEWLINE]</InnerMethodInvoke>
                <InnerMethodInvoke>builder.append("break;");append;[NEWLINE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startLeftInputAdapterNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leftInputAdapterNode</ParamName>
                    <ParamType>LeftInputAdapterNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder.append("case ").append(leftInputAdapterNode.getId()).append(": ");append;[NEWLINE]</InnerMethodInvoke>
                <InnerMethodInvoke>builder.append(getVariableAssignmentStatement(leftInputAdapterNode,PARAM_NAME));append;[NEWLINE]</InnerMethodInvoke>
                <InnerMethodInvoke>builder.append("break;");append;[NEWLINE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>