<Class>
    <Id>2840</Id>
    <Package>org.kie.dmn.api.core</Package>
    <ClassName>DMNRuntime</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>DMNRuntimeEventManager</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getModels</MethodName>
            <MethodComment>/** 
 * Returns a list of all models available to this runtime
 * @return the list of available models. An empty list incase no model is available.
 */
</MethodComment>
            <ReturnType>DMNModel</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getModel</MethodName>
            <MethodComment>/** 
 * Returns the model registered with the given namespace and model name.
 * @param namespace the name space for the model
 * @param modelName the name of the model
 * @return the corresponding DMN model, or null if none isregistered with the given name and namespace.
 */
</MethodComment>
            <ReturnType>DMNModel</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>namespace</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>modelName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateAll</MethodName>
            <MethodComment>/** 
 * Evaluate all decisions for the model, given the context
 * @param model the model to evaluate
 * @param context the context with all the input variables
 * @return the result of the evaluation
 */
</MethodComment>
            <ReturnType>DMNResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>DMNModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>DMNContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateDecisionByName</MethodName>
            <MethodComment>/** 
 * Evaluate the decision identified by the given name and all dependent decisions, given the context
 * @deprecated consider using {@link #evaluateByName(DMNModel,DMNContext,String...)} instead
 * @param model the model to evaluate
 * @param decisionName the root decision to evaluate, identifiedby name
 * @param context the context with all the input variables
 * @return the result of the evaluation
 */
</MethodComment>
            <ReturnType>DMNResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>DMNModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>decisionName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>DMNContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateDecisionById</MethodName>
            <MethodComment>/** 
 * Evaluate the decision identified by the given ID and all dependent decisions, given the context
 * @deprecated consider using {@link #evaluateById(DMNModel,DMNContext,String...)} instead
 * @param model the model to evaluate
 * @param decisionId the root decision to evaluate, identifiedby ID
 * @param context the context with all the input variables
 * @return the result of the evaluation
 */
</MethodComment>
            <ReturnType>DMNResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>DMNModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>decisionId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>DMNContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateByName</MethodName>
            <MethodComment>/** 
 * Evaluate all decisions identified by the given names and all dependent decisions, given the context
 * @param model the model to evaluate
 * @param decisionNames list of root decisions to evaluate, identifiedby name
 * @param context the context with all the input variables
 * @return the result of the evaluation
 */
</MethodComment>
            <ReturnType>DMNResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>DMNModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>DMNContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>decisionNames</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateById</MethodName>
            <MethodComment>/** 
 * Evaluate all decision identified by the given IDs and all dependent decisions, given the context
 * @param model the model to evaluate
 * @param decisionIds list of root decisions to evaluate, identifiedby ID
 * @param context the context with all the input variables
 * @return the result of the evaluation
 */
</MethodComment>
            <ReturnType>DMNResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>DMNModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>DMNContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>decisionIds</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newContext</MethodName>
            <MethodComment>/** 
 * Creates a new empty DMNContext
 * @return a new empty DMNContext
 */
</MethodComment>
            <ReturnType>DMNContext</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>