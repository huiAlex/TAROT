<Class>
    <Id>265</Id>
    <Package>org.drools.core.base</Package>
    <ClassName>SimulateMacOSXClassLoader</ClassName>
    <SuperClass>ClassLoader</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>wrappedRealClassLoader</FieldName>
            <FieldType>ClassLoader</FieldType>
        </Field>
        <Field>
            <FieldName>forClasses</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>forClasses</FieldName>
            <FieldType>Class&lt;?&gt;</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>SimulateMacOSXClassLoader</MethodName>
            <MethodComment>/** 
 * JVM classloader can't "scan" for available classes, hence class in scope of Mac/OSX simulation of this classloader must be added manually.
 * @param wrappedRealClassLoader a real classloader wrapped by this simulator.
 * @param forClasses collection of classes to be added in scope of this simulation.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wrappedRealClassLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forClasses</ParamName>
                    <ParamType>Class&lt;?&gt;</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [macOSXSimilar=null]</InnerVar>
                <InnerVar>Iterator&lt;Class&lt;?&gt;&gt; [iterator=forClasses.iterator()]</InnerVar>
                <InnerVar>Class&lt;?&gt; [loaded=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addClassInScope</MethodName>
            <MethodComment>/** 
 * JVM classloader can't "scan" for available classes, hence class in scope of Mac/OSX simulation of this classloader must be added manually.
 * @param clazz class to be added in scope of this simulation.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.forClasses;add;[clazz]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>