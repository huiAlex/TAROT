<Class>
    <Id>1834</Id>
    <Package>org.kie.pmml.pmml_4_2</Package>
    <ClassName>PMMLGeneratorUtils</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>initContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Marshaller</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmml</ParamName>
                    <ParamType>PMML</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>JAXBContext [pContext=JAXBContext.newInstance(pmml.getClass().getPackage().getName())]</InnerVar>
                <InnerVar>Marshaller [marshaller=pContext.createMarshaller()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>marshaller;setProperty;[Marshaller.JAXB_ENCODING, "UTF-8"]</InnerMethodInvoke>
                <InnerMethodInvoke>marshaller;setProperty;[Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>JAXBException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>streamPMML</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmml</ParamName>
                    <ParamType>PMML</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>streamPMML</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmml</ParamName>
                    <ParamType>PMML</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>Writer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateSimpleNeuralNetwork</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PMML</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>modelName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inputfieldNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outputfieldNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inputMeans</ParamName>
                    <ParamType>double[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inputStds</ParamName>
                    <ParamType>double[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outputMeans</ParamName>
                    <ParamType>double[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>outputStds</ParamName>
                    <ParamType>double[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hiddenSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>weights</ParamName>
                    <ParamType>double[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [counter=0]</InnerVar>
                <InnerVar>int [wtsIndex=0]</InnerVar>
                <InnerVar>PMML [pmml=new PMML()]</InnerVar>
                <InnerVar>Header [header=new Header()]</InnerVar>
                <InnerVar>Application [app=new Application()]</InnerVar>
                <InnerVar>Timestamp [ts=new Timestamp()]</InnerVar>
                <InnerVar>DataDictionary [dic=new DataDictionary()]</InnerVar>
                <InnerVar>NeuralNetwork [nnet=new NeuralNetwork()]</InnerVar>
                <InnerVar>MiningSchema [miningSchema=new MiningSchema()]</InnerVar>
                <InnerVar>Output [outputs=new Output()]</InnerVar>
                <InnerVar>NeuralInputs [nins=new NeuralInputs()]</InnerVar>
                <InnerVar>NeuralLayer [hidden=new NeuralLayer()]</InnerVar>
                <InnerVar>NeuralLayer [outer=new NeuralLayer()]</InnerVar>
                <InnerVar>NeuralOutputs [finalOuts=new NeuralOutputs()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>pmml;setVersion;["4.0"]</InnerMethodInvoke>
                <InnerMethodInvoke>app;setName;["Drools PMML Generator"]</InnerMethodInvoke>
                <InnerMethodInvoke>app;setVersion;["0.01 Alpha"]</InnerMethodInvoke>
                <InnerMethodInvoke>header;setApplication;[app]</InnerMethodInvoke>
                <InnerMethodInvoke>header;setCopyright;["BSD"]</InnerMethodInvoke>
                <InnerMethodInvoke>header;setDescription;[" Smart Vent Model "]</InnerMethodInvoke>
                <InnerMethodInvoke>ts.getContent();add;[new java.util.Date().toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>header;setTimestamp;[ts]</InnerMethodInvoke>
                <InnerMethodInvoke>pmml;setHeader;[header]</InnerMethodInvoke>
                <InnerMethodInvoke>dic;setNumberOfFields;[BigInteger.valueOf(inputfieldNames.length + outputfieldNames.length)]</InnerMethodInvoke>
                <InnerMethodInvoke>pmml;setDataDictionary;[dic]</InnerMethodInvoke>
                <InnerMethodInvoke>nnet;setActivationFunction;[ACTIVATIONFUNCTION.LOGISTIC]</InnerMethodInvoke>
                <InnerMethodInvoke>nnet;setFunctionName;[MININGFUNCTION.REGRESSION]</InnerMethodInvoke>
                <InnerMethodInvoke>nnet;setNormalizationMethod;[NNNORMALIZATIONMETHOD.NONE]</InnerMethodInvoke>
                <InnerMethodInvoke>nnet;setModelName;[modelName]</InnerMethodInvoke>
                <InnerMethodInvoke>nnet.getExtensionsAndNeuralLayersAndNeuralInputs();add;[miningSchema]</InnerMethodInvoke>
                <InnerMethodInvoke>nnet.getExtensionsAndNeuralLayersAndNeuralInputs();add;[outputs]</InnerMethodInvoke>
                <InnerMethodInvoke>nins;setNumberOfInputs;[BigInteger.valueOf(inputfieldNames.length)]</InnerMethodInvoke>
                <InnerMethodInvoke>nnet.getExtensionsAndNeuralLayersAndNeuralInputs();add;[nins]</InnerMethodInvoke>
                <InnerMethodInvoke>hidden;setNumberOfNeurons;[BigInteger.valueOf(hiddenSize)]</InnerMethodInvoke>
                <InnerMethodInvoke>nnet.getExtensionsAndNeuralLayersAndNeuralInputs();add;[hidden]</InnerMethodInvoke>
                <InnerMethodInvoke>outer;setActivationFunction;[ACTIVATIONFUNCTION.IDENTITY]</InnerMethodInvoke>
                <InnerMethodInvoke>outer;setNumberOfNeurons;[BigInteger.valueOf(outputfieldNames.length)]</InnerMethodInvoke>
                <InnerMethodInvoke>nnet.getExtensionsAndNeuralLayersAndNeuralInputs();add;[outer]</InnerMethodInvoke>
                <InnerMethodInvoke>finalOuts;setNumberOfOutputs;[BigInteger.valueOf(outputfieldNames.length)]</InnerMethodInvoke>
                <InnerMethodInvoke>nnet.getExtensionsAndNeuralLayersAndNeuralInputs();add;[finalOuts]</InnerMethodInvoke>
                <InnerMethodInvoke>pmml.getAssociationModelsAndBaselineModelsAndClusteringModels();add;[nnet]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>