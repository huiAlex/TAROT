<Class>
    <Id>2901</Id>
    <Package>org.drools.compiler.lang.dsl</Package>
    <ClassName>DefaultExpander</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Expander</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DefaultExpander  /** 
 * The default expander uses String templates to provide pseudo natural language, as well as general DSLs. For most people, this should do the job just fine.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>logger</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
        <Field>
            <FieldName>ruleOrQuery</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>finder</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>comments</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>modifyFinder</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>funcPatStr</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>varRefPat</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>intPat</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>keywords</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>keywords</FieldName>
            <FieldType>DSLMappingEntry</FieldType>
        </Field>
        <Field>
            <FieldName>condition</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>condition</FieldName>
            <FieldType>DSLMappingEntry</FieldType>
        </Field>
        <Field>
            <FieldName>consequence</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>consequence</FieldName>
            <FieldType>DSLMappingEntry</FieldType>
        </Field>
        <Field>
            <FieldName>cleanup</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>cleanup</FieldName>
            <FieldType>DSLMappingEntry</FieldType>
        </Field>
        <Field>
            <FieldName>useKeyword</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>useKeyword</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>useWhen</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>useWhen</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>useThen</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>useThen</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>substitutions</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>substitutions</FieldName>
            <FieldType>Map&lt;String,String&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>errors</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>errors</FieldName>
            <FieldType>ExpanderException</FieldType>
        </Field>
        <Field>
            <FieldName>showResult</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>showSteps</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>showWhen</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>showThen</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>showKeyword</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>showUsage</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>nl</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>letterPat</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>start</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>end</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>constraints</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DefaultExpander</MethodName>
            <MethodComment>/** 
 * Creates a new DefaultExpander
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.cleanup;add;[new AntlrDSLMappingEntry(DSLMappingEntry.KEYWORD,DSLMappingEntry.EMPTY_METADATA,"expander {name}","","expander (.*?)","")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addDSLMapping</MethodName>
            <MethodComment>/** 
 * Add the new mapping to this expander.
 * @param mapping
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mapping</ParamName>
                    <ParamType>DSLMapping</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expand</MethodName>
            <MethodComment>/** 
 * @inheritDoc
 * @throws IOException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drlReader</ParamName>
                    <ParamType>Reader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>displayUsage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>what</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>use</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Formatter [fmt=new Formatter(System.out)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>logger;info;["=== Usage of " + what + " ==="]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expand</MethodName>
            <MethodComment>/** 
 * @inheritDoc
 * @throws IOException
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drl</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [buf=expandConstructions(drl)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>countNewlines</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drl</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>start</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>end</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [count=0]</InnerVar>
                <InnerVar>int [pos=start]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expandConstructions</MethodName>
            <MethodComment>/** 
 * Expand constructions like rules and queries
 * @param drl
 * @return
 */
</MethodComment>
            <ReturnType>StringBuffer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drl</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Matcher [m=finder.matcher(drl)]</InnerVar>
                <InnerVar>StringBuffer [buf=new StringBuffer()]</InnerVar>
                <InnerVar>int [drlPos=0]</InnerVar>
                <InnerVar>int [linecount=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>m;appendTail;[buf]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>cleanupExpressions</MethodName>
            <MethodComment>/** 
 * Clean up constructions that exists only in the unexpanded code
 * @param drl
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drl</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeComments</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drl</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expandKeywords</MethodName>
            <MethodComment>/** 
 * Expand all configured keywords
 * @param drl
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drl</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>applyFunc</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>theFunc</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>theValue</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>substitute</MethodName>
            <MethodComment>/** 
 * Perform the substitutions.
 * @param exp a DSLR source line to be expanded
 * @param entries the appropriate DSL keys and values
 * @param line line number
 * @param use map for registering use
 * @return the expanden line
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>exp</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>entries</ParamName>
                    <ParamType>DSLMappingEntry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>line</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>use</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>showSingleSteps</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,String&gt; [key2value=new HashMap&lt;String,String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expandLHS</MethodName>
            <MethodComment>/** 
 * Expand LHS for a construction
 * @param lhs
 * @param lineOffset
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lhs</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lineOffset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [buf=new StringBuilder()]</InnerVar>
                <InnerVar>String[] [lines=lhs.split((lhs.indexOf("\r\n") &gt;= 0 ? "\r\n" : "\n"),-1)]</InnerVar>
                <InnerVar>String[] [expanded=new String[lines.length]]</InnerVar>
                <InnerVar>int [lastExpanded=-1]</InnerVar>
                <InnerVar>int [lastPattern=-1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expandRHS</MethodName>
            <MethodComment>/** 
 * Expand RHS for rules
 * @param lhs
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lhs</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lineOffset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [buf=new StringBuilder()]</InnerVar>
                <InnerVar>String[] [lines=lhs.split((lhs.indexOf("\r\n") &gt;= 0 ? "\r\n" : "\n"),-1)]</InnerVar>
                <InnerVar>String[] [expanded=new String[lines.length]]</InnerVar>
                <InnerVar>int [lastExpanded=-1]</InnerVar>
                <InnerVar>int [lastPattern=-1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadDrlFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drl</ParamName>
                    <ParamType>Reader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [buf=new StringBuilder()]</InnerVar>
                <InnerVar>BufferedReader [input=new BufferedReader(drl)]</InnerVar>
                <InnerVar>String [line]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>error</ParamName>
                    <ParamType>ExpanderException</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.errors;add;[error]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getErrors</MethodName>
            <MethodComment>/** 
 * @inheritDoc
 */
</MethodComment>
            <ReturnType>ExpanderException</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasErrors</MethodName>
            <MethodComment>/** 
 * @inheritDoc
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findConstraintInformationInPattern</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ConstraintInformation</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConstraintInformation [ci=new ConstraintInformation()]</InnerVar>
                <InnerVar>int [bracketCount=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>