<Class>
    <Id>3251</Id>
    <Package>org.drools.core.reteoo.compiled</Package>
    <ClassName>ObjectTypeNodeParser</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ObjectTypeNodeParser  /** 
 * This class is used for reading an  {@link ObjectTypeNode} using callbacks.&lt;p/&gt; The user defines a number of callback methods in a  {@link NetworkHandler} that will be called when events occurduring parsing. The events include : &lt;li&gt;ObjectTypeNode&lt;/li&gt; &lt;li&gt;Non-hashed and hashed AlphaNodes&lt;/li&gt; &lt;li&gt;BetaNodes&lt;/li&gt; &lt;li&gt;LeftInputAdapterNodes&lt;/li&gt; &lt;p/&gt; Events are fired when each of these network features are encountered, and again when the end of them is encountered. OTN parsing is unidirectional; previously parsed data cannot be re-read without starting the parsing operation again.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>objectTypeNode</FieldName>
            <FieldType>ObjectTypeNode</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ObjectTypeNodeParser</MethodName>
            <MethodComment>/** 
 * Creates a new parser for the specified ObjectTypeNode
 * @param objectTypeNode otn to parse
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>objectTypeNode</ParamName>
                    <ParamType>ObjectTypeNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>accept</MethodName>
            <MethodComment>/** 
 * Parse the  {@link #objectTypeNode}. &lt;p/&gt; &lt;p&gt;The application can use this method to instruct the OTN parser to begin parsing an  {@link ObjectTypeNode}.&lt;/p&gt; &lt;p/&gt; Once a parse is complete, an application may reuse the same Parser object, possibly with a different {@link NetworkHandler}.&lt;/p&gt;
 * @param handler handler that will receieve the events generated by this parser
 * @see NetworkHandler
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>handler</ParamName>
                    <ParamType>NetworkHandler</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ObjectSinkPropagator [propagator=objectTypeNode.getObjectSinkPropagator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>handler;startObjectTypeNode;[objectTypeNode]</InnerMethodInvoke>
                <InnerMethodInvoke>null;traversePropagator;[propagator, handler]</InnerMethodInvoke>
                <InnerMethodInvoke>handler;endObjectTypeNode;[objectTypeNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>traversePropagator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>propagator</ParamName>
                    <ParamType>ObjectSinkPropagator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>handler</ParamName>
                    <ParamType>NetworkHandler</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>traversePropagator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>propagator</ParamName>
                    <ParamType>LeftTupleSinkPropagator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>handler</ParamName>
                    <ParamType>NetworkHandler</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>traverseSinkLisk</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sinks</ParamName>
                    <ParamType>ObjectSinkNodeList</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>handler</ParamName>
                    <ParamType>NetworkHandler</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>traverseSinkLisk</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sinks</ParamName>
                    <ParamType>LeftTupleSink[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>handler</ParamName>
                    <ParamType>NetworkHandler</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>traverseHashedAlphaNodes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>hashedAlphaNodes</ParamName>
                    <ParamType>ObjectHashMap</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>handler</ParamName>
                    <ParamType>NetworkHandler</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>traverseSink</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sink</ParamName>
                    <ParamType>ObjectSink</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>handler</ParamName>
                    <ParamType>NetworkHandler</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>traverseSink</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sink</ParamName>
                    <ParamType>LeftTupleSink</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>handler</ParamName>
                    <ParamType>NetworkHandler</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFirstAlphaNode</MethodName>
            <MethodComment>/** 
 * Returns the first  {@link org.kie.reteoo.AlphaNode} from the specified {@link ObjectHashMap}.
 * @param hashedAlphaNodes map of hashed AlphaNodes
 * @return first alpha from the specified map
 * @throws IllegalArgumentException thrown if the map doesn't contain any alpha nodes
 */
</MethodComment>
            <ReturnType>AlphaNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>hashedAlphaNodes</ParamName>
                    <ParamType>ObjectHashMap</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AlphaNode [firstAlphaNode]</InnerVar>
                <InnerVar>Iterator [iter=hashedAlphaNodes.iterator()]</InnerVar>
                <InnerVar>ObjectHashMap.ObjectEntry [entry=(ObjectHashMap.ObjectEntry)iter.next()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IllegalArgumentException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassFieldReaderForHashedAlpha</MethodName>
            <MethodComment>/** 
 * Returns the  {@link ClassFieldReader} for the hashed AlphaNode. The AlphaNode's constraint has to be aMvelConstraint. This is the only type of hashed alpha currently supported.
 * @param alphaNode hashed alpha to get reader for
 * @return ClassFieldReader
 * @throws IllegalArgumentException thrown if the AlphaNode's {@link org.kie.spi.AlphaNodeFieldConstraint} is not a{@link MvelConstraint}.
 */
</MethodComment>
            <ReturnType>ClassFieldReader</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>alphaNode</ParamName>
                    <ParamType>AlphaNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AlphaNodeFieldConstraint [fieldConstraint=alphaNode.getConstraint()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IllegalArgumentException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>