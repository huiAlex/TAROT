<Class>
    <Id>2977</Id>
    <Package>org.drools.modelcompiler.builder.generator</Package>
    <ClassName>ModelGenerator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>RULE_TYPE</FieldName>
            <FieldType>ClassOrInterfaceType</FieldType>
        </Field>
        <Field>
            <FieldName>attributesMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>attributesMap</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>temporalOperators</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>temporalOperators</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GENERATE_EXPR_ID</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>BUILD_CALL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>RULE_CALL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>UNIT_CALL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BIND_AS_CALL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ATTRIBUTE_CALL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>METADATA_CALL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DECLARATION_OF_CALL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>QUERY_INVOCATION_CALL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>VALUE_OF_CALL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>UNIT_DATA_CALL</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>generateModel</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kbuilder</ParamName>
                    <ParamType>KnowledgeBuilderImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pkg</ParamName>
                    <ParamType>InternalKnowledgePackage</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageDescr</ParamName>
                    <ParamType>PackageDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageModel</ParamName>
                    <ParamType>PackageModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isPattern</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TypeResolver [typeResolver=pkg.getTypeResolver()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>packageModel;addImports;[pkg.getTypeResolver().getImports()]</InnerMethodInvoke>
                <InnerMethodInvoke>packageModel;addGlobals;[pkg.getGlobals()]</InnerMethodInvoke>
                <InnerMethodInvoke>packageModel;addAccumulateFunctions;[pkg.getAccumulateFunctions()]</InnerMethodInvoke>
                <InnerMethodInvoke>packageModel;setInternalKnowledgePackage;[pkg]</InnerMethodInvoke>
                <InnerMethodInvoke>new WindowReferenceGenerator(packageModel,typeResolver);addWindowReferences;[kbuilder, packageDescr.getWindowDeclarations()]</InnerMethodInvoke>
                <InnerMethodInvoke>packageModel;addAllFunctions;[packageDescr.getFunctions().stream().map(FunctionGenerator::toFunction).collect(toList())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processRule</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kbuilder</ParamName>
                    <ParamType>KnowledgeBuilderImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeResolver</ParamName>
                    <ParamType>TypeResolver</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageModel</ParamName>
                    <ParamType>PackageModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageDescr</ParamName>
                    <ParamType>PackageDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ruleDescr</ParamName>
                    <ParamType>RuleDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isPattern</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RuleContext [context=new RuleContext(kbuilder,packageModel,ruleDescr,typeResolver,isPattern)]</InnerVar>
                <InnerVar>String [ruleMethodName="rule_" + toId(ruleDescr.getName())]</InnerVar>
                <InnerVar>MethodDeclaration [ruleMethod=new MethodDeclaration(EnumSet.of(Modifier.PUBLIC,Modifier.STATIC),RULE_TYPE,ruleMethodName)]</InnerVar>
                <InnerVar>VariableDeclarationExpr [ruleVar=new VariableDeclarationExpr(RULE_TYPE,RULE_CALL)]</InnerVar>
                <InnerVar>MethodCallExpr [ruleCall=new MethodCallExpr(null,RULE_CALL)]</InnerVar>
                <InnerVar>RuleUnitDescr [ruleUnitDescr=context.getRuleUnitDescr()]</InnerVar>
                <InnerVar>MethodCallExpr [buildCallScope=ruleUnitDescr != null ? new MethodCallExpr(ruleCall,UNIT_CALL).addArgument(new ClassExpr(classToReferenceType(ruleUnitDescr.getRuleUnitClass()))) : ruleCall]</InnerVar>
                <InnerVar>MethodCallExpr [buildCall=new MethodCallExpr(buildCallScope,BUILD_CALL,NodeList.nodeList(context.getExpressions()))]</InnerVar>
                <InnerVar>BlockStmt [ruleVariablesBlock=new BlockStmt()]</InnerVar>
                <InnerVar>MethodCallExpr [executeCall=new Consequence(context).createCall(ruleDescr,ruleDescr.getConsequence().toString(),ruleVariablesBlock,false)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>new ModelGeneratorVisitor(context,packageModel);visit;[getExtendedLhs(packageDescr,ruleDescr)]</InnerMethodInvoke>
                <InnerMethodInvoke>ruleMethod;setJavadocComment;[" Rule name: " + ruleDescr.getName() + " "]</InnerMethodInvoke>
                <InnerMethodInvoke>ruleCall;addArgument;[new StringLiteralExpr(ruleDescr.getName())]</InnerMethodInvoke>
                <InnerMethodInvoke>null;createUnitData;[ruleUnitDescr, ruleVariablesBlock]</InnerMethodInvoke>
                <InnerMethodInvoke>null;createVariables;[kbuilder, ruleVariablesBlock, packageModel, context]</InnerMethodInvoke>
                <InnerMethodInvoke>ruleMethod;setBody;[ruleVariablesBlock]</InnerMethodInvoke>
                <InnerMethodInvoke>buildCall;addArgument;[executeCall]</InnerMethodInvoke>
                <InnerMethodInvoke>ruleVariablesBlock;addStatement;[new AssignExpr(ruleVar,buildCall,AssignExpr.Operator.ASSIGN)]</InnerMethodInvoke>
                <InnerMethodInvoke>ruleVariablesBlock;addStatement;[new ReturnStmt(RULE_CALL)]</InnerMethodInvoke>
                <InnerMethodInvoke>packageModel;putRuleMethod;[ruleMethodName, ruleMethod]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExtendedLhs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AndDescr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>packageDescr</ParamName>
                    <ParamType>PackageDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ruleDescr</ParamName>
                    <ParamType>RuleDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RuleDescr [parent=packageDescr.getRules().stream().filter(r -&gt; r.getName().equals(ruleDescr.getParentName())).findFirst().orElseThrow(() -&gt; new RuntimeException("Rule " + ruleDescr.getName() + " extends an unknown rule "+ ruleDescr.getParentName()))]</InnerVar>
                <InnerVar>AndDescr [extendedLhs=new AndDescr()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getExtendedLhs(packageDescr,parent).getDescrs();forEach;[extendedLhs::addDescr]</InnerMethodInvoke>
                <InnerMethodInvoke>ruleDescr.getLhs().getDescrs();forEach;[extendedLhs::addDescr]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ruleAttributes</MethodName>
            <MethodComment>/** 
 * Build a list of method calls, representing each needed  {@link org.drools.model.impl.RuleBuilder#attribute(org.drools.model.Rule.Attribute,Object)}starting from a drools-compiler  {@link RuleDescr}. The tuple represent the Rule Attribute expressed in JavParser form, and the attribute value expressed in JavaParser form.
 */
</MethodComment>
            <ReturnType>MethodCallExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ruleDescr</ParamName>
                    <ParamType>RuleDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;MethodCallExpr&gt; [ruleAttributes=new ArrayList&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ruleMetaAttributes</MethodName>
            <MethodComment>/** 
 * Build a list of method calls, representing each needed  {@link org.drools.model.impl.RuleBuilder#metadata(String,Object)}starting from a drools-compiler  {@link RuleDescr}.
 */
</MethodComment>
            <ReturnType>MethodCallExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ruleDescr</ParamName>
                    <ParamType>RuleDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;MethodCallExpr&gt; [ruleMetaAttributes=new ArrayList&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>objectAsJPExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annValue</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resolveValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [result=value]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createUnitData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruleUnitDescr</ParamName>
                    <ParamType>RuleUnitDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ruleVariablesBlock</ParamName>
                    <ParamType>BlockStmt</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addUnitData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>unitVar</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ruleBlock</ParamName>
                    <ParamType>BlockStmt</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Type [declType=classToReferenceType(type)]</InnerVar>
                <InnerVar>ClassOrInterfaceType [varType=JavaParser.parseClassOrInterfaceType(UnitData.class.getCanonicalName())]</InnerVar>
                <InnerVar>VariableDeclarationExpr [var_=new VariableDeclarationExpr(varType,toVar(unitVar),Modifier.FINAL)]</InnerVar>
                <InnerVar>MethodCallExpr [unitDataCall=new MethodCallExpr(null,UNIT_DATA_CALL)]</InnerVar>
                <InnerVar>AssignExpr [var_assign=new AssignExpr(var_,unitDataCall,AssignExpr.Operator.ASSIGN)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>varType;setTypeArguments;[declType]</InnerMethodInvoke>
                <InnerMethodInvoke>unitDataCall;addArgument;[new ClassExpr(declType)]</InnerMethodInvoke>
                <InnerMethodInvoke>unitDataCall;addArgument;[new StringLiteralExpr(unitVar)]</InnerMethodInvoke>
                <InnerMethodInvoke>ruleBlock;addStatement;[var_assign]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createVariables</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kbuilder</ParamName>
                    <ParamType>KnowledgeBuilderImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>block</ParamName>
                    <ParamType>BlockStmt</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageModel</ParamName>
                    <ParamType>PackageModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addVariable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kbuilder</ParamName>
                    <ParamType>KnowledgeBuilderImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ruleBlock</ParamName>
                    <ParamType>BlockStmt</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>decl</ParamName>
                    <ParamType>DeclarationSpec</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Type [declType=classToReferenceType(decl.getDeclarationClass())]</InnerVar>
                <InnerVar>ClassOrInterfaceType [varType=JavaParser.parseClassOrInterfaceType(Variable.class.getCanonicalName())]</InnerVar>
                <InnerVar>VariableDeclarationExpr [var_=new VariableDeclarationExpr(varType,toVar(decl.getBindingId()),Modifier.FINAL)]</InnerVar>
                <InnerVar>MethodCallExpr [declarationOfCall=new MethodCallExpr(null,DECLARATION_OF_CALL)]</InnerVar>
                <InnerVar>AssignExpr [var_assign=new AssignExpr(var_,declarationOfCall,AssignExpr.Operator.ASSIGN)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>varType;setTypeArguments;[declType]</InnerMethodInvoke>
                <InnerMethodInvoke>declarationOfCall;addArgument;[new ClassExpr(decl.getType())]</InnerMethodInvoke>
                <InnerMethodInvoke>declarationOfCall;addArgument;[new StringLiteralExpr(decl.getVariableName().orElse(decl.getBindingId()))]</InnerMethodInvoke>
                <InnerMethodInvoke>decl.getDeclarationSource();ifPresent;[declarationOfCall::addArgument]</InnerMethodInvoke>
                <InnerMethodInvoke>decl.getEntryPoint();ifPresent;[ep -&gt; {
  MethodCallExpr entryPointCall=new MethodCallExpr(null,"entryPoint");
  entryPointCall.addArgument(new StringLiteralExpr(ep));
  declarationOfCall.addArgument(entryPointCall);
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>ruleBlock;addStatement;[var_assign]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>