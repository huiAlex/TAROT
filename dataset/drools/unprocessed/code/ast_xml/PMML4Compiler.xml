<Class>
    <Id>1422</Id>
    <Package>org.kie.pmml.pmml_4_2</Package>
    <ClassName>PMML4Compiler</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>PMMLCompiler</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>PMML_NAMESPACE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PMML_DROOLS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PMML</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SCHEMA_PATH</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BASE_PACK</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>globalLoaded</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>GLOBAL_TEMPLATES</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>transformationLoaded</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>TRANSFORMATION_TEMPLATES</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>miningLoaded</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>MINING_TEMPLATES</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>neuralLoaded</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>NEURAL_TEMPLATES</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>svmLoaded</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>SVM_TEMPLATES</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>naiveBayesLoaded</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>NAIVE_BAYES_TEMPLATES</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>simpleRegLoaded</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>SIMPLEREG_TEMPLATES</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>clusteringLoaded</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>CLUSTERING_TEMPLATES</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>treeLoaded</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>TREE_TEMPLATES</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>scorecardLoaded</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>SCORECARD_TEMPLATES</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>RESOURCE_PATH</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TEMPLATE_PATH</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>registry</FieldName>
            <FieldType>TemplateRegistry</FieldType>
        </Field>
        <Field>
            <FieldName>visitorBuildResults</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>visitorBuildResults</FieldName>
            <FieldType>KnowledgeBuilderResult</FieldType>
        </Field>
        <Field>
            <FieldName>results</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>results</FieldName>
            <FieldType>KnowledgeBuilderResult</FieldType>
        </Field>
        <Field>
            <FieldName>schema</FieldName>
            <FieldType>Schema</FieldType>
        </Field>
        <Field>
            <FieldName>helper</FieldName>
            <FieldType>PMML4Helper</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PMML4Compiler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>SchemaFactory [sf=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>helper;setPack;["org.kie.pmml.pmml_4_2.test"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getHelper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PMML4Helper</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRuleUnitClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>PMML4Unit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PMML4Model [root=unit.getRootModel()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateTheory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmml</ParamName>
                    <ParamType>PMML</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [sb=new StringBuilder()]</InnerVar>
                <InnerVar>PMML4Unit [unit=new PMML4UnitImpl(pmml)]</InnerVar>
                <InnerVar>KieBase [visitor]</InnerVar>
                <InnerVar>KieSession [visitorSession=visitor.newKieSession()]</InnerVar>
                <InnerVar>String [modelEvaluatingRules=sb.toString()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>helper;reset;[]</InnerMethodInvoke>
                <InnerMethodInvoke>visitorSession;setGlobal;["registry", registry]</InnerMethodInvoke>
                <InnerMethodInvoke>visitorSession;setGlobal;["fld2var", new HashMap()]</InnerMethodInvoke>
                <InnerMethodInvoke>visitorSession;setGlobal;["utils", helper]</InnerMethodInvoke>
                <InnerMethodInvoke>visitorSession;setGlobal;["unitPackageName", helper.getPack()]</InnerMethodInvoke>
                <InnerMethodInvoke>visitorSession;setGlobal;["ruleUnitClassName", getRuleUnitClass(unit)]</InnerMethodInvoke>
                <InnerMethodInvoke>visitorSession;setGlobal;["theory", sb]</InnerMethodInvoke>
                <InnerMethodInvoke>visitorSession;insert;[pmml]</InnerMethodInvoke>
                <InnerMethodInvoke>visitorSession;fireAllRules;[]</InnerMethodInvoke>
                <InnerMethodInvoke>visitorSession;dispose;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initRegistry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkBuildingResources</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KieBase</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmml</ParamName>
                    <ParamType>PMML</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>KieServices [ks=KieServices.Factory.get()]</InnerVar>
                <InnerVar>KieContainer [kieContainer=ks.getKieClasspathContainer()]</InnerVar>
                <InnerVar>String [chosenKieBase=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prepareTemplate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ntempl</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [theory=null]</InnerVar>
                <InnerVar>Resource [cpr=new ClassPathResource(resource)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transform</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Resource[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>Resource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [theory=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildOutputResource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Resource</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>Resource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>theory</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ByteArrayResource [byteArrayResource=new ByteArrayResource(theory.getBytes(IoUtils.UTF8_CHARSET))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>byteArrayResource;setResourceType;[ResourceType.PMML]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getInputStreamByFileName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InputStream</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InputStream [is=null]</InnerVar>
                <InnerVar>Resource [res=ResourceFactory.newClassPathResource(fileName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getJavaClasses</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InputStream [is=getInputStreamByFileName(fileName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getJavaClasses</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stream</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,String&gt; [javaClasses=new HashMap&lt;&gt;()]</InnerVar>
                <InnerVar>PMML [pmml=loadModel(PMML,stream)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>precompile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PMMLResource</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rootKieBaseModel</ParamName>
                    <ParamType>KieBaseModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InputStream [is=getInputStreamByFileName(fileName)]</InnerVar>
                <InnerVar>List&lt;PMMLResource&gt; [resources=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>precompile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PMMLResource</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stream</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rootKieBaseModel</ParamName>
                    <ParamType>KieBaseModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;PMMLResource&gt; [resources=new ArrayList&lt;&gt;()]</InnerVar>
                <InnerVar>KieServices [services=KieServices.Factory.get()]</InnerVar>
                <InnerVar>KieModuleModel [module=services.newKieModuleModel()]</InnerVar>
                <InnerVar>PMML [pmml=loadModel(PMML,stream)]</InnerVar>
                <InnerVar>PMML4Unit [unit=new PMML4UnitImpl(pmml)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>helper;setResolver;[classLoader]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addMissingFieldDefinition</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmml</ParamName>
                    <ParamType>PMML</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>msm</ParamName>
                    <ParamType>MiningSegmentation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>seg</ParamName>
                    <ParamType>MiningSegment</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;PMML4Model&gt; [models=msm.getMiningSegments().stream().filter(s -&gt; s != seg &amp;&amp; s.getSegmentIndex() &lt; seg.getSegmentIndex()).map(iseg -&gt; {
  return iseg.getModel();
}
).collect(Collectors.toList())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>seg.getModel().getMiningFields().stream().filter(mf -&gt; !mf.isInDictionary());forEach;[pmf -&gt; {
  String fldName=pmf.getName();
  boolean fieldAdded=false;
  for (Iterator&lt;PMML4Model&gt; iter=models.iterator(); iter.hasNext() &amp;&amp; !fieldAdded; ) {
    PMML4Model mdl=iter.next();
    PMMLOutputField outfield=mdl.findOutputField(fldName);
    PMMLMiningField target=(outfield != null &amp;&amp; outfield.getTargetField() != null) ? mdl.findMiningField(outfield.getTargetField()) : null;
    if (outfield != null) {
      DataField e=null;
      if (outfield.getRawDataField() != null &amp;&amp; outfield.getRawDataField().getDataType() != null) {
        e=outfield.getRawDataField();
      }
 else       if (target != null) {
        e=target.getRawDataField();
      }
      if (e != null) {
        e.setName(fldName);
        pmml.getDataDictionary().getDataFields().add(e);
        BigInteger bi=pmml.getDataDictionary().getNumberOfFields();
        pmml.getDataDictionary().setNumberOfFields(bi.add(BigInteger.ONE));
        fieldAdded=true;
      }
    }
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildResourceFromSegment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PMMLResource</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmml_origin</ParamName>
                    <ParamType>PMML</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>MiningSegment</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>module</ParamName>
                    <ParamType>KieModuleModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PMML [pmml=new PMML()]</InnerVar>
                <InnerVar>DataDictionary [dd=pmml_origin.getDataDictionary()]</InnerVar>
                <InnerVar>String [rules=this.compile(pmml,classLoader)]</InnerVar>
                <InnerVar>KieBaseModel [kbModel=module.newKieBaseModel(segment.getOwner().getOwner().getModelId() + "_" + segment.getOwner().getSegmentationId()+ "_SEGMENT_"+ segment.getSegmentId())]</InnerVar>
                <InnerVar>KieSessionModel [ksm=kbModel.newKieSessionModel("SEGMENT_" + segment.getSegmentId())]</InnerVar>
                <InnerVar>PMMLResource [resource=new PMMLResource(helper.getPack())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>pmml;setDataDictionary;[dd]</InnerMethodInvoke>
                <InnerMethodInvoke>pmml;setHeader;[pmml_origin.getHeader()]</InnerMethodInvoke>
                <InnerMethodInvoke>pmml.getAssociationModelsAndBaselineModelsAndClusteringModels();add;[segment.getModel().getRawModel()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addMissingFieldDefinition;[pmml, segment.getOwner(), segment]</InnerMethodInvoke>
                <InnerMethodInvoke>helper;setPack;[segment.getModel().getModelPackageName()]</InnerMethodInvoke>
                <InnerMethodInvoke>kbModel.addPackage(helper.getPack()).setDefault(false);setEventProcessingMode;[EventProcessingOption.CLOUD]</InnerMethodInvoke>
                <InnerMethodInvoke>ksm;setDefault;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>resource;setKieBaseModel;[kbModel]</InnerMethodInvoke>
                <InnerMethodInvoke>resource;addRules;[segment.getModel().getModelId(), rules]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildResourcesFromModel</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PMMLResource</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmml</ParamName>
                    <ParamType>PMML</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>miningModel</ParamName>
                    <ParamType>Miningmodel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resourcesList</ParamName>
                    <ParamType>PMMLResource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>module</ParamName>
                    <ParamType>KieModuleModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PMMLResource [resource=new PMMLResource(miningModel.getModelPackageName())]</InnerVar>
                <InnerVar>KieBaseModel [rootKieBaseModel=module.newKieBaseModel(resource.getPackageName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rootKieBaseModel;addPackage;[resource.getPackageName()]</InnerMethodInvoke>
                <InnerMethodInvoke>rootKieBaseModel;setDefault;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>resource;setKieBaseModel;[rootKieBaseModel]</InnerMethodInvoke>
                <InnerMethodInvoke>resource;addRules;[miningModel.getModelId(), miningModel.generateRules()]</InnerMethodInvoke>
                <InnerMethodInvoke>resourcesList;add;[resource]</InnerMethodInvoke>
                <InnerMethodInvoke>null;getChildResources;[pmml, miningModel, resourcesList, classLoader, module]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getChildResources</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PMMLResource</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmml_origin</ParamName>
                    <ParamType>PMML</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>Miningmodel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resourceList</ParamName>
                    <ParamType>PMMLResource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>module</ParamName>
                    <ParamType>KieModuleModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmml</ParamName>
                    <ParamType>PMML</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>helper;setResolver;[classLoader]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PMML [pmml=loadModel(PMML,source)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResults</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KnowledgeBuilderResult</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>List&lt;KnowledgeBuilderResult&gt; [combinedResults=new ArrayList&lt;KnowledgeBuilderResult&gt;(this.results)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>combinedResults;addAll;[visitorBuildResults]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearResults</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.results;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dump</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ostream</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Writer [writer=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadModel</MethodName>
            <MethodComment>/** 
 * Imports a PMML source file, returning a Java descriptor
 * @param model            the PMML package name (classes derived from a specific schema)
 * @param source        the name of the PMML resource storing the predictive model
 * @return                the Java Descriptor of the PMML resource
 */
</MethodComment>
            <ReturnType>PMML</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dumpModel</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>model</ParamName>
                    <ParamType>PMML</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>target</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCompilerVersion</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>