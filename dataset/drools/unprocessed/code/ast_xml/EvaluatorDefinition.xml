<Class>
    <Id>1399</Id>
    <Package>org.drools.core.base.evaluators</Package>
    <ClassName>EvaluatorDefinition</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Externalizable</SuperInterface>
        <SuperInterface>org.kie.api.runtime.rule.EvaluatorDefinition</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>EvaluatorDefinition  /** 
 * An evaluator definition interface that allows for pluggable evaluator implementation. This interface is the register entry point for all available evaluators and describes all evaluator capabilities
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getEvaluatorIds</MethodName>
            <MethodComment>/** 
 * Returns the list of identifies this evaluator implementation supports
 * @return
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNegatable</MethodName>
            <MethodComment>/** 
 * My apologies to English speakers if the word "negatable" does not exist. :) This method returns true if this evaluator supports negation. Example: the "matches" operator supports "not matches" and so is "negatable" (!?)
 * @return
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEvaluator</MethodName>
            <MethodComment>/** 
 * Returns the evaluator instance for the given type and the defined parameterText
 * @param type the type of the attributes this evaluator willoperate on. This is important because the evaluator may do optimisations and type coercion based on the types it is evaluating. It is also possible that this evaluator does not support a given type.
 * @param operatorId the string identifier of the evaluator
 * @param isNegated true if the evaluator instance to be returned isthe negated version of the evaluator.
 * @param parameterText some evaluators support parameters and theseparameters are defined as a String that is parsed by the evaluator itself.
 * @param leftTarget the target of the evaluator on the Left side,i.e., on Rete terms, the previous binding or the actual value on the right side of the operator.
 * @param rightTarget the target of the evaluator on the Right side,i.e., on Rete terms, the current pattern field. 
 * @return an Evaluator instance capable of evaluating expressionsbetween values of the given type, or null in case the type is not supported.
 */
</MethodComment>
            <ReturnType>Evaluator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>ValueType</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operatorId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isNegated</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameterText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leftTarget</ParamName>
                    <ParamType>Target</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightTarget</ParamName>
                    <ParamType>Target</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEvaluator</MethodName>
            <MethodComment>/** 
 * Returns the evaluator instance for the given type and the defined parameterText
 * @param type the type of the attributes this evaluator willoperate on. This is important because the evaluator may do optimisations and type coercion based on the types it is evaluating. It is also possible that this evaluator does not support a given type.
 * @param operatorId the string identifier of the evaluator
 * @param isNegated true if the evaluator instance to be returned isthe negated version of the evaluator.
 * @param parameterText some evaluators support parameters and theseparameters are defined as a String that is parsed by the evaluator itself.
 * @return an Evaluator instance capable of evaluating expressionsbetween values of the given type, or null in case the type is not supported.
 */
</MethodComment>
            <ReturnType>Evaluator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>ValueType</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operatorId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isNegated</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameterText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEvaluator</MethodName>
            <MethodComment>/** 
 * Returns the evaluator instance for the given type and the defined parameterText
 * @param type the type of the attributes this evaluator willoperate on. This is important because the evaluator may do optimisations and type coercion based on the types it is evaluating. It is also possible that this evaluator does not support a given type.
 * @param operator the operator implemented by the evaluator
 * @param parameterText some evaluators support parameters and theseparameters are defined as a String that is parsed by the evaluator itself.
 * @return an Evaluator instance capable of evaluating expressionsbetween values of the given type, or null in case the type is not supported.
 */
</MethodComment>
            <ReturnType>Evaluator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>ValueType</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operator</ParamName>
                    <ParamType>Operator</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameterText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEvaluator</MethodName>
            <MethodComment>/** 
 * Returns the evaluator instance for the given type and the defined parameterText
 * @param type the type of the attributes this evaluator willoperate on. This is important because the evaluator may do optimisations and type coercion based on the types it is evaluating. It is also possible that this evaluator does not support a given type.
 * @param operator the operator implemented by the evaluator
 * @return an Evaluator instance capable of evaluating expressionsbetween values of the given type, or null in case the type is not supported.
 */
</MethodComment>
            <ReturnType>Evaluator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>ValueType</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operator</ParamName>
                    <ParamType>Operator</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>supportsType</MethodName>
            <MethodComment>/** 
 * Returns true in case this evaluator supports operations over values of that specific type.
 * @param type
 * @return
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>ValueType</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTarget</MethodName>
            <MethodComment>/** 
 * There are evaluators that operate on *fact* attributes, evaluators that operate on *fact handle* attributes, and evaluators that operate on both. This method returns the target of the current evaluator.
 * @return true if this evaluator operates on fact handle attributesand false if it operates on fact attributes
 */
</MethodComment>
            <ReturnType>Target</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>