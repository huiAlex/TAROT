<Class>
    <Id>3297</Id>
    <Package>org.drools.decisiontable</Package>
    <ClassName>SpreadsheetCompiler</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SpreadsheetCompiler  /** 
 * This class handles the input XLS and CSV and extracts the rule DRL, ready for pumping into drools.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>logger</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment>/** 
 * Generates DRL from the input stream containing the spreadsheet.
 * @param showPackage tells it to print or not print any package statements in the spreadsheet.
 * @param xlsStream The stream to the spreadsheet. Uses the first worksheet found for the decision tables, ignores others.
 * @return DRL xml, ready for use in drools.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>showPackage</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>xlsStream</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>InputType</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment>/** 
 * Generates DRL from the input stream containing the spreadsheet.
 * @param xlsStream The stream to the spreadsheet. Uses the first worksheet found for the decision tables, ignores others.
 * @return DRL xml, ready for use in drools.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xlsStream</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>InputType</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>Resource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>InputType</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment>/** 
 * Generates DRL from the input stream containing the spreadsheet.
 * @param xlsStream The stream to the spreadsheet. Uses the first worksheet found for the decision tables, ignores others.
 * @param type The type of the file - InputType.CSV or InputType.XLS
 * @param listener
 * @return DRL xml, ready for use in drools.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xlsStream</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>InputType</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>RuleSheetListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>type.createParser(listener);parseFile;[xlsStream]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>Resource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>InputType</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>RuleSheetListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;parseResource;[type.createParser(listener), resource]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>listenerToString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>RuleSheetListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Package [rulePackage=listener.getRuleSet()]</InnerVar>
                <InnerVar>DRLOutput [out=new DRLOutput()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rulePackage;renderDRL;[out]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseResource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parser</ParamName>
                    <ParamType>DecisionTableParser</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>Resource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment>/** 
 * Convenience implementation, taking rules from the classpath. It is recommended to use the stream version, as you can then change rules dynamically. (that is a lot of the benefit of rule engines !).
 * @param classPathResource full class path to the spreadsheet you wish to convert to DRL. Uses the first worksheet for the decision tables.
 * @return DRL.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classPathResource</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inputType</ParamName>
                    <ParamType>InputType</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InputStream [stream=this.getClass().getResourceAsStream(classPathResource)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment>/** 
 * Looks for a named worksheet to find the decision tables on. Only works with XLS format spreadsheets (as they have multiple worksheets).
 * @param stream The stream of the decision tables (spreadsheet) IN XLS format !!
 * @param worksheetName The name of the worksheet that the decision tables live on.
 * @return DRL, ready to go.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stream</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>worksheetName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>Resource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>worksheetName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RuleSheetListener [listener=getRuleSheetListener(resource,worksheetName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRuleSheetListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RuleSheetListener</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>Resource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>worksheetName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DefaultRuleSheetListener [listener=new DefaultRuleSheetListener()]</InnerVar>
                <InnerVar>Map&lt;String,List&lt;DataListener&gt;&gt; [sheetListeners=new HashMap&lt;String,List&lt;DataListener&gt;&gt;()]</InnerVar>
                <InnerVar>List&lt;DataListener&gt; [listeners=new ArrayList&lt;DataListener&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>listener;setWorksheetName;[worksheetName]</InnerMethodInvoke>
                <InnerMethodInvoke>listeners;add;[listener]</InnerMethodInvoke>
                <InnerMethodInvoke>sheetListeners;put;[worksheetName, listeners]</InnerMethodInvoke>
                <InnerMethodInvoke>null;parseResource;[new ExcelParser(sheetListeners), resource]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>closeStream</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stream</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>