<Class>
    <Id>2208</Id>
    <Package>org.drools.core.reteoo.compiled</Package>
    <ClassName>NetworkHandler</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>NetworkHandler  /** 
 * Receive notification of the logical parts of the RETE-OO network. todo: finish documenting 
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>startObjectTypeNode</MethodName>
            <MethodComment>/** 
 * Receive notification of the beginning of an  {@link org.kie.reteoo.ObjectTypeNode}&lt;p&gt;The Network parser will invoke this method only once, before any other event callback.&lt;/p&gt;
 * @param objectTypeNode the object type node
 * @see #endObjectTypeNode(org.kie.reteoo.ObjectTypeNode)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>objectTypeNode</ParamName>
                    <ParamType>ObjectTypeNode</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startNonHashedAlphaNode</MethodName>
            <MethodComment>/** 
 * Receive notification of the a non-hashed  {@link org.kie.reteoo.AlphaNode}. &lt;p&gt;The Parser will invoke this method at the beginning of every non-hashed Alpha in the Network; there will be a corresponding endNonHashedAlphaNode() event for every startNonHashedAlphaNode() event. All of the node's decendants will be reported, in order, before the corresponding endNonHashedAlphaNode() event.&lt;/p&gt;
 * @param alphaNode non-hashed AlphaNode
 * @see #endNonHashedAlphaNode
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>alphaNode</ParamName>
                    <ParamType>AlphaNode</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>endNonHashedAlphaNode</MethodName>
            <MethodComment>/** 
 * Receive notification of the end of a non-hashed  {@link org.kie.reteoo.AlphaNode}. &lt;p&gt;The parser will invoke this method at the end of every alpha in the network; there will be a corresponding {@link #startNonHashedAlphaNode(org.kie.reteoo.AlphaNode)} event for every endNonHashedAlphaNode event.&lt;/p&gt;
 * @param alphaNode non-hashed AlphaNode
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>alphaNode</ParamName>
                    <ParamType>AlphaNode</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startBetaNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>betaNode</ParamName>
                    <ParamType>BetaNode</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>endBetaNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>betaNode</ParamName>
                    <ParamType>BetaNode</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startLeftInputAdapterNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leftInputAdapterNode</ParamName>
                    <ParamType>LeftInputAdapterNode</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>endLeftInputAdapterNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leftInputAdapterNode</ParamName>
                    <ParamType>LeftInputAdapterNode</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startHashedAlphaNodes</MethodName>
            <MethodComment>/** 
 * Receive notification of the a group of hashed  {@link org.kie.reteoo.AlphaNode}s. &lt;p&gt;The Parser will invoke this method at the beginning of every groups of hashed Alphas in the Network; there will be a corresponding  {@link #endHashedAlphaNodes} event for every startHashedAlphaNodes() event.The actual alpha nodes will be reported via the  {@link #startHashedAlphaNode} method, along with all of thenode's decendants, in order, before the corresponding  {@link #endHashedAlphaNode}event.&lt;/p&gt;
 * @param hashedFieldReader field reader that is used to access the hashed attribute
 * @see #endHashedAlphaNodes
 * @see #startHashedAlphaNode
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>hashedFieldReader</ParamName>
                    <ParamType>ClassFieldReader</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>endHashedAlphaNodes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>hashedFieldReader</ParamName>
                    <ParamType>ClassFieldReader</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startHashedAlphaNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>hashedAlpha</ParamName>
                    <ParamType>AlphaNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hashedValue</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>endHashedAlphaNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>hashedAlpha</ParamName>
                    <ParamType>AlphaNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hashedValue</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>endObjectTypeNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>objectTypeNode</ParamName>
                    <ParamType>ObjectTypeNode</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>