<Class>
    <Id>2435</Id>
    <Package>org.drools.modelcompiler.builder.generator.visitor.pattern</Package>
    <ClassName>FlowDSLPattern</ClassName>
    <SuperClass>PatternDSL</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>INPUT_CALL</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>FlowDSLPattern</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageModel</ParamName>
                    <ParamType>PackageModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <ParamType>PatternDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraintDescrs</ParamName>
                    <ParamType>? extends BaseDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>patternType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>allConstraintsPositional</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildPattern</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Optional&lt;Expression&gt; [declarationSource=buildFromDeclaration(pattern)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;generatePatternIdentifierIfMissing;[]</InnerMethodInvoke>
                <InnerMethodInvoke>context;addDeclaration;[new DeclarationSpec(pattern.getIdentifier(),patternType,Optional.of(pattern),declarationSource)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shouldAddInputPattern</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parseResults</ParamName>
                    <ParamType>PatternConstraintParseResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Predicate&lt;? super PatternConstraintParseResult&gt; [hasOneOOPathExpr=(Predicate&lt;PatternConstraintParseResult&gt;)patternConstraintParseResult -&gt; {
  return patternConstraintParseResult.getDrlxParseResult().acceptWithReturnValue(new ParseResultVisitor&lt;Boolean&gt;(){
    @Override public Boolean onSuccess(    DrlxParseSuccess drlxParseResult){
      return drlxParseResult.getExpr() instanceof OOPathExpr;
    }
    @Override public Boolean onFail(    DrlxParseFail failure){
      return false;
    }
  }
);
}
]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onSuccess</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>drlxParseResult</ParamName>
                    <ParamType>DrlxParseSuccess</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onFail</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>failure</ParamName>
                    <ParamType>DrlxParseFail</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createInputExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodCallExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <ParamType>PatternDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodCallExpr [exprDSL=new MethodCallExpr(null,INPUT_CALL)]</InnerVar>
                <InnerVar>Set&lt;String&gt; [watchedProperties=new HashSet&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>exprDSL;addArgument;[new NameExpr(toVar(pattern.getIdentifier()))]</InnerMethodInvoke>
                <InnerMethodInvoke>watchedProperties;addAll;[context.getRuleDescr().lookAheadFieldsOfIdentifier(pattern)]</InnerMethodInvoke>
                <InnerMethodInvoke>watchedProperties;addAll;[getPatternListenedProperties(pattern)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findAllConstraint</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PatternConstraintParseResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <ParamType>PatternDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraintDescrs</ParamName>
                    <ParamType>? extends BaseDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>patternType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;PatternConstraintParseResult&gt; [patternConstraintParseResults=new ArrayList&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildConstraints</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <ParamType>PatternDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>patternType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>patternConstraintParseResults</ParamName>
                    <ParamType>PatternConstraintParseResult</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>allConstraintsPositional</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildConstraint</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <ParamType>PatternDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>patternType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>patternConstraintParseResult</ParamName>
                    <ParamType>PatternConstraintParseResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DrlxParseResult [drlxParseResult1=patternConstraintParseResult.getDrlxParseResult()]</InnerVar>
                <InnerVar>String [expression=patternConstraintParseResult.getExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>drlxParseResult1;accept;[drlxParseResult -&gt; {
  DSLNode constraint;
  if (drlxParseResult.getExpr() instanceof OOPathExpr) {
    constraint=new ConstraintOOPath(context,packageModel,pattern,patternType,patternConstraintParseResult,expression,drlxParseResult);
  }
 else {
    constraint=new FlowDSLSimpleConstraint(context,pattern,drlxParseResult);
  }
  constraint.buildPattern();
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>