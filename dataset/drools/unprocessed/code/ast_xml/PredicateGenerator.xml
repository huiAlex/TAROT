<Class>
    <Id>2525</Id>
    <Package>org.drools.core.rule.builder.dialect.asm</Package>
    <ClassName>PredicateGenerator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>generate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stub</ParamName>
                    <ParamType>PredicateStub</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tuple</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>previousDeclarations</ParamName>
                    <ParamType>Declaration[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>localDeclarations</ParamName>
                    <ParamType>Declaration[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>workingMemory</ParamName>
                    <ParamType>WorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [globals=stub.getGlobals()]</InnerVar>
                <InnerVar>String[] [globalTypes=stub.getGlobalTypes()]</InnerVar>
                <InnerVar>List&lt;DeclarationMatcher&gt; [declarationMatchers=matchDeclarationsToTuple(previousDeclarations)]</InnerVar>
                <InnerVar>ClassGenerator [generator=createInvokerClassGenerator(stub,workingMemory).setInterfaces(PredicateExpression.class,CompiledInvoker.class)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>generator.addMethod(ACC_PUBLIC,"createContext",generator.methodDescr(Object.class),new ClassGenerator.MethodBody(){
  public void body(  MethodVisitor mv){
    mv.visitInsn(ACONST_NULL);
    mv.visitInsn(ARETURN);
  }
}
);addMethod;[ACC_PUBLIC, "evaluate", generator.methodDescr(Boolean.TYPE,InternalFactHandle.class,Tuple.class,Declaration[].class,Declaration[].class,WorkingMemory.class,Object.class), new String[]{"java/lang/Exception"}, new GeneratorHelper.EvaluateMethod(){
  public void body(  MethodVisitor mv){
    objAstorePos=9;
    int[] previousDeclarationsParamsPos=new int[previousDeclarations.length];
    mv.visitVarInsn(ALOAD,1);
    invokeInterface(InternalFactHandle.class,"getObject",Object.class);
    mv.visitVarInsn(ASTORE,1);
    mv.visitVarInsn(ALOAD,2);
    cast(LeftTuple.class);
    mv.visitVarInsn(ASTORE,7);
    Tuple currentTuple=tuple;
    for (    DeclarationMatcher matcher : declarationMatchers) {
      int i=matcher.getOriginalIndex();
      previousDeclarationsParamsPos[i]=objAstorePos;
      currentTuple=traverseTuplesUntilDeclaration(currentTuple,matcher.getRootDistance(),7);
      mv.visitVarInsn(ALOAD,3);
      push(i);
      mv.visitInsn(AALOAD);
      mv.visitVarInsn(ALOAD,5);
      mv.visitVarInsn(ALOAD,7);
      invokeInterface(LeftTuple.class,"getFactHandle",InternalFactHandle.class);
      invokeInterface(InternalFactHandle.class,"getObject",Object.class);
      storeObjectFromDeclaration(previousDeclarations[i],previousDeclarations[i].getTypeName());
    }
    int[] localDeclarationsParamsPos=parseDeclarations(localDeclarations,4,2,5,false);
    StringBuilder predicateMethodDescr=new StringBuilder("(");
    for (int i=0; i &lt; previousDeclarations.length; i++) {
      load(previousDeclarationsParamsPos[i]);
      predicateMethodDescr.append(typeDescr(previousDeclarations[i].getTypeName()));
    }
    for (int i=0; i &lt; localDeclarations.length; i++) {
      load(localDeclarationsParamsPos[i]);
      predicateMethodDescr.append(typeDescr(localDeclarations[i].getTypeName()));
    }
    parseGlobals(globals,globalTypes,5,predicateMethodDescr);
    predicateMethodDescr.append(")Z");
    mv.visitMethodInsn(INVOKESTATIC,stub.getInternalRuleClassName(),stub.getMethodName(),predicateMethodDescr.toString());
    mv.visitInsn(IRETURN);
  }
}
]</InnerMethodInvoke>
                <InnerMethodInvoke>stub;setPredicate;[generator.&lt;PredicateExpression&gt;newInstance()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitInsn;[ACONST_NULL]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ARETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>body</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int[] [previousDeclarationsParamsPos=new int[previousDeclarations.length]]</InnerVar>
                <InnerVar>Tuple [currentTuple=tuple]</InnerVar>
                <InnerVar>int[] [localDeclarationsParamsPos=parseDeclarations(localDeclarations,4,2,5,false)]</InnerVar>
                <InnerVar>StringBuilder [predicateMethodDescr=new StringBuilder("(")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>null;invokeInterface;[InternalFactHandle.class, "getObject", Object.class]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, 1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>null;cast;[LeftTuple.class]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ASTORE, 7]</InnerMethodInvoke>
                <InnerMethodInvoke>null;parseGlobals;[globals, globalTypes, 5, predicateMethodDescr]</InnerMethodInvoke>
                <InnerMethodInvoke>predicateMethodDescr;append;[")Z"]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESTATIC, stub.getInternalRuleClassName(), stub.getMethodName(), predicateMethodDescr.toString()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[IRETURN]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>