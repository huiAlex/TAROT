<Class>
    <Id>3150</Id>
    <Package>org.drools.compiler.rule.builder.dialect.mvel</Package>
    <ClassName>MVELAccumulateBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>AccumulateBuilder</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MVELAccumulateBuilder  /** 
 * A builder for the java dialect accumulate version
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>build</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RuleConditionElement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>BaseDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>build</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RuleConditionElement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>BaseDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>prefixPattern</ParamName>
                    <ParamType>Pattern</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [typesafe=context.isTypesafe()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildExternalFunctions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Accumulator[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>accumDescr</ParamName>
                    <ParamType>AccumulateDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dialect</ParamName>
                    <ParamType>MVELDialect</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>decls</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sourceOuterDeclr</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>boundIds</ParamName>
                    <ParamType>BoundIdentifiers</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>readLocalsFromTuple</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Accumulator[] [accumulators]</InnerVar>
                <InnerVar>List&lt;AccumulateFunctionCallDescr&gt; [functions=accumDescr.getFunctions()]</InnerVar>
                <InnerVar>InternalReadAccessor [arrayReader=new SelfReferenceClassFieldReader(Object[].class)]</InnerVar>
                <InnerVar>int [index=0]</InnerVar>
                <InnerVar>Pattern [pattern=(Pattern)context.getDeclarationResolver().peekBuildStack()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildCustomAccumulate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Accumulator[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>accumDescr</ParamName>
                    <ParamType>AccumulateDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>dialect</ParamName>
                    <ParamType>MVELDialect</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>decls</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sourceOuterDeclr</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>boundIds</ParamName>
                    <ParamType>BoundIdentifiers</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>readLocalsFromTuple</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Accumulator[] [accumulators]</InnerVar>
                <InnerVar>MVELAnalysisResult [initCodeAnalysis=(MVELAnalysisResult)dialect.analyzeBlock(context,accumDescr,accumDescr.getInitCode(),boundIds)]</InnerVar>
                <InnerVar>MVELAnalysisResult [actionCodeAnalysis=(MVELAnalysisResult)dialect.analyzeBlock(context,accumDescr.getActionCode(),boundIds,initCodeAnalysis.getMvelVariables(),"drools",KnowledgeHelper.class)]</InnerVar>
                <InnerVar>MVELAnalysisResult [resultCodeAnalysis=(MVELAnalysisResult)dialect.analyzeExpression(context,accumDescr,accumDescr.getResultCode(),boundIds,initCodeAnalysis.getMvelVariables())]</InnerVar>
                <InnerVar>MVELCompilationUnit [initUnit=dialect.getMVELCompilationUnit(accumDescr.getInitCode(),initCodeAnalysis,getUsedDeclarations(decls,initCodeAnalysis),getUsedDeclarations(sourceOuterDeclr,initCodeAnalysis),initCodeAnalysis.getMvelVariables(),context,"drools",KnowledgeHelper.class,readLocalsFromTuple,MVELCompilationUnit.Scope.CONSTRAINT)]</InnerVar>
                <InnerVar>MVELCompilationUnit [actionUnit=dialect.getMVELCompilationUnit(accumDescr.getActionCode(),actionCodeAnalysis,getUsedDeclarations(decls,actionCodeAnalysis),getUsedDeclarations(sourceOuterDeclr,actionCodeAnalysis),initCodeAnalysis.getMvelVariables(),context,"drools",KnowledgeHelper.class,readLocalsFromTuple,MVELCompilationUnit.Scope.CONSTRAINT)]</InnerVar>
                <InnerVar>MVELCompilationUnit [reverseUnit=null]</InnerVar>
                <InnerVar>MVELCompilationUnit [resultUnit=dialect.getMVELCompilationUnit(accumDescr.getResultCode(),resultCodeAnalysis,getUsedDeclarations(decls,resultCodeAnalysis),getUsedDeclarations(sourceOuterDeclr,resultCodeAnalysis),initCodeAnalysis.getMvelVariables(),context,"drools",KnowledgeHelper.class,readLocalsFromTuple,MVELCompilationUnit.Scope.CONSTRAINT)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>context;setTypesafe;[initCodeAnalysis.isTypesafe()]</InnerMethodInvoke>
                <InnerMethodInvoke>context;setTypesafe;[actionCodeAnalysis.isTypesafe()]</InnerMethodInvoke>
                <InnerMethodInvoke>context;setTypesafe;[resultCodeAnalysis.isTypesafe()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getUsedDeclarations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Declaration[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>decls</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>analysis</ParamName>
                    <ParamType>AnalysisResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BoundIdentifiers [usedIdentifiers=analysis.getBoundIdentifiers()]</InnerVar>
                <InnerVar>List&lt;Declaration&gt; [usedDeclarations=new ArrayList&lt;Declaration&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>