<Class>
    <Id>2112</Id>
    <Package>org.drools.core.time.impl</Package>
    <ClassName>ValueSet</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>SECOND</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MINUTE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>HOUR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DAY_OF_MONTH</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MONTH</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DAY_OF_WEEK</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>YEAR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ALL_SPEC_INT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>NO_SPEC_INT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ALL_SPEC</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>NO_SPEC</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>monthMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>dayMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>cronExpression</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>timeZone</FieldName>
            <FieldType>TimeZone</FieldType>
        </Field>
        <Field>
            <FieldName>seconds</FieldName>
            <FieldType>TreeSet</FieldType>
        </Field>
        <Field>
            <FieldName>minutes</FieldName>
            <FieldType>TreeSet</FieldType>
        </Field>
        <Field>
            <FieldName>hours</FieldName>
            <FieldType>TreeSet</FieldType>
        </Field>
        <Field>
            <FieldName>daysOfMonth</FieldName>
            <FieldType>TreeSet</FieldType>
        </Field>
        <Field>
            <FieldName>months</FieldName>
            <FieldType>TreeSet</FieldType>
        </Field>
        <Field>
            <FieldName>daysOfWeek</FieldName>
            <FieldType>TreeSet</FieldType>
        </Field>
        <Field>
            <FieldName>years</FieldName>
            <FieldType>TreeSet</FieldType>
        </Field>
        <Field>
            <FieldName>lastdayOfWeek</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>nthdayOfWeek</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>lastdayOfMonth</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>nearestWeekday</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>expressionParsed</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>value</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>pos</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CronExpression</MethodName>
            <MethodComment>/** 
 * Constructs a new &lt;CODE&gt;CronExpression&lt;/CODE&gt; based on the specified  parameter.
 * @param cronExpression String representation of the cron expression thenew object should represent
 * @throws java.text.ParseException if the string expression cannot be parsed into a valid  &lt;CODE&gt;CronExpression&lt;/CODE&gt;
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cronExpression</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;buildExpression;[this.cronExpression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParseException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSatisfiedBy</MethodName>
            <MethodComment>/** 
 * Indicates whether the given date satisfies the cron expression. Note that milliseconds are ignored, so two Dates falling on different milliseconds of the same second will always have the same result here.
 * @param date the date to evaluate
 * @return a boolean indicating whether the given date satisfies the cronexpression
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>date</ParamName>
                    <ParamType>Date</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [testDateCal=Calendar.getInstance(getTimeZone())]</InnerVar>
                <InnerVar>Date [originalDate=testDateCal.getTime()]</InnerVar>
                <InnerVar>Date [timeAfter=getTimeAfter(testDateCal.getTime())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>testDateCal;setTime;[date]</InnerMethodInvoke>
                <InnerMethodInvoke>testDateCal;set;[Calendar.MILLISECOND, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>testDateCal;add;[Calendar.SECOND, -1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNextValidTimeAfter</MethodName>
            <MethodComment>/** 
 * Returns the next date/time &lt;I&gt;after&lt;/I&gt; the given date/time which satisfies the cron expression.
 * @param date the date/time at which to begin the search for the next validdate/time
 * @return the next valid date/time
 */
</MethodComment>
            <ReturnType>Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>date</ParamName>
                    <ParamType>Date</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNextInvalidTimeAfter</MethodName>
            <MethodComment>/** 
 * Returns the next date/time &lt;I&gt;after&lt;/I&gt; the given date/time which does &lt;I&gt;not&lt;/I&gt; satisfy the expression
 * @param date the date/time at which to begin the search for the next invalid date/time
 * @return the next valid date/time
 */
</MethodComment>
            <ReturnType>Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>date</ParamName>
                    <ParamType>Date</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [difference=1000]</InnerVar>
                <InnerVar>Calendar [adjustCal=Calendar.getInstance(getTimeZone())]</InnerVar>
                <InnerVar>Date [lastDate=adjustCal.getTime()]</InnerVar>
                <InnerVar>Date [newDate=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>adjustCal;setTime;[date]</InnerMethodInvoke>
                <InnerMethodInvoke>adjustCal;set;[Calendar.MILLISECOND, 0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTimeZone</MethodName>
            <MethodComment>/** 
 * Returns the time zone for which this &lt;code&gt;CronExpression&lt;/code&gt;  will be resolved.
 */
</MethodComment>
            <ReturnType>TimeZone</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTimeZone</MethodName>
            <MethodComment>/** 
 * Sets the time zone for which  this &lt;code&gt;CronExpression&lt;/code&gt;  will be resolved.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>timeZone</ParamName>
                    <ParamType>TimeZone</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * Returns the string representation of the &lt;CODE&gt;CronExpression&lt;/CODE&gt;
 * @return a string representation of the &lt;CODE&gt;CronExpression&lt;/CODE&gt;
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isValidExpression</MethodName>
            <MethodComment>/** 
 * Indicates whether the specified cron expression can be parsed into a  valid cron expression
 * @param cronExpression the expression to evaluate
 * @return a boolean indicating whether the given expression is a valid cronexpression
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cronExpression</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParseException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>storeExpressionVals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [incr=0]</InnerVar>
                <InnerVar>int [i=skipWhiteSpace(pos,s)]</InnerVar>
                <InnerVar>char [c=s.charAt(i)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParseException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkNext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pos</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>val</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [end=-1]</InnerVar>
                <InnerVar>int [i=pos]</InnerVar>
                <InnerVar>char [c=s.charAt(pos)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addToSet;[val, end, 0, type]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParseException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCronExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExpressionSummary</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>StringBuffer [buf=new StringBuffer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>buf;append;["seconds: "]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;[getExpressionSetSummary(seconds)]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["minutes: "]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;[getExpressionSetSummary(minutes)]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["hours: "]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;[getExpressionSetSummary(hours)]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["daysOfMonth: "]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;[getExpressionSetSummary(daysOfMonth)]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["months: "]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;[getExpressionSetSummary(months)]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["daysOfWeek: "]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;[getExpressionSetSummary(daysOfWeek)]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["lastdayOfWeek: "]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;[lastdayOfWeek]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["nearestWeekday: "]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;[nearestWeekday]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["NthDayOfWeek: "]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;[nthdayOfWeek]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["lastdayOfMonth: "]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;[lastdayOfMonth]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["years: "]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;[getExpressionSetSummary(years)]</InnerMethodInvoke>
                <InnerMethodInvoke>buf;append;["\n"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExpressionSetSummary</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>set</ParamName>
                    <ParamType>java.util.Set</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [buf=new StringBuffer()]</InnerVar>
                <InnerVar>Iterator [itr=set.iterator()]</InnerVar>
                <InnerVar>boolean [first=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExpressionSetSummary</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>list</ParamName>
                    <ParamType>java.util.ArrayList</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [buf=new StringBuffer()]</InnerVar>
                <InnerVar>Iterator [itr=list.iterator()]</InnerVar>
                <InnerVar>boolean [first=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>skipWhiteSpace</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>i</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findNextWhiteSpace</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>i</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addToSet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>val</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>end</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>incr</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TreeSet [set=getSet(type)]</InnerVar>
                <InnerVar>int [startAt=val]</InnerVar>
                <InnerVar>int [stopAt=end]</InnerVar>
                <InnerVar>int [max=-1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParseException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TreeSet</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ValueSet</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>v</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>i</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char [c=s.charAt(i)]</InnerVar>
                <InnerVar>String [s1=String.valueOf(v)]</InnerVar>
                <InnerVar>ValueSet [val=new ValueSet()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNumericValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>i</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [endOfVal=findNextWhiteSpace(i,s)]</InnerVar>
                <InnerVar>String [val=s.substring(i,endOfVal)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMonthNumber</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Integer [integer=(Integer)monthMap.get(s)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDayOfWeekNumber</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>s</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Integer [integer=(Integer)dayMap.get(s)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTimeAfter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>afterTime</ParamName>
                    <ParamType>Date</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Calendar [cl=Calendar.getInstance(getTimeZone())]</InnerVar>
                <InnerVar>boolean [gotOne=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cl;setTime;[afterTime]</InnerMethodInvoke>
                <InnerMethodInvoke>cl;set;[Calendar.MILLISECOND, 0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setCalendarHour</MethodName>
            <MethodComment>/** 
 * Advance the calendar to the particular hour paying particular attention to daylight saving problems.
 * @param cal
 * @param hour
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cal</ParamName>
                    <ParamType>Calendar</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>hour</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cal;set;[java.util.Calendar.HOUR_OF_DAY, hour]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTimeBefore</MethodName>
            <MethodComment>/** 
 * NOT YET IMPLEMENTED: Returns the time before the given time that the &lt;code&gt;CronExpression&lt;/code&gt; matches.
 */
</MethodComment>
            <ReturnType>Date</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>endTime</ParamName>
                    <ParamType>Date</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFinalFireTime</MethodName>
            <MethodComment>/** 
 * NOT YET IMPLEMENTED: Returns the final time that the  &lt;code&gt;CronExpression&lt;/code&gt; will match.
 */
</MethodComment>
            <ReturnType>Date</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isLeapYear</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>year</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLastDayOfMonth</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>monthNum</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>year</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readObject</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stream</ParamName>
                    <ParamType>java.io.ObjectInputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>stream;defaultReadObject;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>java.io.IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clone</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>CronExpression [copy=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>