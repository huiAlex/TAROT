<Class>
    <Id>2338</Id>
    <Package>org.kie.dmn.feel.marshaller</Package>
    <ClassName>FEELStringMarshaller</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>FEELMarshaller</SuperInterface>
        <SuperInterface>String</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>FEELStringMarshaller  /** 
 * An implementation of the FEEL marshaller interface that converts FEEL objects into it's string representation and vice versa
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>INSTANCE</FieldName>
            <FieldType>FEELStringMarshaller</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>FEELStringMarshaller</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>marshall</MethodName>
            <MethodComment>/** 
 * Marshalls the give FEEL value into a String. The result is similar to calling the string() function in a FEEL expression, with the difference that a null value is returned as the "null" string instead of the null value itself.
 * @param value the FEEL value to be marshalled
 * @return the string representation of the value
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unmarshall</MethodName>
            <MethodComment>/** 
 * Unmarshalls the given string into a FEEL value. IMPORTANT: please note that it is only possible to unmarshall simple values, like strings and numbers. Complex values like lists and contexts don't have enough metadata marshalled in the string to enable them to be unmarshalled.
 * @param feelType the expected type of the value to be unmarshalled
 * @param value the marshalled value to unmarshall
 * @return the value resulting from the unmarshalling of the string
 * @throws UnsupportedOperationException in case the type is a complex type,i.e. RANGE, FUNCTION, CONTEXT, LIST or UNARY_TEST, the implementation raises the exception.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>feelType</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>