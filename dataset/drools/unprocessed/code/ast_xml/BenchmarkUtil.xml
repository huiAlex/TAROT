<Class>
    <Id>205</Id>
    <Package>org.drools.modelcompiler.benchmark</Package>
    <ClassName>BenchmarkUtil</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>createJarFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KJarWithKnowledgeFiles</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kieServices</ParamName>
                    <ParamType>KieServices</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>releaseId</ParamName>
                    <ParamType>ReleaseId</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numberOfRules</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numberOfRulesPerFile</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>BenchmarkType</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>KieFileSystem [kieFileSystem=kieServices.newKieFileSystem()]</InnerVar>
                <InnerVar>Collection&lt;String&gt; [generatedKnowledge=type.useRuleModel ? generateRuleModelSourcesToKJar(kieFileSystem,numberOfRules,numberOfRulesPerFile,type.generateExprId) : generateDRLsToKJar(kieFileSystem,numberOfRules,numberOfRulesPerFile)]</InnerVar>
                <InnerVar>KieBuilder [kieBuilder=kieServices.newKieBuilder(kieFileSystem)]</InnerVar>
                <InnerVar>File [jarFile=writeKJarToFile(kieBuilder,releaseId)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>kieFileSystem;writeKModuleXML;[getDefaultKieModuleModel(kieServices).toXML()]</InnerMethodInvoke>
                <InnerMethodInvoke>kieFileSystem;writePomXML;[getPom(releaseId)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeDomainModelToKJar;[kieServices, kieFileSystem]</InnerMethodInvoke>
                <InnerMethodInvoke>null;testGeneratedKnowledge;[kieBuilder]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeDomainModelToKJar</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kieServices</ParamName>
                    <ParamType>KieServices</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>kieFileSystem</ParamName>
                    <ParamType>KieFileSystem</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [javaSrc=Person.class.getCanonicalName().replace('.',File.separatorChar) + ".java"]</InnerVar>
                <InnerVar>Resource [javaResource=kieServices.getResources().newFileSystemResource("src/test/java/" + javaSrc)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>kieFileSystem;write;["src/main/java/" + javaSrc, javaResource]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateDRLsToKJar</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kieFileSystem</ParamName>
                    <ParamType>KieFileSystem</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numberOfRules</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numberOfRulesPerFile</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Collection&lt;String&gt; [generatedDrls=new ArrayList&lt;&gt;()]</InnerVar>
                <InnerVar>BigDecimal [numberOfFiles=BigDecimal.valueOf(numberOfRules).divide(BigDecimal.valueOf(numberOfRulesPerFile),0,BigDecimal.ROUND_DOWN)]</InnerVar>
                <InnerVar>int [numberOfRulesLeftToGenerate=numberOfRules - (numberOfFiles.intValue() * numberOfRulesPerFile)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateDRLtoKJar</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kieFileSystem</ParamName>
                    <ParamType>KieFileSystem</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numberOfRules</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fileIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [rulesBuilder=new StringBuilder()]</InnerVar>
                <InnerVar>String [drlName="src/main/resources/rules" + fileIndex + ".drl"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>rulesBuilder;append;["package org.drools.modelcompiler.benchmarks;\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>rulesBuilder;append;["\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>rulesBuilder;append;["import " + Person.class.getCanonicalName() + ";\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>rulesBuilder;append;["\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>kieFileSystem;write;[drlName, rulesBuilder.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateRuleModelSourcesToKJar</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kieFileSystem</ParamName>
                    <ParamType>KieFileSystem</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numberOfRules</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numberOfRulesPerFile</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>generateExprId</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Collection&lt;String&gt; [generatedClasses=new ArrayList&lt;&gt;()]</InnerVar>
                <InnerVar>BigDecimal [numberOfFiles=BigDecimal.valueOf(numberOfRules).divide(BigDecimal.valueOf(numberOfRulesPerFile),0,BigDecimal.ROUND_DOWN)]</InnerVar>
                <InnerVar>int [numberOfRulesLeftToGenerate=numberOfRules - (numberOfFiles.intValue() * numberOfRulesPerFile)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>kieFileSystem;write;["src/main/java/org/drools/modelcompiler/benchmarks/Variables.java", getVariableSource()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getVariableSource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRuleModelClassSource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numberOfRules</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>generateExprId</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [sb=new StringBuilder("package org.drools.modelcompiler.benchmarks;\n" + "" + "import java.util.*;\n"+ "import org.drools.model.*;\n"+ "import static org.drools.model.FlowDSL.*;\n"+ "import " + Person.class.getCanonicalName() + ";\n"+ "import org.drools.model.Index.ConstraintType;\n"+ ""+ "import static org.drools.modelcompiler.benchmarks.Variables.*;\n"+ ""+ "public class Rules"+ classIndex+ " implements Model {\n"+ ""+ "    @Override\n"+ "    public List&lt;Rule&gt; getRules() {\n"+ "        return Arrays.asList( rule1\n")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>sb;append;["        );\n" + "    }\n" + "\n"]</InnerMethodInvoke>
                <InnerMethodInvoke>sb;append;["}\n"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDefaultKieModuleModel</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KieModuleModel</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ks</ParamName>
                    <ParamType>KieServices</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>KieModuleModel [kieModuleModel=ks.newKieModuleModel()]</InnerVar>
                <InnerVar>KieBaseModel [kieBaseModel1=kieModuleModel.newKieBaseModel("kbase").setDefault(true)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>kieBaseModel1.newKieSessionModel("ksession");setDefault;[true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPom</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>releaseId</ParamName>
                    <ParamType>ReleaseId</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [pom="&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n" + "&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n" + "         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;\n"+ "  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n"+ "\n"+ "  &lt;groupId&gt;" + releaseId.getGroupId() + "&lt;/groupId&gt;\n"+ "  &lt;artifactId&gt;"+ releaseId.getArtifactId()+ "&lt;/artifactId&gt;\n"+ "  &lt;version&gt;"+ releaseId.getVersion()+ "&lt;/version&gt;\n"+ "&lt;/project&gt;"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>testGeneratedKnowledge</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kieBuilder</ParamName>
                    <ParamType>KieBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Message&gt; [messages=kieBuilder.buildAll().getResults().getMessages()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeKJarToFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>File</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kieBuilder</ParamName>
                    <ParamType>KieBuilder</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>releaseId</ParamName>
                    <ParamType>ReleaseId</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InternalKieModule [kieModule=(InternalKieModule)kieBuilder.getKieModule()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>bytesToFile</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>File</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>releaseId</ParamName>
                    <ParamType>ReleaseId</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bytes</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>extension</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>File [file=new File(System.getProperty("java.io.tmpdir"),releaseId.getArtifactId() + "-" + releaseId.getVersion()+ extension)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BenchmarkUtil</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>