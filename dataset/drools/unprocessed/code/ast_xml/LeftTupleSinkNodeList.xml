<Class>
    <Id>1287</Id>
    <Package>org.drools.core.reteoo</Package>
    <ClassName>LeftTupleSinkNodeList</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Externalizable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LeftTupleSinkNodeList  /** 
 * This is a simple linked linked implementation. Each node must implement &lt;/code&gt;LinkedListNode&lt;code&gt; so that it references the node before and after it. This way a node can be removed without having to scan the list to find it. This class does not provide an Iterator implementation as its designed for efficiency and not genericity. There are a number of ways to iterate the list. &lt;p&gt; Simple iterator: &lt;pre&gt; for ( LinkedListNode node = list.getFirst(); node != null; node =  node.remove() ) { } &lt;/pre&gt; Iterator that pops the first entry: &lt;pre&gt; for ( LinkedListNode node = list.removeFirst(); node != null; node = list.removeFirst() ) { } &lt;/pre&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>firstNode</FieldName>
            <FieldType>LeftTupleSinkNode</FieldType>
        </Field>
        <Field>
            <FieldName>lastNode</FieldName>
            <FieldType>LeftTupleSinkNode</FieldType>
        </Field>
        <Field>
            <FieldName>size</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>currentNode</FieldName>
            <FieldType>LeftTupleSinkNode</FieldType>
        </Field>
        <Field>
            <FieldName>nextNode</FieldName>
            <FieldType>LeftTupleSinkNode</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>LeftTupleSinkNodeList</MethodName>
            <MethodComment>/** 
 * Construct an empty &lt;code&gt;LinkedList&lt;/code&gt;
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readExternal</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>ObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LeftTupleSinkNode [current=firstNode]</InnerVar>
                <InnerVar>LeftTupleSinkNode [previous=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>current;setPreviousLeftTupleSinkNode;[previous]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeExternal</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;writeObject;[firstNode]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeObject;[lastNode]</InnerMethodInvoke>
                <InnerMethodInvoke>out;writeInt;[size]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>add</MethodName>
            <MethodComment>/** 
 * Add a &lt;code&gt;TupleSinkNode&lt;/code&gt; to the list. If the &lt;code&gt;LinkedList&lt;/code&gt; is empty then the first and last nodes are set to the added node.
 * @param node The &lt;code&gt;TupleSinkNode&lt;/code&gt; to be added
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>LeftTupleSinkNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment>/** 
 * Removes a &lt;code&gt;TupleSinkNode&lt;/code&gt; from the list. This works by attach the previous reference to the child reference. When the node to be removed is the first node it calls &lt;code&gt;removeFirst()&lt;/code&gt;. When the node to be removed is the last node it calls &lt;code&gt;removeLast()&lt;/code&gt;.
 * @param node The &lt;code&gt;TupleSinkNode&lt;/code&gt; to be removed.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>LeftTupleSinkNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFirst</MethodName>
            <MethodComment>/** 
 * Return the first node in the list
 * @return The first &lt;code&gt;TupleSinkNode&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType>LeftTupleSinkNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getLast</MethodName>
            <MethodComment>/** 
 * Return the last node in the list
 * @return The last &lt;code&gt;TupleSinkNode&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType>LeftTupleSinkNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeFirst</MethodName>
            <MethodComment>/** 
 * Remove the first node from the list. The next node then becomes the first node. If this is the last node then both first and last node references are set to null.
 * @return The first &lt;code&gt;TupleSinkNode&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType>LeftTupleSinkNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>LeftTupleSinkNode [node=this.firstNode]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>node;setNextLeftTupleSinkNode;[null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeLast</MethodName>
            <MethodComment>/** 
 * Remove the last node from the list. The previous node then becomes the last node. If this is the last node then both first and last node references are set to null.
 * @return The first &lt;code&gt;TupleSinkNode&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType>LeftTupleSinkNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>LeftTupleSinkNode [node=this.lastNode]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>node;setPreviousLeftTupleSinkNode;[null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isEmpty</MethodName>
            <MethodComment>/** 
 * @return boolean value indicating the empty status of the list
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clear</MethodName>
            <MethodComment>/** 
 * Iterates the list removing all the nodes until there are no more nodes to remove.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * @return return size of the list as an int
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * Returns a list iterator
 * @return
 */
</MethodComment>
            <ReturnType>Iterator</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasNext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>