<Class>
    <Id>2578</Id>
    <Package>org.drools.template.parser</Package>
    <ClassName>DefaultTemplateColumn</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>TemplateColumn</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DefaultTemplateColumn  /** 
 * The default column condition for a rule template to be generated. If the conditon starts with "!" then the template will only be generated if the column condition does not exist. If there is no condition string then the template will be generated only if the column contains a value. The condition can be any valid rule condition.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>COLUMN_PATTERN</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>notCondition</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>columnName</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>condition</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>templateContainer</FieldName>
            <FieldType>TemplateContainer</FieldType>
        </Field>
        <Field>
            <FieldName>index</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>DefaultTemplateColumn</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tc</ParamName>
                    <ParamType>TemplateContainer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>columnString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Matcher [matcher=COLUMN_PATTERN.matcher(columnString)]</InnerVar>
                <InnerVar>String [indexString=matcher.group(4)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createCellCondition</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>Rule</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuffer [conditionString=new StringBuffer()]</InnerVar>
                <InnerVar>Column [column=templateContainer.getColumn(columnName)]</InnerVar>
                <InnerVar>SnippetBuilder [snip=new SnippetBuilder(conditionString.toString())]</InnerVar>
                <InnerVar>Condition [condition=new Condition()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>column;getCondition;[condition, index]</InnerMethodInvoke>
                <InnerMethodInvoke>conditionString;append;["exists "]</InnerMethodInvoke>
                <InnerMethodInvoke>conditionString;append;[column.getCondition(condition,index)]</InnerMethodInvoke>
                <InnerMethodInvoke>condition;setSnippet;[snip.build(columnName)]</InnerMethodInvoke>
                <InnerMethodInvoke>rule;addCondition;[condition]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createColumnCondition</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>Rule</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SnippetBuilder [colSnip=new SnippetBuilder("$param : Column(name == \"$param\")")]</InnerVar>
                <InnerVar>Condition [colCondition=new Condition()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>colCondition;setSnippet;[colSnip.build(value)]</InnerMethodInvoke>
                <InnerMethodInvoke>rule;addCondition;[colCondition]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addCondition</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>Rule</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;createColumnCondition;[rule, columnName]</InnerMethodInvoke>
                <InnerMethodInvoke>null;createCellCondition;[rule]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNotCondition</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCondition</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>