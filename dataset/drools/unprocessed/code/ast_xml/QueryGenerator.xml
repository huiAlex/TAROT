<Class>
    <Id>731</Id>
    <Package>org.drools.modelcompiler.builder.generator</Package>
    <ClassName>QueryGenerator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>QUERY_CALL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>queryType</FieldName>
            <FieldType>ClassOrInterfaceType</FieldType>
        </Field>
        <Field>
            <FieldName>methodCallExpr</FieldName>
            <FieldType>MethodCallExpr</FieldType>
        </Field>
        <Field>
            <FieldName>context</FieldName>
            <FieldType>RuleContext</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>processQueryDef</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kbuilder</ParamName>
                    <ParamType>KnowledgeBuilderImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeResolver</ParamName>
                    <ParamType>TypeResolver</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageModel</ParamName>
                    <ParamType>PackageModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>queryDescr</ParamName>
                    <ParamType>QueryDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isPattern</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RuleContext [context=new RuleContext(kbuilder,packageModel,queryDescr,typeResolver,isPattern)]</InnerVar>
                <InnerVar>String [queryName=queryDescr.getName()]</InnerVar>
                <InnerVar>String [queryDefVariableName=toQueryDef(queryName)]</InnerVar>
                <InnerVar>ClassOrInterfaceType [queryDefType=getQueryType(context.getQueryParameters())]</InnerVar>
                <InnerVar>MethodCallExpr [queryCall=new MethodCallExpr(null,QUERY_CALL)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>context;setQueryName;[Optional.of(queryDefVariableName)]</InnerMethodInvoke>
                <InnerMethodInvoke>null;parseQueryParameters;[context, packageModel, queryDescr]</InnerMethodInvoke>
                <InnerMethodInvoke>queryCall;addArgument;[new StringLiteralExpr(queryName)]</InnerMethodInvoke>
                <InnerMethodInvoke>packageModel.getQueryDefWithType();put;[queryDefVariableName, new QueryDefWithType(queryDefType,queryCall,context)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>QueryDefWithType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryType</ParamName>
                    <ParamType>ClassOrInterfaceType</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodCallExpr</ParamName>
                    <ParamType>MethodCallExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>contex</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQueryType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassOrInterfaceType</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMethodCallExpr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodCallExpr</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RuleContext</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processQuery</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kbuilder</ParamName>
                    <ParamType>KnowledgeBuilderImpl</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageModel</ParamName>
                    <ParamType>PackageModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>queryDescr</ParamName>
                    <ParamType>QueryDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [queryDefVariableName=toQueryDef(queryDescr.getName())]</InnerVar>
                <InnerVar>RuleContext [context=packageModel.getQueryDefWithType().get(queryDefVariableName).getContext()]</InnerVar>
                <InnerVar>Type [queryType=JavaParser.parseType(Query.class.getCanonicalName())]</InnerVar>
                <InnerVar>MethodDeclaration [queryMethod=new MethodDeclaration(EnumSet.of(Modifier.PRIVATE),queryType,"query_" + toId(queryDescr.getName()))]</InnerVar>
                <InnerVar>BlockStmt [queryBody=new BlockStmt()]</InnerVar>
                <InnerVar>String [queryBuildVarName=toId(queryDescr.getName()) + "_build"]</InnerVar>
                <InnerVar>VariableDeclarationExpr [queryBuildVar=new VariableDeclarationExpr(queryType,queryBuildVarName)]</InnerVar>
                <InnerVar>MethodCallExpr [buildCall=new MethodCallExpr(new NameExpr(queryDefVariableName),BUILD_CALL)]</InnerVar>
                <InnerVar>AssignExpr [queryBuildAssign=new AssignExpr(queryBuildVar,buildCall,AssignExpr.Operator.ASSIGN)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>new ModelGeneratorVisitor(context,packageModel);visit;[queryDescr.getLhs()]</InnerMethodInvoke>
                <InnerMethodInvoke>ModelGenerator;createVariables;[kbuilder, queryBody, packageModel, context]</InnerMethodInvoke>
                <InnerMethodInvoke>queryMethod;setBody;[queryBody]</InnerMethodInvoke>
                <InnerMethodInvoke>context.getExpressions();forEach;[buildCall::addArgument]</InnerMethodInvoke>
                <InnerMethodInvoke>queryBody;addStatement;[queryBuildAssign]</InnerMethodInvoke>
                <InnerMethodInvoke>queryBody;addStatement;[new ReturnStmt(queryBuildVarName)]</InnerMethodInvoke>
                <InnerMethodInvoke>packageModel;putQueryMethod;[queryMethod]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseQueryParameters</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageModel</ParamName>
                    <ParamType>PackageModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>QueryDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQueryType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassOrInterfaceType</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryParameters</ParamName>
                    <ParamType>QueryParameter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Class&lt;?&gt; [res=QueryDef.getQueryClassByArity(queryParameters.size())]</InnerVar>
                <InnerVar>ClassOrInterfaceType [queryType=JavaParser.parseClassOrInterfaceType(res.getCanonicalName())]</InnerVar>
                <InnerVar>Type[] [genericType=queryParameters.stream().map(e -&gt; e.type).map(DrlxParseUtil::classToReferenceType).toArray(Type[]::new)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isLiteral</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>substituteBindingWithQueryParameter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>x</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Optional&lt;QueryParameter&gt; [optQueryParameter=context.queryParameterWithName(p -&gt; p.name.equals(x))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toQueryDef</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toQueryArg</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>queryParameterIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>