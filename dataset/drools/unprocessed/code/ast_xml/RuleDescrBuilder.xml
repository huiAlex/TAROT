<Class>
    <Id>2625</Id>
    <Package>org.drools.compiler.lang.api</Package>
    <ClassName>RuleDescrBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>AnnotatedDescrBuilder</SuperInterface>
        <SuperInterface>RuleDescrBuilder</SuperInterface>
        <SuperInterface>AttributeSupportBuilder</SuperInterface>
        <SuperInterface>RuleDescrBuilder</SuperInterface>
        <SuperInterface>DescrBuilder</SuperInterface>
        <SuperInterface>PackageDescrBuilder</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>RuleDescrBuilder  /** 
 * A descriptor builder for rules
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>name</MethodName>
            <MethodComment>/** 
 * The name of the rule. Best practice is to keep rule names relatively short, i.e. under 60 characters.
 * @param name name of the rule
 * @return itself
 */
</MethodComment>
            <ReturnType>RuleDescrBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>extendsRule</MethodName>
            <MethodComment>/** 
 * Defines the name of the rule this rule extends. It will cause the rule to inherit the LHS from the parent rule.
 * @param name name of the parent rule
 * @return itself
 */
</MethodComment>
            <ReturnType>RuleDescrBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rhs</MethodName>
            <MethodComment>/** 
 * The default right hand side (consequence) of the rule. This is a code block that must be valid according to the used dialect (java or MVEL). In particular, the deprecated '#' character, that was used for one line comments is not supported. For one line comments, please use standard '//'.
 * @param rhs the code block 
 * @return itself
 */
</MethodComment>
            <ReturnType>RuleDescrBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rhs</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>namedRhs</MethodName>
            <MethodComment>/** 
 * An additional named right hand side (consequence) of the rule. This is a code block that must be valid according to the used dialect (java or MVEL). In particular, the deprecated '#' character, that was used for one line comments is not supported. For one line comments, please use standard '//'.
 * @param name the name of the consequence
 * @param rhs the code block
 * @return itself
 */
</MethodComment>
            <ReturnType>RuleDescrBuilder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rhs</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lhs</MethodName>
            <MethodComment>/** 
 * Defines the LHS (condition) of the rule.
 * @return a Conditional Element descriptor builder with the AND CE semantic.
 */
</MethodComment>
            <ReturnType>RuleDescrBuilder</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>