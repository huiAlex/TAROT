<Class>
    <Id>2922</Id>
    <Package>org.drools.core.reteoo.builder</Package>
    <ClassName>CollectBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ReteooComponentBuilder</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>build</MethodName>
            <MethodComment>/** 
 * @inheritDoc
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>BuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>utils</ParamName>
                    <ParamType>BuildUtils</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rce</ParamName>
                    <ParamType>RuleConditionElement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [existSubNetwort=false]</InnerVar>
                <InnerVar>Collect [collect=(Collect)rce]</InnerVar>
                <InnerVar>List&lt;BetaNodeFieldConstraint&gt; [resultBetaConstraints=context.getBetaconstraints()]</InnerVar>
                <InnerVar>List&lt;AlphaNodeFieldConstraint&gt; [resultAlphaConstraints=context.getAlphaConstraints()]</InnerVar>
                <InnerVar>Pattern [sourcePattern=collect.getSourcePattern()]</InnerVar>
                <InnerVar>ReteooComponentBuilder [builder=utils.getBuilderFor(sourcePattern)]</InnerVar>
                <InnerVar>LeftTupleSource [tupleSource=context.getTupleSource()]</InnerVar>
                <InnerVar>int [currentPatternIndex=context.getCurrentPatternOffset()]</InnerVar>
                <InnerVar>BetaConstraints [binder=utils.createBetaNodeConstraint(context,context.getBetaconstraints(),false)]</InnerVar>
                <InnerVar>BetaConstraints [resultBinder=utils.createBetaNodeConstraint(context,resultBetaConstraints,true)]</InnerVar>
                <InnerVar>CollectAccumulator [accumulator=new CollectAccumulator(collect,existSubNetwort)]</InnerVar>
                <InnerVar>Accumulate [accumulate=new SingleAccumulate(sourcePattern,sourcePattern.getRequiredDeclarations(),accumulator)]</InnerVar>
                <InnerVar>AccumulateNode [accNode=context.getComponentFactory().getNodeFactoryService().buildAccumulateNode(context.getNextId(),context.getTupleSource(),context.getObjectSource(),resultAlphaConstraints.toArray(new AlphaNodeFieldConstraint[resultAlphaConstraints.size()]),binder,resultBinder,accumulate,existSubNetwort,context)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>context;pushRuleComponent;[collect]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;build;[context, utils, sourcePattern]</InnerMethodInvoke>
                <InnerMethodInvoke>context;setTupleSource;[utils.attachNode(context,accNode)]</InnerMethodInvoke>
                <InnerMethodInvoke>context;setObjectSource;[null]</InnerMethodInvoke>
                <InnerMethodInvoke>context;setCurrentPatternOffset;[currentPatternIndex]</InnerMethodInvoke>
                <InnerMethodInvoke>context;popRuleComponent;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>requiresLeftActivation</MethodName>
            <MethodComment>/** 
 * @inheritDoc
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>utils</ParamName>
                    <ParamType>BuildUtils</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rce</ParamName>
                    <ParamType>RuleConditionElement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>