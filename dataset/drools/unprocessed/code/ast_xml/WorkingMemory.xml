<Class>
    <Id>2554</Id>
    <Package>org.drools.core</Package>
    <ClassName>WorkingMemory</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>WorkingMemoryEventManager</SuperInterface>
        <SuperInterface>WorkingMemoryEntryPoint</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>WorkingMemory  /** 
 * A knowledge session for a &lt;code&gt;RuleBase&lt;/code&gt;. While this object can be serialised out, it cannot be serialised in. This is because the RuleBase reference is transient. Please see the RuleBase interface for serializing in WorkingMemories from an InputStream.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getAgenda</MethodName>
            <MethodComment>/** 
 * Returns the Agenda for this WorkingMemory. While the WorkingMemory interface is considered public, the Agenda interface is more subject to change.
 * @return the Agenda
 */
</MethodComment>
            <ReturnType>Agenda</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setGlobal</MethodName>
            <MethodComment>/** 
 * Set a specific instance as a global in this working memory. Null values will return doing nothing. The global identifier and its type must be declared in the drl.
 * @param identifier the identifier under which to populate the data
 * @param value the global value, cannot be null
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>identifier</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGlobal</MethodName>
            <MethodComment>/** 
 * Retrieve a specific instance of global data by identifier
 * @return application data or null if nothing is set under this identifier
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>identifier</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEnvironment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Environment</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setGlobalResolver</MethodName>
            <MethodComment>/** 
 * Sets the GlobalResolver instance to be used when resolving globals, replaces the current GlobalResolver. Typcicaly a delegating GlobalResolver is created that first gets a reference to the current GlobalResolver, for delegating
 * @param globalResolver
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>globalResolver</ParamName>
                    <ParamType>GlobalResolver</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGlobalResolver</MethodName>
            <MethodComment>/** 
 * Returns the current GlobalResolver
 * @return
 */
</MethodComment>
            <ReturnType>GlobalResolver</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getKnowledgeBase</MethodName>
            <MethodComment>/** 
 * Retrieve the &lt;code&gt;RuleBase&lt;/code&gt; for this working memory.
 * @return The &lt;code&gt;RuleBase&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType>InternalKnowledgeBase</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fireAllRules</MethodName>
            <MethodComment>/** 
 * Fire all items on the agenda until empty.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fireAllRules</MethodName>
            <MethodComment>/** 
 * Fire all items on the agenda until empty, using the given AgendaFiler
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>agendaFilter</ParamName>
                    <ParamType>AgendaFilter</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fireAllRules</MethodName>
            <MethodComment>/** 
 * Fire all items on the agenda until empty or at most 'fireLimit' rules have fired
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fireLimit</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fireAllRules</MethodName>
            <MethodComment>/** 
 * Fire all items on the agenda using the given AgendaFiler until empty or at most 'fireLimit' rules have fired
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>agendaFilter</ParamName>
                    <ParamType>AgendaFilter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fireLimit</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getObject</MethodName>
            <MethodComment>/** 
 * Retrieve the object associated with a &lt;code&gt;FactHandle&lt;/code&gt;.
 * @param handle The fact handle.
 * @return The associated object.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>handle</ParamName>
                    <ParamType>FactHandle</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFactHandle</MethodName>
            <MethodComment>/** 
 * Retrieve the &lt;code&gt;FactHandle&lt;/code&gt; associated with an Object.
 * @param object The object.
 * @return The associated fact handle.
 */
</MethodComment>
            <ReturnType>FactHandle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFactHandleByIdentity</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FactHandle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterateObjects</MethodName>
            <MethodComment>/** 
 * Returns an Iterator for the Objects in the Working Memory. This Iterator is not thread safe. This means that any working memory actions during iteration may invalidate the iterator.
 * @return the Iterator
 */
</MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterateObjects</MethodName>
            <MethodComment>/** 
 * Returns an Iterator for the Objects in the Working Memory. This Iterator will filter out any objects that the ObjectFilter does not accept. This Iterator is not thread safe. This means that any working memory actions during iteration may invalidate the iterator.
 * @param filter
 * @return the Iterator
 */
</MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>org.kie.api.runtime.ObjectFilter</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterateFactHandles</MethodName>
            <MethodComment>/** 
 * Returns an Iterator for the FactHandles in the Working Memory. This Iterator is not thread safe. This means that any working memory actions during iteration may invalidate the iterator.
 * @return the Iterator
 */
</MethodComment>
            <ReturnType>InternalFactHandle</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterateFactHandles</MethodName>
            <MethodComment>/** 
 * Returns an Iterator for the Objects in the Working Memory. This Iterator will filter out any objects that the ObjectFilter does not accept. This Iterator is not thread safe. This means that any working memory actions during iteration may invalidate the iterator.
 * @param filter
 * @return the Iterator
 */
</MethodComment>
            <ReturnType>InternalFactHandle</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>org.kie.api.runtime.ObjectFilter</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setFocus</MethodName>
            <MethodComment>/** 
 * Set the focus to the specified AgendaGroup
 * @param focus
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>focus</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQueryResults</MethodName>
            <MethodComment>/** 
 * Retrieve the QueryResults of the specified query and arguments
 * @param query The name of the query.
 * @param arguments The arguments used for the query
 * @return The QueryResults of the specified query.If no results match the query it is empty.
 * @throws IllegalArgumentException if no query named "query" is found in the rulebase
 */
</MethodComment>
            <ReturnType>QueryResults</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>query</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setAsyncExceptionHandler</MethodName>
            <MethodComment>/** 
 * Sets the AsyncExceptionHandler to handle exceptions thrown by the Agenda Scheduler used for duration rules.
 * @param handler
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>handler</ParamName>
                    <ParamType>AsyncExceptionHandler</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearAgenda</MethodName>
            <MethodComment>/** 
 * Clear the Agenda. Iterates over each AgendaGroup cancalling all Activations.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearAgendaGroup</MethodName>
            <MethodComment>/** 
 * Clear the Agenda Group, cancelling all its Activations.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>group</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearActivationGroup</MethodName>
            <MethodComment>/** 
 * Clears the Activation Group, cancellings all its Activations
 * @param group
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>group</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearRuleFlowGroup</MethodName>
            <MethodComment>/** 
 * Clears the RuleFlow group, cancelling all its Activations
 * @param group
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>group</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startProcess</MethodName>
            <MethodComment>/** 
 * Starts a new process instance for the process with the given id.
 */
</MethodComment>
            <ReturnType>ProcessInstance</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>processId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startProcess</MethodName>
            <MethodComment>/** 
 * Starts a new process instance for the process with the given id.
 */
</MethodComment>
            <ReturnType>ProcessInstance</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>processId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProcessInstances</MethodName>
            <MethodComment>/** 
 * Returns the list of process instances of this working memory. This list is unmodifiable.
 * @return the list of process instances
 */
</MethodComment>
            <ReturnType>ProcessInstance</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProcessInstance</MethodName>
            <MethodComment>/** 
 * Returns the process instance with the given id.
 * @return the process instance with the given id
 */
</MethodComment>
            <ReturnType>ProcessInstance</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProcessInstance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ProcessInstance</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>readOnly</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWorkItemManager</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>WorkItemManager</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>halt</MethodName>
            <MethodComment>/** 
 * Stops rule firing after the current rule finishes executing
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWorkingMemoryEntryPoint</MethodName>
            <MethodComment>/** 
 * Returns the interface instance for a given entry point, so that the application can manage entry-point-scoped facts.
 * @param id the id of the entry point, as defined in the rules file
 * @return
 */
</MethodComment>
            <ReturnType>WorkingMemoryEntryPoint</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSessionClock</MethodName>
            <MethodComment>/** 
 * Returns the session clock instance associated with this session
 * @return
 */
</MethodComment>
            <ReturnType>SessionClock</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>