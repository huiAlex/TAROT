<Class>
    <Id>3463</Id>
    <Package>org.drools.core.impl</Package>
    <ClassName>KnowledgeBaseImpl</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>InternalKnowledgeBase</SuperInterface>
        <SuperInterface>Externalizable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>logger</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
        <Field>
            <FieldName>serialVersionUID</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>addedEntryNodeCache</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>addedEntryNodeCache</FieldName>
            <FieldType>EntryPointNode</FieldType>
        </Field>
        <Field>
            <FieldName>removedEntryNodeCache</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>removedEntryNodeCache</FieldName>
            <FieldType>EntryPointNode</FieldType>
        </Field>
        <Field>
            <FieldName>id</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>workingMemoryCounter</FieldName>
            <FieldType>AtomicInteger</FieldType>
        </Field>
        <Field>
            <FieldName>config</FieldName>
            <FieldType>RuleBaseConfiguration</FieldType>
        </Field>
        <Field>
            <FieldName>pkgs</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>pkgs</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>processes</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>processes</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>rootClassLoader</FieldName>
            <FieldType>ClassLoader</FieldType>
        </Field>
        <Field>
            <FieldName>factHandleFactory</FieldName>
            <FieldType>FactHandleFactory</FieldType>
        </Field>
        <Field>
            <FieldName>globals</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>globals</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>reloadPackageCompilationData</FieldName>
            <FieldType>Queue</FieldType>
        </Field>
        <Field>
            <FieldName>reloadPackageCompilationData</FieldName>
            <FieldType>DialectRuntimeRegistry</FieldType>
        </Field>
        <Field>
            <FieldName>eventSupport</FieldName>
            <FieldType>KieBaseEventSupport</FieldType>
        </Field>
        <Field>
            <FieldName>statefulSessions</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>statefulSessions</FieldName>
            <FieldType>StatefulKnowledgeSession</FieldType>
        </Field>
        <Field>
            <FieldName>lock</FieldName>
            <FieldType>ReentrantReadWriteLock</FieldType>
        </Field>
        <Field>
            <FieldName>classTypeDeclaration</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>classTypeDeclaration</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>classFieldAccessorCache</FieldName>
            <FieldType>ClassFieldAccessorCache</FieldType>
        </Field>
        <Field>
            <FieldName>rete</FieldName>
            <FieldType>Rete</FieldType>
        </Field>
        <Field>
            <FieldName>reteooBuilder</FieldName>
            <FieldType>ReteooBuilder</FieldType>
        </Field>
        <Field>
            <FieldName>segmentProtos</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>segmentProtos</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>kieComponentFactory</FieldName>
            <FieldType>KieComponentFactory</FieldType>
        </Field>
        <Field>
            <FieldName>jaxbClasses</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>jaxbClasses</FieldName>
            <FieldType>List&lt;String&gt;</FieldType>
        </Field>
        <Field>
            <FieldName>kieBaseListeners</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>kieBaseListeners</FieldName>
            <FieldType>KieBaseEventListener</FieldType>
        </Field>
        <Field>
            <FieldName>sessionsCache</FieldName>
            <FieldType>SessionsCache</FieldType>
        </Field>
        <Field>
            <FieldName>kbaseModificationsQueue</FieldName>
            <FieldType>Queue</FieldType>
        </Field>
        <Field>
            <FieldName>kbaseModificationsQueue</FieldName>
            <FieldType>Runnable</FieldType>
        </Field>
        <Field>
            <FieldName>sessionDeactivationsCounter</FieldName>
            <FieldType>AtomicInteger</FieldType>
        </Field>
        <Field>
            <FieldName>flushingUpdates</FieldName>
            <FieldType>AtomicBoolean</FieldType>
        </Field>
        <Field>
            <FieldName>kieContainer</FieldName>
            <FieldType>InternalKieContainer</FieldType>
        </Field>
        <Field>
            <FieldName>resolvedReleaseId</FieldName>
            <FieldType>ReleaseId</FieldType>
        </Field>
        <Field>
            <FieldName>containerId</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>mbeanRegistered</FieldName>
            <FieldType>AtomicBoolean</FieldType>
        </Field>
        <Field>
            <FieldName>ruleUnitRegistry</FieldName>
            <FieldType>RuleUnitRegistry</FieldType>
        </Field>
        <Field>
            <FieldName>sessionConfiguration</FieldName>
            <FieldType>SessionConfiguration</FieldType>
        </Field>
        <Field>
            <FieldName>candidate</FieldName>
            <FieldType>TypeDeclaration</FieldType>
        </Field>
        <Field>
            <FieldName>score</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>EMPTY_WMS</FieldName>
            <FieldType>InternalWorkingMemory[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>KnowledgeBaseImpl</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>KnowledgeBaseImpl</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>RuleBaseConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.config;makeImmutable;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;createRulebaseId;[id]</InnerMethodInvoke>
                <InnerMethodInvoke>kieComponentFactory.getTraitFactory();setRuleBase;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>kieComponentFactory.getTripleStore();setId;[id]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setupRete;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initMBeans</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nextWorkingMemoryCounter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWorkingMemoryCounter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createRulebaseId</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addEventListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>KieBaseEventListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeEventListener</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>KieBaseEventListener</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getKieBaseEventListeners</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KieBaseEventListener</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSessionConfiguration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SessionConfiguration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeKiePackage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>packageName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;enqueueModification;[() -&gt; {
  final InternalKnowledgePackage pkg=this.pkgs.get(packageName);
  if (pkg == null) {
    throw new IllegalArgumentException("Package name '" + packageName + "' does not exist for this Rule Base.");
  }
  this.eventSupport.fireBeforePackageRemoved(pkg);
  internalRemoveRules(((Collection&lt;RuleImpl&gt;)(Object)pkg.getRules()));
  final Set&lt;String&gt; referencedGlobals=new HashSet&lt;String&gt;();
  for (  InternalKnowledgePackage pkgref : this.pkgs.values()) {
    if (pkgref != pkg) {
      referencedGlobals.addAll(pkgref.getGlobals().keySet());
    }
  }
  for (  String globalName : pkg.getGlobals().keySet()) {
    if (!referencedGlobals.contains(globalName)) {
      this.globals.remove(globalName);
    }
  }
  for (  String processName : new ArrayList&lt;String&gt;(pkg.getRuleFlows().keySet())) {
    internalRemoveProcess(processName);
  }
  this.pkgs.remove(pkg.getName());
  pkg.getDialectRuntimeRegistry().onRemove();
  pkg.clear();
  this.eventSupport.fireAfterPackageRemoved(pkg);
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRule</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Rule</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>packageName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ruleName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InternalKnowledgePackage [p=getPackage(packageName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getQuery</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Query</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>packageName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>queryName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newKieSession</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KieSession</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newKieSession</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KieSession</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>KieSessionConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>environment</ParamName>
                    <ParamType>Environment</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SessionConfiguration [sessionConfig=(SessionConfiguration)conf]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;readLock;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getKieSessions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>? extends KieSession</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Collection&lt;KieSession&gt; [result=new ArrayList&lt;KieSession&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newStatelessKieSession</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>StatelessKieSession</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>conf</ParamName>
                    <ParamType>KieSessionConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newStatelessKieSession</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>StatelessKieSession</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getKiePackages</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KiePackage</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>InternalKnowledgePackage[] [pkgs=getPackages()]</InnerVar>
                <InnerVar>List&lt;KiePackage&gt; [list=new ArrayList&lt;KiePackage&gt;(pkgs.length)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Collections;addAll;[list, pkgs]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getKiePackage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KiePackage</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>packageName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readExternal</MethodName>
            <MethodComment>/** 
 * Handles the read serialization of the Package. Patterns in Rules may reference generated data which cannot be serialized by default methods. The Package uses PackageCompilationData to hold a reference to the generated bytecode; which must be restored before any Rules. A custom ObjectInputStream, able to resolve classes against the bytecode in the PackageCompilationData, is used to restore the Rules.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>ObjectInput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>DroolsObjectInput [droolsStream]</InnerVar>
                <InnerVar>boolean [isDrools=in instanceof DroolsObjectInputStream]</InnerVar>
                <InnerVar>boolean [wasDrools=in.readBoolean()]</InnerVar>
                <InnerVar>boolean [classLoaderCacheEnabled=droolsStream.readBoolean()]</InnerVar>
                <InnerVar>Map&lt;String,byte[]&gt; [store=(Map&lt;String,byte[]&gt;)droolsStream.readObject()]</InnerVar>
                <InnerVar>Class [cls=null]</InnerVar>
                <InnerVar>Map&lt;String,String&gt; [globs=(Map&lt;String,String&gt;)droolsStream.readObject()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>droolsStream;setClassLoader;[this.rootClassLoader]</InnerMethodInvoke>
                <InnerMethodInvoke>droolsStream;setKnowledgeBase;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>this.config;setClassLoader;[droolsStream.getParentClassLoader()]</InnerMethodInvoke>
                <InnerMethodInvoke>this.workingMemoryCounter;set;[droolsStream.readInt()]</InnerMethodInvoke>
                <InnerMethodInvoke>this;populateTypeDeclarationMaps;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;populateGlobalsMap;[globs]</InnerMethodInvoke>
                <InnerMethodInvoke>this.eventSupport;setKnowledgeBase;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>this.reteooBuilder;setRuleBase;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>((DroolsObjectInputStream)droolsStream);bindAllExtractors;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>this.getConfiguration().getComponentFactory().getTraitFactory();setRuleBase;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>null;rewireReteAfterDeserialization;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rewireReteAfterDeserialization</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rewireNodeAfterDeserialization</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>BaseNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Sink[] [sinks=node.getSinks()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeExternal</MethodName>
            <MethodComment>/** 
 * Handles the write serialization of the Package. Patterns in Rules may reference generated data which cannot be serialized by default methods. The Package uses PackageCompilationData to hold a reference to the generated bytecode. The generated bytecode must be restored before any Rules.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>ObjectOutput</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ObjectOutput [droolsStream]</InnerVar>
                <InnerVar>boolean [isDrools=out instanceof DroolsObjectOutputStream]</InnerVar>
                <InnerVar>ByteArrayOutputStream [bytes]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>out;writeBoolean;[isDrools]</InnerMethodInvoke>
                <InnerMethodInvoke>droolsStream;writeBoolean;[this.config.isClassLoaderCacheEnabled()]</InnerMethodInvoke>
                <InnerMethodInvoke>droolsStream;writeObject;[((ProjectClassLoader)rootClassLoader).getStore()]</InnerMethodInvoke>
                <InnerMethodInvoke>droolsStream;writeObject;[this.config]</InnerMethodInvoke>
                <InnerMethodInvoke>droolsStream;writeObject;[this.pkgs]</InnerMethodInvoke>
                <InnerMethodInvoke>droolsStream;writeObject;[this.id]</InnerMethodInvoke>
                <InnerMethodInvoke>droolsStream;writeInt;[this.workingMemoryCounter.get()]</InnerMethodInvoke>
                <InnerMethodInvoke>droolsStream;writeObject;[this.processes]</InnerMethodInvoke>
                <InnerMethodInvoke>droolsStream;writeUTF;[this.factHandleFactory.getClass().getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>droolsStream;writeObject;[buildGlobalMapForSerialization()]</InnerMethodInvoke>
                <InnerMethodInvoke>this.eventSupport;removeEventListener;[KieBaseEventListener.class]</InnerMethodInvoke>
                <InnerMethodInvoke>droolsStream;writeObject;[this.eventSupport]</InnerMethodInvoke>
                <InnerMethodInvoke>droolsStream;writeObject;[this.reteooBuilder]</InnerMethodInvoke>
                <InnerMethodInvoke>droolsStream;writeObject;[this.rete]</InnerMethodInvoke>
                <InnerMethodInvoke>droolsStream;writeObject;[this.resolvedReleaseId]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildGlobalMapForSerialization</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Map&lt;String,String&gt; [gl=new HashMap&lt;String,String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>populateGlobalsMap</MethodName>
            <MethodComment>/** 
 * globals class types must be re-wired after serialization
 * @throws ClassNotFoundException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>globs</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>populateTypeDeclarationMaps</MethodName>
            <MethodComment>/** 
 * type classes must be re-wired after serialization
 * @throws ClassNotFoundException
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getId</MethodName>
            <MethodComment>/** 
 * @return the id
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>disposeStatefulSession</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statefulSession</ParamName>
                    <ParamType>StatefulKnowledgeSessionImpl</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCachedSession</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>StatefulKnowledgeSessionImpl</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>SessionConfiguration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>environment</ParamName>
                    <ParamType>Environment</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newFactHandleFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FactHandleFactory</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newFactHandleFactory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FactHandleFactory</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>counter</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProcesses</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Process</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;readLock;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPackages</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InternalKnowledgePackage[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;readLock;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPackagesMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGlobals</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lock</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [firstLock=!this.lock.isWriteLockedByCurrentThread()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.lock.writeLock();lock;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unlock</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [lastUnlock=this.lock.getWriteHoldCount() == 1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.lock.writeLock();unlock;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readLock</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.lock.readLock();lock;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>readUnlock</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.lock.readLock();unlock;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addPackages</MethodName>
            <MethodComment>/** 
 * Add a &lt;code&gt;Package&lt;/code&gt; to the network. Iterates through the &lt;code&gt;Package&lt;/code&gt; adding Each individual &lt;code&gt;Rule&lt;/code&gt; to the network. Before update network each referenced &lt;code&gt;WorkingMemory&lt;/code&gt; is locked.
 * @param newPkgs The package to add.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newPkgs</ParamName>
                    <ParamType>KiePackage</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;InternalKnowledgePackage&gt; [clonedPkgs=new ArrayList&lt;InternalKnowledgePackage&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;enqueueModification;[() -&gt; internalAddPackages(clonedPkgs)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addPackage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>KiePackage</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newPkg</ParamName>
                    <ParamType>KiePackage</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InternalKnowledgePackage [clonedPkg=((InternalKnowledgePackage)newPkg).deepCloneIfAlreadyInUse(rootClassLoader)]</InnerVar>
                <InnerVar>CompletableFuture&lt;KiePackage&gt; [result=new CompletableFuture&lt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;enqueueModification;[() -&gt; {
  internalAddPackages(Collections.singletonList(clonedPkg));
  result.complete(getPackage(newPkg.getName()));
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>enqueueModification</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>modification</ParamName>
                    <ParamType>Runnable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flushModifications</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lockAndDeactivate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;lock;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;deactivateAllSessions;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unlockAndActivate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;activateAllSessions;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;unlock;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tryDeactivateAllSessions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>InternalWorkingMemory[] [wms=getWorkingMemories()]</InnerVar>
                <InnerVar>List&lt;InternalWorkingMemory&gt; [deactivatedWMs=new ArrayList&lt;InternalWorkingMemory&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tryLockAndDeactivate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [locked=this.lock.writeLock().tryLock()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deactivateAllSessions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>activateAllSessions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>internalAddPackages</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clonedPkgs</ParamName>
                    <ParamType>InternalKnowledgePackage</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;processAllTypesDeclaration;[clonedPkgs]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processAllTypesDeclaration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pkgs</ParamName>
                    <ParamType>InternalKnowledgePackage</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;TypeDeclaration&gt; [allTypeDeclarations=new ArrayList&lt;TypeDeclaration&gt;()]</InnerVar>
                <InnerVar>String [lastType=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Collections;sort;[allTypeDeclarations]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkMultithreadedEvaluation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>RuleImpl</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasMultiplePartitions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>disableMultithreadEvaluation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>warningMessage</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>config;enforceSingleThreadEvaluation;[]</InnerMethodInvoke>
                <InnerMethodInvoke>logger;warn;[warningMessage]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>register</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bytes</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerFunctionClassAndInnerClasses</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>functionClassName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>runtime</ParamName>
                    <ParamType>JavaDialectRuntimeData</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consumer</ParamName>
                    <ParamType>ClassRegister</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [className=convertClassToResourcePath(functionClassName)]</InnerVar>
                <InnerVar>String [innerClassName=className.substring(0,className.length() - ".class".length()) + "$"]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerTypeDeclaration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newDecl</ParamName>
                    <ParamType>TypeDeclaration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newPkg</ParamName>
                    <ParamType>InternalKnowledgePackage</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.classTypeDeclaration;put;[newDecl.getTypeClassName(), newDecl]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processTypeDeclaration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>newDecl</ParamName>
                    <ParamType>TypeDeclaration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newPkg</ParamName>
                    <ParamType>InternalKnowledgePackage</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>JavaDialectRuntimeData [runtime=((JavaDialectRuntimeData)newPkg.getDialectRuntimeRegistry().getDialectData("java"))]</InnerVar>
                <InnerVar>TypeDeclaration [typeDeclaration=this.classTypeDeclaration.get(newDecl.getTypeClassName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;updateDependentTypes;[typeDeclaration]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerAndLoadTypeDefinition</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>?</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>def</ParamName>
                    <ParamType>byte[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ClassNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>updateDependentTypes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeDeclaration</ParamName>
                    <ParamType>TypeDeclaration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mergeTypeDeclarations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>existingDecl</ParamName>
                    <ParamType>TypeDeclaration</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newDecl</ParamName>
                    <ParamType>TypeDeclaration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>existingDecl;setDurationAttribute;[mergeLeft(existingDecl.getTypeName(),"Unable to merge @duration attribute for type declaration of class:",existingDecl.getDurationAttribute(),newDecl.getDurationAttribute(),true,false)]</InnerMethodInvoke>
                <InnerMethodInvoke>existingDecl;setDynamic;[mergeLeft(existingDecl.getTypeName(),"Unable to merge @propertyChangeSupport  (a.k.a. dynamic) attribute for type declaration of class:",existingDecl.isDynamic(),newDecl.isDynamic(),true,false)]</InnerMethodInvoke>
                <InnerMethodInvoke>existingDecl;setPropertyReactive;[mergeLeft(existingDecl.getTypeName(),"Unable to merge @propertyReactive attribute for type declaration of class:",existingDecl.isPropertyReactive(),newDecl.isPropertyReactive(),true,false)]</InnerMethodInvoke>
                <InnerMethodInvoke>existingDecl;setRole;[mergeLeft(existingDecl.getTypeName(),"Unable to merge @role attribute for type declaration of class:",isSet(existingDecl.getSetMask(),TypeDeclaration.ROLE_BIT) &amp;&amp; newDecl.getRole() != Role.Type.FACT ? existingDecl.getRole() : null,newDecl.getRole(),true,false)]</InnerMethodInvoke>
                <InnerMethodInvoke>existingDecl;setTimestampAttribute;[mergeLeft(existingDecl.getTypeName(),"Unable to merge @timestamp attribute for type declaration of class:",existingDecl.getTimestampAttribute(),newDecl.getTimestampAttribute(),true,false)]</InnerMethodInvoke>
                <InnerMethodInvoke>existingDecl;setTypesafe;[mergeLeft(existingDecl.getTypeName(),"Unable to merge @typesafe attribute for type declaration of class:",existingDecl.isTypesafe(),newDecl.isTypesafe(),true,false)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mergeLeft</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeClass</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errorMsg</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leftVal</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightVal</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>errorOnDiff</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>override</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T [newValue=leftVal]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mergePackage</MethodName>
            <MethodComment>/** 
 * Merge a new package with an existing package. Most of the work is done by the concrete implementations, but this class does some work (including combining imports, compilation data, globals, and the actual Rule objects into the package).
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pkg</ParamName>
                    <ParamType>InternalKnowledgePackage</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newPkg</ParamName>
                    <ParamType>InternalKnowledgePackage</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,ImportDeclaration&gt; [imports=pkg.getImports()]</InnerVar>
                <InnerVar>String [lastIdent=null]</InnerVar>
                <InnerVar>String [lastType=null]</InnerVar>
                <InnerVar>List&lt;RuleImpl&gt; [rulesToBeRemoved=new ArrayList&lt;RuleImpl&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>imports;putAll;[newPkg.getImports()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addGlobal</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>identifier</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.globals;put;[identifier, clazz]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeGlobal</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>identifier</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.globals;remove;[identifier]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setupRete</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>NodeFactory [nodeFactory=kieComponentFactory.getNodeFactoryService()]</InnerVar>
                <InnerVar>EntryPointNode [epn=nodeFactory.buildEntryPointNode(this.reteooBuilder.getIdGenerator().getNextId(),RuleBasePartitionId.MAIN_PARTITION,this.getConfiguration().isMultithreadEvaluation(),this.rete,EntryPointId.DEFAULT)]</InnerVar>
                <InnerVar>BuildContext [context=new BuildContext(this)]</InnerVar>
                <InnerVar>ObjectTypeNode [otn=nodeFactory.buildObjectTypeNode(this.reteooBuilder.getIdGenerator().getNextId(),epn,ClassObjectType.InitialFact_ObjectType,context)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>epn;attach;[]</InnerMethodInvoke>
                <InnerMethodInvoke>context;setCurrentEntryPoint;[epn.getEntryPoint()]</InnerMethodInvoke>
                <InnerMethodInvoke>context;setTupleMemoryEnabled;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>context;setObjectTypeNodeMemoryEnabled;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>context;setPartitionId;[RuleBasePartitionId.MAIN_PARTITION]</InnerMethodInvoke>
                <InnerMethodInvoke>otn;attach;[context]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerAddedEntryNodeCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>EntryPointNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>addedEntryNodeCache;add;[node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAddedEntryNodeCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>EntryPointNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registeRremovedEntryNodeCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>EntryPointNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>removedEntryNodeCache;add;[node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRemovedEntryNodeCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>EntryPointNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRete</MethodName>
            <MethodComment>/** 
 * Retrieve the Rete-OO network for this &lt;code&gt;RuleBase&lt;/code&gt;.
 * @return The RETE-OO network.
 */
</MethodComment>
            <ReturnType>Rete</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReteooBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ReteooBuilder</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNodeCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMemoryCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>topic</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>registerSegmentPrototype</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tupleSource</ParamName>
                    <ParamType>LeftTupleSource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smem</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>segmentProtos;put;[tupleSource.getId(), smem.asPrototype()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasSegmentPrototypes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invalidateSegmentPrototype</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rootNode</ParamName>
                    <ParamType>LeftTupleNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>segmentProtos;remove;[rootNode.getId()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createSegmentFromPrototype</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SegmentMemory</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>tupleSource</ParamName>
                    <ParamType>LeftTupleSource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SegmentMemory.Prototype [proto=segmentProtos.get(tupleSource.getId())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSegmentPrototype</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SegmentMemory.Prototype</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>segment</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getExactTypeDeclaration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypeDeclaration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOrCreateExactTypeDeclaration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypeDeclaration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeDeclaration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypeDeclaration</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TypeDeclaration [typeDeclaration=getExactTypeDeclaration(clazz)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkSuperClasses</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypeDeclarationCandidate</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TypeDeclaration [typeDeclaration=null]</InnerVar>
                <InnerVar>Class&lt;?&gt; [current=clazz.getSuperclass()]</InnerVar>
                <InnerVar>int [score=0]</InnerVar>
                <InnerVar>TypeDeclarationCandidate [candidate=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkInterfaces</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypeDeclarationCandidate</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>baseline</ParamName>
                    <ParamType>TypeDeclarationCandidate</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>level</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TypeDeclarationCandidate [candidate=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeDeclarations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TypeDeclaration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addRules</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rules</ParamName>
                    <ParamType>RuleImpl</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;enqueueModification;[() -&gt; {
  for (  RuleImpl rule : rules) {
    internalAddRule(rule);
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>InvalidPatternException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>internalAddRule</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rule</ParamName>
                    <ParamType>RuleImpl</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.eventSupport;fireBeforeRuleAdded;[rule]</InnerMethodInvoke>
                <InnerMethodInvoke>this.reteooBuilder;addRule;[rule]</InnerMethodInvoke>
                <InnerMethodInvoke>this.eventSupport;fireAfterRuleAdded;[rule]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeQuery</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>packageName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ruleName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;removeRule;[packageName, ruleName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeRule</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>packageName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ruleName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;enqueueModification;[() -&gt; {
  final InternalKnowledgePackage pkg=pkgs.get(packageName);
  if (pkg == null) {
    throw new IllegalArgumentException("Package name '" + packageName + "' does not exist for this Rule Base.");
  }
  RuleImpl rule=pkg.getRule(ruleName);
  if (rule == null) {
    throw new IllegalArgumentException("Rule name '" + ruleName + "' does not exist in the Package '"+ packageName+ "'.");
  }
  this.eventSupport.fireBeforeRuleRemoved(rule);
  this.reteooBuilder.removeRules(Collections.singletonList(rule));
  this.eventSupport.fireAfterRuleRemoved(rule);
  pkg.removeRule(rule);
  addReloadDialectDatas(pkg.getDialectRuntimeRegistry());
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeRules</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rules</ParamName>
                    <ParamType>RuleImpl</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;enqueueModification;[() -&gt; internalRemoveRules(rules)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>internalRemoveRules</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rules</ParamName>
                    <ParamType>RuleImpl</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.reteooBuilder;removeRules;[rules]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeFunction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>packageName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>functionName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;enqueueModification;[() -&gt; internalRemoveFunction(packageName,functionName)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>internalRemoveFunction</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>packageName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>functionName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InternalKnowledgePackage [pkg=this.pkgs.get(packageName)]</InnerVar>
                <InnerVar>Function [function=pkg.getFunctions().get(functionName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.eventSupport;fireBeforeFunctionRemoved;[pkg, functionName]</InnerMethodInvoke>
                <InnerMethodInvoke>pkg;removeFunction;[functionName]</InnerMethodInvoke>
                <InnerMethodInvoke>this.eventSupport;fireAfterFunctionRemoved;[pkg, functionName]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addReloadDialectDatas;[pkg.getDialectRuntimeRegistry()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addProcess</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>process</ParamName>
                    <ParamType>Process</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;lock;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>internalAddProcess</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>process</ParamName>
                    <ParamType>Process</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.eventSupport;fireBeforeProcessAdded;[process]</InnerMethodInvoke>
                <InnerMethodInvoke>this.processes;put;[process.getId(), process]</InnerMethodInvoke>
                <InnerMethodInvoke>this.eventSupport;fireAfterProcessAdded;[process]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeProcess</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;enqueueModification;[() -&gt; internalRemoveProcess(id)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>internalRemoveProcess</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Process [process=this.processes.get(id)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.eventSupport;fireBeforeProcessRemoved;[process]</InnerMethodInvoke>
                <InnerMethodInvoke>this.processes;remove;[id]</InnerMethodInvoke>
                <InnerMethodInvoke>this.pkgs.get(process.getPackageName());removeRuleFlow;[id]</InnerMethodInvoke>
                <InnerMethodInvoke>this.eventSupport;fireAfterProcessRemoved;[process]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProcess</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Process</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>id</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;readLock;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addStatefulSession</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>StatefulKnowledgeSessionImpl</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPackage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InternalKnowledgePackage</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getWorkingMemories</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InternalWorkingMemory[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getConfiguration</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RuleBaseConfiguration</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRootClassLoader</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassLoader</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>executeQueuedActions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>DialectRuntimeRegistry [registry]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createNewPartitionId</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RuleBasePartitionId</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFactType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FactType</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>packageName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=packageName + "." + typeName]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;readLock;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addReloadDialectDatas</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>registry</ParamName>
                    <ParamType>DialectRuntimeRegistry</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.reloadPackageCompilationData;offer;[registry]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassFieldAccessorCache</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassFieldAccessorCache</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEntryPointIds</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Set&lt;String&gt; [entryPointIds=new HashSet&lt;String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTripleStore</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TripleStore</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTraitRegistry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TraitRegistry</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeObjectsGeneratedFromResource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resource</ParamName>
                    <ParamType>Resource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [modified=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResolvedReleaseId</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ReleaseId</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setResolvedReleaseId</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>currentReleaseId</ParamName>
                    <ParamType>ReleaseId</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContainerId</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setContainerId</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>containerId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setKieContainer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>kieContainer</ParamName>
                    <ParamType>InternalKieContainer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getKieContainer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InternalKieContainer</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRuleUnitRegistry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>RuleUnitRegistry</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasUnits</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>