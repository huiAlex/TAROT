<Class>
    <Id>1208</Id>
    <Package>org.kie.dmn.feel.marshaller</Package>
    <ClassName>FEELCodeMarshaller</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>FEELMarshaller</SuperInterface>
        <SuperInterface>String</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>FEELCodeMarshaller  /** 
 * An implementation of the FEEL marshaller interface that converts FEEL objects into it's string representation and vice versa
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>INSTANCE</FieldName>
            <FieldType>FEELCodeMarshaller</FieldType>
        </Field>
        <Field>
            <FieldName>feel</FieldName>
            <FieldType>FEEL</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>FEELCodeMarshaller</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>marshall</MethodName>
            <MethodComment>/** 
 * Marshalls the given value into FEEL code that can be executed to reconstruct the value. For instance, here are some examples of the marshalling process: * number 10 marshalls as: 10 * string foo marshalls as: "foo" * duration P1D marshalls as: duration( "P1D" ) * context { x : 10, y : foo } marshalls as: { x : 10, y : "foo" }
 * @param value the FEEL value to be marshalled
 * @return a string representing the FEEL code that needs to be executed to reconstruct the value
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unmarshall</MethodName>
            <MethodComment>/** 
 * Unmarshalls the string into a FEEL value by executing it.
 * @param feelType this parameter is ignored by this marshaller and can be set to null
 * @param value the FEEL code to execute for unmarshalling
 * @return the value resulting from executing the code
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>feelType</ParamName>
                    <ParamType>Type</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>