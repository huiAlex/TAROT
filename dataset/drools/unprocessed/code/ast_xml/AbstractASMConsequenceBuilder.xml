<Class>
    <Id>2748</Id>
    <Package>org.drools.compiler.rule.builder.dialect.asm</Package>
    <ClassName>AbstractASMConsequenceBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ConsequenceBuilder</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>build</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consequenceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,Object&gt; [vars=consequenceContext(context,consequenceName)]</InnerVar>
                <InnerVar>byte[] [bytecode=createConsequenceBytecode(context,vars)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>context.getDeclarationResolver();pushOnBuildStack;[context.getRule().getLhs()]</InnerMethodInvoke>
                <InnerMethodInvoke>JavaRuleBuilderHelper;generateMethodTemplate;["consequenceMethod", context, vars]</InnerMethodInvoke>
                <InnerMethodInvoke>JavaRuleBuilderHelper;registerInvokerBytecode;[context, vars, bytecode, context.getRule()]</InnerMethodInvoke>
                <InnerMethodInvoke>context.getDeclarationResolver();popBuildStack;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>consequenceContext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consequenceName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [className=consequenceName + "Consequence"]</InnerVar>
                <InnerVar>Map&lt;String,Declaration&gt; [decls=context.getDeclarationResolver().getDeclarations(context.getRule(),consequenceName)]</InnerVar>
                <InnerVar>JavaAnalysisResult [analysis=JavaRuleBuilderHelper.createJavaAnalysisResult(context,consequenceName,decls)]</InnerVar>
                <InnerVar>String [fixedConsequence=KnowledgeHelperFixer.fix(DialectUtil.fixBlockDescr(context,analysis,decls))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createConsequenceBytecode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>byte[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ruleContext</ParamName>
                    <ParamType>RuleBuildContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>consequenceContext</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>