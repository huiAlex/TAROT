<Class>
    <Id>536</Id>
    <Package>org.drools.modelcompiler.builder.generator.visitor</Package>
    <ClassName>NamedConsequenceVisitor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>WHEN_CALL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>ELSE_WHEN_CALL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>THEN_CALL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BREAKING_CALL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>context</FieldName>
            <FieldType>RuleContext</FieldType>
        </Field>
        <Field>
            <FieldName>packageModel</FieldName>
            <FieldType>PackageModel</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>NamedConsequenceVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>RuleContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>packageModel</ParamName>
                    <ParamType>PackageModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>descr</ParamName>
                    <ParamType>NamedConsequenceDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodCallExpr [executeCallDSL=onDSL(descr)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>context;addExpression;[executeCallDSL]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>desc</ParamName>
                    <ParamType>ConditionalBranchDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PatternDescr [patternRelated=(PatternDescr)getReferringPatternDescr(desc,(AndDescr)context.parentDesc)]</InnerVar>
                <InnerVar>Class&lt;?&gt; [patternRelatedClass=getClassFromContext(context.getTypeResolver(),patternRelated.getObjectType())]</InnerVar>
                <InnerVar>MethodCallExpr [whenBlock=whenThenDSL(desc,patternRelated,patternRelatedClass,WHEN_CALL,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;recurseAmongElseBranch;[patternRelatedClass, patternRelated, whenBlock, desc.getElseBranch()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>recurseAmongElseBranch</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>patternType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>patternRelated</ParamName>
                    <ParamType>PatternDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentMethodExpr</ParamName>
                    <ParamType>MethodCallExpr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>branch</ParamName>
                    <ParamType>ConditionalBranchDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>whenThenDSL</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodCallExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>desc</ParamName>
                    <ParamType>ConditionalBranchDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>patternRelated</ParamName>
                    <ParamType>PatternDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>patternType</ParamName>
                    <ParamType>?</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>callMethod</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parentExpression</ParamName>
                    <ParamType>MethodCallExpr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodCallExpr [when=new MethodCallExpr(parentExpression,callMethod)]</InnerVar>
                <InnerVar>String [condition=desc.getCondition().toString()]</InnerVar>
                <InnerVar>MethodCallExpr [then=new MethodCallExpr(when,THEN_CALL)]</InnerVar>
                <InnerVar>MethodCallExpr [rhs=onDSL(desc.getConsequence())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>then;addArgument;[rhs]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReferringPatternDescr</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BaseDescr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>desc</ParamName>
                    <ParamType>ConditionalBranchDescr</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>AndDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BaseDescr [patternRelated=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>onDSL</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodCallExpr</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>namedConsequence</ParamName>
                    <ParamType>NamedConsequenceDescr</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [namedConsequenceString=context.getNamedConsequences().get(namedConsequence.getName())]</InnerVar>
                <InnerVar>BlockStmt [ruleVariablesBlock=new BlockStmt()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;createVariables;[context.getKbuilder(), ruleVariablesBlock, packageModel, context]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>