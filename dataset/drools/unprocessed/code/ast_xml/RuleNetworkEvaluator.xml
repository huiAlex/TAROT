<Class>
    <Id>3486</Id>
    <Package>org.drools.core.phreak</Package>
    <ClassName>RuleNetworkEvaluator</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
        <Field>
            <FieldName>pJoinNode</FieldName>
            <FieldType>PhreakJoinNode</FieldType>
        </Field>
        <Field>
            <FieldName>pEvalNode</FieldName>
            <FieldType>PhreakEvalNode</FieldType>
        </Field>
        <Field>
            <FieldName>pFromNode</FieldName>
            <FieldType>PhreakFromNode</FieldType>
        </Field>
        <Field>
            <FieldName>pReactiveFromNode</FieldName>
            <FieldType>PhreakReactiveFromNode</FieldType>
        </Field>
        <Field>
            <FieldName>pNotNode</FieldName>
            <FieldType>PhreakNotNode</FieldType>
        </Field>
        <Field>
            <FieldName>pExistsNode</FieldName>
            <FieldType>PhreakExistsNode</FieldType>
        </Field>
        <Field>
            <FieldName>pAccNode</FieldName>
            <FieldType>PhreakAccumulateNode</FieldType>
        </Field>
        <Field>
            <FieldName>pBranchNode</FieldName>
            <FieldType>PhreakBranchNode</FieldType>
        </Field>
        <Field>
            <FieldName>pQueryNode</FieldName>
            <FieldType>PhreakQueryNode</FieldType>
        </Field>
        <Field>
            <FieldName>pTimerNode</FieldName>
            <FieldType>PhreakTimerNode</FieldType>
        </Field>
        <Field>
            <FieldName>pRtNode</FieldName>
            <FieldType>PhreakRuleTerminalNode</FieldType>
        </Field>
        <Field>
            <FieldName>cycle</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>pQtNode</FieldName>
            <FieldType>PhreakQueryTerminalNode</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>RuleNetworkEvaluator</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateNetwork</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmem</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>executor</ParamName>
                    <ParamType>RuleExecutor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;evaluateNetwork;[pmem, executor, pmem.getActualAgenda(wm)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateNetwork</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmem</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>executor</ParamName>
                    <ParamType>RuleExecutor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>agenda</ParamName>
                    <ParamType>InternalAgenda</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SegmentMemory[] [smems=pmem.getSegmentMemories()]</InnerVar>
                <InnerVar>int [smemIndex=0]</InnerVar>
                <InnerVar>SegmentMemory [smem=smems[smemIndex]]</InnerVar>
                <InnerVar>LeftInputAdapterNode [liaNode=(LeftInputAdapterNode)smem.getRootNode()]</InnerVar>
                <InnerVar>LinkedList&lt;StackEntry&gt; [stack=new LinkedList&lt;StackEntry&gt;()]</InnerVar>
                <InnerVar>NetworkNode [node]</InnerVar>
                <InnerVar>Memory [nodeMem]</InnerVar>
                <InnerVar>long [bit=1]</InnerVar>
                <InnerVar>TupleSets&lt;LeftTuple&gt; [srcTuples=smem.getStagedLeftTuples()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;outerEval;[pmem, node, bit, nodeMem, smems, smemIndex, srcTuples, agenda, stack, true, executor]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>indent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>size</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [sbuilder=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOffset</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>NetworkNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LeftTupleSource [lt]</InnerVar>
                <InnerVar>int [offset=1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>outerEval</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmem</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>NetworkNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bit</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodeMem</ParamName>
                    <ParamType>Memory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smems</ParamName>
                    <ParamType>SegmentMemory[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trgTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>agenda</ParamName>
                    <ParamType>InternalAgenda</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stack</ParamName>
                    <ParamType>StackEntry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>processRian</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>executor</ParamName>
                    <ParamType>RuleExecutor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;innerEval;[pmem, node, bit, nodeMem, smems, smemIndex, trgTuples, agenda, stack, processRian, executor]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evalStackEntry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entry</ParamName>
                    <ParamType>StackEntry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stack</ParamName>
                    <ParamType>StackEntry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>executor</ParamName>
                    <ParamType>RuleExecutor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>agenda</ParamName>
                    <ParamType>InternalAgenda</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>NetworkNode [node=entry.getNode()]</InnerVar>
                <InnerVar>Memory [nodeMem=entry.getNodeMem()]</InnerVar>
                <InnerVar>TupleSets&lt;LeftTuple&gt; [trgTuples=entry.getTrgTuples()]</InnerVar>
                <InnerVar>LeftTupleSinkNode [sink=entry.getSink()]</InnerVar>
                <InnerVar>PathMemory [pmem=entry.getRmem()]</InnerVar>
                <InnerVar>SegmentMemory[] [smems=entry.getSmems()]</InnerVar>
                <InnerVar>int [smemIndex=entry.getSmemIndex()]</InnerVar>
                <InnerVar>boolean [processRian=entry.isProcessRian()]</InnerVar>
                <InnerVar>long [bit=entry.getBit()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;innerEval;[pmem, node, bit, nodeMem, smems, smemIndex, trgTuples, agenda, stack, processRian, executor]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>innerEval</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmem</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>NetworkNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bit</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodeMem</ParamName>
                    <ParamType>Memory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smems</ParamName>
                    <ParamType>SegmentMemory[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trgTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>agenda</ParamName>
                    <ParamType>InternalAgenda</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stack</ParamName>
                    <ParamType>StackEntry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>processRian</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>executor</ParamName>
                    <ParamType>RuleExecutor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TupleSets&lt;LeftTuple&gt; [srcTuples]</InnerVar>
                <InnerVar>SegmentMemory [smem=smems[smemIndex]]</InnerVar>
                <InnerVar>TupleSets&lt;LeftTuple&gt; [stagedLeftTuples=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evalNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LeftTuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmem</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>NetworkNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bit</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodeMem</ParamName>
                    <ParamType>Memory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smems</ParamName>
                    <ParamType>SegmentMemory[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>agenda</ParamName>
                    <ParamType>InternalAgenda</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stack</ParamName>
                    <ParamType>StackEntry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>processRian</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>executor</ParamName>
                    <ParamType>RuleExecutor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>srcTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smem</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stagedLeftTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sink</ParamName>
                    <ParamType>LeftTupleSinkNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TupleSets&lt;LeftTuple&gt; [trgTuples=new TupleSetsImpl&lt;LeftTuple&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTargetStagedLeftTuples</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>LeftTuple</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>NetworkNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smem</ParamName>
                    <ParamType>SegmentMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evalQueryNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmem</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>NetworkNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bit</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodeMem</ParamName>
                    <ParamType>Memory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smems</ParamName>
                    <ParamType>SegmentMemory[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trgTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stack</ParamName>
                    <ParamType>StackEntry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>srcTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sink</ParamName>
                    <ParamType>LeftTupleSinkNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stagedLeftTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>QueryElementNodeMemory [qmem=(QueryElementNodeMemory)nodeMem]</InnerVar>
                <InnerVar>QueryElementNode [qnode=(QueryElementNode)node]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>qmem.getResultLeftTuples();addTo;[trgTuples]</InnerMethodInvoke>
                <InnerMethodInvoke>qmem;setNodeCleanWithoutNotify;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evalBetaNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pmem</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>NetworkNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodeMem</ParamName>
                    <ParamType>Memory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smems</ParamName>
                    <ParamType>SegmentMemory[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trgTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>agenda</ParamName>
                    <ParamType>InternalAgenda</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stack</ParamName>
                    <ParamType>StackEntry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>processRian</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>executor</ParamName>
                    <ParamType>RuleExecutor</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>srcTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stagedLeftTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sink</ParamName>
                    <ParamType>LeftTupleSinkNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BetaNode [betaNode=(BetaNode)node]</InnerVar>
                <InnerVar>BetaMemory [bm]</InnerVar>
                <InnerVar>AccumulateMemory [am=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;switchOnDoBetaNode;[node, trgTuples, agenda.getWorkingMemory(), srcTuples, stagedLeftTuples, sink, bm, am]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>switchOnDoBetaNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>NetworkNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trgTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>srcTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stagedLeftTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sink</ParamName>
                    <ParamType>LeftTupleSinkNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bm</ParamName>
                    <ParamType>BetaMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>am</ParamName>
                    <ParamType>AccumulateMemory</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doRiaNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>agenda</ParamName>
                    <ParamType>InternalAgenda</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pmem</ParamName>
                    <ParamType>PathMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>srcTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>betaNode</ParamName>
                    <ParamType>BetaNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sink</ParamName>
                    <ParamType>LeftTupleSinkNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smems</ParamName>
                    <ParamType>SegmentMemory[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>smemIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodeMem</ParamName>
                    <ParamType>Memory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bm</ParamName>
                    <ParamType>BetaMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stack</ParamName>
                    <ParamType>StackEntry</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>executor</ParamName>
                    <ParamType>RuleExecutor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>RiaPathMemory [pathMem=bm.getRiaRuleMemory()]</InnerVar>
                <InnerVar>SegmentMemory[] [subnetworkSmems=pathMem.getSegmentMemories()]</InnerVar>
                <InnerVar>SegmentMemory [subSmem=null]</InnerVar>
                <InnerVar>StackEntry [stackEntry=new StackEntry(betaNode,bm.getNodePosMaskBit(),sink,pmem,nodeMem,smems,smemIndex,srcTuples,false,false)]</InnerVar>
                <InnerVar>TupleSets&lt;LeftTuple&gt; [subLts=subSmem.getStagedLeftTuples().takeAll()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>stack;add;[stackEntry]</InnerMethodInvoke>
                <InnerMethodInvoke>null;innerEval;[pathMem, subSmem.getRootNode(), 1, subSmem.getNodeMemories().getFirst(), subnetworkSmems, subSmem.getPos(), subLts, agenda, stack, true, executor]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doRiaNode2</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wm</ParamName>
                    <ParamType>InternalWorkingMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>srcTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>riaNode</ParamName>
                    <ParamType>RightInputAdapterNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ObjectSink[] [sinks=riaNode.getObjectSinkPropagator().getSinks()]</InnerVar>
                <InnerVar>BetaNode [betaNode=(BetaNode)sinks[0]]</InnerVar>
                <InnerVar>BetaMemory [bm]</InnerVar>
                <InnerVar>Memory [nodeMem=wm.getNodeMemory(betaNode)]</InnerVar>
                <InnerVar>TupleSets&lt;RightTuple&gt; [rightTuples=bm.getStagedRightTuples()]</InnerVar>
                <InnerVar>BetaNode[] [bns=null]</InnerVar>
                <InnerVar>BetaMemory[] [bms=null]</InnerVar>
                <InnerVar>int [length=sinks.length]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>srcTuples;resetAll;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findLeftTupleBlocker</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>betaNode</ParamName>
                    <ParamType>BetaNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rtm</ParamName>
                    <ParamType>TupleMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>contextEntry</ParamName>
                    <ParamType>ContextEntry[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constraints</ParamName>
                    <ParamType>BetaConstraints</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leftTuple</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>useLeftMemory</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FastIterator [it=betaNode.getRightIterator(rtm)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unlinkAndDeleteChildLeftTuple</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>childLeftTuple</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trgLeftTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stagedLeftTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>childLeftTuple;unlinkFromRightParent;[]</InnerMethodInvoke>
                <InnerMethodInvoke>childLeftTuple;unlinkFromLeftParent;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;deleteChildLeftTuple;[childLeftTuple, trgLeftTuples, stagedLeftTuples]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deleteChildLeftTuple</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>childLeftTuple</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>trgLeftTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stagedLeftTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>trgLeftTuples;addDelete;[childLeftTuple]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doUpdatesReorderLeftMemory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bm</ParamName>
                    <ParamType>BetaMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>srcLeftTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TupleMemory [ltm=bm.getLeftTupleMemory()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doUpdatesExistentialReorderLeftMemory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bm</ParamName>
                    <ParamType>BetaMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>srcLeftTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TupleMemory [ltm=bm.getLeftTupleMemory()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doUpdatesReorderRightMemory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bm</ParamName>
                    <ParamType>BetaMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>srcRightTuples</ParamName>
                    <ParamType>RightTuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TupleMemory [rtm=bm.getRightTupleMemory()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doUpdatesExistentialReorderRightMemory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bm</ParamName>
                    <ParamType>BetaMemory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>betaNode</ParamName>
                    <ParamType>BetaNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>srcRightTuples</ParamName>
                    <ParamType>RightTuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TupleMemory [rtm=bm.getRightTupleMemory()]</InnerVar>
                <InnerVar>boolean [resumeFromCurrent=!(betaNode.isIndexedUnificationJoin() || rtm.getIndexType().isComparison())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>useLeftMemory</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tupleSource</ParamName>
                    <ParamType>LeftTupleSource</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leftTuple</ParamName>
                    <ParamType>Tuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [useLeftMemory=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>normalizeStagedTuples</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stagedLeftTuples</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>childLeftTuple</ParamName>
                    <ParamType>LeftTuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>