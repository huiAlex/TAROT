<Class>
    <Id>1904</Id>
    <Package>org.drools.decisiontable.parser</Package>
    <ClassName>LhsBuilder</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>SourceBuilder</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LhsBuilder  /** 
 * This utility will build up a list of constraints for a column. For instance, the column has been spanned across multiple cells, and the cells below contain the constraints.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>QUOTE_DOUBLE</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>QUOTE_LEFT</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>QUOTE_RIGHT</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>headerRow</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>headerCol</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>colDefPrefix</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>colDefSuffix</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>multiple</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>forAll</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>andop</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>constraints</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>constraints</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>values</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>values</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>hasValues</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>fieldTypes</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>fieldTypes</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>operators</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>operators</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>patParFrm</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>patFrm</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>patPar</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>patEval</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>fieldType</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SINGLE_FIELD</FieldName>
            <FieldType>FieldType</FieldType>
        </Field>
        <Field>
            <FieldName>OPERATOR_FIELD</FieldName>
            <FieldType>FieldType</FieldType>
        </Field>
        <Field>
            <FieldName>NORMAL_FIELD</FieldName>
            <FieldType>FieldType</FieldType>
        </Field>
        <Field>
            <FieldName>FORALL_FIELD</FieldName>
            <FieldType>FieldType</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>LhsBuilder</MethodName>
            <MethodComment>/** 
 * @param colDefinition The initial column definition that is shared via merged cells.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>colDefinition</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [colDef=colDefinition == null ? "" : colDefinition]</InnerVar>
                <InnerVar>Matcher [matEval=patEval.matcher(colDef)]</InnerVar>
                <InnerVar>Matcher [matParFrm=patParFrm.matcher(colDef)]</InnerVar>
                <InnerVar>Matcher [matFrm=patFrm.matcher(colDef)]</InnerVar>
                <InnerVar>Matcher [matPar=patPar.matcher(colDef)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getActionTypeCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ActionType.Code</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addTemplate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>content</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FieldType [fieldType=calcFieldType(content)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.fieldTypes;put;[column, fieldType]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clearValues</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.values;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addCellValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Integer [key=new Integer(column)]</InnerVar>
                <InnerVar>String [content=this.constraints.get(key)]</InnerVar>
                <InnerVar>SnippetBuilder [snip=new SnippetBuilder(content)]</InnerVar>
                <InnerVar>String [result=snip.build(fixValue(column,value))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>this.values;add;[result]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fixValue</MethodName>
            <MethodComment>/** 
 * If the type of the column is either FieldType.SINGLE_FIELD or FieldType.OPERATOR_FIELD we have added quotation-marks around the template parameter. Consequentially if a cell value included the quotation-marks (i.e. for an empty-string or white-space) we need to remove the additional quotation-marks.
 * @param value
 * @return
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [_value=value]</InnerVar>
                <InnerVar>FieldType [fieldType=this.fieldTypes.get(column)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResult</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>StringBuffer [buf=new StringBuffer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isMultipleConstraints</MethodName>
            <MethodComment>/** 
 * Returns true if this is building up multiple constraints as in: Foo(a ==b, c == d) etc... If not, then it it really just like the "classic" style DTs.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isForAll</MethodName>
            <MethodComment>/** 
 * Check whether the column definition is a 'forall' construct. In these situations we do not attempt to strip quotation marks from field values.
 * @return true if the column definition is 'forall'
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>calcFieldType</MethodName>
            <MethodComment>/** 
 * Work out the type of "field" that is being specified, as in : age age &lt; age == $param age == $1 || age == $2 forall{age &lt; $}{,} &lt;p/&gt; etc. as we treat them all differently.
 */
</MethodComment>
            <ReturnType>FieldType</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>content</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SnippetBuilder.SnippetType [snippetType=SnippetBuilder.getType(content)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>FieldType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fieldType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasValues</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isDelimitedString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>content</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isDelimitedString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>content</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>openQuote</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closeQuote</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>