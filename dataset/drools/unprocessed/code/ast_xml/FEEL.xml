<Class>
    <Id>1781</Id>
    <Package>org.kie.dmn.feel</Package>
    <ClassName>FEEL</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>FEEL  /** 
 * FEEL expression language engine interface This class is the entry point for the engine use
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>newInstance</MethodName>
            <MethodComment>/** 
 * Factory method to create a new FEEL engine instance
 * @return a newly instantiated FEEL engine instance
 */
</MethodComment>
            <ReturnType>FEEL</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newInstance</MethodName>
            <MethodComment>/** 
 * Factory method to create a new FEEL engine instance using custom FEELProfile(s)
 * @return a newly instantiated FEEL engine instance
 */
</MethodComment>
            <ReturnType>FEEL</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>profiles</ParamName>
                    <ParamType>FEELProfile</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newCompilerContext</MethodName>
            <MethodComment>/** 
 * Factory method to create a new compiler context
 * @return compiler context with default options set
 */
</MethodComment>
            <ReturnType>CompilerContext</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compile</MethodName>
            <MethodComment>/** 
 * Compiles the string expression using the given compiler context.
 * @param expression a FEEL expression
 * @param ctx a compiler context
 * @return the compiled expression
 */
</MethodComment>
            <ReturnType>CompiledExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>CompilerContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluate</MethodName>
            <MethodComment>/** 
 * Evaluates the given FEEL expression and returns the result
 * @param expression a FEEL expression
 * @return the result of the evaluation of the expression
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluate</MethodName>
            <MethodComment>/** 
 * Evaluates the given FEEL expression using the given EvaluationContext, and returns the result
 * @param expression a FEEL expression
 * @param ctx the EvaluationContext to be used for defininginput variables and additional feel event listeners contextual to this method call
 * @return the result of the evaluation of the expression.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>EvaluationContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluate</MethodName>
            <MethodComment>/** 
 * Evaluates the given FEEL expression using the given input variables, and returns the result
 * @param expression a FEEL expression
 * @param inputVariables a map of input Variables. The keyson the map are the variable names, that need to follow the naming rules for the FEEL language. The values on the map are the corresponding values for the variables. It is completely fine to use a previously returned FEEL context as inputVariables.
 * @return the result of the evaluation of the expression.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inputVariables</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluate</MethodName>
            <MethodComment>/** 
 * Evaluates the given compiled FEEL expression using the given input variables, and returns the result
 * @param expression a FEEL expression
 * @param inputVariables a map of input Variables. The keyson the map are the variable names, that need to follow the naming rules for the FEEL language. The values on the map are the corresponding values for the variables. It is completely fine to use a previously returned FEEL context as inputVariables.
 * @return the result of the evaluation of the expression.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>CompiledExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inputVariables</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluate</MethodName>
            <MethodComment>/** 
 * Evaluates the given compiled FEEL expression using the given EvaluationContext, and returns the result
 * @param expression a FEEL expression
 * @param ctx the EvaluationContext to be used for defininginput variables and additional feel event listeners contextual to this method call
 * @return the result of the evaluation of the expression.
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <ParamType>CompiledExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ctx</ParamName>
                    <ParamType>EvaluationContext</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateUnaryTests</MethodName>
            <MethodComment>/** 
 * Evaluates the given expression as a list of of unary tests. The syntax for this is defined in the FEEL grammar rule #17, i.e., a list of unary tests separated by commas.
 * @param expression a unary test list expression
 * @return a List of compiled UnaryTests
 */
</MethodComment>
            <ReturnType>UnaryTest</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateUnaryTests</MethodName>
            <MethodComment>/** 
 * Evaluates the given expression as a list of of unary tests. The syntax for this is defined in the FEEL grammar rule #17, i.e., a list of unary tests separated by commas.
 * @param expression a unary test list expression
 * @param variableTypes map of variable names and corresponding types,necessary to compile the unary tests
 * @return a List of compiled UnaryTests
 */
</MethodComment>
            <ReturnType>UnaryTest</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>variableTypes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addListener</MethodName>
            <MethodComment>/** 
 * Registers a new event listener into this FEEL instance. The event listeners are notified about signitificative events during compilation or evaluation of expressions.
 * @param listener the listener to register
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>FEELEventListener</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeListener</MethodName>
            <MethodComment>/** 
 * Removes a listener from the list of event listeners.
 * @param listener the listener to remove
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listener</ParamName>
                    <ParamType>FEELEventListener</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getListeners</MethodName>
            <MethodComment>/** 
 * Retrieves the set of registered event listeners
 * @return the set of listeners
 */
</MethodComment>
            <ReturnType>FEELEventListener</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>