rewriten integration test testDynamicRuleRemovals yields NullPointerException. Testcode after trace.
(+ original Testcase not leaps compatible, does always create reteoo.RuleBaseImpl:
public void testDynamicRuleRemovals() throws Exception {
Package pkg = builder.getPackage();
org.drools.reteoo.RuleBaseImpl ruleBase = new org.drools.reteoo.RuleBaseImpl();
ruleBase.addPackage( pkg );
)
java.lang.NullPointerException
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at junit.framework.TestCase.runTest(TestCase.java:154)
at junit.framework.TestCase.runBare(TestCase.java:127)
at junit.framework.TestResult$1.protect(TestResult.java:106)
at junit.framework.TestResult.runProtected(TestResult.java:124)
at junit.framework.TestResult.run(TestResult.java:109)
at junit.framework.TestCase.run(TestCase.java:118)
at junit.framework.TestSuite.runTest(TestSuite.java:208)
at junit.framework.TestSuite.run(TestSuite.java:203)
---------------
Test code: modified org.drools.integrationtests.IntegrationCases.testDynamicRuleRemovals
public void testDynamicRuleRemovalsUnusedWorkingMemory() throws Exception {
PackageBuilder builder = new PackageBuilder();
builder.addPackageFromDrl( new InputStreamReader( getClass().getResourceAsStream(  test_Dynamic1.drl  ) ) );
builder.addPackageFromDrl( new InputStreamReader( getClass().getResourceAsStream(  test_Dynamic2.drl  ) ) );
builder.addPackageFromDrl( new InputStreamReader( getClass().getResourceAsStream(  test_Dynamic3.drl  ) ) );
builder.addPackageFromDrl( new InputStreamReader( getClass().getResourceAsStream(  test_Dynamic4.drl  ) ) );
Package pkg = builder.getPackage();
org.drools.reteoo.RuleBaseImpl reteooRuleBase = null;
org.drools.leaps.RuleBaseImpl leapsRuleBase = null;
RuleBase ruleBase = getRuleBase();
//org.drools.reteoo.RuleBaseImpl ruleBase = new org.drools.reteoo.RuleBaseImpl();
if (ruleBase instanceof org.drools.reteoo.RuleBaseImpl)
{
reteooRuleBase = (org.drools.reteoo.RuleBaseImpl)ruleBase;
}
else
if (ruleBase instanceof org.drools.leaps.RuleBaseImpl)
{
leapsRuleBase = (org.drools.leaps.RuleBaseImpl)ruleBase;
}
ruleBase.addPackage( pkg );
WorkingMemory workingMemory = ruleBase.newWorkingMemory();
if (reteooRuleBase != null)
{
assertEquals(1, reteooRuleBase.getPackages().length);
assertEquals(4, reteooRuleBase.getPackages().getRules().length);
reteooRuleBase.removeRule(  org.drools.test ,
Who likes Stilton  );
assertEquals(3, reteooRuleBase.getPackages().getRules().length);
reteooRuleBase.removeRule(  org.drools.test ,
like cheese  );
assertEquals(2, reteooRuleBase.getPackages().getRules().length);
reteooRuleBase.removePackage(  org.drools.test  );
assertEquals(0, reteooRuleBase.getPackages().length);
}
else
if (leapsRuleBase != null)
{
assertEquals(1, leapsRuleBase.getPackages().length);
assertEquals(4, leapsRuleBase.getPackages().getRules().length);
leapsRuleBase.removeRule(  org.drools.test ,
Who likes Stilton  );
assertEquals(3, leapsRuleBase.getPackages().getRules().length);
leapsRuleBase.removeRule(  org.drools.test ,
like cheese  );
assertEquals(2, leapsRuleBase.getPackages().getRules().length);
leapsRuleBase.removePackage(  org.drools.test  );
assertEquals(0, leapsRuleBase.getPackages().length);
}
}
