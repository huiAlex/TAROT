<Class>
    <Id>554</Id>
    <Package>groovy.servlet</Package>
    <ClassName>TemplateServlet</ClassName>
    <SuperClass>AbstractHttpServlet</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TemplateServlet  /** 
 * A generic servlet for serving (mostly HTML) templates. &lt;p&gt; It delegates work to a &lt;code&gt;groovy.text.TemplateEngine&lt;/code&gt; implementation processing HTTP requests. &lt;p&gt; &lt;h4&gt;Usage&lt;/h4&gt; &lt;p&gt; &lt;code&gt;helloworld.html&lt;/code&gt; is a headless HTML-like template &lt;pre&gt;&lt;code&gt; &amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;% 3.times { %&amp;gt; Hello World! &amp;lt;% } %&amp;gt; &amp;lt;br&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt; Minimal &lt;code&gt;web.xml&lt;/code&gt; example serving HTML-like templates &lt;pre&gt;&lt;code&gt; &amp;lt;web-app&amp;gt; &amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;template&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt;groovy.servlet.TemplateServlet&amp;lt;/servlet-class&amp;gt; &amp;lt;/servlet&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;template&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;*.html&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; &amp;lt;/web-app&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt; &lt;h4&gt;Template engine configuration&lt;/h4&gt; &lt;p&gt; By default, the TemplateServer uses the  {@link groovy.text.SimpleTemplateEngine}which interprets JSP-like templates. The init parameter &lt;code&gt;template.engine&lt;/code&gt; defines the fully qualified class name of the template to use: &lt;pre&gt; template.engine = [empty] - equals groovy.text.SimpleTemplateEngine template.engine = groovy.text.SimpleTemplateEngine template.engine = groovy.text.GStringTemplateEngine template.engine = groovy.text.XmlTemplateEngine &lt;/pre&gt; &lt;p&gt; &lt;h3&gt;Servlet Init Parameters&lt;/h3&gt; &lt;p&gt; &lt;h4&gt;Logging and extra-output options&lt;/h4&gt; &lt;p&gt; This implementation provides a verbosity flag switching log statements. The servlet init parameter name is: &lt;pre&gt; generated.by = true(default) | false &lt;/pre&gt; &lt;p&gt; &lt;h4&gt;Groovy Source Encoding Parameter&lt;/h4&gt; &lt;p&gt; The following servlet init parameter name can be used to specify the encoding TemplateServlet will use to read the template groovy source files: &lt;pre&gt; groovy.source.encoding &lt;/pre&gt;
 * @author Christian Stein
 * @author Guillaume Laforge
 * @version 2.0
 * @see TemplateServlet#setVariables(ServletBinding)
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>date</FieldName>
            <FieldType>Date</FieldType>
        </Field>
        <Field>
            <FieldName>hit</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>lastModified</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>length</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>template</FieldName>
            <FieldType>Template</FieldType>
        </Field>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>cache</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>engine</FieldName>
            <FieldType>TemplateEngine</FieldType>
        </Field>
        <Field>
            <FieldName>generateBy</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>fileEncodingParamVal</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GROOVY_SOURCE_ENCODING</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>TemplateCacheEntry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>Template</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TemplateCacheEntry</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>template</ParamName>
                    <ParamType>Template</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>timestamp</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>validate</MethodName>
            <MethodComment>/** 
 * Checks the passed file attributes against those cached ones.
 * @param file Other file handle to compare to the cached values. May be null in which case the validation is skipped.
 * @return &lt;code&gt;true&lt;/code&gt; if all measured values match, else &lt;code&gt;false&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TemplateServlet</MethodName>
            <MethodComment>/** 
 * Create new TemplateServlet.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findCachedTemplate</MethodName>
            <MethodComment>/** 
 * Find a cached template for a given key. If a &lt;code&gt;File&lt;/code&gt; is passed then any cached object is validated against the File to determine if it is out of date
 * @param key a unique key for the template, such as a file's absolutePath or a URL.
 * @param file a file to be used to determine if the cached template is stale. May be null.
 * @return The cached template, or null if there was no cached entry, or the entry was stale.
 */
</MethodComment>
            <ReturnType>Template</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Template [template=null]</InnerVar>
                <InnerVar>TemplateCacheEntry [entry=(TemplateCacheEntry)cache.get(key)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createAndStoreTemplate</MethodName>
            <MethodComment>/** 
 * Compile the template and store it in the cache.
 * @param key a unique key for the template, such as a file's absolutePath or a URL.
 * @param reader a reader for the template's source.
 * @param file a file to be used to determine if the cached template is stale. May be null.
 * @return the created template.
 * @throws Exception Any exception when creating the template.
 */
</MethodComment>
            <ReturnType>Template</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inputStream</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Reader [reader=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTemplate</MethodName>
            <MethodComment>/** 
 * Gets the template created by the underlying engine parsing the request. &lt;p&gt; This method looks up a simple (weak) hash map for an existing template object that matches the source file. If the source file didn't change in length and its last modified stamp hasn't changed compared to a precompiled template object, this template is used. Otherwise, there is no or an invalid template object cache entry, a new one is created by the underlying template engine. This new instance is put to the cache for consecutive calls.
 * @return The template that will produce the response text.
 * @param file The file containing the template source.
 * @throws ServletException If the request specified an invalid template source file
 */
</MethodComment>
            <ReturnType>Template</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [key=file.getAbsolutePath()]</InnerVar>
                <InnerVar>Template [template=findCachedTemplate(key,file)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ServletException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTemplate</MethodName>
            <MethodComment>/** 
 * Gets the template created by the underlying engine parsing the request. &lt;p&gt; This method looks up a simple (weak) hash map for an existing template object that matches the source URL. If there is no cache entry, a new one is created by the underlying template engine. This new instance is put to the cache for consecutive calls.
 * @return The template that will produce the response text.
 * @param url The URL containing the template source..
 * @throws ServletException If the request specified an invalid template source URL
 */
</MethodComment>
            <ReturnType>Template</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>url</ParamName>
                    <ParamType>URL</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [key=url.toString()]</InnerVar>
                <InnerVar>Template [template=findCachedTemplate(key,null)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ServletException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment>/** 
 * Initializes the servlet from hints the container passes. &lt;p&gt; Delegates to sub-init methods and parses the following parameters: &lt;ul&gt; &lt;li&gt; &lt;tt&gt;"generatedBy"&lt;/tt&gt; : boolean, appends "Generated by ..." to the HTML response text generated by this servlet. &lt;/li&gt; &lt;/ul&gt;
 * @param config Passed by the servlet container.
 * @throws ServletException if this method encountered difficulties
 * @see TemplateServlet#initTemplateEngine(ServletConfig)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>ServletConfig</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [value=config.getInitParameter("generated.by")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;log;["Servlet " + getClass().getName() + " initialized on "+ engine.getClass()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ServletException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initTemplateEngine</MethodName>
            <MethodComment>/** 
 * Creates the template engine. &lt;p&gt; Called by  {@link TemplateServlet#init(ServletConfig)} and returns just&lt;code&gt;new groovy.text.SimpleTemplateEngine()&lt;/code&gt; if the init parameter &lt;code&gt;template.engine&lt;/code&gt; is not set by the container configuration.
 * @param config Current servlet configuration passed by the container.
 * @return The underlying template engine or &lt;code&gt;null&lt;/code&gt; on error.
 */
</MethodComment>
            <ReturnType>TemplateEngine</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>ServletConfig</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=config.getInitParameter("template.engine")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>service</MethodName>
            <MethodComment>/** 
 * Services the request with a response. &lt;p&gt; First the request is parsed for the source file uri. If the specified file could not be found or can not be read an error message is sent as response.
 * @param request  The http request.
 * @param response The http response.
 * @throws IOException      if an input or output error occurs while the servlet is handling the HTTP request
 * @throws ServletException if the HTTP request cannot be handled
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>request</ParamName>
                    <ParamType>HttpServletRequest</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>response</ParamName>
                    <ParamType>HttpServletResponse</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Template [template]</InnerVar>
                <InnerVar>long [getMillis]</InnerVar>
                <InnerVar>String [name]</InnerVar>
                <InnerVar>File [file=super.getScriptUriAsFile(request)]</InnerVar>
                <InnerVar>ServletBinding [binding=new ServletBinding(request,response,servletContext)]</InnerVar>
                <InnerVar>Writer [out=(Writer)binding.getVariable("out")]</InnerVar>
                <InnerVar>long [makeMillis=System.currentTimeMillis()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setVariables;[binding]</InnerMethodInvoke>
                <InnerMethodInvoke>response;setContentType;[CONTENT_TYPE_TEXT_HTML + "; charset=" + encoding]</InnerMethodInvoke>
                <InnerMethodInvoke>response;setStatus;[HttpServletResponse.SC_OK]</InnerMethodInvoke>
                <InnerMethodInvoke>template.make(binding.getVariables());writeTo;[out]</InnerMethodInvoke>
                <InnerMethodInvoke>response;flushBuffer;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ServletException</ExceptionType>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>