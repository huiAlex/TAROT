<Class>
    <Id>733</Id>
    <Package>org.codehaus.groovy.classgen</Package>
    <ClassName>InnerClassVisitor</ClassName>
    <SuperClass>InnerClassVisitorHelper</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Opcodes</SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>sourceUnit</FieldName>
            <FieldType>SourceUnit</FieldType>
        </Field>
        <Field>
            <FieldName>classNode</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>PUBLIC_SYNTHETIC</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>thisField</FieldName>
            <FieldType>FieldNode</FieldType>
        </Field>
        <Field>
            <FieldName>currentMethod</FieldName>
            <FieldType>MethodNode</FieldType>
        </Field>
        <Field>
            <FieldName>currentField</FieldName>
            <FieldType>FieldNode</FieldType>
        </Field>
        <Field>
            <FieldName>processingObjInitStatements</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>inClosure</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>InnerClassVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cu</ParamName>
                    <ParamType>CompilationUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>su</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSourceUnit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SourceUnit</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InnerClassNode [innerClass=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitClosureExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>ClosureExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [inClosureOld=inClosure]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitObjectInitializerStatements</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shouldHandleImplicitThisForInnerClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cn</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InnerClassNode [innerClass=(InnerClassNode)cn]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitConstructorOrMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isConstructor</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;visitAnnotations;[node]</InnerMethodInvoke>
                <InnerMethodInvoke>null;visitClassCodeContainer;[node.getCode()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitField</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>FieldNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitProperty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>PropertyNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FieldNode [field=node.getField()]</InnerVar>
                <InnerVar>Expression [init=field.getInitialExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>field;setInitialValueExpression;[null]</InnerMethodInvoke>
                <InnerMethodInvoke>field;setInitialValueExpression;[init]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitConstructorCallExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <ParamType>ConstructorCallExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InnerClassNode [innerClass=(InnerClassNode)call.getType()]</InnerVar>
                <InnerVar>ClassNode [outerClass=innerClass.getOuterClass()]</InnerVar>
                <InnerVar>ClassNode [superClass=innerClass.getSuperClass()]</InnerVar>
                <InnerVar>VariableScope [scope=innerClass.getVariableScope()]</InnerVar>
                <InnerVar>List&lt;Expression&gt; [expressions=((TupleExpression)call.getArguments()).getExpressions()]</InnerVar>
                <InnerVar>BlockStatement [block=new BlockStatement()]</InnerVar>
                <InnerVar>int [additionalParamCount=1 + scope.getReferencedLocalVariablesCount()]</InnerVar>
                <InnerVar>List&lt;Parameter&gt; [parameters=new ArrayList&lt;Parameter&gt;(expressions.size() + additionalParamCount)]</InnerVar>
                <InnerVar>List&lt;Expression&gt; [superCallArguments=new ArrayList&lt;Expression&gt;(expressions.size())]</InnerVar>
                <InnerVar>int [pCount=additionalParamCount]</InnerVar>
                <InnerVar>ConstructorCallExpression [cce=new ConstructorCallExpression(ClassNode.SUPER,new TupleExpression(superCallArguments))]</InnerVar>
                <InnerVar>boolean [isStatic=isStaticThis(innerClass,scope)]</InnerVar>
                <InnerVar>ClassNode [outerClassType=getClassNode(outerClass,isStatic)]</InnerVar>
                <InnerVar>Parameter [thisParameter=new Parameter(outerClassType,"p" + pCount)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>block;addStatement;[new ExpressionStatement(cce)]</InnerMethodInvoke>
                <InnerMethodInvoke>expressions;add;[pCount, VariableExpression.THIS_EXPRESSION]</InnerMethodInvoke>
                <InnerMethodInvoke>parameters;add;[pCount, thisParameter]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addFieldInit;[thisParameter, thisField, block]</InnerMethodInvoke>
                <InnerMethodInvoke>innerClass;addConstructor;[ACC_SYNTHETIC, parameters.toArray(new Parameter[parameters.size()]), ClassNode.EMPTY_ARRAY, block]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isStaticThis</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>innerClass</ParamName>
                    <ParamType>InnerClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scope</ParamName>
                    <ParamType>VariableScope</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [ret=innerClass.isStaticClass()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>passThisReference</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <ParamType>ConstructorCallExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [cn=call.getType().redirect()]</InnerVar>
                <InnerVar>boolean [isInStaticContext=true]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;insertThis0ToSuperCall;[call, cn]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>insertThis0ToSuperCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <ParamType>ConstructorCallExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cn</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [parent=classNode]</InnerVar>
                <InnerVar>int [level=0]</InnerVar>
                <InnerVar>Expression [argsExp=call.getArguments()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>