<Class>
    <Id>850</Id>
    <Package>groovy.lang</Package>
    <ClassName>Range</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>List</SuperInterface>
        <SuperInterface>T</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Range  /** 
 * A Range represents the list of all items obtained by starting from a &lt;code&gt;from&lt;/code&gt; value and calling &lt;code&gt;next()&lt;/code&gt; successively until you reach the &lt;code&gt;to&lt;/code&gt; value. For a reverse range, the list is obtained by starting at the &lt;code&gt;to&lt;/code&gt; value and successively calling &lt;code&gt;previous()&lt;/code&gt; until the &lt;code&gt;from&lt;/code&gt; value is reached.
 * @author &lt;a href="mailto:james@coredevelopers.net"&gt;James Strachan&lt;/a&gt;
 * @version $Revision$
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getFrom</MethodName>
            <MethodComment>/** 
 * The lower value in the range.
 * @return the lower value in the range.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTo</MethodName>
            <MethodComment>/** 
 * The upper value in the range.
 * @return the upper value in the range
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isReverse</MethodName>
            <MethodComment>/** 
 * Indicates whether this is a reverse range which iterates backwards starting from the to value and ending on the from value
 * @return &lt;code&gt;true&lt;/code&gt; if this is a reverse range
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>containsWithinBounds</MethodName>
            <MethodComment>/** 
 * Indicates whether an object is greater than or equal to the &lt;code&gt;from&lt;/code&gt; value for the range and less than or equal to the &lt;code&gt;to&lt;/code&gt; value.
 * @param o the object to check against the boundaries of the range
 * @return &lt;code&gt;true&lt;/code&gt; if the object is between the from and to values
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>step</MethodName>
            <MethodComment>/** 
 * Steps through the range, calling a closure for each number.
 * @param step    the amount by which to step. If negative, steps through therange backwards.
 * @param closure the {@link Closure} to call
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>step</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>step</MethodName>
            <MethodComment>/** 
 * Forms a list by stepping through the range by the indicated interval.
 * @param step the amount by which to step. If negative, steps through therange backwards.
 * @return the list formed by stepping through the range by the indicatedinterval.
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>step</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>inspect</MethodName>
            <MethodComment>/** 
 * @return the verbose {@link String} representation of this {@link Range} as would be typed into a consoleto create the  {@link Range} instance
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>