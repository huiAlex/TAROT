<Class>
    <Id>801</Id>
    <Package>org.apache.commons.cli</Package>
    <ClassName>GroovyInternalPosixParser</ClassName>
    <SuperClass>Parser</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GroovyInternalPosixParser  /** 
 * DO NOT USE. Hacked version until Commons CLI 1.3 is released. NOTE: this is a mirror copy of org.codehaus.groovy.cli.GroovyPosixParser DON'T MAKE CHANGES without keeping the other file in sync! The class GroovyPosixParser provides an implementation of the {@link Parser#flatten(Options,String[],boolean) flatten} method.
 * @author John Keyes (john at integralsource.com)
 * @author Paul King (Groovy hacks/fixes)
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>tokens</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>eatTheRest</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>currentOption</FieldName>
            <FieldType>Option</FieldType>
        </Field>
        <Field>
            <FieldName>options</FieldName>
            <FieldType>Options</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment>/** 
 * Resets the members to their original state i.e. remove all of &lt;code&gt;tokens&lt;/code&gt; entries and set &lt;code&gt;eatTheRest&lt;/code&gt; to false.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tokens;clear;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>flatten</MethodName>
            <MethodComment>/** 
 * An implementation of  {@link Parser}'s abstract {@link Parser#flatten(Options,String[],boolean) flatten} method.&lt;p&gt; The following are the rules used by this flatten method. &lt;ol&gt; &lt;li&gt;if &lt;code&gt;stopAtNonOption&lt;/code&gt; is &lt;b&gt;true&lt;/b&gt; then do not burst anymore of &lt;code&gt;arguments&lt;/code&gt; entries, just add each successive entry without further processing.  Otherwise, ignore &lt;code&gt;stopAtNonOption&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;if the current &lt;code&gt;arguments&lt;/code&gt; entry is "&lt;b&gt;--&lt;/b&gt;" just add the entry to the list of processed tokens&lt;/li&gt; &lt;li&gt;if the current &lt;code&gt;arguments&lt;/code&gt; entry is "&lt;b&gt;-&lt;/b&gt;" just add the entry to the list of processed tokens&lt;/li&gt; &lt;li&gt;if the current &lt;code&gt;arguments&lt;/code&gt; entry is two characters in length and the first character is "&lt;b&gt;-&lt;/b&gt;" then check if this is a valid  {@link Option} id.  If it is a valid id, then add theentry to the list of processed tokens and set the current  {@link Option}member.  If it is not a valid id and &lt;code&gt;stopAtNonOption&lt;/code&gt; is true, then the remaining entries are copied to the list of processed tokens.  Otherwise, the current entry is ignored.&lt;/li&gt; &lt;li&gt;if the current &lt;code&gt;arguments&lt;/code&gt; entry is more than two characters in length and the first character is "&lt;b&gt;-&lt;/b&gt;" then we need to burst the entry to determine its constituents.  For more information on the bursting algorithm see {@link GroovyInternalPosixParser#burstToken(String,boolean) burstToken}.&lt;/li&gt; &lt;li&gt;if the current &lt;code&gt;arguments&lt;/code&gt; entry is not handled by any of the previous rules, then the entry is added to the list of processed tokens.&lt;/li&gt; &lt;/ol&gt;
 * @param options The command line {@link Options}
 * @param arguments The command line arguments to be parsed
 * @param stopAtNonOption Specifies whether to stop flattening when an non option is found.
 * @return The flattened &lt;code&gt;arguments&lt;/code&gt; String array.
 */
</MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>options</ParamName>
                    <ParamType>Options</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stopAtNonOption</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Iterator [iter=Arrays.asList(arguments).iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;init;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>gobble</MethodName>
            <MethodComment>/** 
 * Adds the remaining tokens to the processed tokens list.
 * @param iter An iterator over the remaining tokens
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>iter</ParamName>
                    <ParamType>Iterator</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processNonOptionToken</MethodName>
            <MethodComment>/** 
 * Add the special token "&lt;b&gt;--&lt;/b&gt;" and the current &lt;code&gt;value&lt;/code&gt; to the processed tokens list. Then add all the remaining &lt;code&gt;argument&lt;/code&gt; values to the processed tokens list.
 * @param value The current token
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stopAtNonOption</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tokens;add;[value]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processOptionToken</MethodName>
            <MethodComment>/** 
 * If an  {@link Option} exists for &lt;code&gt;token&lt;/code&gt; then add the token to the processed list.&lt;p&gt; If an  {@link Option} does not exist and &lt;code&gt;stopAtNonOption&lt;/code&gt;is set then add the remaining tokens to the processed tokens list directly.
 * @param token The current option token
 * @param stopAtNonOption Specifies whether flattening should halt at the first non option.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>token</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stopAtNonOption</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tokens;add;[token]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>burstToken</MethodName>
            <MethodComment>/** 
 * Breaks &lt;code&gt;token&lt;/code&gt; into its constituent parts using the following algorithm. &lt;ul&gt; &lt;li&gt;ignore the first character ("&lt;b&gt;-&lt;/b&gt;")&lt;/li&gt; &lt;li&gt;foreach remaining character check if an  {@link Option}exists with that id.&lt;/li&gt; &lt;li&gt;if an  {@link Option} does exist then add that characterprepended with "&lt;b&gt;-&lt;/b&gt;" to the list of processed tokens.&lt;/li&gt; &lt;li&gt;if the  {@link Option} can have an argument value and thereare remaining characters in the token then add the remaining characters as a token to the list of processed tokens.&lt;/li&gt; &lt;li&gt;if an  {@link Option} does &lt;b&gt;NOT&lt;/b&gt; exist &lt;b&gt;AND&lt;/b&gt;&lt;code&gt;stopAtNonOption&lt;/code&gt; &lt;b&gt;IS&lt;/b&gt; set then add the special token "&lt;b&gt;--&lt;/b&gt;" followed by the remaining characters and also the remaining tokens directly to the processed tokens list.&lt;/li&gt; &lt;li&gt;if an  {@link Option} does &lt;b&gt;NOT&lt;/b&gt; exist &lt;b&gt;AND&lt;/b&gt;&lt;code&gt;stopAtNonOption&lt;/code&gt; &lt;b&gt;IS NOT&lt;/b&gt; set then add that character prepended with "&lt;b&gt;-&lt;/b&gt;".&lt;/li&gt; &lt;/ul&gt;
 * @param token The current token to be &lt;b&gt;burst&lt;/b&gt;
 * @param stopAtNonOption Specifies whether to stop processingat the first non-Option encountered.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>token</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stopAtNonOption</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>