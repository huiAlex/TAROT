<Class>
    <Id>729</Id>
    <Package>org.codehaus.groovy.transform.trait</Package>
    <ClassName>TraitComposer</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TraitComposer  /** 
 * This class contains a static utility method  {@link #doExtendTraits(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.control.SourceUnit,org.codehaus.groovy.control.CompilationUnit)}aimed at generating code for a classnode implementing a trait.
 * @author CÃ©dric Champeau
 * @since 2.3.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>GETTER_FIRST_COMPARATOR</FieldName>
            <FieldType>Comparator</FieldType>
        </Field>
        <Field>
            <FieldName>GETTER_FIRST_COMPARATOR</FieldName>
            <FieldType>MethodNode</FieldType>
        </Field>
        <Field>
            <FieldName>COMPILESTATIC_CLASSNODE</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o1</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>o2</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doExtendTraits</MethodName>
            <MethodComment>/** 
 * Given a class node, if this class node implements a trait, then generate all the appropriate code which delegates calls to the trait. It is safe to call this method on a class node which does not implement a trait.
 * @param cNode a class node
 * @param unit the source unit
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cu</ParamName>
                    <ParamType>CompilationUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [isItselfTrait=Traits.isTrait(cNode)]</InnerVar>
                <InnerVar>SuperCallTraitTransformer [superCallTransformer=new SuperCallTraitTransformer(unit)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findTraits</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>LinkedHashSet&lt;ClassNode&gt; [interfaces=new LinkedHashSet&lt;ClassNode&gt;()]</InnerVar>
                <InnerVar>List&lt;ClassNode&gt; [traits=new LinkedList&lt;ClassNode&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Traits;collectAllInterfacesReverseOrder;[cNode, interfaces]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkTraitAllowed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bottomTrait</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unit</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [superClass=bottomTrait.getSuperClass()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>applyTrait</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>trait</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>helpers</ParamName>
                    <ParamType>TraitHelpersTuple</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [helperClassNode=helpers.getHelper()]</InnerVar>
                <InnerVar>ClassNode [fieldHelperClassNode=helpers.getFieldHelper()]</InnerVar>
                <InnerVar>Map&lt;String,ClassNode&gt; [genericsSpec=GenericsUtils.createGenericsSpec(cNode)]</InnerVar>
                <InnerVar>MethodCallExpression [staticInitCall=new MethodCallExpression(new ClassExpression(helperClassNode),Traits.STATIC_INIT_METHOD,new ArgumentListExpression(new ClassExpression(cNode)))]</InnerVar>
                <InnerVar>MethodNode [staticInitMethod=new MethodNode(Traits.STATIC_INIT_METHOD,Opcodes.ACC_STATIC | Opcodes.ACC_PUBLIC,ClassHelper.VOID_TYPE,new Parameter[]{new Parameter(ClassHelper.CLASS_Type,"clazz")},ClassNode.EMPTY_ARRAY,EmptyStatement.INSTANCE)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cNode;addObjectInitializerStatements;[new ExpressionStatement(new MethodCallExpression(new ClassExpression(helperClassNode),Traits.INIT_METHOD,new ArgumentListExpression(new VariableExpression("this"))))]</InnerMethodInvoke>
                <InnerMethodInvoke>staticInitMethod;setDeclaringClass;[helperClassNode]</InnerMethodInvoke>
                <InnerMethodInvoke>staticInitCall;setMethodTarget;[staticInitMethod]</InnerMethodInvoke>
                <InnerMethodInvoke>cNode;addStaticInitializerStatements;[Collections.&lt;Statement&gt;singletonList(new ExpressionStatement(staticInitCall)), false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createForwarderMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>trait</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>targetNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>helperMethod</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>originalMethod</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>helperClassNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>genericsSpec</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>helperMethodParams</ParamName>
                    <ParamType>Parameter[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>traitMethodParams</ParamName>
                    <ParamType>Parameter[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forwarderParams</ParamName>
                    <ParamType>Parameter[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>helperMethodArgList</ParamName>
                    <ParamType>ArgumentListExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodCallExpression [mce=new MethodCallExpression(new ClassExpression(helperClassNode),helperMethod.getName(),helperMethodArgList)]</InnerVar>
                <InnerVar>ClassNode[] [exceptionNodes=correctToGenericsSpecRecurse(genericsSpec,copyExceptions(helperMethod.getExceptions()))]</InnerVar>
                <InnerVar>ClassNode [fixedReturnType=correctToGenericsSpecRecurse(genericsSpec,helperMethod.getReturnType())]</InnerVar>
                <InnerVar>Expression [forwardExpression=genericsSpec.isEmpty() ? mce : new CastExpression(fixedReturnType,mce)]</InnerVar>
                <InnerVar>int [access=helperMethod.getModifiers()]</InnerVar>
                <InnerVar>boolean [isHelperForStaticMethod=helperMethodParams[0].getOriginType().equals(ClassHelper.CLASS_Type)]</InnerVar>
                <InnerVar>MethodNode [forwarder=new MethodNode(helperMethod.getName(),access,fixedReturnType,forwarderParams,exceptionNodes,new ExpressionStatement(forwardExpression))]</InnerVar>
                <InnerVar>List&lt;AnnotationNode&gt; [copied=new LinkedList&lt;AnnotationNode&gt;()]</InnerVar>
                <InnerVar>List&lt;AnnotationNode&gt; [notCopied=Collections.emptyList()]</InnerVar>
                <InnerVar>AnnotationNode [bridgeAnnotation=new AnnotationNode(Traits.TRAITBRIDGE_CLASSNODE)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mce;setImplicitThis;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>GeneralUtils;copyAnnotatedNodeAnnotations;[helperMethod, copied, notCopied]</InnerMethodInvoke>
                <InnerMethodInvoke>bridgeAnnotation;addMember;["traitClass", new ClassExpression(trait)]</InnerMethodInvoke>
                <InnerMethodInvoke>bridgeAnnotation;addMember;["desc", new ConstantExpression(BytecodeHelper.getMethodDescriptor(helperMethod.getReturnType(),traitMethodParams))]</InnerMethodInvoke>
                <InnerMethodInvoke>forwarder;addAnnotation;[bridgeAnnotation]</InnerMethodInvoke>
                <InnerMethodInvoke>null;createSuperForwarder;[targetNode, forwarder, genericsSpec]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeNonPlaceHolders</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>GenericsType[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>oldTypes</ParamName>
                    <ParamType>GenericsType[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ArrayList&lt;GenericsType&gt; [l=new ArrayList&lt;GenericsType&gt;(Arrays.asList(oldTypes))]</InnerVar>
                <InnerVar>Iterator&lt;GenericsType&gt; [it=l.iterator()]</InnerVar>
                <InnerVar>boolean [modified=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createSuperForwarder</MethodName>
            <MethodComment>/** 
 * Creates, if necessary, a super forwarder method, for stackable traits.
 * @param forwarder a forwarder method
 * @param genericsSpec
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>targetNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forwarder</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>genericsSpec</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;ClassNode&gt; [interfaces=new ArrayList&lt;ClassNode&gt;(Traits.collectAllInterfacesReverseOrder(targetNode,new LinkedHashSet&lt;ClassNode&gt;()))]</InnerVar>
                <InnerVar>String [name=forwarder.getName()]</InnerVar>
                <InnerVar>Parameter[] [forwarderParameters=forwarder.getParameters()]</InnerVar>
                <InnerVar>LinkedHashSet&lt;ClassNode&gt; [traits=new LinkedHashSet&lt;ClassNode&gt;()]</InnerVar>
                <InnerVar>List&lt;MethodNode&gt; [superForwarders=new LinkedList&lt;MethodNode&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doCreateSuperForwarder</MethodName>
            <MethodComment>/** 
 * Creates a method to dispatch to "super traits" in a "stackable" fashion. The generated method looks like this: &lt;p&gt; &lt;code&gt;ReturnType trait$super$method(Class clazz, Arg1 arg1, Arg2 arg2, ...) { if (SomeTrait.is(A) { return SomeOtherTrait$Trait$Helper.method(this, arg1, arg2) } super.method(arg1,arg2) }&lt;/code&gt; &lt;/p&gt;
 * @param targetNode
 * @param forwarderMethod
 * @param interfacesToGenerateForwarderFor
 * @param genericsSpec
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>targetNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>forwarderMethod</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>interfacesToGenerateForwarderFor</ParamName>
                    <ParamType>ClassNode[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>genericsSpec</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Parameter[] [parameters=forwarderMethod.getParameters()]</InnerVar>
                <InnerVar>Parameter[] [superForwarderParams=new Parameter[parameters.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createSuperFallback</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>forwarderMethod</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>returnType</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ArgumentListExpression [args=new ArgumentListExpression()]</InnerVar>
                <InnerVar>Parameter[] [forwarderMethodParameters=forwarderMethod.getParameters()]</InnerVar>
                <InnerVar>BinaryExpression [instanceOfExpr=new BinaryExpression(new VariableExpression("this"),Token.newSymbol(Types.KEYWORD_INSTANCEOF,-1,-1),new ClassExpression(Traits.GENERATED_PROXY_CLASSNODE))]</InnerVar>
                <InnerVar>MethodCallExpression [superCall=new MethodCallExpression(new VariableExpression("super"),forwarderMethod.getName(),args)]</InnerVar>
                <InnerVar>CastExpression [proxyReceiver=new CastExpression(Traits.GENERATED_PROXY_CLASSNODE,new VariableExpression("this"))]</InnerVar>
                <InnerVar>MethodCallExpression [getProxy=new MethodCallExpression(proxyReceiver,"getProxyTarget",ArgumentListExpression.EMPTY_ARGUMENTS)]</InnerVar>
                <InnerVar>StaticMethodCallExpression [proxyCall=new StaticMethodCallExpression(ClassHelper.make(InvokerHelper.class),"invokeMethod",new ArgumentListExpression(getProxy,new ConstantExpression(forwarderMethod.getName()),new ArrayExpression(ClassHelper.OBJECT_TYPE,args.getExpressions())))]</InnerVar>
                <InnerVar>IfStatement [stmt=new IfStatement(new BooleanExpression(instanceOfExpr),new ExpressionStatement(new CastExpression(returnType,proxyCall)),new ExpressionStatement(superCall))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>superCall;setImplicitThis;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>getProxy;setImplicitThis;[true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createDelegatingForwarder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>forwarderMethod</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>next</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TraitHelpersTuple [helpers=Traits.findHelpers(next)]</InnerVar>
                <InnerVar>ArgumentListExpression [args=new ArgumentListExpression()]</InnerVar>
                <InnerVar>Parameter[] [forwarderMethodParameters=forwarderMethod.getParameters()]</InnerVar>
                <InnerVar>StaticMethodCallExpression [delegateCall=new StaticMethodCallExpression(helpers.getHelper(),forwarderMethod.getName(),args)]</InnerVar>
                <InnerVar>Statement [result]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>args;addExpression;[new VariableExpression("this")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>copyExceptions</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sourceExceptions</ParamName>
                    <ParamType>ClassNode[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode[] [exceptionNodes=new ClassNode[sourceExceptions == null ? 0 : sourceExceptions.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System;arraycopy;[sourceExceptions, 0, exceptionNodes, 0, exceptionNodes.length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shouldSkipMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Parameter[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findDefaultMethodFromInterface</MethodName>
            <MethodComment>/** 
 * An utility method which tries to find a method with default implementation (in the Java 8 semantics).
 * @param cNode a class node
 * @param name the name of the method
 * @param params the parameters of the method
 * @return a method node corresponding to a default method if it exists
 */
</MethodComment>
            <ReturnType>MethodNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Parameter[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode[] [interfaces=cNode.getInterfaces()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isExistingProperty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Parameter[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [propertyName=methodName]</InnerVar>
                <InnerVar>boolean [getter=false]</InnerVar>
                <InnerVar>PropertyNode [pNode=cNode.getProperty(propertyName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>