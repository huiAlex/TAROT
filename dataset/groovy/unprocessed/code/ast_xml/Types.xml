<Class>
    <Id>902</Id>
    <Package>org.codehaus.groovy.syntax</Package>
    <ClassName>Types</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Types  /** 
 * Typing information for the CST system.  The types here are those used by CSTNode, Token, and Reduction.
 * @author &lt;a href="mailto:bob@werken.com"&gt;bob mcwhirter&lt;/a&gt;
 * @author &lt;a href="mailto:cpoirier@dreaming.org"&gt;Chris Poirier&lt;/a&gt;
 * @version $Id$
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>EOF</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>UNKNOWN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>NEWLINE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LEFT_CURLY_BRACE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RIGHT_CURLY_BRACE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LEFT_SQUARE_BRACKET</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RIGHT_SQUARE_BRACKET</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LEFT_PARENTHESIS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RIGHT_PARENTHESIS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DOT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DOT_DOT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DOT_DOT_DOT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>NAVIGATE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>FIND_REGEX</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MATCH_REGEX</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>REGEX_PATTERN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>EQUAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>EQUALS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ASSIGN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMPARE_NOT_EQUAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMPARE_IDENTICAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMPARE_NOT_IDENTICAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMPARE_EQUAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMPARE_LESS_THAN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMPARE_LESS_THAN_EQUAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMPARE_GREATER_THAN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMPARE_GREATER_THAN_EQUAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMPARE_TO</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>NOT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LOGICAL_OR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LOGICAL_AND</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LOGICAL_OR_EQUAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LOGICAL_AND_EQUAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PLUS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MINUS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MULTIPLY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DIVIDE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>INTDIV</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MOD</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>STAR_STAR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>POWER</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PLUS_EQUAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MINUS_EQUAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MULTIPLY_EQUAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DIVIDE_EQUAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>INTDIV_EQUAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MOD_EQUAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>POWER_EQUAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PLUS_PLUS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PREFIX_PLUS_PLUS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>POSTFIX_PLUS_PLUS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PREFIX_PLUS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MINUS_MINUS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PREFIX_MINUS_MINUS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>POSTFIX_MINUS_MINUS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PREFIX_MINUS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LEFT_SHIFT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RIGHT_SHIFT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RIGHT_SHIFT_UNSIGNED</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LEFT_SHIFT_EQUAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RIGHT_SHIFT_EQUAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RIGHT_SHIFT_UNSIGNED_EQUAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>STAR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMMA</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COLON</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SEMICOLON</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>QUESTION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PIPE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DOUBLE_PIPE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>BITWISE_OR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>BITWISE_AND</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>BITWISE_XOR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>BITWISE_OR_EQUAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>BITWISE_AND_EQUAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>BITWISE_XOR_EQUAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>BITWISE_NEGATION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>STRING</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>IDENTIFIER</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>INTEGER_NUMBER</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DECIMAL_NUMBER</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_PRIVATE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_PROTECTED</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_PUBLIC</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_ABSTRACT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_FINAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_NATIVE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_TRANSIENT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_VOLATILE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_SYNCHRONIZED</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_STATIC</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_DEF</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_DEFMACRO</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_CLASS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_INTERFACE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_MIXIN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_IMPLEMENTS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_EXTENDS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_THIS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_SUPER</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_INSTANCEOF</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_PROPERTY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_NEW</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_PACKAGE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_IMPORT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_AS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_RETURN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_IF</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_ELSE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_DO</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_WHILE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_FOR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_IN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_BREAK</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_CONTINUE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_SWITCH</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_CASE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_DEFAULT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_TRY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_CATCH</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_FINALLY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_THROW</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_THROWS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_ASSERT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_VOID</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_BOOLEAN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_BYTE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_SHORT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_INT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_LONG</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_FLOAT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_DOUBLE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_CHAR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_TRUE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_FALSE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_NULL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_CONST</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_GOTO</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYNTH_COMPILATION_UNIT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYNTH_CLASS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYNTH_INTERFACE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYNTH_MIXIN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYNTH_METHOD</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYNTH_PROPERTY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYNTH_PARAMETER_DECLARATION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYNTH_LIST</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYNTH_MAP</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYNTH_GSTRING</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYNTH_METHOD_CALL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYNTH_CAST</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYNTH_BLOCK</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYNTH_CLOSURE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYNTH_LABEL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYNTH_TERNARY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYNTH_TUPLE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYNTH_VARIABLE_DECLARATION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>GSTRING_START</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>GSTRING_END</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>GSTRING_EXPRESSION_START</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>GSTRING_EXPRESSION_END</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ANY</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>NOT_EOF</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>GENERAL_END_OF_STATEMENT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ANY_END_OF_STATEMENT</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ASSIGNMENT_OPERATOR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMPARISON_OPERATOR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MATH_OPERATOR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LOGICAL_OPERATOR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RANGE_OPERATOR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>REGEX_COMPARISON_OPERATOR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DEREFERENCE_OPERATOR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>BITWISE_OPERATOR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PREFIX_OPERATOR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>POSTFIX_OPERATOR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>INFIX_OPERATOR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PREFIX_OR_INFIX_OPERATOR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PURE_PREFIX_OPERATOR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYMBOL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LITERAL</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>NUMBER</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SIGN</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>NAMED_VALUE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>TRUTH_VALUE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PRIMITIVE_TYPE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>CREATABLE_PRIMITIVE_TYPE</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LOOP</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RESERVED_KEYWORD</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_IDENTIFIER</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYNTHETIC</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>TYPE_DECLARATION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DECLARATION_MODIFIER</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>TYPE_NAME</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>CREATABLE_TYPE_NAME</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>MATCHED_CONTAINER</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LEFT_OF_MATCHED_CONTAINER</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>RIGHT_OF_MATCHED_CONTAINER</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>EXPRESSION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>OPERATOR_EXPRESSION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SYNTH_EXPRESSION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORD_EXPRESSION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>LITERAL_EXPRESSION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ARRAY_EXPRESSION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SIMPLE_EXPRESSION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>COMPLEX_EXPRESSION</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PARAMETER_TERMINATORS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>ARRAY_ITEM_TERMINATORS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>TYPE_LIST_TERMINATORS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>OPTIONAL_DATATYPE_FOLLOWERS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SWITCH_BLOCK_TERMINATORS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>SWITCH_ENTRIES</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>METHOD_CALL_STARTERS</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>UNSAFE_OVER_NEWLINES</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PRECLUDES_CAST_OPERATOR</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>TEXTS</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>TEXTS</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
        <Field>
            <FieldName>LOOKUP</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>LOOKUP</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORDS</FieldName>
            <FieldType>Set</FieldType>
        </Field>
        <Field>
            <FieldName>KEYWORDS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>DESCRIPTIONS</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>DESCRIPTIONS</FieldName>
            <FieldType>Integer</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ofType</MethodName>
            <MethodComment>/** 
 * Given two types, returns true if the second describes the first.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>specific</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>general</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>canMean</MethodName>
            <MethodComment>/** 
 * Given two types, returns true if the first can be viewed as the second. NOTE that &lt;code&gt;canMean()&lt;/code&gt; is orthogonal to &lt;code&gt;ofType()&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>actual</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>preferred</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makePrefix</MethodName>
            <MethodComment>/** 
 * Converts a node from a generic type to a specific prefix type. Throws a &lt;code&gt;GroovyBugError&lt;/code&gt; if the type can't be converted and requested.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>CSTNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>throwIfInvalid</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makePostfix</MethodName>
            <MethodComment>/** 
 * Converts a node from a generic type to a specific postfix type. Throws a &lt;code&gt;GroovyBugError&lt;/code&gt; if the type can't be converted.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>CSTNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>throwIfInvalid</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPrecedence</MethodName>
            <MethodComment>/** 
 * Returns the precedence of the specified operator.  Non-operator's will receive -1 or a GroovyBugError, depending on your preference.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>throwIfInvalid</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getKeywords</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isKeyword</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lookup</MethodName>
            <MethodComment>/** 
 * Returns the type for the specified symbol/keyword text.  Returns UNKNOWN if the text isn't found.  You can filter finds on a type.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [type=UNKNOWN]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lookupKeyword</MethodName>
            <MethodComment>/** 
 * Returns the type for the specified keyword text.  Returns UNKNOWN if the text isn't found.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>lookupSymbol</MethodName>
            <MethodComment>/** 
 * Returns the type for the specified symbol text.  Returns UNKNOWN if the text isn't found.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getText</MethodName>
            <MethodComment>/** 
 * Returns the text for the specified type.  Returns "" if the text isn't found.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [text=""]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addTranslation</MethodName>
            <MethodComment>/** 
 * Adds a element to the TEXTS and LOOKUP.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>TEXTS;put;[type, text]</InnerMethodInvoke>
                <InnerMethodInvoke>LOOKUP;put;[text, type]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addKeyword</MethodName>
            <MethodComment>/** 
 * Adds a element to the KEYWORDS, TEXTS and LOOKUP.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>KEYWORDS;add;[text]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addTranslation;[text, type]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDescription</MethodName>
            <MethodComment>/** 
 * Gets the description for the specified type.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addDescription</MethodName>
            <MethodComment>/** 
 * Adds a description to the set.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>description</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>