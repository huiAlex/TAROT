<Class>
    <Id>1089</Id>
    <Package>org.codehaus.groovy.classgen.asm</Package>
    <ClassName>StatementWriter</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>iteratorNextMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>iteratorHasNextMethod</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>controller</FieldName>
            <FieldType>WriterController</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>StatementWriter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>controller</ParamName>
                    <ParamType>WriterController</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeStatementLabel</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=statement.getStatementLabel()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeBlockStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>block</ParamName>
                    <ParamType>BlockStatement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompileStack [compileStack=controller.getCompileStack()]</InnerVar>
                <InnerVar>int [mark=controller.getOperandStack().getStackLength()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;writeStatementLabel;[block]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;pushVariableScope;[block.getVariableScope()]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;pop;[]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();popDownTo;[mark]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeForStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>loop</ParamName>
                    <ParamType>ForStatement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Parameter [loopVar=loop.getVariable()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeIteratorHasNext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>iteratorHasNextMethod;call;[mv]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeIteratorNext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>iteratorNextMethod;call;[mv]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeForInLoop</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>loop</ParamName>
                    <ParamType>ForStatement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompileStack [compileStack=controller.getCompileStack()]</InnerVar>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>BytecodeVariable [variable=compileStack.defineVariable(loop.getVariable(),false)]</InnerVar>
                <InnerVar>MethodCallExpression [iterator=new MethodCallExpression(loop.getCollectionExpression(),"iterator",new ArgumentListExpression())]</InnerVar>
                <InnerVar>int [iteratorIdx=compileStack.defineTemporaryVariable("iterator",ClassHelper.Iterator_TYPE,true)]</InnerVar>
                <InnerVar>Label [continueLabel=compileStack.getContinueLabel()]</InnerVar>
                <InnerVar>Label [breakLabel=compileStack.getBreakLabel()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getAcg();onLineNumber;[loop, "visitForLoop"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeStatementLabel;[loop]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;pushLoop;[loop.getVariableScope(), loop.getStatementLabels()]</InnerMethodInvoke>
                <InnerMethodInvoke>iterator;visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;doGroovyCast;[ClassHelper.Iterator_TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[continueLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, iteratorIdx]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeIteratorHasNext;[mv]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFEQ, breakLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, iteratorIdx]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeIteratorNext;[mv]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;push;[ClassHelper.OBJECT_TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;storeVar;[variable]</InnerMethodInvoke>
                <InnerMethodInvoke>loop.getLoopBlock();visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, continueLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[breakLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;pop;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeForLoopWithClosureList</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>loop</ParamName>
                    <ParamType>ForStatement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>ClosureListExpression [clExpr=(ClosureListExpression)loop.getCollectionExpression()]</InnerVar>
                <InnerVar>List [expressions=clExpr.getExpressions()]</InnerVar>
                <InnerVar>int [size=expressions.size()]</InnerVar>
                <InnerVar>int [condIndex=(size - 1) / 2]</InnerVar>
                <InnerVar>Label [continueLabel=controller.getCompileStack().getContinueLabel()]</InnerVar>
                <InnerVar>Label [breakLabel=controller.getCompileStack().getBreakLabel()]</InnerVar>
                <InnerVar>Label [cond=new Label()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getAcg();onLineNumber;[loop, "visitForLoop"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeStatementLabel;[loop]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();pushLoop;[loop.getVariableScope(), loop.getStatementLabels()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();pushVariableScope;[clExpr.getVariableScope()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[cond]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();jump;[IFEQ, breakLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>loop.getLoopBlock();visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[continueLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, cond]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[breakLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();pop;[]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();pop;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitExpressionOrStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeWhileLoop</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>loop</ParamName>
                    <ParamType>WhileStatement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>Label [continueLabel=controller.getCompileStack().getContinueLabel()]</InnerVar>
                <InnerVar>Label [breakLabel=controller.getCompileStack().getBreakLabel()]</InnerVar>
                <InnerVar>Expression [bool=loop.getBooleanExpression()]</InnerVar>
                <InnerVar>boolean [boolHandled=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getAcg();onLineNumber;[loop, "visitWhileLoop"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeStatementLabel;[loop]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();pushLoop;[loop.getStatementLabels()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[continueLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>loop.getLoopBlock();visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, continueLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[breakLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();pop;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeDoWhileLoop</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>loop</ParamName>
                    <ParamType>DoWhileStatement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>Label [breakLabel=controller.getCompileStack().getBreakLabel()]</InnerVar>
                <InnerVar>Label [continueLabel=controller.getCompileStack().getContinueLabel()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getAcg();onLineNumber;[loop, "visitDoWhileLoop"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeStatementLabel;[loop]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();pushLoop;[loop.getStatementLabels()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[continueLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>loop.getLoopBlock();visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>loop.getBooleanExpression();visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();jump;[IFEQ, continueLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[breakLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();pop;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeIfElse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ifElse</ParamName>
                    <ParamType>IfStatement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>Label [l0=controller.getOperandStack().jump(IFEQ)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getAcg();onLineNumber;[ifElse, "visitIfElse"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeStatementLabel;[ifElse]</InnerMethodInvoke>
                <InnerMethodInvoke>ifElse.getBooleanExpression();visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();pushBooleanExpression;[]</InnerMethodInvoke>
                <InnerMethodInvoke>ifElse.getIfBlock();visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();pop;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeTryCatchFinally</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <ParamType>TryCatchStatement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>CompileStack [compileStack=controller.getCompileStack()]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>Statement [tryStatement=statement.getTryStatement()]</InnerVar>
                <InnerVar>Statement [finallyStatement=statement.getFinallyStatement()]</InnerVar>
                <InnerVar>Label [tryStart=new Label()]</InnerVar>
                <InnerVar>BlockRecorder [tryBlock=makeBlockRecorder(finallyStatement)]</InnerVar>
                <InnerVar>Label [finallyStart=new Label()]</InnerVar>
                <InnerVar>Label [tryEnd=new Label()]</InnerVar>
                <InnerVar>BlockRecorder [catches=makeBlockRecorder(finallyStatement)]</InnerVar>
                <InnerVar>Label [catchAny=new Label()]</InnerVar>
                <InnerVar>Label [skipCatchAll=new Label()]</InnerVar>
                <InnerVar>int [anyExceptionIndex=compileStack.defineTemporaryVariable("exception",true)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getAcg();onLineNumber;[statement, "visitTryCatchFinally"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeStatementLabel;[statement]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[tryStart]</InnerMethodInvoke>
                <InnerMethodInvoke>tryBlock;startRange;[tryStart]</InnerMethodInvoke>
                <InnerMethodInvoke>tryStatement;visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, finallyStart]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[tryEnd]</InnerMethodInvoke>
                <InnerMethodInvoke>tryBlock;closeRange;[tryEnd]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();pop;[]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;writeExceptionTable;[tryBlock, catchAny, null]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;writeExceptionTable;[catches, catchAny, null]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;pop;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[finallyStart]</InnerMethodInvoke>
                <InnerMethodInvoke>finallyStatement;visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[NOP]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, skipCatchAll]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[catchAny]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;push;[ClassHelper.OBJECT_TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>finallyStatement;visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, anyExceptionIndex]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ATHROW]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[skipCatchAll]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeBlockRecorder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BlockRecorder</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>finallyStatement</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BlockRecorder [block=new BlockRecorder()]</InnerVar>
                <InnerVar>Runnable [tryRunner=new Runnable(){
  public void run(){
    controller.getCompileStack().pushBlockRecorderVisit(block);
    finallyStatement.visit(controller.getAcg());
    controller.getCompileStack().popBlockRecorderVisit(block);
  }
}
]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getCompileStack();pushBlockRecorder;[block]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getCompileStack();pushBlockRecorderVisit;[block]</InnerMethodInvoke>
                <InnerMethodInvoke>finallyStatement;visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();popBlockRecorderVisit;[block]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeSwitch</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <ParamType>SwitchStatement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Label [breakLabel=controller.getCompileStack().pushSwitch()]</InnerVar>
                <InnerVar>int [switchVariableIndex=controller.getCompileStack().defineTemporaryVariable("switch",true)]</InnerVar>
                <InnerVar>List [caseStatements=statement.getCaseStatements()]</InnerVar>
                <InnerVar>int [caseCount=caseStatements.size()]</InnerVar>
                <InnerVar>Label[] [labels=new Label[caseCount + 1]]</InnerVar>
                <InnerVar>int [i=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getAcg();onLineNumber;[statement, "visitSwitch"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeStatementLabel;[statement]</InnerMethodInvoke>
                <InnerMethodInvoke>statement.getExpression();visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>statement.getDefaultStatement();visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getMethodVisitor();visitLabel;[breakLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();pop;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeCaseStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <ParamType>CaseStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>switchVariableIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>thisLabel</ParamName>
                    <ParamType>Label</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nextLabel</ParamName>
                    <ParamType>Label</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>Label [l0=controller.getOperandStack().jump(IFEQ)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getAcg();onLineNumber;[statement, "visitCaseStatement"]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, switchVariableIndex]</InnerMethodInvoke>
                <InnerMethodInvoke>statement.getExpression();visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;box;[]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getBinaryExpressionHelper().getIsCaseMethod();call;[mv]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;replace;[ClassHelper.boolean_TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[thisLabel]</InnerMethodInvoke>
                <InnerMethodInvoke>statement.getCode();visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[l0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeBreak</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <ParamType>BreakStatement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=statement.getLabel()]</InnerVar>
                <InnerVar>Label [breakLabel=controller.getCompileStack().getNamedBreakLabel(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getAcg();onLineNumber;[statement, "visitBreakStatement"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeStatementLabel;[statement]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();applyFinallyBlocks;[breakLabel, true]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getMethodVisitor();visitJumpInsn;[GOTO, breakLabel]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeContinue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <ParamType>ContinueStatement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name=statement.getLabel()]</InnerVar>
                <InnerVar>Label [continueLabel=controller.getCompileStack().getContinueLabel()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getAcg();onLineNumber;[statement, "visitContinueStatement"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeStatementLabel;[statement]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getCompileStack();applyFinallyBlocks;[continueLabel, false]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getMethodVisitor();visitJumpInsn;[GOTO, continueLabel]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeSynchronized</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <ParamType>SynchronizedStatement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>CompileStack [compileStack=controller.getCompileStack()]</InnerVar>
                <InnerVar>int [index=compileStack.defineTemporaryVariable("synchronized",ClassHelper.OBJECT_TYPE,true)]</InnerVar>
                <InnerVar>Label [synchronizedStart=new Label()]</InnerVar>
                <InnerVar>Label [synchronizedEnd=new Label()]</InnerVar>
                <InnerVar>Label [catchAll=new Label()]</InnerVar>
                <InnerVar>Runnable [finallyPart=new Runnable(){
  public void run(){
    mv.visitVarInsn(ALOAD,index);
    mv.visitInsn(MONITOREXIT);
  }
}
]</InnerVar>
                <InnerVar>BlockRecorder [fb=new BlockRecorder(finallyPart)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getAcg();onLineNumber;[statement, "visitSynchronizedStatement"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeStatementLabel;[statement]</InnerMethodInvoke>
                <InnerMethodInvoke>statement.getExpression();visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();box;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, index]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[MONITORENTER]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[synchronizedStart]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[NOP]</InnerMethodInvoke>
                <InnerMethodInvoke>fb;startRange;[synchronizedStart]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;pushBlockRecorder;[fb]</InnerMethodInvoke>
                <InnerMethodInvoke>statement.getCode();visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>fb;closeRange;[catchAll]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;writeExceptionTable;[fb, catchAll, null]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;pop;[]</InnerMethodInvoke>
                <InnerMethodInvoke>finallyPart;run;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[GOTO, synchronizedEnd]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[catchAll]</InnerMethodInvoke>
                <InnerMethodInvoke>finallyPart;run;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ATHROW]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[synchronizedEnd]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, index]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[MONITOREXIT]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeAssert</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <ParamType>AssertStatement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getAcg();onLineNumber;[statement, "visitAssertStatement"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeStatementLabel;[statement]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getAssertionWriter();writeAssertStatement;[statement]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeThrow</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <ParamType>ThrowStatement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getAcg();onLineNumber;[statement, "visitThrowStatement"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeStatementLabel;[statement]</InnerMethodInvoke>
                <InnerMethodInvoke>statement.getExpression();visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitTypeInsn;[CHECKCAST, "java/lang/Throwable"]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[ATHROW]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();remove;[1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeReturn</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <ParamType>ReturnStatement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>ClassNode [returnType=controller.getReturnType()]</InnerVar>
                <InnerVar>Expression [expression=statement.getExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getAcg();onLineNumber;[statement, "visitReturnStatement"]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeStatementLabel;[statement]</InnerMethodInvoke>
                <InnerMethodInvoke>expression;visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;doGroovyCast;[returnType]</InnerMethodInvoke>
                <InnerMethodInvoke>BytecodeHelper;doReturn;[mv, returnType]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;remove;[1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeExpressionStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>statement</ParamName>
                    <ParamType>ExpressionStatement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [expression=statement.getExpression()]</InnerVar>
                <InnerVar>int [mark=controller.getOperandStack().getStackLength()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>controller.getAcg();onLineNumber;[statement, "visitExpressionStatement: " + statement.getExpression().getClass().getName()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;writeStatementLabel;[statement]</InnerMethodInvoke>
                <InnerMethodInvoke>expression;visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();popDownTo;[mark]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>