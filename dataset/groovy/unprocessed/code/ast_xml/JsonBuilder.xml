<Class>
    <Id>22</Id>
    <Package>groovy.json</Package>
    <ClassName>JsonBuilder</ClassName>
    <SuperClass>GroovyObjectSupport</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Writable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>JsonBuilder  /** 
 * A builder for creating JSON payloads. &lt;p&gt; This builder supports the usual builder syntax made of nested method calls and closures, but also some specific aspects of JSON data structures, such as list of values, etc. Please make sure to have a look at the various methods provided by this builder to be able to learn about the various possibilities of usage. &lt;p&gt; Example: &lt;pre&gt;&lt;code&gt; def builder = new groovy.json.JsonBuilder() def root = builder.people { person { firstName 'Guillame' lastName 'Laforge' // Named arguments are valid values for objects too address( city: 'Paris', country: 'France', zip: 12345, ) married true // a list of values conferences 'JavaOne', 'Gr8conf' } } // creates a data structure made of maps (Json object) and lists (Json array) assert root instanceof Map assert builder.toString() == '{"people":{"person":{"firstName":"Guillame","lastName":"Laforge","address":{"city":"Paris","country":"France","zip":12345},"married":true,"conferences":["JavaOne","Gr8conf"]}}}' &lt;/code&gt;&lt;/pre&gt;
 * @author Guillaume Laforge
 * @author Andrey Bloshetsov
 * @since 1.8.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>content</FieldName>
            <FieldType>Object</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>JsonBuilder</MethodName>
            <MethodComment>/** 
 * Instantiates a JSON builder.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>JsonBuilder</MethodName>
            <MethodComment>/** 
 * Instantiates a JSON builder with some existing data structure.
 * @param content a pre-existing data structure
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>content</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getContent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment>/** 
 * Named arguments can be passed to the JSON builder instance to create a root JSON object &lt;p&gt; Example: &lt;pre&gt;&lt;code&gt; def json = new JsonBuilder() json name: "Guillaume", age: 33 assert json.toString() == '{"name":"Guillaume","age":33}' &lt;/code&gt;&lt;/pre&gt;
 * @param m a map of key / value pairs
 * @return a map of key / value pairs
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>m</ParamName>
                    <ParamType>Map</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment>/** 
 * A list of elements as arguments to the JSON builder creates a root JSON array &lt;p&gt; Example: &lt;pre&gt;&lt;code&gt; def json = new JsonBuilder() def result = json([1, 2, 3]) assert result instanceof List assert json.toString() == "[1,2,3]" &lt;/code&gt;&lt;/pre&gt;
 * @param l a list of values
 * @return a list of values
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>l</ParamName>
                    <ParamType>List</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment>/** 
 * Varargs elements as arguments to the JSON builder create a root JSON array &lt;p&gt; Example: &lt;pre&gt;&lt;code&gt; def json = new JsonBuilder() def result = json 1, 2, 3 assert result instanceof List assert json.toString() == "[1,2,3]" &lt;/code&gt;&lt;/pre&gt;
 * @param args an array of values
 * @return a list of values
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Object&gt; [listContent=new ArrayList&lt;Object&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment>/** 
 * A collection and closure passed to a JSON builder will create a root JSON array applying the closure to each object in the collection &lt;p&gt; Example: &lt;pre&gt;&lt;code&gt; class Author { String name } def authors = [new Author (name: "Guillaume"), new Author (name: "Jochen"), new Author (name: "Paul")] def json = new JsonBuilder() json authors, { Author author -&gt; name author.name } assert json.toString() == '[{"name":"Guillaume"},{"name":"Jochen"},{"name":"Paul"}]' &lt;/code&gt;&lt;/pre&gt;
 * @param coll a collection
 * @param c a closure used to convert the objects of coll
 * @return a list of values
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>coll</ParamName>
                    <ParamType>Collection</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Object&gt; [listContent=new ArrayList&lt;Object&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment>/** 
 * A closure passed to a JSON builder will create a root JSON object &lt;p&gt; Example: &lt;pre&gt;&lt;code&gt; def json = new JsonBuilder() def result = json { name "Guillaume" age 33 } assert result instanceof Map assert json.toString() == '{"name":"Guillaume","age":33}' &lt;/code&gt;&lt;/pre&gt;
 * @param c a closure whose method call statements represent key / values of a JSON object
 * @return a map of key / value pairs
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invokeMethod</MethodName>
            <MethodComment>/** 
 * A method call on the JSON builder instance will create a root object with only one key whose name is the name of the method being called. This method takes as arguments: &lt;ul&gt; &lt;li&gt;a closure&lt;/li&gt; &lt;li&gt;a map (ie. named arguments)&lt;/li&gt; &lt;li&gt;a map and a closure&lt;/li&gt; &lt;li&gt;or no argument at all&lt;/li&gt; &lt;/ul&gt; &lt;p&gt; Example with a classicala builder-style: &lt;pre&gt;&lt;code&gt; def json = new JsonBuilder() def result = json.person { name "Guillaume" age 33 } assert result instanceof Map assert json.toString() == '{"person":{"name":"Guillaume","age":33}}' &lt;/code&gt;&lt;/pre&gt; Or alternatively with a method call taking named arguments: &lt;pre&gt;&lt;code&gt; def json = new JsonBuilder() json.person name: "Guillaume", age: 33 assert json.toString() == '{"person":{"name":"Guillaume","age":33}}' &lt;/code&gt;&lt;/pre&gt; If you use named arguments and a closure as last argument, the key/value pairs of the map (as named arguments) and the key/value pairs represented in the closure will be merged together &amp;mdash; the closure properties overriding the map key/values in case the same key is used. &lt;pre&gt;&lt;code&gt; def json = new JsonBuilder() json.person(name: "Guillaume", age: 33) { town "Paris" } assert json.toString() == '{"person":{"name":"Guillaume","age":33,"town":"Paris"}}' &lt;/code&gt;&lt;/pre&gt; The empty args call will create a key whose value will be an empty JSON object: &lt;pre&gt;&lt;code&gt; def json = new JsonBuilder() json.person() assert json.toString() == '{"person":{}}' &lt;/code&gt;&lt;/pre&gt;
 * @param name the single key
 * @param args the value associated with the key
 * @return a map with a single key
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setAndGetContent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,Object&gt; [contentMap=new LinkedHashMap&lt;String,Object&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>contentMap;put;[name, value]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment>/** 
 * Serializes the internal data structure built with the builder to a conformant JSON payload string &lt;p&gt; Example: &lt;pre&gt;&lt;code&gt; def json = new JsonBuilder() json { temperature 37 } assert json.toString() == '{"temperature":37}' &lt;/code&gt;&lt;/pre&gt;
 * @return a JSON output
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toPrettyString</MethodName>
            <MethodComment>/** 
 * Pretty-prints and formats the JSON payload. &lt;p&gt; This method calls the JsonLexer to parser the output of the builder, so this may not be an optimal method to call, and should be used mainly for debugging purpose for a human-readable output of the JSON content.
 * @return a pretty printed JSON output
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeTo</MethodName>
            <MethodComment>/** 
 * The JSON builder implements the &lt;code&gt;Writable&lt;/code&gt; interface, so that you can have the builder serialize itself the JSON payload to a writer. &lt;p&gt; Example: &lt;pre&gt;&lt;code&gt; def json = new JsonBuilder() json { temperature 37 } def out = new StringWriter() out &lt;&lt; json assert out.toString() == '{"temperature":37}' &lt;/code&gt;&lt;/pre&gt;
 * @param out a writer on which to serialize the JSON payload
 * @return the writer
 */
</MethodComment>
            <ReturnType>Writer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>Writer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>