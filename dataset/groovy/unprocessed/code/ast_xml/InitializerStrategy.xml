<Class>
    <Id>299</Id>
    <Package>groovy.transform.builder</Package>
    <ClassName>InitializerStrategy</ClassName>
    <SuperClass>BuilderASTTransformation.AbstractBuilderStrategy</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>InitializerStrategy  /** 
 * This strategy is used with the  {@link Builder} AST transform to create a builder helper classfor the fluent and type-safe creation of instances of a specified class. It is modelled roughly on the design outlined here: http://michid.wordpress.com/2008/08/13/type-safe-builder-pattern-in-java/ You define classes which use the type-safe initializer pattern as follows: &lt;pre&gt; import groovy.transform.builder. import groovy.transform. {@code @ToString}{@code @Builder}(builderStrategy=InitializerStrategy) class Person { String firstName String lastName int age } &lt;/pre&gt; While it isn't required to do so, the benefit of this builder strategy comes in conjunction with static type-checking or static compilation. Typical usage is as follows: &lt;pre&gt; {@code @CompileStatic}def main() { println new Person(Person.createInitializer().firstName("John").lastName("Smith").age(21)) } &lt;/pre&gt; which prints: &lt;pre&gt; Person(John, Smith, 21) &lt;/pre&gt; If you don't initialise some of the properties, your code won't compile, e.g. if the method body above was changed to this: &lt;pre&gt; println new Person(Person.createInitializer().firstName("John").lastName("Smith")) &lt;/pre&gt; then the following compile-time error would result: &lt;pre&gt; [Static type checking] - Cannot find matching method Person#&lt;init&gt;(Person$PersonInitializer &lt;groovy.transform.builder.InitializerStrategy$SET, groovy.transform.builder.InitializerStrategy$SET, groovy.transform.builder.InitializerStrategy$UNSET&gt;). Please check if the declared type is right and if the method exists. &lt;/pre&gt; The message is a little cryptic, but it is basically the static compiler telling us that the third parameter,  {@code age} in our case, is unset.You can also add this annotation to your predefined constructors. These will be made private and an initializer will be set up to call your constructor. Any parameters to your constructor become the properties expected by the initializer. If you use such a builder on a constructor as well as on the class or on more than one constructor, then it is up to you to define unique values for 'builderClassName' and 'builderMethodName' for each annotation.
 * @author Paul King
 * @author Marcin Grzejszczak
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>PUBLIC_STATIC</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>DEFAULT_INITIAL_VALUE</FieldName>
            <FieldType>Expression</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>build</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transform</ParamName>
                    <ParamType>BuilderASTTransformation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotatedNode</ParamName>
                    <ParamType>AnnotatedNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>anno</ParamName>
                    <ParamType>AnnotationNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [useSetters=transform.memberHasValue(anno,"useSetters",true)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createBuilderForAnnotatedClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transform</ParamName>
                    <ParamType>BuilderASTTransformation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buildee</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>anno</ParamName>
                    <ParamType>AnnotationNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>useSetters</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;String&gt; [excludes=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>List&lt;String&gt; [includes=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>List&lt;FieldNode&gt; [fields=getInstancePropertyFields(buildee)]</InnerVar>
                <InnerVar>List&lt;FieldNode&gt; [filteredFields=filterFields(fields,includes,excludes)]</InnerVar>
                <InnerVar>ClassNode [builder=createInnerHelperClass(buildee,getBuilderClassName(buildee,anno),filteredFields.size())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addFields;[buildee, filteredFields, builder]</InnerMethodInvoke>
                <InnerMethodInvoke>null;buildCommon;[buildee, anno, filteredFields, builder]</InnerMethodInvoke>
                <InnerMethodInvoke>null;createBuildeeConstructors;[transform, buildee, builder, filteredFields, true, useSetters]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createBuilderForAnnotatedMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transform</ParamName>
                    <ParamType>BuilderASTTransformation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mNode</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>anno</ParamName>
                    <ParamType>AnnotationNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>useSetters</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [buildee=mNode.getDeclaringClass()]</InnerVar>
                <InnerVar>Parameter[] [parameters=mNode.getParameters()]</InnerVar>
                <InnerVar>ClassNode [builder=createInnerHelperClass(buildee,getBuilderClassName(buildee,anno),parameters.length)]</InnerVar>
                <InnerVar>List&lt;FieldNode&gt; [convertedFields=convertParamsToFields(builder,parameters)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;buildCommon;[buildee, anno, convertedFields, builder]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBuilderClassName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buildee</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>anno</ParamName>
                    <ParamType>AnnotationNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addFields</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buildee</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>filteredFields</ParamName>
                    <ParamType>FieldNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildCommon</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buildee</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>anno</ParamName>
                    <ParamType>AnnotationNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldNodes</ParamName>
                    <ParamType>FieldNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [prefix=getMemberStringValue(anno,"prefix","")]</InnerVar>
                <InnerVar>String [buildMethodName=getMemberStringValue(anno,"buildMethodName","create")]</InnerVar>
                <InnerVar>String [builderMethodName=getMemberStringValue(anno,"builderMethodName","createInitializer")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;createBuilderConstructors;[builder, buildee, fieldNodes]</InnerMethodInvoke>
                <InnerMethodInvoke>buildee.getModule();addClass;[builder]</InnerMethodInvoke>
                <InnerMethodInvoke>buildee;addMethod;[createBuilderMethod(buildMethodName,builder,fieldNodes.size(),builderMethodName)]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;addMethod;[createBuildMethod(builder,buildMethodName,fieldNodes)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convertParamsToFields</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FieldNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>Parameter[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;FieldNode&gt; [fieldNodes=new ArrayList&lt;FieldNode&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createInnerHelperClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buildee</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>builderClassName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldsSize</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [fullName=buildee.getName() + "$" + builderClassName]</InnerVar>
                <InnerVar>ClassNode [builder=new InnerClassNode(buildee,fullName,PUBLIC_STATIC,OBJECT_TYPE)]</InnerVar>
                <InnerVar>GenericsType[] [gtypes=new GenericsType[fieldsSize]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder;setGenericsTypes;[gtypes]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createBuilderMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buildMethodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>numFields</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>builderMethodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BlockStatement [body=new BlockStatement()]</InnerVar>
                <InnerVar>ClassNode [returnType=makeClassSafeWithGenerics(builder,unsetGenTypes(numFields))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>body;addStatement;[returnS(callX(builder,buildMethodName))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unsetGenTypes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>GenericsType[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numFields</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GenericsType[] [gtypes=new GenericsType[numFields]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setGenTypes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>GenericsType[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>numFields</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GenericsType[] [gtypes=new GenericsType[numFields]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createBuilderConstructors</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buildee</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fields</ParamName>
                    <ParamType>FieldNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BlockStatement [body=new BlockStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>builder;addConstructor;[ACC_PRIVATE, NO_PARAMS, NO_EXCEPTIONS, block(ctorSuperS())]</InnerMethodInvoke>
                <InnerMethodInvoke>body;addStatement;[ctorSuperS()]</InnerMethodInvoke>
                <InnerMethodInvoke>null;initializeFields;[fields, body, false]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;addConstructor;[ACC_PRIVATE, getParams(fields,buildee), NO_EXCEPTIONS, body]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createBuildeeConstructors</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transform</ParamName>
                    <ParamType>BuilderASTTransformation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buildee</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fields</ParamName>
                    <ParamType>FieldNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>needsConstructor</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>useSetters</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConstructorNode [initializer=createInitializerConstructor(buildee,builder,fields)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createBuildeeMethods</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buildee</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mNode</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fields</ParamName>
                    <ParamType>FieldNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [paramType=makeClassSafeWithGenerics(builder,setGenTypes(fields.size()))]</InnerVar>
                <InnerVar>List&lt;Expression&gt; [argsList=new ArrayList&lt;Expression&gt;()]</InnerVar>
                <InnerVar>Parameter [initParam=param(paramType,"initializer")]</InnerVar>
                <InnerVar>String [newName="$" + mNode.getName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>buildee;addMethod;[mNode.getName(), PUBLIC_STATIC, mNode.getReturnType(), params(param(paramType,"initializer")), NO_EXCEPTIONS, block(stmt(callX(buildee,newName,args(argsList))))]</InnerMethodInvoke>
                <InnerMethodInvoke>null;renameMethod;[buildee, mNode, newName]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>renameMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buildee</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mNode</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>buildee;addMethod;[newName, mNode.getModifiers(), mNode.getReturnType(), mNode.getParameters(), mNode.getExceptions(), mNode.getCode()]</InnerMethodInvoke>
                <InnerMethodInvoke>buildee;removeMethod;[mNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParams</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Parameter[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fields</ParamName>
                    <ParamType>FieldNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Parameter[] [parameters=new Parameter[fields.size()]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createInitializerConstructor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ConstructorNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buildee</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fields</ParamName>
                    <ParamType>FieldNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [paramType=makeClassSafeWithGenerics(builder,setGenTypes(fields.size()))]</InnerVar>
                <InnerVar>List&lt;Expression&gt; [argsList=new ArrayList&lt;Expression&gt;()]</InnerVar>
                <InnerVar>Parameter [initParam=param(paramType,"initializer")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createBuildMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buildMethodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fields</ParamName>
                    <ParamType>FieldNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [returnType=makeClassSafeWithGenerics(builder,unsetGenTypes(fields.size()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createBuilderMethodForField</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fields</ParamName>
                    <ParamType>FieldNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>prefix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldPos</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [fieldName=fields.get(fieldPos).getName()]</InnerVar>
                <InnerVar>String [setterName=getSetterName(prefix,fieldName)]</InnerVar>
                <InnerVar>GenericsType[] [gtypes=new GenericsType[fields.size()]]</InnerVar>
                <InnerVar>List&lt;Expression&gt; [argList=new ArrayList&lt;Expression&gt;()]</InnerVar>
                <InnerVar>ClassNode [returnType=makeClassSafeWithGenerics(builder,gtypes)]</InnerVar>
                <InnerVar>FieldNode [fNode=fields.get(fieldPos)]</InnerVar>
                <InnerVar>Map&lt;String,ClassNode&gt; [genericsSpec=createGenericsSpec(fNode.getDeclaringClass())]</InnerVar>
                <InnerVar>ClassNode [correctedType=correctToGenericsSpecRecurse(genericsSpec,fNode.getType())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;extractSuperClassGenerics;[fNode.getType(), builder, genericsSpec]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makePlaceholder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>GenericsType</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>i</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [type=ClassHelper.makeWithoutCaching("T" + i)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>type;setRedirect;[OBJECT_TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>type;setGenericsPlaceHolder;[true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createFieldCopy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FieldNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buildee</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fNode</ParamName>
                    <ParamType>FieldNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,ClassNode&gt; [genericsSpec=createGenericsSpec(fNode.getDeclaringClass())]</InnerVar>
                <InnerVar>ClassNode [correctedType=correctToGenericsSpecRecurse(genericsSpec,fNode.getType())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;extractSuperClassGenerics;[fNode.getType(), buildee, genericsSpec]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>filterFields</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FieldNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fieldNodes</ParamName>
                    <ParamType>FieldNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>includes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>excludes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;FieldNode&gt; [fields=new ArrayList&lt;FieldNode&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initializeFields</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fields</ParamName>
                    <ParamType>FieldNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>body</ParamName>
                    <ParamType>BlockStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>useSetters</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSetterName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>