<Class>
    <Id>329</Id>
    <ClassName>meteor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>meteor  /** 
 * First hack at a Java solver for the meteor puzzle - just the IBM  developerWorks article algorithm optimized with precalculated shapes  and bitmasks. Should be possible to optimize it some more to take  advantage of reflections but its turning out to be less obvious  than expected :-). &lt;p&gt; Notes: &lt;ul&gt; &lt;li&gt;Seems to run faster without the -server switch. &lt;li&gt;Testing for islands seems to be slower than just fitting pieces. &lt;/ul&gt;
 * @author Tony Seebregts
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>SHIFT</FieldName>
            <FieldType>int[]</FieldType>
        </Field>
        <Field>
            <FieldName>MASK</FieldName>
            <FieldType>long[][]</FieldType>
        </Field>
        <Field>
            <FieldName>DEBUG</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>solutions</FieldName>
            <FieldType>SortedSet</FieldType>
        </Field>
        <Field>
            <FieldName>solutions</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>solution</FieldName>
            <FieldType>Entry[]</FieldType>
        </Field>
        <Field>
            <FieldName>depth</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>pieces</FieldName>
            <FieldType>Piece[]</FieldType>
        </Field>
        <Field>
            <FieldName>row</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>col</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>shape</FieldName>
            <FieldType>Shape</FieldType>
        </Field>
        <Field>
            <FieldName>shapes</FieldName>
            <FieldType>Shape[][][]</FieldType>
        </Field>
        <Field>
            <FieldName>symbol</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>vector</FieldName>
            <FieldType>int[][]</FieldType>
        </Field>
        <Field>
            <FieldName>bitmap</FieldName>
            <FieldType>long</FieldType>
        </Field>
        <Field>
            <FieldName>shift</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>islet</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>maxRow</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>minCol</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>maxCol</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>PIECE0</FieldName>
            <FieldType>Shape[]</FieldType>
        </Field>
        <Field>
            <FieldName>PIECE1</FieldName>
            <FieldType>Shape[]</FieldType>
        </Field>
        <Field>
            <FieldName>PIECE2</FieldName>
            <FieldType>Shape[]</FieldType>
        </Field>
        <Field>
            <FieldName>PIECE3</FieldName>
            <FieldType>Shape[]</FieldType>
        </Field>
        <Field>
            <FieldName>PIECE4</FieldName>
            <FieldType>Shape[]</FieldType>
        </Field>
        <Field>
            <FieldName>PIECE5</FieldName>
            <FieldType>Shape[]</FieldType>
        </Field>
        <Field>
            <FieldName>PIECE6</FieldName>
            <FieldType>Shape[]</FieldType>
        </Field>
        <Field>
            <FieldName>PIECE7</FieldName>
            <FieldType>Shape[]</FieldType>
        </Field>
        <Field>
            <FieldName>PIECE8</FieldName>
            <FieldType>Shape[]</FieldType>
        </Field>
        <Field>
            <FieldName>PIECE9</FieldName>
            <FieldType>Shape[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>main</MethodName>
            <MethodComment>/** 
 * Application entry point.
 * @param args  Command line arguments:&lt;ul&gt; &lt;li&gt; solution limit &lt;/ul&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [N=2098]</InnerVar>
                <InnerVar>meteor [puzzle=new meteor()]</InnerVar>
                <InnerVar>Date [start]</InnerVar>
                <InnerVar>Date [end]</InnerVar>
                <InnerVar>long [time]</InnerVar>
                <InnerVar>SortedSet&lt;String&gt; [solutions]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>print</MethodName>
            <MethodComment>/** 
 * Prints out the puzzle.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>solution</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;print;[solution.replaceAll("(\\d{5})(\\d{5})","$1 $2").replaceAll("(\\d{5})","$1\n").replaceAll("(\\d)","$1 ")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>meteor</MethodName>
            <MethodComment>/** 
 * Initialises the puzzle.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>solve</MethodName>
            <MethodComment>/** 
 * Initialises the puzzle and solution set at [0,0]
 * @return Sorted list of solution strings.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;solve;[0x0002004008010020L, 0, 0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>solve</MethodName>
            <MethodComment>/** 
 * Recursively solves the puzzle by fitting pieces into the  next available hexagon.
 * @param puzzle  Current puzzle bitmask.
 * @param row     Row of next available hexagon. 
 * @param col     Column next available hexagon. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>puzzle</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>col</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment>/** 
 * Serializes the current solution to a string.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>solution</ParamName>
                    <ParamType>Entry[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char[] [puzzle=new char[50]]</InnerVar>
                <InnerVar>Shape [shape]</InnerVar>
                <InnerVar>int [row]</InnerVar>
                <InnerVar>int [col]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Piece</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>list</ParamName>
                    <ParamType>Shape[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ArrayList[][] [array=new ArrayList[10][10]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shapes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Shape[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>col</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Shape</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>symbol</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>vector</ParamName>
                    <ParamType>int[][]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bitmap</ParamName>
                    <ParamType>long</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>shift</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>islet</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxRow</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>minCol</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>maxCol</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Shape</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>shape</ParamName>
                    <ParamType>Shape</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>col</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>