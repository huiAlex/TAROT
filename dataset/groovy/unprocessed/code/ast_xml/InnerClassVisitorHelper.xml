<Class>
    <Id>1050</Id>
    <Package>org.codehaus.groovy.classgen</Package>
    <ClassName>InnerClassVisitorHelper</ClassName>
    <SuperClass>ClassCodeVisitorSupport</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>setPropertyGetterDispatcher</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>block</ParamName>
                    <ParamType>BlockStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>thiz</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>Parameter[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;ConstantExpression&gt; [gStringStrings=new ArrayList&lt;ConstantExpression&gt;()]</InnerVar>
                <InnerVar>List&lt;Expression&gt; [gStringValues=new ArrayList&lt;Expression&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>gStringStrings;add;[new ConstantExpression("")]</InnerMethodInvoke>
                <InnerMethodInvoke>gStringStrings;add;[new ConstantExpression("")]</InnerMethodInvoke>
                <InnerMethodInvoke>gStringValues;add;[new VariableExpression(parameters[0])]</InnerMethodInvoke>
                <InnerMethodInvoke>block;addStatement;[new ReturnStatement(new PropertyExpression(thiz,new GStringExpression("$name",gStringStrings,gStringValues)))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setPropertySetterDispatcher</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>block</ParamName>
                    <ParamType>BlockStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>thiz</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>Parameter[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;ConstantExpression&gt; [gStringStrings=new ArrayList&lt;ConstantExpression&gt;()]</InnerVar>
                <InnerVar>List&lt;Expression&gt; [gStringValues=new ArrayList&lt;Expression&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>gStringStrings;add;[new ConstantExpression("")]</InnerMethodInvoke>
                <InnerMethodInvoke>gStringStrings;add;[new ConstantExpression("")]</InnerMethodInvoke>
                <InnerMethodInvoke>gStringValues;add;[new VariableExpression(parameters[0])]</InnerMethodInvoke>
                <InnerMethodInvoke>block;addStatement;[new ExpressionStatement(new BinaryExpression(new PropertyExpression(thiz,new GStringExpression("$name",gStringStrings,gStringValues)),Token.newSymbol(Types.ASSIGN,-1,-1),new VariableExpression(parameters[1])))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setMethodDispatcherCode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>block</ParamName>
                    <ParamType>BlockStatement</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>thiz</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>Parameter[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;ConstantExpression&gt; [gStringStrings=new ArrayList&lt;ConstantExpression&gt;()]</InnerVar>
                <InnerVar>List&lt;Expression&gt; [gStringValues=new ArrayList&lt;Expression&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>gStringStrings;add;[new ConstantExpression("")]</InnerMethodInvoke>
                <InnerMethodInvoke>gStringStrings;add;[new ConstantExpression("")]</InnerMethodInvoke>
                <InnerMethodInvoke>gStringValues;add;[new VariableExpression(parameters[0])]</InnerMethodInvoke>
                <InnerMethodInvoke>block;addStatement;[new ReturnStatement(new MethodCallExpression(thiz,new GStringExpression("$name",gStringStrings,gStringValues),new ArgumentListExpression(new SpreadExpression(new VariableExpression(parameters[1])))))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isStatic</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>InnerClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>VariableScope [scope=node.getVariableScope()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isStatic</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getObjectDistance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [count=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addFieldInit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>Parameter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fn</ParamName>
                    <ParamType>FieldNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>block</ParamName>
                    <ParamType>BlockStatement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>VariableExpression [ve=new VariableExpression(p)]</InnerVar>
                <InnerVar>FieldExpression [fe=new FieldExpression(fn)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>block;addStatement;[new ExpressionStatement(new BinaryExpression(fe,Token.newSymbol(Types.ASSIGN,-1,-1),ve))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>