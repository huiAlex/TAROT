<Class>
    <Id>270</Id>
    <Package>org.codehaus.groovy.classgen.asm</Package>
    <ClassName>BinaryExpressionMultiTypeDispatcher</ClassName>
    <SuperClass>BinaryExpressionHelper</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BinaryExpressionMultiTypeDispatcher  /** 
 * This class is for internal use only! This class will dispatch to the right type adapters according to the  kind of binary expression that is provided.
 * @author &lt;a href="mailto:blackdrag@gmx.org"&gt;Jochen "blackdrag" Theodorou&lt;/a&gt;
 * @author Roshan Dawrani
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>charArrayGet</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>charArraySet</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>byteArrayGet</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>byteArraySet</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>shortArrayGet</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>shortArraySet</FieldName>
            <FieldType>MethodCaller</FieldType>
        </Field>
        <Field>
            <FieldName>binExpWriter</FieldName>
            <FieldType>BinaryExpressionWriter[]</FieldType>
        </Field>
        <Field>
            <FieldName>typeMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>typeMap</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>typeMapKeyNames</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>BinaryCharExpressionHelper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wc</ParamName>
                    <ParamType>WriterController</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getArrayGetResultType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BinaryByteExpressionHelper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wc</ParamName>
                    <ParamType>WriterController</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getArrayGetResultType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BinaryShortExpressionHelper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wc</ParamName>
                    <ParamType>WriterController</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getArrayGetResultType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initializeDelegateHelpers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BinaryExpressionWriter[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>BinaryExpressionMultiTypeDispatcher</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wc</ParamName>
                    <ParamType>WriterController</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOperandConversionType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leftType</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightType</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOperandType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Integer [ret=typeMap.get(type)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doPrimtiveCompare</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leftType</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightType</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>binExp</ParamName>
                    <ParamType>BinaryExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doPrimitiveCompare</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leftType</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightType</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>binExp</ParamName>
                    <ParamType>BinaryExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [leftExp=binExp.getLeftExpression()]</InnerVar>
                <InnerVar>Expression [rightExp=binExp.getRightExpression()]</InnerVar>
                <InnerVar>int [operation=binExp.getOperation().getType()]</InnerVar>
                <InnerVar>int [operationType=getOperandConversionType(leftType,rightType)]</InnerVar>
                <InnerVar>BinaryExpressionWriter [bew=binExpWriter[operationType]]</InnerVar>
                <InnerVar>AsmClassGenerator [acg=getController().getAcg()]</InnerVar>
                <InnerVar>OperandStack [os=getController().getOperandStack()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>leftExp;visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>os;doGroovyCast;[bew.getNormalOpResultType()]</InnerMethodInvoke>
                <InnerMethodInvoke>rightExp;visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>os;doGroovyCast;[bew.getNormalOpResultType()]</InnerMethodInvoke>
                <InnerMethodInvoke>bew;write;[operation, false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateCompareExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>compareMethod</ParamName>
                    <ParamType>MethodCaller</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>binExp</ParamName>
                    <ParamType>BinaryExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [current=getController().getClassNode()]</InnerVar>
                <InnerVar>TypeChooser [typeChooser=getController().getTypeChooser()]</InnerVar>
                <InnerVar>int [operation=binExp.getOperation().getType()]</InnerVar>
                <InnerVar>Expression [leftExp=binExp.getLeftExpression()]</InnerVar>
                <InnerVar>ClassNode [leftType=typeChooser.resolveType(leftExp,current)]</InnerVar>
                <InnerVar>Expression [rightExp=binExp.getRightExpression()]</InnerVar>
                <InnerVar>ClassNode [rightType=typeChooser.resolveType(rightExp,current)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateBinaryExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>binExp</ParamName>
                    <ParamType>BinaryExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [operation=removeAssignment(binExp.getOperation().getType())]</InnerVar>
                <InnerVar>ClassNode [current=getController().getClassNode()]</InnerVar>
                <InnerVar>Expression [leftExp=binExp.getLeftExpression()]</InnerVar>
                <InnerVar>ClassNode [leftTypeOrig=getController().getTypeChooser().resolveType(leftExp,current)]</InnerVar>
                <InnerVar>ClassNode [leftType=leftTypeOrig]</InnerVar>
                <InnerVar>Expression [rightExp=binExp.getRightExpression()]</InnerVar>
                <InnerVar>ClassNode [rightType=getController().getTypeChooser().resolveType(rightExp,current)]</InnerVar>
                <InnerVar>AsmClassGenerator [acg=getController().getAcg()]</InnerVar>
                <InnerVar>OperandStack [os=getController().getOperandStack()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isIntCastableType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rightExp</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [type=getController().getTypeChooser().resolveType(rightExp,getController().getClassNode())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isShiftOperation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAssignmentToArray</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>binExp</ParamName>
                    <ParamType>BinaryExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [leftExpression=binExp.getLeftExpression()]</InnerVar>
                <InnerVar>BinaryExpression [leftBinExpr=(BinaryExpression)leftExpression]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeAssignment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doAssignmentToArray</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>binExp</ParamName>
                    <ParamType>BinaryExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [operation=removeAssignment(binExp.getOperation().getType())]</InnerVar>
                <InnerVar>ClassNode [current=getController().getClassNode()]</InnerVar>
                <InnerVar>Expression [leftExp=binExp.getLeftExpression()]</InnerVar>
                <InnerVar>ClassNode [leftType=getController().getTypeChooser().resolveType(leftExp,current)]</InnerVar>
                <InnerVar>Expression [rightExp=binExp.getRightExpression()]</InnerVar>
                <InnerVar>ClassNode [rightType=getController().getTypeChooser().resolveType(rightExp,current)]</InnerVar>
                <InnerVar>int [operationType=getOperandType(leftType)]</InnerVar>
                <InnerVar>BinaryExpressionWriter [bew=binExpWriter[operationType]]</InnerVar>
                <InnerVar>boolean [simulationSuccess=bew.arrayGet(LEFT_SQUARE_BRACKET,true)]</InnerVar>
                <InnerVar>AsmClassGenerator [acg=getController().getAcg()]</InnerVar>
                <InnerVar>OperandStack [operandStack=getController().getOperandStack()]</InnerVar>
                <InnerVar>CompileStack [compileStack=getController().getCompileStack()]</InnerVar>
                <InnerVar>BinaryExpression [arrayWithSubscript=(BinaryExpression)leftExp]</InnerVar>
                <InnerVar>Expression [subscript=arrayWithSubscript.getRightExpression()]</InnerVar>
                <InnerVar>int [subscriptValueId=compileStack.defineTemporaryVariable("$sub",ClassHelper.int_TYPE,true)]</InnerVar>
                <InnerVar>int [resultValueId=compileStack.defineTemporaryVariable("$result",rightType,true)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>subscript;visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;doGroovyCast;[int_TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>arrayWithSubscript.getLeftExpression();visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;doGroovyCast;[leftType.makeArray()]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;dup;[]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;load;[ClassHelper.int_TYPE, subscriptValueId]</InnerMethodInvoke>
                <InnerMethodInvoke>bew;arrayGet;[LEFT_SQUARE_BRACKET, false]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;replace;[leftType, 2]</InnerMethodInvoke>
                <InnerMethodInvoke>binExp.getRightExpression();visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>bew;write;[operation, false]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;dup;[]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;load;[ClassHelper.int_TYPE, subscriptValueId]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;swap;[]</InnerMethodInvoke>
                <InnerMethodInvoke>bew;arraySet;[false]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;remove;[3]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;load;[rightType, resultValueId]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;removeVar;[resultValueId]</InnerMethodInvoke>
                <InnerMethodInvoke>compileStack;removeVar;[subscriptValueId]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateBinaryExpressionWithAssignment</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>binExp</ParamName>
                    <ParamType>BinaryExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doAssignmentToLocalVariable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>binExp</ParamName>
                    <ParamType>BinaryExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [left=binExp.getLeftExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;evaluateBinaryExpression;[method, binExp]</InnerMethodInvoke>
                <InnerMethodInvoke>getController().getOperandStack();dup;[]</InnerMethodInvoke>
                <InnerMethodInvoke>getController().getCompileStack();pushLHS;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>binExp.getLeftExpression();visit;[getController().getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>getController().getCompileStack();popLHS;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assignToArray</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>orig</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rhsValueLoader</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [current=getController().getClassNode()]</InnerVar>
                <InnerVar>ClassNode [arrayType=getController().getTypeChooser().resolveType(receiver,current)]</InnerVar>
                <InnerVar>ClassNode [arrayComponentType=arrayType.getComponentType()]</InnerVar>
                <InnerVar>int [operationType=getOperandType(arrayComponentType)]</InnerVar>
                <InnerVar>BinaryExpressionWriter [bew=binExpWriter[operationType]]</InnerVar>
                <InnerVar>AsmClassGenerator [acg=getController().getAcg()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writePostOrPrefixMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>orig</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [type=getController().getTypeChooser().resolveType(orig,getController().getClassNode())]</InnerVar>
                <InnerVar>int [operationType=getOperandType(type)]</InnerVar>
                <InnerVar>BinaryExpressionWriter [bew=binExpWriter[operationType]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>