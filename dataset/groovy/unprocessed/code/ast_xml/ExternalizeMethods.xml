<Class>
    <Id>965</Id>
    <Package>groovy.transform</Package>
    <ClassName>ExternalizeMethods</ClassName>
    <ClassComment>ExternalizeMethods  /** 
 * Class annotation used to assist in the creation of  {@code Externalizable} classes.The  {@code @ExternalizeMethods} annotation instructs the compiler to execute anAST transformation which adds  {@code writeExternal()} and {@code readExternal()} methodsto a class and adds  {@code Externalizable} to the interfaces which the class implements.The  {@code writeExternal()} method writes each property (and optionally field) of the classwhile the  {@code readExternal()} method will read each one back in the same order.Properties or fields marked as  {@code transient} are ignored.This annotation is typically used in conjunction with the  {@code @ExternalizeMethods} annotation butmost usually not directly but rather via  {@code @AutoExternalizable} which is a shortcut for both annotations.&lt;p&gt; Example usage: &lt;pre&gt; import groovy.transform. {@code @ExternalizeMethods}class Person { String first, last List favItems Date since } &lt;/pre&gt; Which will create a class of the following form: &lt;pre&gt; class Person implements Externalizable { ... public void writeExternal(ObjectOutput out) throws IOException { out.writeObject(first) out.writeObject(last) out.writeObject(favItems) out.writeObject(since) } public void readExternal(ObjectInput oin) { first = (String) oin.readObject() last = (String) oin.readObject() favItems = (List) oin.readObject() since = (Date) oin.readObject() } ... } &lt;/pre&gt;
 * @author Paul King
 * @since 1.8.0
 */
</ClassComment>
    <FieldList/>
    <MethodList/>
</Class>