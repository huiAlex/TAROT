<Class>
    <Id>351</Id>
    <Package>groovy.transform.stc</Package>
    <ClassName>ClosureParams</ClassName>
    <ClassComment>ClosureParams  /** 
 * Parameter annotation aimed at helping the IDEs or the static type checker to infer the parameter types of a closure. Without this annotation, a method signature may look like this:&lt;p&gt; &lt;code&gt;public &amp;lt;T,R&amp;gt; List&amp;lt;R&amp;gt; doSomething(List&amp;lt;T&amp;gt; source, Closure&amp;lt;R&amp;gt; consumer)&lt;/code&gt; &lt;p&gt; &lt;p&gt;The problem this annotation tries to solve is to define the expected parameter types of the &lt;i&gt;consumer&lt;/i&gt; closure. The generics type defined in &lt;code&gt;Closure&amp;lt;R&amp;gt;&lt;/code&gt; correspond to the result type of the closure, but tell nothing about what the closure must accept as arguments.&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;There's no way in Java or Groovy to express the type signature of the expected closure call method from outside the closure itself, so we rely on an annotation here. Unfortunately, annotations also have limitations (like not being able to use generics placeholder as annotation values) that prevent us from expressing the type directly.&lt;/p&gt; &lt;p&gt;Additionally, closures are polymorphic. This means that a single closure can be used with different, valid, parameter signatures. A typical use case can be found when a closure accepts either a  {@link java.util.Map.Entry}or a (key,value) pair, like the  {@link org.codehaus.groovy.runtime.DefaultGroovyMethods#each(java.util.Map,groovy.lang.Closure)}method.&lt;/p&gt; &lt;p&gt;For those reasons, the  {@link ClosureParams} annotation only takes two arguments:&lt;ul&gt; &lt;li&gt; {@link ClosureParams#value()} defines a {@link groovy.transform.stc.ClosureSignatureHint} hint classthat the compiler will use to infer the parameter types&lt;/li&gt; &lt;li&gt; {@link ClosureParams#options()}, a set of options that are passed to the hint when the type is inferred&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;As a result, the previous signature can be written like this:&lt;/p&gt; &lt;code&gt;public &amp;lt;T,R&amp;gt; List&amp;lt;R&amp;gt; doSomething(List&amp;lt;T&amp;gt; source, @ClosureParams(FirstParam.FirstGenericType.class) Closure&amp;lt;R&amp;gt; consumer)&lt;/code&gt; &lt;p&gt;Which uses the  {@link FirstParam.FirstGenericType} first generic type of the first argument&lt;/p&gt; hint to tell that the only expectedargument type corresponds to the type of the first generic argument type of the first method parameter.
 * @author CÃ©dric Champeau
 */
</ClassComment>
    <FieldList/>
    <MethodList/>
</Class>