<Class>
    <Id>105</Id>
    <Package>org.codehaus.groovy.classgen.asm.sc</Package>
    <ClassName>StaticTypesClosureWriter</ClassName>
    <SuperClass>ClosureWriter</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StaticTypesClosureWriter  /** 
 * Writer responsible for generating closure classes in statically compiled mode.
 * @author Cedric Champeau
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>doCallMethod</FieldName>
            <FieldType>MethodNode</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>StaticTypesClosureWriter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wc</ParamName>
                    <ParamType>WriterController</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createClosureClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>ClosureExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mods</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [closureClass=super.createClosureClass(expression,mods)]</InnerVar>
                <InnerVar>List&lt;MethodNode&gt; [methods=closureClass.getDeclaredMethods("call")]</InnerVar>
                <InnerVar>List&lt;MethodNode&gt; [doCall=closureClass.getMethods("doCall")]</InnerVar>
                <InnerVar>MethodNode [doCallMethod=doCall.get(0)]</InnerVar>
                <InnerVar>MethodTargetCompletionVisitor [visitor=new MethodTargetCompletionVisitor(doCallMethod)]</InnerVar>
                <InnerVar>Object [dynamic=expression.getNodeMetaData(StaticTypesMarker.DYNAMIC_RESOLUTION)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>closureClass;putNodeMetaData;[StaticCompilationMetadataKeys.STATIC_COMPILE_NODE, Boolean.TRUE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createDirectCallMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>closureClass</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>doCallMethod</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Parameter [args=new Parameter(ClassHelper.OBJECT_TYPE,"args")]</InnerVar>
                <InnerVar>MethodCallExpression [doCall1arg=new MethodCallExpression(new VariableExpression("this",closureClass),"doCall",new ArgumentListExpression(new VariableExpression(args)))]</InnerVar>
                <InnerVar>MethodCallExpression [doCallNoArgs=new MethodCallExpression(new VariableExpression("this",closureClass),"doCall",new ArgumentListExpression(new ConstantExpression(null)))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>doCall1arg;setImplicitThis;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>doCall1arg;setMethodTarget;[doCallMethod]</InnerMethodInvoke>
                <InnerMethodInvoke>closureClass;addMethod;[new MethodNode("call",Opcodes.ACC_PUBLIC,ClassHelper.OBJECT_TYPE,new Parameter[]{args},ClassNode.EMPTY_ARRAY,new ReturnStatement(doCall1arg))]</InnerMethodInvoke>
                <InnerMethodInvoke>doCallNoArgs;setImplicitThis;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>doCallNoArgs;setMethodTarget;[doCallMethod]</InnerMethodInvoke>
                <InnerMethodInvoke>closureClass;addMethod;[new MethodNode("call",Opcodes.ACC_PUBLIC,ClassHelper.OBJECT_TYPE,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,new ReturnStatement(doCallNoArgs))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>MethodTargetCompletionVisitor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>doCallMethod</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSourceUnit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SourceUnit</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitMethodCallExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <ParamType>MethodCallExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodNode [mn=call.getMethodTarget()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>