<Class>
    <Id>503</Id>
    <Package>groovy.util</Package>
    <ClassName>XmlSlurper</ClassName>
    <SuperClass>DefaultHandler</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>XmlSlurper  /** 
 * Parse XML into a document tree that may be traversed similar to XPath expressions.  For example: &lt;pre&gt; def rootNode = new XmlSlurper().parseText( '&amp;lt;root&amp;gt;&amp;lt;one a1="uno!"/&amp;gt;&amp;lt;two&amp;gt;Some text!&amp;lt;/two&amp;gt;&amp;lt;/root&amp;gt;' ) assert rootNode.name() == 'root' assert rootNode.one[0].@a1 == 'uno!' assert rootNode.two.text() == 'Some text!' rootNode.children().each { assert it.name() in ['one','two'] } &lt;/pre&gt; &lt;p&gt; Note that in some cases, a 'selector' expression may not resolve to a single node.  For example: &lt;pre&gt; def rootNode = new XmlSlurper().parseText( '''&amp;lt;root&amp;gt; &amp;lt;a&amp;gt;one!&amp;lt;/a&amp;gt; &amp;lt;a&amp;gt;two!&amp;lt;/a&amp;gt; &amp;lt;/root&amp;gt;''' ) assert rootNode.a.size() == 2 rootNode.a.each { assert it.text() in ['one!','two!'] } &lt;/pre&gt;
 * @author John Wilson
 * @see GPathResult
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>reader</FieldName>
            <FieldType>XMLReader</FieldType>
        </Field>
        <Field>
            <FieldName>currentNode</FieldName>
            <FieldType>Node</FieldType>
        </Field>
        <Field>
            <FieldName>stack</FieldName>
            <FieldType>Stack</FieldType>
        </Field>
        <Field>
            <FieldName>stack</FieldName>
            <FieldType>Node</FieldType>
        </Field>
        <Field>
            <FieldName>charBuffer</FieldName>
            <FieldType>StringBuffer</FieldType>
        </Field>
        <Field>
            <FieldName>namespaceTagHints</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>namespaceTagHints</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>keepIgnorableWhitespace</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>namespaceAware</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>XmlSlurper</MethodName>
            <MethodComment>/** 
 * Creates a non-validating and non-namespace-aware &lt;code&gt;XmlSlurper&lt;/code&gt; which does not allow DOCTYPE declarations in documents.
 * @throws ParserConfigurationException if no parser which satisfies the requested configuration can be created.
 * @throws SAXException for SAX errors.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserConfigurationException</ExceptionType>
                <ExceptionType>SAXException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>XmlSlurper</MethodName>
            <MethodComment>/** 
 * Creates a &lt;code&gt;XmlSlurper&lt;/code&gt; which does not allow DOCTYPE declarations in documents.
 * @param validating &lt;code&gt;true&lt;/code&gt; if the parser should validate documents as they are parsed; false otherwise.
 * @param namespaceAware &lt;code&gt;true&lt;/code&gt; if the parser should provide support for XML namespaces; &lt;code&gt;false&lt;/code&gt; otherwise.
 * @throws ParserConfigurationException if no parser which satisfies the requested configuration can be created.
 * @throws SAXException for SAX errors.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>validating</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namespaceAware</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserConfigurationException</ExceptionType>
                <ExceptionType>SAXException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>XmlSlurper</MethodName>
            <MethodComment>/** 
 * Creates a &lt;code&gt;XmlSlurper&lt;/code&gt;.
 * @param validating &lt;code&gt;true&lt;/code&gt; if the parser should validate documents as they are parsed; false otherwise.
 * @param namespaceAware &lt;code&gt;true&lt;/code&gt; if the parser should provide support for XML namespaces; &lt;code&gt;false&lt;/code&gt; otherwise.
 * @param allowDocTypeDeclaration &lt;code&gt;true&lt;/code&gt; if the parser should provide support for DOCTYPE declarations; &lt;code&gt;false&lt;/code&gt; otherwise.
 * @throws ParserConfigurationException if no parser which satisfies the requested configuration can be created.
 * @throws SAXException for SAX errors.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>validating</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namespaceAware</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>allowDocTypeDeclaration</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SAXParserFactory [factory=FactorySupport.createSaxParserFactory()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>factory;setNamespaceAware;[namespaceAware]</InnerMethodInvoke>
                <InnerMethodInvoke>factory;setValidating;[validating]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setQuietly;[factory, XMLConstants.FEATURE_SECURE_PROCESSING, true]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setQuietly;[factory, "http://apache.org/xml/features/disallow-doctype-decl", !allowDocTypeDeclaration]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserConfigurationException</ExceptionType>
                <ExceptionType>SAXException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>XmlSlurper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>XMLReader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>XmlSlurper</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parser</ParamName>
                    <ParamType>SAXParser</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SAXException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setQuietly</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>factory</ParamName>
                    <ParamType>SAXParserFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>feature</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setKeepWhitespace</MethodName>
            <MethodComment>/** 
 * @deprecated use setKeepIgnorableWhitespace
 * @param keepWhitespace If true then whitespace before elements is kept.The default is to discard the whitespace.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keepWhitespace</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setKeepIgnorableWhitespace;[keepWhitespace]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setKeepIgnorableWhitespace</MethodName>
            <MethodComment>/** 
 * @param keepIgnorableWhitespace If true then ignorable whitespace (i.e. whitespace before elements) is kept.The default is to discard the whitespace.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>keepIgnorableWhitespace</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isKeepIgnorableWhitespace</MethodName>
            <MethodComment>/** 
 * @return true if ignorable whitespace is kept
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDocument</MethodName>
            <MethodComment>/** 
 * @return The GPathResult instance created by consuming a stream of SAX eventsNote if one of the parse methods has been called then this returns null Note if this is called more than once all calls after the first will return null
 */
</MethodComment>
            <ReturnType>GPathResult</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parse</MethodName>
            <MethodComment>/** 
 * Parse the content of the specified input source into a GPathResult object
 * @param input the InputSource to parse
 * @return An object which supports GPath expressions
 * @throws SAXException Any SAX exception, possibly wrapping another exception.
 * @throws IOException An IO exception from the parser, possibly from a byte streamor character stream supplied by the application.
 */
</MethodComment>
            <ReturnType>GPathResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>InputSource</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>reader;setContentHandler;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>reader;parse;[input]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SAXException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parse</MethodName>
            <MethodComment>/** 
 * Parses the content of the given file as XML turning it into a GPathResult object
 * @param file the File to parse
 * @return An object which supports GPath expressions
 * @throws SAXException Any SAX exception, possibly wrapping another exception.
 * @throws IOException An IO exception from the parser, possibly from a byte streamor character stream supplied by the application.
 */
</MethodComment>
            <ReturnType>GPathResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>FileInputStream [fis=new FileInputStream(file)]</InnerVar>
                <InnerVar>InputSource [input=new InputSource(fis)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>input;setSystemId;["file://" + file.getAbsolutePath()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SAXException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parse</MethodName>
            <MethodComment>/** 
 * Parse the content of the specified input stream into an GPathResult Object. Note that using this method will not provide the parser with any URI for which to find DTDs etc. It is up to you to close the InputStream after parsing is complete (if required).
 * @param input the InputStream to parse
 * @return An object which supports GPath expressions
 * @throws SAXException Any SAX exception, possibly wrapping another exception.
 * @throws IOException An IO exception from the parser, possibly from a byte streamor character stream supplied by the application.
 */
</MethodComment>
            <ReturnType>GPathResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SAXException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parse</MethodName>
            <MethodComment>/** 
 * Parse the content of the specified reader into a GPathResult Object. Note that using this method will not provide the parser with any URI for which to find DTDs etc. It is up to you to close the Reader after parsing is complete (if required).
 * @param in the Reader to parse
 * @return An object which supports GPath expressions
 * @throws SAXException Any SAX exception, possibly wrapping another exception.
 * @throws IOException An IO exception from the parser, possibly from a byte streamor character stream supplied by the application.
 */
</MethodComment>
            <ReturnType>GPathResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>in</ParamName>
                    <ParamType>Reader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SAXException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parse</MethodName>
            <MethodComment>/** 
 * Parse the content of the specified URI into a GPathResult Object
 * @param uri a String containing the URI to parse
 * @return An object which supports GPath expressions
 * @throws SAXException Any SAX exception, possibly wrapping another exception.
 * @throws IOException An IO exception from the parser, possibly from a byte streamor character stream supplied by the application.
 */
</MethodComment>
            <ReturnType>GPathResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uri</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SAXException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseText</MethodName>
            <MethodComment>/** 
 * A helper method to parse the given text as XML
 * @param text a String containing XML to parse
 * @return An object which supports GPath expressions
 * @throws SAXException Any SAX exception, possibly wrapping another exception.
 * @throws IOException An IO exception from the parser, possibly from a byte streamor character stream supplied by the application.
 */
</MethodComment>
            <ReturnType>GPathResult</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
                <ExceptionType>SAXException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDTDHandler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DTDHandler</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEntityResolver</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>EntityResolver</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getErrorHandler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ErrorHandler</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFeature</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uri</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SAXNotRecognizedException</ExceptionType>
                <ExceptionType>SAXNotSupportedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProperty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uri</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SAXNotRecognizedException</ExceptionType>
                <ExceptionType>SAXNotSupportedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setDTDHandler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dtdHandler</ParamName>
                    <ParamType>DTDHandler</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>reader;setDTDHandler;[dtdHandler]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setEntityResolver</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>entityResolver</ParamName>
                    <ParamType>EntityResolver</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>reader;setEntityResolver;[entityResolver]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setEntityBaseUrl</MethodName>
            <MethodComment>/** 
 * Resolves entities against using the supplied URL as the base for relative URLs
 * @param base The URL used to resolve relative URLs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>base</ParamName>
                    <ParamType>URL</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>reader;setEntityResolver;[new EntityResolver(){
  public InputSource resolveEntity(  final String publicId,  final String systemId) throws IOException {
    return new InputSource(new URL(base,systemId).openStream());
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>resolveEntity</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>InputSource</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>publicId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>systemId</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setErrorHandler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>errorHandler</ParamName>
                    <ParamType>ErrorHandler</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>reader;setErrorHandler;[errorHandler]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setFeature</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uri</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>reader;setFeature;[uri, value]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SAXNotRecognizedException</ExceptionType>
                <ExceptionType>SAXNotSupportedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setProperty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uri</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>reader;setProperty;[uri, value]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SAXNotRecognizedException</ExceptionType>
                <ExceptionType>SAXNotSupportedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startDocument</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>charBuffer;setLength;[0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SAXException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startPrefixMapping</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tag</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>uri</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SAXException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>startElement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>namespaceURI</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>localName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>atts</ParamName>
                    <ParamType>Attributes</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,String&gt; [attributes=new NamespaceAwareHashMap()]</InnerVar>
                <InnerVar>Map&lt;String,String&gt; [attributeNamespaces=new HashMap&lt;String,String&gt;()]</InnerVar>
                <InnerVar>Node [newElement]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addCdata;[]</InnerMethodInvoke>
                <InnerMethodInvoke>stack;push;[currentNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SAXException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ignorableWhitespace</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buffer</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>start</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>len</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SAXException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>characters</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ch</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>start</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>length</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>charBuffer;append;[ch, start, length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SAXException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>endElement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>namespaceURI</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>localName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>qName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Node [oldCurrentNode=stack.pop()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addCdata;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SAXException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>endDocument</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SAXException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addCdata</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>