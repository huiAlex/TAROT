<Class>
    <Id>973</Id>
    <Package>org.codehaus.groovy.util</Package>
    <ClassName>ManagedConcurrentValueMap</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ManagedConcurrentValueMap  /** 
 * This is a basic implementation of a map able to forget its values. This map uses internally a ConcurrentHashMap, thus should be save for concurrency. hashcode and equals are used to find the entries and should thus be implemented properly for the keys. This map does not support null keys.
 * @author &lt;a href="mailto:blackdrag@gmx.org"&gt;Jochen "blackdrag" Theodorou&lt;/a&gt;
 * @param &lt; K &gt; the key type
 * @param &lt; V &gt; the value type
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>internalMap</FieldName>
            <FieldType>ConcurrentHashMap</FieldType>
        </Field>
        <Field>
            <FieldName>internalMap</FieldName>
            <FieldType>K</FieldType>
        </Field>
        <Field>
            <FieldName>bundle</FieldName>
            <FieldType>ReferenceBundle</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ManagedConcurrentValueMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bundle</ParamName>
                    <ParamType>ReferenceBundle</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setBundle</MethodName>
            <MethodComment>/** 
 * Sets a new bundle used for reference creation. Be warned that older entries will not be changed by this
 * @param bundle - the ReferenceBundle
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bundle</ParamName>
                    <ParamType>ReferenceBundle</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment>/** 
 * Returns the value stored for the given key at the point of call.
 * @param key a non null key
 * @return the value stored in the map for the given key
 */
</MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ManagedReference&lt;V&gt; [ref=internalMap.get(key)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>put</MethodName>
            <MethodComment>/** 
 * Sets a new value for a given key. an older value is overwritten.
 * @param key a non null key
 * @param value the new value
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>key</ParamName>
                    <ParamType>K</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ManagedReference&lt;V&gt; [ref=new ManagedReference&lt;V&gt;(bundle,value){
  @Override public void finalizeReference(){
    super.finalizeReference();
    internalMap.remove(key,get());
  }
}
]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>internalMap;put;[key, ref]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finalizeReference</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>internalMap;remove;[key, get()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>