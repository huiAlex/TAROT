<Class>
    <Id>455</Id>
    <Package>org.codehaus.groovy.jsr223</Package>
    <ClassName>ScriptExtensions</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ScriptExtensions  /** 
 * This class defines new Java 6 specific groovy methods which extend the normal JDK classes inside the Groovy environment. Static methods are used with the first parameter the destination class.
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>eval</MethodName>
            <MethodComment>/** 
 * Executes the specified script.  The default &lt;code&gt;ScriptContext&lt;/code&gt; for the &lt;code&gt;ScriptEngine&lt;/code&gt; is used. Variables from a Groovy &lt;code&gt;Binding&lt;/code&gt; are made available in the default scope of the &lt;code&gt;Bindings&lt;/code&gt; of the &lt;code&gt;ScriptEngine&lt;/code&gt;. Resulting variables in the &lt;code&gt;Bindings&lt;/code&gt; are returned back to the Groovy &lt;code&gt;Binding&lt;/code&gt;.
 * @param self A ScriptEngine
 * @param script The script language source to be executed
 * @param binding A Groovy binding
 * @return The value returned from the execution of the script (if supported by the Script engine)
 * @throws javax.script.ScriptException if error occurs in script
 * @throws NullPointerException if the argument is null
 * @see #eval(javax.script.ScriptEngine,java.io.Reader,groovy.lang.Binding)
 * @since 1.7.3
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>ScriptEngine</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>script</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>binding</ParamName>
                    <ParamType>Binding</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [result=self.eval(script)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;storeBindingVars;[self, binding]</InnerMethodInvoke>
                <InnerMethodInvoke>null;retrieveBindingVars;[self, binding]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ScriptException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eval</MethodName>
            <MethodComment>/** 
 * Same as &lt;code&gt;eval(ScriptEngine, Reader, Binding)&lt;/code&gt; except that the source of the script is provided as a &lt;code&gt;Reader&lt;/code&gt;
 * @param self A ScriptEngine
 * @param reader The source of the script
 * @param binding A Groovy binding
 * @return The value returned by the script
 * @throws javax.script.ScriptException if an error occurs in script
 * @throws NullPointerException if the argument is null
 * @see #eval(javax.script.ScriptEngine,java.lang.String,groovy.lang.Binding)
 * @since 1.7.3
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>ScriptEngine</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>Reader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>binding</ParamName>
                    <ParamType>Binding</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [result=self.eval(reader)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;storeBindingVars;[self, binding]</InnerMethodInvoke>
                <InnerMethodInvoke>null;retrieveBindingVars;[self, binding]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ScriptException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>retrieveBindingVars</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>ScriptEngine</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>binding</ParamName>
                    <ParamType>Binding</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Map.Entry&lt;String,Object&gt;&gt; [returnVars=self.getBindings(ScriptContext.ENGINE_SCOPE).entrySet()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>storeBindingVars</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>ScriptEngine</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>binding</ParamName>
                    <ParamType>Binding</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;Map.Entry&gt; [vars=binding.getVariables().entrySet()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>