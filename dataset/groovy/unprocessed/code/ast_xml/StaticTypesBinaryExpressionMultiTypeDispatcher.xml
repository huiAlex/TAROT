<Class>
    <Id>761</Id>
    <Package>org.codehaus.groovy.classgen.asm.sc</Package>
    <ClassName>StaticTypesBinaryExpressionMultiTypeDispatcher</ClassName>
    <SuperClass>BinaryExpressionMultiTypeDispatcher</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Opcodes</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StaticTypesBinaryExpressionMultiTypeDispatcher  /** 
 * A specialized version of the multi type binary expression dispatcher which is aware of static compilation. It is able to generate optimized bytecode for some operations using JVM instructions when available.
 * @author Cedric Champeau
 * @author Jochen Theodorou
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>labelCounter</FieldName>
            <FieldType>AtomicInteger</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>StaticTypesBinaryExpressionMultiTypeDispatcher</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wc</ParamName>
                    <ParamType>WriterController</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>incValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>token</ParamName>
                    <ParamType>Token</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writePostOrPrefixMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>op</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>method</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>orig</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodNode [mn=orig.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET)]</InnerVar>
                <InnerVar>WriterController [controller=getController()]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>ClassNode [top=operandStack.getTopOperand()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>evaluateEqual</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>BinaryExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defineVariable</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformSpreadOnLHS</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>origin</ParamName>
                    <ParamType>BinaryExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>PropertyExpression [spreadExpression=(PropertyExpression)origin.getLeftExpression()]</InnerVar>
                <InnerVar>Expression [value=origin.getRightExpression()]</InnerVar>
                <InnerVar>WriterController [controller=getController()]</InnerVar>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>CompileStack [compileStack=controller.getCompileStack()]</InnerVar>
                <InnerVar>TypeChooser [typeChooser=controller.getTypeChooser()]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>ClassNode [classNode=controller.getClassNode()]</InnerVar>
                <InnerVar>int [counter=labelCounter.incrementAndGet()]</InnerVar>
                <InnerVar>Expression [receiver=spreadExpression.getObjectExpression()]</InnerVar>
                <InnerVar>VariableExpression [result=new VariableExpression(this.getClass().getSimpleName() + "$spreadresult" + counter,ARRAYLIST_CLASSNODE)]</InnerVar>
                <InnerVar>ConstructorCallExpression [cce=new ConstructorCallExpression(ARRAYLIST_CLASSNODE,ArgumentListExpression.EMPTY_ARGUMENTS)]</InnerVar>
                <InnerVar>DeclarationExpression [declr=new DeclarationExpression(result,Token.newSymbol("=",spreadExpression.getLineNumber(),spreadExpression.getColumnNumber()),cce)]</InnerVar>
                <InnerVar>Label [ifnull=compileStack.createLocalLabel("ifnull_" + counter)]</InnerVar>
                <InnerVar>Label [nonull=compileStack.createLocalLabel("nonull_" + counter)]</InnerVar>
                <InnerVar>ClassNode [componentType=StaticTypeCheckingVisitor.inferLoopElementType(typeChooser.resolveType(receiver,classNode))]</InnerVar>
                <InnerVar>Parameter [iterator=new Parameter(componentType,"for$it$" + counter)]</InnerVar>
                <InnerVar>VariableExpression [iteratorAsVar=new VariableExpression(iterator)]</InnerVar>
                <InnerVar>PropertyExpression [pexp=spreadExpression instanceof AttributeExpression ? new AttributeExpression(iteratorAsVar,spreadExpression.getProperty(),true) : new PropertyExpression(iteratorAsVar,spreadExpression.getProperty(),true)]</InnerVar>
                <InnerVar>BinaryExpression [assignment=new BinaryExpression(pexp,origin.getOperation(),value)]</InnerVar>
                <InnerVar>MethodCallExpression [add=new MethodCallExpression(result,"add",assignment)]</InnerVar>
                <InnerVar>ForStatement [stmt=new ForStatement(iterator,receiver,new ExpressionStatement(add))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cce;setNodeMetaData;[StaticTypesMarker.DIRECT_METHOD_CALL_TARGET, ARRAYLIST_CONSTRUCTOR]</InnerMethodInvoke>
                <InnerMethodInvoke>declr;visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>receiver;visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitJumpInsn;[IFNULL, ifnull]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;remove;[1]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[nonull]</InnerMethodInvoke>
                <InnerMethodInvoke>pexp;setImplicitThis;[spreadExpression.isImplicitThis()]</InnerMethodInvoke>
                <InnerMethodInvoke>pexp;setSourcePosition;[spreadExpression]</InnerMethodInvoke>
                <InnerMethodInvoke>add;setMethodTarget;[ARRAYLIST_ADD_METHOD]</InnerMethodInvoke>
                <InnerMethodInvoke>stmt;visit;[controller.getAcg()]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitLabel;[ifnull]</InnerMethodInvoke>
                <InnerMethodInvoke>result;visit;[controller.getAcg()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeSetProperty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>safe</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>spreadSafe</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>implicitThis</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>isAttribute</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>WriterController [controller=getController()]</InnerVar>
                <InnerVar>TypeChooser [typeChooser=controller.getTypeChooser()]</InnerVar>
                <InnerVar>ClassNode [receiverType=typeChooser.resolveType(receiver,controller.getClassNode())]</InnerVar>
                <InnerVar>String [property=message.getText()]</InnerVar>
                <InnerVar>boolean [isThisExpression=receiver instanceof VariableExpression &amp;&amp; ((VariableExpression)receiver).isThisExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assignToArray</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parent</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>receiver</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rhsValueLoader</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [current=getController().getClassNode()]</InnerVar>
                <InnerVar>ClassNode [arrayType=getController().getTypeChooser().resolveType(receiver,current)]</InnerVar>
                <InnerVar>ClassNode [arrayComponentType=arrayType.getComponentType()]</InnerVar>
                <InnerVar>int [operationType=getOperandType(arrayComponentType)]</InnerVar>
                <InnerVar>BinaryExpressionWriter [bew=binExpWriter[operationType]]</InnerVar>
                <InnerVar>AsmClassGenerator [acg=getController().getAcg()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>