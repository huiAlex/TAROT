<Class>
    <Id>481</Id>
    <Package>groovy.xml</Package>
    <ClassName>XmlUtil</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>XmlUtil  /** 
 * Used for pretty printing XML content and other XML related utilities.
 * @author Paul King
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment>/** 
 * Return a pretty String version of the Element.
 * @param element the Element to serialize
 * @return the pretty String representation of the Element
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>element</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringWriter [sw=new StringWriter()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;serialize;[new DOMSource(element), sw]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment>/** 
 * Write a pretty version of the Element to the OutputStream.
 * @param element the Element to serialize
 * @param os      the OutputStream to write to
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>element</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>os</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Source [source=new DOMSource(element)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;serialize;[source, os]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment>/** 
 * Write a pretty version of the Element to the Writer.
 * @param element the Element to serialize
 * @param w       the Writer to write to
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>element</ParamName>
                    <ParamType>Element</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>w</ParamName>
                    <ParamType>Writer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Source [source=new DOMSource(element)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;serialize;[source, w]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment>/** 
 * Return a pretty String version of the Node.
 * @param node the Node to serialize
 * @return the pretty String representation of the Node
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Node</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment>/** 
 * Write a pretty version of the Node to the OutputStream.
 * @param node the Node to serialize
 * @param os   the OutputStream to write to
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Node</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>os</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;serialize;[asString(node), os]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment>/** 
 * Write a pretty version of the Node to the Writer.
 * @param node the Node to serialize
 * @param w    the Writer to write to
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Node</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>w</ParamName>
                    <ParamType>Writer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;serialize;[asString(node), w]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment>/** 
 * Return a pretty version of the GPathResult.
 * @param node a GPathResult to serialize to a String
 * @return the pretty String representation of the GPathResult
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>GPathResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment>/** 
 * Write a pretty version of the GPathResult to the OutputStream.
 * @param node a GPathResult to serialize
 * @param os   the OutputStream to write to
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>GPathResult</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>os</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;serialize;[asString(node), os]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment>/** 
 * Write a pretty version of the GPathResult to the Writer.
 * @param node a GPathResult to serialize
 * @param w    the Writer to write to
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>GPathResult</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>w</ParamName>
                    <ParamType>Writer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;serialize;[asString(node), w]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment>/** 
 * Return a pretty String version of the XML content produced by the Writable.
 * @param writable the Writable to serialize
 * @return the pretty String representation of the content from the Writable
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>writable</ParamName>
                    <ParamType>Writable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment>/** 
 * Write a pretty version of the XML content produced by the Writable to the OutputStream.
 * @param writable the Writable to serialize
 * @param os       the OutputStream to write to
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>writable</ParamName>
                    <ParamType>Writable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>os</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;serialize;[asString(writable), os]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment>/** 
 * Write a pretty version of the XML content produced by the Writable to the Writer.
 * @param writable the Writable to serialize
 * @param w        the Writer to write to
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>writable</ParamName>
                    <ParamType>Writable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>w</ParamName>
                    <ParamType>Writer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;serialize;[asString(writable), w]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment>/** 
 * Return a pretty version of the XML content contained in the given String.
 * @param xmlString the String to serialize
 * @return the pretty String representation of the original content
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xmlString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringWriter [sw=new StringWriter()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;serialize;[asStreamSource(xmlString), sw]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment>/** 
 * Write a pretty version of the given XML string to the OutputStream.
 * @param xmlString the String to serialize
 * @param os        the OutputStream to write to
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xmlString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>os</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;serialize;[asStreamSource(xmlString), os]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment>/** 
 * Write a pretty version of the given XML string to the Writer.
 * @param xmlString the String to serialize
 * @param w         the Writer to write to
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xmlString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>w</ParamName>
                    <ParamType>Writer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;serialize;[asStreamSource(xmlString), w]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newSAXParser</MethodName>
            <MethodComment>/** 
 * Factory method to create a SAXParser configured to validate according to a particular schema language and optionally providing the schema sources to validate with. The created SAXParser will be namespace-aware and not validate against DTDs.
 * @param schemaLanguage the schema language used, e.g. XML Schema or RelaxNG (as per the String representation in javax.xml.XMLConstants)
 * @param schemas        the schemas to validate against
 * @return the created SAXParser
 * @throws SAXException
 * @throws ParserConfigurationException
 * @see #newSAXParser(String,boolean,boolean,Source...)
 * @since 1.8.7
 */
</MethodComment>
            <ReturnType>SAXParser</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schemaLanguage</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemas</ParamName>
                    <ParamType>Source</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SAXException</ExceptionType>
                <ExceptionType>ParserConfigurationException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newSAXParser</MethodName>
            <MethodComment>/** 
 * Factory method to create a SAXParser configured to validate according to a particular schema language and optionally providing the schema sources to validate with.
 * @param schemaLanguage the schema language used, e.g. XML Schema or RelaxNG (as per the String representation in javax.xml.XMLConstants)
 * @param namespaceAware will the parser be namespace aware
 * @param validating     will the parser also validate against DTDs
 * @param schemas        the schemas to validate against
 * @return the created SAXParser
 * @throws SAXException
 * @throws ParserConfigurationException
 * @since 1.8.7
 */
</MethodComment>
            <ReturnType>SAXParser</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schemaLanguage</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namespaceAware</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>validating</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schemas</ParamName>
                    <ParamType>Source</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SAXParserFactory [factory=SAXParserFactory.newInstance()]</InnerVar>
                <InnerVar>SAXParser [saxParser=factory.newSAXParser()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>factory;setValidating;[validating]</InnerMethodInvoke>
                <InnerMethodInvoke>factory;setNamespaceAware;[namespaceAware]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SAXException</ExceptionType>
                <ExceptionType>ParserConfigurationException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newSAXParser</MethodName>
            <MethodComment>/** 
 * Factory method to create a SAXParser configured to validate according to a particular schema language and a File containing the schema to validate against. The created SAXParser will be namespace-aware and not validate against DTDs.
 * @param schemaLanguage the schema language used, e.g. XML Schema or RelaxNG (as per the String representation in javax.xml.XMLConstants)
 * @param schema         a file containing the schema to validate against
 * @return the created SAXParser
 * @throws SAXException
 * @throws ParserConfigurationException
 * @see #newSAXParser(String,boolean,boolean,File)
 * @since 1.8.7
 */
</MethodComment>
            <ReturnType>SAXParser</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schemaLanguage</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schema</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SAXException</ExceptionType>
                <ExceptionType>ParserConfigurationException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newSAXParser</MethodName>
            <MethodComment>/** 
 * Factory method to create a SAXParser configured to validate according to a particular schema language and a File containing the schema to validate against.
 * @param schemaLanguage the schema language used, e.g. XML Schema or RelaxNG (as per the String representation in javax.xml.XMLConstants)
 * @param namespaceAware will the parser be namespace aware
 * @param validating     will the parser also validate against DTDs
 * @param schema         a file containing the schema to validate against
 * @return the created SAXParser
 * @throws SAXException
 * @throws ParserConfigurationException
 * @since 1.8.7
 */
</MethodComment>
            <ReturnType>SAXParser</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schemaLanguage</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namespaceAware</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>validating</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schema</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SchemaFactory [schemaFactory=SchemaFactory.newInstance(schemaLanguage)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SAXException</ExceptionType>
                <ExceptionType>ParserConfigurationException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newSAXParser</MethodName>
            <MethodComment>/** 
 * Factory method to create a SAXParser configured to validate according to a particular schema language and an URL pointing to the schema to validate against. The created SAXParser will be namespace-aware and not validate against DTDs.
 * @param schemaLanguage the schema language used, e.g. XML Schema or RelaxNG (as per the String representation in javax.xml.XMLConstants)
 * @param schema         a URL pointing to the schema to validate against
 * @return the created SAXParser
 * @throws SAXException
 * @throws ParserConfigurationException
 * @see #newSAXParser(String,boolean,boolean,URL)
 * @since 1.8.7
 */
</MethodComment>
            <ReturnType>SAXParser</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schemaLanguage</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schema</ParamName>
                    <ParamType>URL</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SAXException</ExceptionType>
                <ExceptionType>ParserConfigurationException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newSAXParser</MethodName>
            <MethodComment>/** 
 * Factory method to create a SAXParser configured to validate according to a particular schema language and an URL pointing to the schema to validate against.
 * @param schemaLanguage the schema language used, e.g. XML Schema or RelaxNG (as per the String representation in javax.xml.XMLConstants)
 * @param namespaceAware will the parser be namespace aware
 * @param validating     will the parser also validate against DTDs
 * @param schema         a URL pointing to the schema to validate against
 * @return the created SAXParser
 * @throws SAXException
 * @throws ParserConfigurationException
 * @since 1.8.7
 */
</MethodComment>
            <ReturnType>SAXParser</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>schemaLanguage</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>namespaceAware</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>validating</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schema</ParamName>
                    <ParamType>URL</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SchemaFactory [schemaFactory=SchemaFactory.newInstance(schemaLanguage)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SAXException</ExceptionType>
                <ExceptionType>ParserConfigurationException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>escapeXml</MethodName>
            <MethodComment>/** 
 * Escape the following characters  {@code " ' &amp; &lt; &gt;} with their XML entities, e.g.{@code "bread" &amp; "butter"} becomes {@code &amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot}. Notes:&lt;ul&gt; &lt;li&gt;Supports only the five basic XML entities (gt, lt, quot, amp, apos)&lt;/li&gt; &lt;li&gt;Does not escape control characters&lt;/li&gt; &lt;li&gt;Does not support DTDs or external entities&lt;/li&gt; &lt;li&gt;Does not treat surrogate pairs specially&lt;/li&gt; &lt;li&gt;Does not perform Unicode validation on its input&lt;/li&gt; &lt;/ul&gt;
 * @param orig the original String
 * @return A new string in which all characters that require escapinghave been replaced with the corresponding XML entities.
 * @see #escapeControlCharacters(String)
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>orig</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arg</ParamName>
                    <ParamType>Character</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>escapeControlCharacters</MethodName>
            <MethodComment>/** 
 * Escape control characters (below 0x20) with their XML entities, e.g. carriage return ( {@code Ctrl-M or \r}) becomes  {@code &amp;#13;}Notes:&lt;ul&gt; &lt;li&gt;Does not escape non-ascii characters above 0x7e&lt;/li&gt; &lt;li&gt;Does not treat surrogate pairs specially&lt;/li&gt; &lt;li&gt;Does not perform Unicode validation on its input&lt;/li&gt; &lt;/ul&gt;
 * @param orig the original String
 * @return A new string in which all characters that require escapinghave been replaced with the corresponding XML entities.
 * @see #escapeXml(String)
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>orig</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arg</ParamName>
                    <ParamType>Character</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newSAXParser</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SAXParser</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>namespaceAware</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>validating</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>schema1</ParamName>
                    <ParamType>Schema</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SAXParserFactory [factory=SAXParserFactory.newInstance()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>factory;setValidating;[validating]</InnerMethodInvoke>
                <InnerMethodInvoke>factory;setNamespaceAware;[namespaceAware]</InnerMethodInvoke>
                <InnerMethodInvoke>factory;setSchema;[schema1]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserConfigurationException</ExceptionType>
                <ExceptionType>SAXException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>Node</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringWriter [sw=new StringWriter()]</InnerVar>
                <InnerVar>PrintWriter [pw=new PrintWriter(sw)]</InnerVar>
                <InnerVar>XmlNodePrinter [nodePrinter=new XmlNodePrinter(pw)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>nodePrinter;setPreserveWhitespace;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>nodePrinter;print;[node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>GPathResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>writable</ParamName>
                    <ParamType>Writable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Writer [sw=new StringWriter()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asStreamSource</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>StreamSource</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>xmlString</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>Source</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>os</ParamName>
                    <ParamType>OutputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>Source</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>w</ParamName>
                    <ParamType>Writer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;serialize;[source, new StreamResult(w)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>serialize</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>Source</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>target</ParamName>
                    <ParamType>StreamResult</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TransformerFactory [factory=TransformerFactory.newInstance()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setIndent;[factory, 2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setIndent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>factory</ParamName>
                    <ParamType>TransformerFactory</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>indent</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>