<Class>
    <Id>1197</Id>
    <Package>org.codehaus.groovy.antlr.java</Package>
    <ClassName>Java2GroovyProcessor</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>processFiles</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fileNames</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Iterator [i=fileNames.iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convert</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filename</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convert</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filename</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>withHeader</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>withNewLines</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>JavaRecognizer [parser=getJavaParser(input)]</InnerVar>
                <InnerVar>String[] [tokenNames=parser.getTokenNames()]</InnerVar>
                <InnerVar>AST [ast=parser.getAST()]</InnerVar>
                <InnerVar>String[] [groovyTokenNames=getGroovyTokenNames(input)]</InnerVar>
                <InnerVar>ByteArrayOutputStream [baos=new ByteArrayOutputStream()]</InnerVar>
                <InnerVar>Visitor [visitor=new SourcePrinter(new PrintStream(baos),groovyTokenNames,withNewLines)]</InnerVar>
                <InnerVar>AntlrASTProcessor [traverser=new SourceCodeTraversal(visitor)]</InnerVar>
                <InnerVar>String [header=""]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>parser;compilationUnit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;modifyJavaASTintoGroovyAST;[tokenNames, ast]</InnerMethodInvoke>
                <InnerMethodInvoke>null;groovifyFatJavaLikeGroovyAST;[ast, groovyTokenNames]</InnerMethodInvoke>
                <InnerMethodInvoke>traverser;process;[ast]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>groovifyFatJavaLikeGroovyAST</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ast</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>groovyTokenNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Visitor [groovifier=new Groovifier(groovyTokenNames)]</InnerVar>
                <InnerVar>AntlrASTProcessor [groovifierTraverser=new PreOrderTraversal(groovifier)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>groovifierTraverser;process;[ast]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>modifyJavaASTintoGroovyAST</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tokenNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ast</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Visitor [preJava2groovyConverter=new PreJava2GroovyConverter(tokenNames)]</InnerVar>
                <InnerVar>AntlrASTProcessor [preJava2groovyTraverser=new PreOrderTraversal(preJava2groovyConverter)]</InnerVar>
                <InnerVar>Visitor [java2groovyConverter=new Java2GroovyConverter(tokenNames)]</InnerVar>
                <InnerVar>AntlrASTProcessor [java2groovyTraverser=new PreOrderTraversal(java2groovyConverter)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>preJava2groovyTraverser;process;[ast]</InnerMethodInvoke>
                <InnerMethodInvoke>java2groovyTraverser;process;[ast]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getJavaParser</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>JavaRecognizer</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>JavaRecognizer [parser=null]</InnerVar>
                <InnerVar>SourceBuffer [sourceBuffer=new SourceBuffer()]</InnerVar>
                <InnerVar>UnicodeEscapingReader [unicodeReader=new UnicodeEscapingReader(new StringReader(input),sourceBuffer)]</InnerVar>
                <InnerVar>JavaLexer [lexer=new JavaLexer(unicodeReader)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>unicodeReader;setLexer;[lexer]</InnerMethodInvoke>
                <InnerMethodInvoke>parser;setSourceBuffer;[sourceBuffer]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mindmap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>JavaRecognizer [parser=getJavaParser(input)]</InnerVar>
                <InnerVar>String[] [tokenNames=parser.getTokenNames()]</InnerVar>
                <InnerVar>AST [ast=parser.getAST()]</InnerVar>
                <InnerVar>String[] [groovyTokenNames=getGroovyTokenNames(input)]</InnerVar>
                <InnerVar>ByteArrayOutputStream [baos=new ByteArrayOutputStream()]</InnerVar>
                <InnerVar>Visitor [visitor=new MindMapPrinter(new PrintStream(baos),groovyTokenNames)]</InnerVar>
                <InnerVar>AntlrASTProcessor [traverser=new SourceCodeTraversal(visitor)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>parser;compilationUnit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;modifyJavaASTintoGroovyAST;[tokenNames, ast]</InnerMethodInvoke>
                <InnerMethodInvoke>null;groovifyFatJavaLikeGroovyAST;[ast, groovyTokenNames]</InnerMethodInvoke>
                <InnerMethodInvoke>traverser;process;[ast]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>nodePrinter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>JavaRecognizer [parser=getJavaParser(input)]</InnerVar>
                <InnerVar>String[] [tokenNames=parser.getTokenNames()]</InnerVar>
                <InnerVar>AST [ast=parser.getAST()]</InnerVar>
                <InnerVar>String[] [groovyTokenNames=getGroovyTokenNames(input)]</InnerVar>
                <InnerVar>ByteArrayOutputStream [baos=new ByteArrayOutputStream()]</InnerVar>
                <InnerVar>Visitor [visitor=new NodePrinter(new PrintStream(baos),groovyTokenNames)]</InnerVar>
                <InnerVar>AntlrASTProcessor [traverser=new SourceCodeTraversal(visitor)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>parser;compilationUnit;[]</InnerMethodInvoke>
                <InnerMethodInvoke>null;modifyJavaASTintoGroovyAST;[tokenNames, ast]</InnerMethodInvoke>
                <InnerMethodInvoke>null;groovifyFatJavaLikeGroovyAST;[ast, groovyTokenNames]</InnerMethodInvoke>
                <InnerMethodInvoke>traverser;process;[ast]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGroovyTokenNames</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>input</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GroovyRecognizer [groovyParser=null]</InnerVar>
                <InnerVar>SourceBuffer [groovySourceBuffer=new SourceBuffer()]</InnerVar>
                <InnerVar>UnicodeEscapingReader [groovyUnicodeReader=new UnicodeEscapingReader(new StringReader(input),groovySourceBuffer)]</InnerVar>
                <InnerVar>GroovyLexer [groovyLexer=new GroovyLexer(groovyUnicodeReader)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>groovyUnicodeReader;setLexer;[groovyLexer]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>