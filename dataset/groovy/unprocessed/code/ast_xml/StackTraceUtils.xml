<Class>
    <Id>749</Id>
    <Package>org.codehaus.groovy.runtime</Package>
    <ClassName>StackTraceUtils</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StackTraceUtils  /** 
 * Originally was grails.utils.GrailsUtils, removed some grails specific stuff. Utility methods removing internal lines from stack traces
 * @author Graeme Rocher
 * @version $Revision: 5544 $
 * @since 1.5
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>STACK_LOG_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>STACK_LOG</FieldName>
            <FieldType>Logger</FieldType>
        </Field>
        <Field>
            <FieldName>GROOVY_PACKAGES</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>tests</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>tests</FieldName>
            <FieldType>Closure</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>addClassTest</MethodName>
            <MethodComment>/** 
 * Adds a groovy.lang.Closure to test whether the stack trace element should be added or not. &lt;p&gt; The groovy.lang.Closure will be given the class name as parameter. the return value decides if the element will be added or not. &lt;ul&gt; &lt;li&gt;&lt;b&gt;true&lt;/b&gt;  - trace element will be added to the trace &lt;li&gt;&lt;b&gt;false&lt;/b&gt; - trace element will &lt;b&gt;not&lt;/b&gt; be added to the trace &lt;li&gt;&lt;b&gt;null&lt;/b&gt;  - continue with next test &lt;/ul&gt; Groovy truth will be used to determine true and false, null is excluded from defaulting to false here. If all tests have been executed and all of them skipped, then the groovy standard filtering will take place.
 * @param test the testing groovy.lang.Closure
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>test</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>tests;add;[test]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sanitize</MethodName>
            <MethodComment>/** 
 * Remove all apparently groovy-internal trace entries from the exception instance &lt;p&gt; This modifies the original instance and returns it, it does not clone
 * @param t the Throwable whose stack trace we want to sanitize
 * @return The original Throwable but with a sanitized stack trace
 */
</MethodComment>
            <ReturnType>Throwable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printSanitizedStackTrace</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>PrintWriter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StackTraceElement[] [trace=t.getStackTrace()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printSanitizedStackTrace</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;printSanitizedStackTrace;[t, new PrintWriter(System.err)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isApplicationClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>className</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>extractRootCause</MethodName>
            <MethodComment>/** 
 * Extracts the root cause of the exception, no matter how nested it is
 * @param t a Throwable
 * @return The deepest cause of the exception that can be found
 */
</MethodComment>
            <ReturnType>Throwable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Throwable [result=t]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sanitizeRootCause</MethodName>
            <MethodComment>/** 
 * Get the root cause of an exception and sanitize it for display to the user &lt;p&gt; This will MODIFY the stacktrace of the root cause exception object and return it
 * @param t a throwable
 * @return The root cause exception instance, with its stace trace modified to filter out groovy runtime classes
 */
</MethodComment>
            <ReturnType>Throwable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>deepSanitize</MethodName>
            <MethodComment>/** 
 * Sanitize the exception and ALL nested causes &lt;p&gt; This will MODIFY the stacktrace of the exception instance and all its causes irreversibly
 * @param t a throwable
 * @return The root cause exception instances, with stack trace modified to filter out groovy runtime classes
 */
</MethodComment>
            <ReturnType>Throwable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Throwable [current=t]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>