<Class>
    <Id>893</Id>
    <Package>groovy.util</Package>
    <ClassName>GroovyAssert</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GroovyAssert  /** 
 * @deprecated Use the {@link groovy.test.GroovyAssert} class instead
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MAX_NESTED_EXCEPTIONS</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>shouldFail</MethodName>
            <MethodComment>/** 
 * Asserts that the given code closure fails when it is evaluated
 * @param code the code expected to throw the exception
 * @return the message of the thrown Throwable
 */
</MethodComment>
            <ReturnType>Throwable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>code</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [failed=false]</InnerVar>
                <InnerVar>Throwable [th=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertTrue;["Closure " + code + " should have failed", failed]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shouldFail</MethodName>
            <MethodComment>/** 
 * Asserts that the given code closure fails when it is evaluated and that a particular exception is thrown.
 * @param clazz the class of the expected exception
 * @param code  the closure that should fail
 * @return the message of the expected Throwable
 */
</MethodComment>
            <ReturnType>Throwable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>code</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Throwable [th=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>shouldFailWithCause</MethodName>
            <MethodComment>/** 
 * Asserts that the given code closure fails when it is evaluated and that a particular exception can be attributed to the cause. The expected exception class is compared recursively with any nested exceptions using getCause() until either a match is found or no more nested exceptions exist. &lt;p&gt; If a match is found the error message associated with the matching exception is returned. If no match was found the method will fail.
 * @param clazz the class of the expected exception
 * @param code  the closure that should fail
 * @return the message of the expected Throwable
 */
</MethodComment>
            <ReturnType>Throwable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>clazz</ParamName>
                    <ParamType>Class</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>code</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Throwable [th=null]</InnerVar>
                <InnerVar>Throwable [orig=null]</InnerVar>
                <InnerVar>int [level=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildExceptionList</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>th</ParamName>
                    <ParamType>Throwable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [sb=new StringBuilder()]</InnerVar>
                <InnerVar>int [level=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>