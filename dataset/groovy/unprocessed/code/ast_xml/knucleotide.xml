<Class>
    <Id>358</Id>
    <ClassName>knucleotide</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>sequence</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>count</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>knucleotide</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sequence</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createFragmentTasks</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Callable&lt;Map&lt;String,knucleotide&gt;&gt;</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sequence</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fragmentLengths</ParamName>
                    <ParamType>int[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ArrayList&lt;Callable&lt;Map&lt;String,knucleotide&gt;&gt;&gt; [tasks=new ArrayList&lt;Callable&lt;Map&lt;String,knucleotide&gt;&gt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createFragmentMap</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sequence</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>offset</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fragmentLength</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>HashMap&lt;String,knucleotide&gt; [map=new HashMap&lt;String,knucleotide&gt;()]</InnerVar>
                <InnerVar>int [lastIndex=sequence.length() - fragmentLength + 1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sumTwoMaps</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>map1</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>map2</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeFrequencies</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>frequencies</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ArrayList&lt;knucleotide&gt; [list=new ArrayList&lt;knucleotide&gt;(frequencies.size())]</InnerVar>
                <InnerVar>int [sum=0]</InnerVar>
                <InnerVar>StringBuilder [sb=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>Collections;sort;[list, new Comparator&lt;knucleotide&gt;(){
  public int compare(  knucleotide o1,  knucleotide o2){
    int c=o2.count - o1.count;
    if (c == 0) {
      c=o1.sequence.compareTo(o2.sequence);
    }
    return c;
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>compare</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>o1</ParamName>
                    <ParamType>knucleotide</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>o2</ParamName>
                    <ParamType>knucleotide</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [c=o2.count - o1.count]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeCount</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>futures</ParamName>
                    <ParamType>Future&lt;Map&lt;String,knucleotide&gt;&gt;</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nucleotideFragment</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [count=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>main</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [line]</InnerVar>
                <InnerVar>BufferedReader [in=new BufferedReader(new InputStreamReader(System.in))]</InnerVar>
                <InnerVar>StringBuilder [sbuilder=new StringBuilder()]</InnerVar>
                <InnerVar>ExecutorService [pool=Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors())]</InnerVar>
                <InnerVar>int[] [fragmentLengths={1,2,3,4,6,12,18}]</InnerVar>
                <InnerVar>List&lt;Future&lt;Map&lt;String,knucleotide&gt;&gt;&gt; [futures=pool.invokeAll(createFragmentTasks(sbuilder.toString(),fragmentLengths))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>pool;shutdown;[]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;[writeFrequencies(futures.get(0).get())]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;[writeFrequencies(sumTwoMaps(futures.get(1).get(),futures.get(2).get()))]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;[writeCount(futures,"ggt")]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;[writeCount(futures,"ggta")]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;[writeCount(futures,"ggtatt")]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;[writeCount(futures,"ggtattttaatt")]</InnerMethodInvoke>
                <InnerMethodInvoke>System.out;println;[writeCount(futures,"ggtattttaatttatagt")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>Exception</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>