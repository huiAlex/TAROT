<Class>
    <Id>662</Id>
    <Package>org.codehaus.groovy.classgen.asm</Package>
    <ClassName>ClosureWriter</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>closureClassMap</FieldName>
            <FieldType>Map</FieldType>
        </Field>
        <Field>
            <FieldName>closureClassMap</FieldName>
            <FieldType>Expression</FieldType>
        </Field>
        <Field>
            <FieldName>controller</FieldName>
            <FieldType>WriterController</FieldType>
        </Field>
        <Field>
            <FieldName>factory</FieldName>
            <FieldType>WriterControllerFactory</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ClosureWriter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wc</ParamName>
                    <ParamType>WriterController</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeController</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>WriterController</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>normalController</ParamName>
                    <ParamType>WriterController</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>writeClosure</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>ClosureExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompileStack [compileStack=controller.getCompileStack()]</InnerVar>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>ClassNode [classNode=controller.getClassNode()]</InnerVar>
                <InnerVar>AsmClassGenerator [acg=controller.getAcg()]</InnerVar>
                <InnerVar>ClassNode [closureClass=getOrAddClosureClass(expression,0)]</InnerVar>
                <InnerVar>String [closureClassinternalName=BytecodeHelper.getClassInternalName(closureClass)]</InnerVar>
                <InnerVar>List [constructors=closureClass.getDeclaredConstructors()]</InnerVar>
                <InnerVar>ConstructorNode [node=(ConstructorNode)constructors.get(0)]</InnerVar>
                <InnerVar>Parameter[] [localVariableParams=node.getParameters()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitTypeInsn;[NEW, closureClassinternalName]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitInsn;[DUP]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESPECIAL, closureClassinternalName, "&lt;init&gt;", BytecodeHelper.getMethodDescriptor(ClassHelper.VOID_TYPE,localVariableParams), false]</InnerMethodInvoke>
                <InnerMethodInvoke>controller.getOperandStack();replace;[ClassHelper.CLOSURE_TYPE, localVariableParams.length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadReference</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>controller</ParamName>
                    <ParamType>WriterController</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CompileStack [compileStack=controller.getCompileStack()]</InnerVar>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>ClassNode [classNode=controller.getClassNode()]</InnerVar>
                <InnerVar>AsmClassGenerator [acg=controller.getAcg()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getOrAddClosureClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>ClosureExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mods</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [closureClass=closureClassMap.get(expression)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>classNodeUsesReferences</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [ret=classNode.getSuperClass() == ClassHelper.CLOSURE_TYPE]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createClosureClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>ClosureExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mods</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [classNode=controller.getClassNode()]</InnerVar>
                <InnerVar>ClassNode [outerClass=controller.getOutermostClass()]</InnerVar>
                <InnerVar>MethodNode [methodNode=controller.getMethodNode()]</InnerVar>
                <InnerVar>String [name=classNode.getName() + "$" + controller.getContext().getNextClosureInnerName(outerClass,classNode,methodNode)]</InnerVar>
                <InnerVar>boolean [staticMethodOrInStaticClass=controller.isStaticMethod() || classNode.isStaticClass()]</InnerVar>
                <InnerVar>Parameter[] [parameters=expression.getParameters()]</InnerVar>
                <InnerVar>Parameter[] [localVariableParams=getClosureSharedVariables(expression)]</InnerVar>
                <InnerVar>InnerClassNode [answer=new InnerClassNode(classNode,name,mods,ClassHelper.CLOSURE_TYPE.getPlainNodeReference())]</InnerVar>
                <InnerVar>MethodNode [method=answer.addMethod("doCall",ACC_PUBLIC,ClassHelper.OBJECT_TYPE,parameters,ClassNode.EMPTY_ARRAY,expression.getCode())]</InnerVar>
                <InnerVar>VariableScope [varScope=expression.getVariableScope()]</InnerVar>
                <InnerVar>BlockStatement [block=new BlockStatement()]</InnerVar>
                <InnerVar>VariableExpression [outer=new VariableExpression("_outerInstance")]</InnerVar>
                <InnerVar>VariableExpression [thisObject=new VariableExpression("_thisObject")]</InnerVar>
                <InnerVar>TupleExpression [conArgs=new TupleExpression(outer,thisObject)]</InnerVar>
                <InnerVar>Parameter[] [params=new Parameter[2 + localVariableParams.length]]</InnerVar>
                <InnerVar>ASTNode [sn=answer.addConstructor(ACC_PUBLIC,params,ClassNode.EMPTY_ARRAY,block)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;removeInitialValues;[localVariableParams]</InnerMethodInvoke>
                <InnerMethodInvoke>answer;setEnclosingMethod;[controller.getMethodNode()]</InnerMethodInvoke>
                <InnerMethodInvoke>answer;setSynthetic;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>answer;setUsingGenerics;[outerClass.isUsingGenerics()]</InnerMethodInvoke>
                <InnerMethodInvoke>answer;setSourcePosition;[expression]</InnerMethodInvoke>
                <InnerMethodInvoke>method;setSourcePosition;[expression]</InnerMethodInvoke>
                <InnerMethodInvoke>outer;setSourcePosition;[expression]</InnerMethodInvoke>
                <InnerMethodInvoke>block.getVariableScope();putReferencedLocalVariable;[outer]</InnerMethodInvoke>
                <InnerMethodInvoke>thisObject;setSourcePosition;[expression]</InnerMethodInvoke>
                <InnerMethodInvoke>block.getVariableScope();putReferencedLocalVariable;[thisObject]</InnerMethodInvoke>
                <InnerMethodInvoke>block;addStatement;[new ExpressionStatement(new ConstructorCallExpression(ClassNode.SUPER,conArgs))]</InnerMethodInvoke>
                <InnerMethodInvoke>System;arraycopy;[localVariableParams, 0, params, 2, localVariableParams.length]</InnerMethodInvoke>
                <InnerMethodInvoke>sn;setSourcePosition;[expression]</InnerMethodInvoke>
                <InnerMethodInvoke>null;correctAccessedVariable;[answer, expression]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>correctAccessedVariable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>closureClass</ParamName>
                    <ParamType>InnerClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ce</ParamName>
                    <ParamType>ClosureExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>CodeVisitorSupport [visitor=new CodeVisitorSupport(){
  @Override public void visitVariableExpression(  VariableExpression expression){
    Variable v=expression.getAccessedVariable();
    if (v == null)     return;
    if (!(v instanceof FieldNode))     return;
    String name=expression.getName();
    FieldNode fn=closureClass.getDeclaredField(name);
    if (fn != null) {
      expression.setAccessedVariable(fn);
    }
  }
}
]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>visitor;visitClosureExpression;[ce]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitVariableExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>VariableExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Variable [v=expression.getAccessedVariable()]</InnerVar>
                <InnerVar>String [name=expression.getName()]</InnerVar>
                <InnerVar>FieldNode [fn=closureClass.getDeclaredField(name)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeInitialValues</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Parameter[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addGeneratedClosureConstructorCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>call</ParamName>
                    <ParamType>ConstructorCallExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [classNode=controller.getClassNode()]</InnerVar>
                <InnerVar>AsmClassGenerator [acg=controller.getAcg()]</InnerVar>
                <InnerVar>OperandStack [operandStack=controller.getOperandStack()]</InnerVar>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
                <InnerVar>ClassNode [callNode=classNode.getSuperClass()]</InnerVar>
                <InnerVar>TupleExpression [arguments=(TupleExpression)call.getArguments()]</InnerVar>
                <InnerVar>Parameter [p=new Parameter(ClassHelper.OBJECT_TYPE,"_p")]</InnerVar>
                <InnerVar>String [descriptor=BytecodeHelper.getMethodDescriptor(ClassHelper.VOID_TYPE,new Parameter[]{p,p})]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
                <InnerMethodInvoke>arguments.getExpression(0);visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;box;[]</InnerMethodInvoke>
                <InnerMethodInvoke>arguments.getExpression(1);visit;[acg]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;box;[]</InnerMethodInvoke>
                <InnerMethodInvoke>mv;visitMethodInsn;[INVOKESPECIAL, BytecodeHelper.getClassInternalName(callNode), "&lt;init&gt;", descriptor, false]</InnerMethodInvoke>
                <InnerMethodInvoke>operandStack;remove;[2]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClosureSharedVariables</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Parameter[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ce</ParamName>
                    <ParamType>ClosureExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>VariableScope [scope=ce.getVariableScope()]</InnerVar>
                <InnerVar>Parameter[] [ret=new Parameter[scope.getReferencedLocalVariablesCount()]]</InnerVar>
                <InnerVar>int [index=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadThis</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>MethodVisitor [mv=controller.getMethodVisitor()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitVarInsn;[ALOAD, 0]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>