<Class>
    <Id>179</Id>
    <Package>groovy.util</Package>
    <ClassName>Eval</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Eval  /** 
 * Allow easy integration from Groovy into Java through convenience methods. &lt;p&gt; This class is a simple helper on top of GroovyShell. You can use it to evaluate small Groovy scripts that don't need large Binding objects. For example, this script  executes with no errors:  &lt;pre&gt; assert 10 == Eval.me(' 2 * 4 + 2') assert 10 == Eval.x(2, ' x * 4 + 2') &lt;/pre&gt;
 * @see GroovyShell
 * @author Dierk Koenig
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>me</MethodName>
            <MethodComment>/** 
 * Evaluates the specified String expression and returns the result. For example:  &lt;pre&gt; assert 10 == Eval.me(' 2 * 4 + 2') &lt;/pre&gt;
 * @param expression the Groovy expression to evaluate
 * @return the result of the expression
 * @throws CompilationFailedException if expression is not valid Groovy
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>me</MethodName>
            <MethodComment>/** 
 * Evaluates the specified String expression and makes the parameter available inside the script, returning the result. For example, this code binds the 'x' variable:  &lt;pre&gt; assert 10 == Eval.me('x', 2, ' x * 4 + 2') &lt;/pre&gt;
 * @param expression the Groovy expression to evaluate
 * @return the result of the expression
 * @throws CompilationFailedException if expression is not valid Groovy
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>symbol</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Binding [b=new Binding()]</InnerVar>
                <InnerVar>GroovyShell [sh=new GroovyShell(b)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>b;setVariable;[symbol, object]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>x</MethodName>
            <MethodComment>/** 
 * Evaluates the specified String expression and makes the parameter available inside the script bound to a variable named 'x', returning the result. For example, this  code executes without failure:  &lt;pre&gt; assert 10 == Eval.x(2, ' x * 4 + 2') &lt;/pre&gt;
 * @param expression the Groovy expression to evaluate
 * @return the result of the expression
 * @throws CompilationFailedException if expression is not valid Groovy
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>x</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>xy</MethodName>
            <MethodComment>/** 
 * Evaluates the specified String expression and makes the first two parameters available inside the script bound to variables named 'x' and 'y' respectively, returning the result. For example,  this code executes without failure:  &lt;pre&gt; assert 10 == Eval.xy(2, 4, ' x * y + 2') &lt;/pre&gt;
 * @param expression the Groovy expression to evaluate
 * @return the result of the expression
 * @throws CompilationFailedException if expression is not valid Groovy
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>x</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>y</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Binding [b=new Binding()]</InnerVar>
                <InnerVar>GroovyShell [sh=new GroovyShell(b)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>b;setVariable;["x", x]</InnerMethodInvoke>
                <InnerMethodInvoke>b;setVariable;["y", y]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>xyz</MethodName>
            <MethodComment>/** 
 * Evaluates the specified String expression and makes the first three parameters available inside the script bound to variables named 'x', 'y', and 'z' respectively, returning the result. For  example, this code executes without failure:  &lt;pre&gt; assert 10 == Eval.xyz(2, 4, 2, ' x * y + z') &lt;/pre&gt;
 * @param expression the Groovy expression to evaluate
 * @return the result of the expression
 * @throws CompilationFailedException if expression is not valid Groovy
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>x</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>y</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>z</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Binding [b=new Binding()]</InnerVar>
                <InnerVar>GroovyShell [sh=new GroovyShell(b)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>b;setVariable;["x", x]</InnerMethodInvoke>
                <InnerMethodInvoke>b;setVariable;["y", y]</InnerMethodInvoke>
                <InnerMethodInvoke>b;setVariable;["z", z]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>