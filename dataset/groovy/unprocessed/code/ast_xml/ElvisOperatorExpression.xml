<Class>
    <Id>473</Id>
    <Package>org.codehaus.groovy.ast.expr</Package>
    <ClassName>ElvisOperatorExpression</ClassName>
    <SuperClass>TernaryExpression</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ElvisOperatorExpression  /** 
 * Represents a short ternary expression x ?: y, which is equal  to  &lt;pre&gt; def truePart = x def booleanPart = truePart as boolean booleanPart? truePart : y &lt;/pre&gt; Even if x is no atomic expression, x will be evaluated only  once. Example: &lt;pre&gt; class Foo {  def index=0  def getX(){ index++; return index } } def foo = new Foo() def result = foo.x ?: "false case"  assert foo.index == 1 assert result == 1  &lt;/pre&gt;
 * @author &lt;a href="mailto:blackdrag@gmx.org"&gt;Jochen Theodorou&lt;/a&gt;
 * @since 1.5
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>ElvisOperatorExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>base</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>falseExpression</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBool</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>base</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BooleanExpression [be=new BooleanExpression(base)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>be;setSourcePosition;[base]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>visitor</ParamName>
                    <ParamType>GroovyCodeVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>visitor;visitShortTernaryExpression;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transformer</ParamName>
                    <ParamType>ExpressionTransformer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [ret=new ElvisOperatorExpression(transformer.transform(getTrueExpression()),transformer.transform(getFalseExpression()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ret;setSourcePosition;[this]</InnerMethodInvoke>
                <InnerMethodInvoke>ret;copyNodeMetaData;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>