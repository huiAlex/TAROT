<Class>
    <Id>457</Id>
    <Package>org.codehaus.groovy.runtime</Package>
    <ClassName>ComposedClosure</ClassName>
    <SuperClass>Closure</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ComposedClosure  /** 
 * A wrapper for Closure to support composition. Normally used only internally through the &lt;code&gt;rightShift()&lt;/code&gt; and &lt;code&gt;leftShift()&lt;/code&gt; methods on &lt;code&gt;Closure&lt;/code&gt;. &lt;p&gt; Typical usages: &lt;pre&gt; def twice = { a -&gt; a * 2 } def inc = { b -&gt; b + 1 } def f = { x -&gt; twice(inc(x)) } // longhand def g = inc &gt;&gt; twice def h = twice &lt;&lt; inc assert f(10) == 22 assert g(10) == 22 assert h(10) == 22 def s2c = { it.chars[0] } def p = Integer.&amp;toHexString &gt;&gt; s2c &gt;&gt; Character.&amp;toUpperCase assert p(15) == 'F' def multiply = { a, b -&gt; a * b } def identity = { a -&gt; [a, a] } def sq = identity &gt;&gt; multiply assert (1..5).collect{ sq(it) } == [1, 4, 9, 16, 25] def add3 = { a, b, c -&gt; a + b + c } def add2plus10 = add3.curry(10) def multBoth = { a, b, c -&gt; [a*c, b*c] } def twiceBoth = multBoth.rcurry(2) def twiceBothPlus10 = twiceBoth &gt;&gt; add2plus10 assert twiceBothPlus10(5, 10) == 40 &lt;/pre&gt;
 * @author Paul King
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>first</FieldName>
            <FieldType>Closure</FieldType>
        </Field>
        <Field>
            <FieldName>second</FieldName>
            <FieldType>Closure</FieldType>
        </Field>
        <Field>
            <FieldName>second</FieldName>
            <FieldType>V</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>ComposedClosure</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>first</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>second</ParamName>
                    <ParamType>V</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setDelegate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>delegate</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((Closure)getOwner());setDelegate;[delegate]</InnerMethodInvoke>
                <InnerMethodInvoke>second;setDelegate;[delegate]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDelegate</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setResolveStrategy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>resolveStrategy</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((Closure)getOwner());setResolveStrategy;[resolveStrategy]</InnerMethodInvoke>
                <InnerMethodInvoke>second;setResolveStrategy;[resolveStrategy]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResolveStrategy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clone</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParameterTypes</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Class[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>doCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>V</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [temp=first.call(args)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>