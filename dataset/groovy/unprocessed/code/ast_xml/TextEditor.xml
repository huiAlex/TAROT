<Class>
    <Id>672</Id>
    <Package>groovy.ui.text</Package>
    <ClassName>TextEditor</ClassName>
    <SuperClass>JTextPane</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>Pageable</SuperInterface>
        <SuperInterface>Printable</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TextEditor  /** 
 * A simple text pane that is printable and wrapping is optional.
 * @author Evan "Hippy" Slatis
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>FIND</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>FIND_NEXT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>FIND_PREVIOUS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>REPLACE</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>AUTO_INDENT</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TABBED_SPACES</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>TAB_BACK_PATTERN</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>LINE_START</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>PRINT_PANE</FieldName>
            <FieldType>JTextPane</FieldType>
        </Field>
        <Field>
            <FieldName>PRINT_SIZE</FieldName>
            <FieldType>Dimension</FieldType>
        </Field>
        <Field>
            <FieldName>isOvertypeMode</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>defaultCaret</FieldName>
            <FieldType>Caret</FieldType>
        </Field>
        <Field>
            <FieldName>overtypeCaret</FieldName>
            <FieldType>Caret</FieldType>
        </Field>
        <Field>
            <FieldName>PAGE_FORMAT</FieldName>
            <FieldType>PageFormat</FieldType>
        </Field>
        <Field>
            <FieldName>numPages</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>mouseAdapter</FieldName>
            <FieldType>MouseAdapter</FieldType>
        </Field>
        <Field>
            <FieldName>cursor</FieldName>
            <FieldType>Cursor</FieldType>
        </Field>
        <Field>
            <FieldName>unwrapped</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>tabsAsSpaces</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>multiLineTab</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>mouseEntered</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>me</ParamName>
                    <ParamType>MouseEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mouseExited</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>me</ParamName>
                    <ParamType>MouseEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getRootPane().getLayeredPane();setCursor;[null]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TextEditor</MethodName>
            <MethodComment>/** 
 * Creates a new instance of TextEditor
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TextEditor</MethodName>
            <MethodComment>/** 
 * Creates a new instance of TextEditor
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tabsAsSpaces</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TextEditor</MethodName>
            <MethodComment>/** 
 * Creates a new instance of TextEditor
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tabsAsSpaces</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>multiLineTab</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>TextEditor</MethodName>
            <MethodComment>/** 
 * Creates a new instance of TextEditor
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tabsAsSpaces</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>multiLineTab</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>unwrapped</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ActionMap [aMap=getActionMap()]</InnerVar>
                <InnerVar>Action [action=null]</InnerVar>
                <InnerVar>InputMap [iMap=getInputMap()]</InnerVar>
                <InnerVar>KeyStroke [keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE,0,false)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>iMap;put;[keyStroke, "delete"]</InnerMethodInvoke>
                <InnerMethodInvoke>iMap;put;[keyStroke, "delete"]</InnerMethodInvoke>
                <InnerMethodInvoke>aMap;put;["delete", action]</InnerMethodInvoke>
                <InnerMethodInvoke>aMap;put;[FIND, action]</InnerMethodInvoke>
                <InnerMethodInvoke>iMap;put;[keyStroke, FIND]</InnerMethodInvoke>
                <InnerMethodInvoke>aMap;put;[FIND_NEXT, FindReplaceUtility.FIND_ACTION]</InnerMethodInvoke>
                <InnerMethodInvoke>iMap;put;[keyStroke, FIND_NEXT]</InnerMethodInvoke>
                <InnerMethodInvoke>aMap;put;[FIND_PREVIOUS, FindReplaceUtility.FIND_ACTION]</InnerMethodInvoke>
                <InnerMethodInvoke>iMap;put;[keyStroke, FIND_PREVIOUS]</InnerMethodInvoke>
                <InnerMethodInvoke>aMap;put;["TextEditor-tabAction", action]</InnerMethodInvoke>
                <InnerMethodInvoke>iMap;put;[keyStroke, "TextEditor-tabAction"]</InnerMethodInvoke>
                <InnerMethodInvoke>aMap;put;["TextEditor-shiftTabAction", action]</InnerMethodInvoke>
                <InnerMethodInvoke>iMap;put;[keyStroke, "TextEditor-shiftTabAction"]</InnerMethodInvoke>
                <InnerMethodInvoke>getActionMap();put;[REPLACE, action]</InnerMethodInvoke>
                <InnerMethodInvoke>getInputMap();put;[keyStroke, REPLACE]</InnerMethodInvoke>
                <InnerMethodInvoke>getActionMap();put;[AUTO_INDENT, action]</InnerMethodInvoke>
                <InnerMethodInvoke>getInputMap();put;[keyStroke, AUTO_INDENT]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setAutoscrolls;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>overtypeCaret;setBlinkRate;[defaultCaret.getBlinkRate()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addNotify</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;addMouseListener;[mouseAdapter]</InnerMethodInvoke>
                <InnerMethodInvoke>FindReplaceUtility;registerTextComponent;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNumberOfPages</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Paper [paper=PAGE_FORMAT.getPaper()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPageFormat</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>PageFormat</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>pageIndex</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IndexOutOfBoundsException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPrintable</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Printable</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>param</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IndexOutOfBoundsException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>print</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>graphics</ParamName>
                    <ParamType>Graphics</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pageFormat</ParamName>
                    <ParamType>PageFormat</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>page</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>PrinterException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScrollableTracksViewportWidth</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [bool=super.getScrollableTracksViewportWidth()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isMultiLineTabbed</MethodName>
            <MethodComment>/** 
 * Whether using the tab key indents the selected lines of code
 * @return true if multiline tabbing is active
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isOvertypeMode</MethodName>
            <MethodComment>/** 
 * @return true if overtype mode is active, false for insert mode
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTabsAsSpaces</MethodName>
            <MethodComment>/** 
 * @return true if tabs are converted to spaces upon typing
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isUnwrapped</MethodName>
            <MethodComment>/** 
 * @return true if text wrapping is disabled
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processKeyEvent</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>KeyEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeNotify</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;removeMouseListener;[mouseAdapter]</InnerMethodInvoke>
                <InnerMethodInvoke>FindReplaceUtility;unregisterTextComponent;[this]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>replaceSelection</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setBounds</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>x</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>y</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>width</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>height</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isMultiLineTabbed</MethodName>
            <MethodComment>/** 
 * @param multiLineTab the new multiLine tab value
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>multiLineTab</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTabsAsSpaces</MethodName>
            <MethodComment>/** 
 * @param tabsAsSpaces whether tabs are converted to spaces
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tabsAsSpaces</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setOvertypeMode</MethodName>
            <MethodComment>/** 
 * Set the caret to use depending on overtype/insert mode
 * @param isOvertypeMode the new mode; true = overtype
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>isOvertypeMode</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [pos=getCaretPosition()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setCaret;[isOvertypeMode() ? overtypeCaret : defaultCaret]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setCaretPosition;[pos]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setUnwrapped</MethodName>
            <MethodComment>/** 
 * @param unwrapped the new unwrapped value
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>unwrapped</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>actionPerformed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ae</ParamName>
                    <ParamType>ActionEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>FindReplaceUtility;showDialog;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>actionPerformed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ae</ParamName>
                    <ParamType>ActionEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>FindReplaceUtility;showDialog;[true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>actionPerformed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ae</ParamName>
                    <ParamType>ActionEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>actionPerformed</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ae</ParamName>
                    <ParamType>ActionEvent</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>paint</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>g</ParamName>
                    <ParamType>Graphics</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>damage</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>r</ParamName>
                    <ParamType>Rectangle</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>