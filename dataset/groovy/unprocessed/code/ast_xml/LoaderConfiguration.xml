<Class>
    <Id>19</Id>
    <Package>org.codehaus.groovy.tools</Package>
    <ClassName>LoaderConfiguration</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>LoaderConfiguration  /** 
 * Class used to configure a RootLoader from a stream or by using it's methods. &lt;p&gt; The stream can be for example a FileInputStream from a file with the following format: &lt;p&gt; &lt;pre&gt; # comment main is classname load path load file load pathWith${property} load pathWith!{required.property} load path/*.jar load path/&amp;#42;&amp;#42;/&amp;#42;.jar &lt;/pre&gt; &lt;ul&gt; &lt;li&gt;All lines starting with "#" are ignored.&lt;/li&gt; &lt;li&gt;The "main is" part may only be once in the file. The String afterwards is the name of a class with a main method. &lt;/li&gt; &lt;li&gt;The "load" command will add the given file or path to the classpath in this configuration object. If the path does not exist, the path will be ignored. &lt;/li&gt; &lt;li&gt;properties referenced using !{x} are required.&lt;/li&gt; &lt;li&gt;properties referenced using ${x} are not required. If the property does not exist the whole load instruction line will be ignored.&lt;/li&gt; &lt;li&gt;* is used to match zero or more characters in a file.&lt;/li&gt; &lt;li&gt;** is used to match zero or more directories.&lt;/li&gt; &lt;li&gt;Loading paths with &lt;code&gt;load ./*.jar&lt;/code&gt; or &lt;code&gt;load *.jar&lt;/code&gt; are not supported.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt; Defining the main class is required unless setRequireMain(boolean) is called with false, before reading the configuration. You can use the wildcard "*" to filter the path, but only for files, not directories. To match directories use "**". The ${propertyname} is replaced by the value of the system's property name. You can use user.home here for example. If the property does not exist, an empty string will be used. If the path or file after the load command does not exist, the path will be ignored.
 * @author Jochen Theodorou
 * @version $Revision$
 * @see RootLoader
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>MAIN_PREFIX</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>LOAD_PREFIX</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>GRAB_PREFIX</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>PROP_PREFIX</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>classPath</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>classPath</FieldName>
            <FieldType>URL</FieldType>
        </Field>
        <Field>
            <FieldName>main</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>requireMain</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>WILDCARD</FieldName>
            <FieldType>char</FieldType>
        </Field>
        <Field>
            <FieldName>ALL_WILDCARD</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MATCH_FILE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>MATCH_ALL</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>grabList</FieldName>
            <FieldType>List</FieldType>
        </Field>
        <Field>
            <FieldName>grabList</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>LoaderConfiguration</MethodName>
            <MethodComment>/** 
 * creates a new loader configuration
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>configure</MethodName>
            <MethodComment>/** 
 * configures this loader with a stream
 * @param is stream used to read the configuration
 * @throws IOException if reading or parsing the contents of the stream fails
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>is</ParamName>
                    <ParamType>InputStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BufferedReader [reader=new BufferedReader(new InputStreamReader(is))]</InnerVar>
                <InnerVar>int [lineNumber=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assignProperties</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [propertyIndexStart=0, propertyIndexEnd=0]</InnerVar>
                <InnerVar>boolean [requireProperty]</InnerVar>
                <InnerVar>String [result=""]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>correctDoubleSlash</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>propertyValue</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyIndexEnd</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [index=propertyIndexEnd + 1]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>loadFilteredPath</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filter</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [starIndex=filter.indexOf(WILDCARD)]</InnerVar>
                <InnerVar>boolean [recursive=filter.contains(ALL_WILDCARD)]</InnerVar>
                <InnerVar>String [startDir=filter.substring(0,starIndex - 1)]</InnerVar>
                <InnerVar>File [root=new File(startDir)]</InnerVar>
                <InnerVar>Pattern [pattern=Pattern.compile(filter)]</InnerVar>
                <InnerVar>File[] [files=root.listFiles()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>findMatchingFiles</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>files</ParamName>
                    <ParamType>File[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pattern</ParamName>
                    <ParamType>Pattern</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>recursive</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getSlashyPath</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [changedPath=path]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addFile</MethodName>
            <MethodComment>/** 
 * Adds a file to the classpath if it exists.
 * @param file the file to add
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addFile</MethodName>
            <MethodComment>/** 
 * Adds a file to the classpath if it exists.
 * @param filename the name of the file to add
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>filename</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addClassPath</MethodName>
            <MethodComment>/** 
 * Adds a classpath to this configuration. It expects a string with multiple paths, separated by the system dependent path separator. Expands wildcards, e.g. dir/* into all the jars in dir.
 * @param path the path as a path separator delimited string
 * @see java.io.File#pathSeparator
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>path</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [paths=path.split(File.pathSeparator)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassPathUrls</MethodName>
            <MethodComment>/** 
 * The classpath as URL[] from this configuration. This can be used to construct a class loader.
 * @return the classpath
 * @see java.net.URLClassLoader
 */
</MethodComment>
            <ReturnType>URL[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGrabUrls</MethodName>
            <MethodComment>/** 
 * The extra grab configuration.
 * @return the list of grab urls
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMainClass</MethodName>
            <MethodComment>/** 
 * Returns the name of the main class for this configuration.
 * @return the name of the main class or null if not defined
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setMainClass</MethodName>
            <MethodComment>/** 
 * Sets the main class. If there is already a main class it is overwritten. Calling  {@link #configure(InputStream)}after calling this method does not require a main class definition inside the stream.
 * @param classname the name to become the main class
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classname</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setRequireMain</MethodName>
            <MethodComment>/** 
 * Determines if a main class is required when calling.
 * @param requireMain set to false if no main class is required
 * @see #configure(InputStream)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>requireMain</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>