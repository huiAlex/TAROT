<Class>
    <Id>280</Id>
    <Package>groovy.json</Package>
    <ClassName>StringEscapeUtils</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>StringEscapeUtils  /** 
 * Escapes and unescapes &lt;code&gt;String&lt;/code&gt;s for Java, Java Script, HTML, XML, and SQL. &lt;p&gt; #ThreadSafe# &lt;p&gt; &lt;b&gt;Note that this version is a stripped down version from Commons Lang 2.6 with only necessary methods for JSON builder&lt;/b&gt;
 * @author Apache Software Foundation
 * @author Apache Jakarta Turbine
 * @author Purple Technology
 * @author &lt;a href="mailto:alex@purpletech.com"&gt;Alexander Day Chaffee&lt;/a&gt;
 * @author Antony Riley
 * @author Helge Tesgaard
 * @author &lt;a href="sean@boohai.com"&gt;Sean Brown&lt;/a&gt;
 * @author &lt;a href="mailto:ggregory@seagullsw.com"&gt;Gary Gregory&lt;/a&gt;
 * @author Phil Steitz
 * @author Pete Gieser
 * @since 2.0
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>StringEscapeUtils</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;&lt;code&gt;StringEscapeUtils&lt;/code&gt; instances should NOT be constructed in standard programming. &lt;p&gt;Instead, the class should be used as: &lt;pre&gt;StringEscapeUtils.escapeJava("foo");&lt;/pre&gt; &lt;p&gt;This constructor is public to permit tools that require a JavaBean instance to operate.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>escapeJava</MethodName>
            <MethodComment>/** 
 * Escapes the characters in a &lt;code&gt;String&lt;/code&gt; using Java String rules. &lt;p&gt; Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) &lt;p&gt; So a tab becomes the characters &lt;code&gt;'\\'&lt;/code&gt; and &lt;code&gt;'t'&lt;/code&gt;. &lt;p&gt; The only difference between Java strings and JavaScript strings is that in JavaScript, a single quote must be escaped. &lt;p&gt; Example: &lt;pre&gt; input string: He didn't say, "Stop!" output string: He didn't say, \"Stop!\" &lt;/pre&gt;
 * @param str  String to escape values in, may be null
 * @return String with escaped values, &lt;code&gt;null&lt;/code&gt; if null string input
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>escapeJava</MethodName>
            <MethodComment>/** 
 * Escapes the characters in a &lt;code&gt;String&lt;/code&gt; using Java String rules to a &lt;code&gt;Writer&lt;/code&gt;. &lt;p&gt; A &lt;code&gt;null&lt;/code&gt; string input has no effect.
 * @see #escapeJava(java.lang.String)
 * @param out  Writer to write escaped string into
 * @param str  String to escape values in, may be null
 * @throws IllegalArgumentException if the Writer is &lt;code&gt;null&lt;/code&gt;
 * @throws IOException if error occurs on underlying Writer
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>Writer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;escapeJavaStyleString;[out, str, false, false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>escapeJavaScript</MethodName>
            <MethodComment>/** 
 * Escapes the characters in a &lt;code&gt;String&lt;/code&gt; using JavaScript String rules. &lt;p&gt; Escapes any values it finds into their JavaScript String form. Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) &lt;p&gt; So a tab becomes the characters &lt;code&gt;'\\'&lt;/code&gt; and &lt;code&gt;'t'&lt;/code&gt;. &lt;p&gt; The only difference between Java strings and JavaScript strings is that in JavaScript, a single quote must be escaped. &lt;p&gt; Example: &lt;pre&gt; input string: He didn't say, "Stop!" output string: He didn\'t say, \"Stop!\" &lt;/pre&gt;
 * @param str  String to escape values in, may be null
 * @return String with escaped values, &lt;code&gt;null&lt;/code&gt; if null string input
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>escapeJavaScript</MethodName>
            <MethodComment>/** 
 * Escapes the characters in a &lt;code&gt;String&lt;/code&gt; using JavaScript String rules to a &lt;code&gt;Writer&lt;/code&gt;. &lt;p&gt; A &lt;code&gt;null&lt;/code&gt; string input has no effect.
 * @see #escapeJavaScript(java.lang.String)
 * @param out  Writer to write escaped string into
 * @param str  String to escape values in, may be null
 * @throws IllegalArgumentException if the Writer is &lt;code&gt;null&lt;/code&gt;
 * @throws IOException if error occurs on underlying Writer
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>Writer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;escapeJavaStyleString;[out, str, true, true]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>escapeJavaStyleString</MethodName>
            <MethodComment>/** 
 * Worker method for the  {@link #escapeJavaScript(String)} method.
 * @param str String to escape values in, may be null
 * @param escapeSingleQuotes escapes single quotes if &lt;code&gt;true&lt;/code&gt;
 * @param escapeForwardSlash TODO
 * @return the escaped string
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>escapeSingleQuotes</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>escapeForwardSlash</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>escapeJavaStyleString</MethodName>
            <MethodComment>/** 
 * Worker method for the  {@link #escapeJavaScript(String)} method.
 * @param out write to receieve the escaped string
 * @param str String to escape values in, may be null
 * @param escapeSingleQuote escapes single quotes if &lt;code&gt;true&lt;/code&gt;
 * @param escapeForwardSlash TODO
 * @throws IOException if an IOException occurs
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>Writer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>escapeSingleQuote</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>escapeForwardSlash</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [sz]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hex</MethodName>
            <MethodComment>/** 
 * Returns an upper case hexadecimal &lt;code&gt;String&lt;/code&gt; for the given character.
 * @param ch The character to convert.
 * @return An upper case hexadecimal &lt;code&gt;String&lt;/code&gt;
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ch</ParamName>
                    <ParamType>char</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unescapeJava</MethodName>
            <MethodComment>/** 
 * Unescapes any Java literals found in the &lt;code&gt;String&lt;/code&gt;. For example, it will turn a sequence of &lt;code&gt;'\'&lt;/code&gt; and &lt;code&gt;'n'&lt;/code&gt; into a newline character, unless the &lt;code&gt;'\'&lt;/code&gt; is preceded by another &lt;code&gt;'\'&lt;/code&gt;.
 * @param str  the &lt;code&gt;String&lt;/code&gt; to unescape, may be null
 * @return a new unescaped &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; if null string input
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unescapeJava</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Unescapes any Java literals found in the &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;Writer&lt;/code&gt;. &lt;p&gt; For example, it will turn a sequence of &lt;code&gt;'\'&lt;/code&gt; and &lt;code&gt;'n'&lt;/code&gt; into a newline character, unless the &lt;code&gt;'\'&lt;/code&gt; is preceded by another &lt;code&gt;'\'&lt;/code&gt;. &lt;p&gt; A &lt;code&gt;null&lt;/code&gt; string input has no effect.
 * @param out  the &lt;code&gt;Writer&lt;/code&gt; used to output unescaped characters
 * @param str  the &lt;code&gt;String&lt;/code&gt; to unescape, may be null
 * @throws IllegalArgumentException if the Writer is &lt;code&gt;null&lt;/code&gt;
 * @throws IOException if error occurs on underlying Writer
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>Writer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [sz=str.length()]</InnerVar>
                <InnerVar>StringBuilder [unicode=new StringBuilder(4)]</InnerVar>
                <InnerVar>boolean [hadSlash=false]</InnerVar>
                <InnerVar>boolean [inUnicode=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unescapeJavaScript</MethodName>
            <MethodComment>/** 
 * Unescapes any JavaScript literals found in the &lt;code&gt;String&lt;/code&gt;. &lt;p&gt; For example, it will turn a sequence of &lt;code&gt;'\'&lt;/code&gt; and &lt;code&gt;'n'&lt;/code&gt; into a newline character, unless the &lt;code&gt;'\'&lt;/code&gt; is preceded by another &lt;code&gt;'\'&lt;/code&gt;.
 * @see #unescapeJava(String)
 * @param str  the &lt;code&gt;String&lt;/code&gt; to unescape, may be null
 * @return A new unescaped &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; if null string input
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unescapeJavaScript</MethodName>
            <MethodComment>/** 
 * Unescapes any JavaScript literals found in the &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;Writer&lt;/code&gt;. &lt;p&gt; For example, it will turn a sequence of &lt;code&gt;'\'&lt;/code&gt; and &lt;code&gt;'n'&lt;/code&gt; into a newline character, unless the &lt;code&gt;'\'&lt;/code&gt; is preceded by another &lt;code&gt;'\'&lt;/code&gt;. &lt;p&gt; A &lt;code&gt;null&lt;/code&gt; string input has no effect.
 * @see #unescapeJava(Writer,String)
 * @param out  the &lt;code&gt;Writer&lt;/code&gt; used to output unescaped characters
 * @param str  the &lt;code&gt;String&lt;/code&gt; to unescape, may be null
 * @throws IllegalArgumentException if the Writer is &lt;code&gt;null&lt;/code&gt;
 * @throws IOException if error occurs on underlying Writer
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>Writer</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;unescapeJava;[out, str]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>