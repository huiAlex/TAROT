<Class>
    <Id>1027</Id>
    <Package>groovy.lang</Package>
    <ClassName>Grapes</ClassName>
    <ClassComment>Grapes  /** 
 * Sometimes we will need more than one grab per class, but we can only add one annotation type per annotatable node.  This class allows for multiple grabs to be added. &lt;p&gt; For example: &lt;p&gt; &lt;pre&gt; {@code @Grapes([@Grab(module='m1'), @Grab(module='m2')])}class AnnotatedClass { ... } &lt;/pre&gt; &lt;p&gt; You can override an implicit transitive dependency by providing an explicit one. E.g. htmlunit 2.6 normally uses xerces 2.9.1 but you can get 2.9.0 as follows: &lt;pre&gt; {@code @Grapes}([ {@code @Grab}('net.sourceforge.htmlunit:htmlunit:2.6'), {@code @Grab}('xerces#xercesImpl;2.9.0') ]) &lt;/pre&gt; Obviously, only do this if you understand the consequences. &lt;p&gt; You can also remove transitive dependencies altogether (provided you know you don't need them) using  {@code @GrabExclude}. For example, here is how we would not grab the  {@code logkit} and{@code avalon-framework} transitive dependencies for Apache POI:&lt;pre&gt; {@code @Grapes}([ {@code @Grab}("org.apache.poi#poi;3.5-beta6"), {@code @GrabExclude}("logkit:logkit"), {@code @GrabExclude}("avalon-framework#avalon-framework") ]) import org.apache.poi.hssf.util.CellReference assert new CellReference(0, 0, false, false).formatAsString() == 'A1' assert new CellReference(1, 3).formatAsString() == '$D$2' &lt;/pre&gt; It is also sometimes also useful to use  {@code @GrabConfig} to further adjust how dependenciesare grabbed. See  {@code @GrabConfig} for further information.
 */
</ClassComment>
    <FieldList/>
    <MethodList/>
</Class>