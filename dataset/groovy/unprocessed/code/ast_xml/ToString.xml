<Class>
    <Id>964</Id>
    <Package>groovy.transform</Package>
    <ClassName>ToString</ClassName>
    <ClassComment>ToString  /** 
 * Class annotation used to assist in the creation of  {@code toString()} methods in classes.The  {@code @ToString} annotation instructs the compiler to execute anAST transformation which adds the necessary toString() method. &lt;p&gt; It allows you to write classes in this shortened form: &lt;pre&gt; {@code @ToString}class Customer { String first, last int age Date since = new Date() Collection favItems private answer = 42 } println new Customer(first:'Tom', last:'Jones', age:21, favItems:['Books', 'Games']) &lt;/pre&gt; Which will have this output: &lt;pre&gt; Customer(Tom, Jones, 21, Wed Jul 14 23:57:14 EST 2010, [Books, Games]) &lt;/pre&gt; There are numerous options to customize the format of the generated output. E.g. if you change the first annotation to: &lt;pre&gt; {@code @ToString(includeNames=true)}&lt;/pre&gt; Then the output will be: &lt;pre&gt; Customer(first:Tom, last:Jones, age:21, since:Wed Jul 14 23:57:50 EST 2010, favItems:[Books, Games]) &lt;/pre&gt; Or if you change the first annotation to: &lt;pre&gt; {@code @ToString(includeNames=true,includeFields=true,excludes="since,favItems")}&lt;/pre&gt; Then the output will be: &lt;pre&gt; Customer(first:Tom, last:Jones, age:21, answer:42) &lt;/pre&gt; If you have this example: &lt;pre&gt; import groovy.transform.ToString {@code @ToString} class NamedThing {String name } {@code @ToString}(includeNames=true,includeSuper=true) class AgedThing extends NamedThing { int age } println new AgedThing(name:'Lassie', age:5) &lt;/pre&gt; Then the output will be: &lt;pre&gt; AgedThing(age:5, super:NamedThing(Lassie)) &lt;/pre&gt; {@code @ToString} can also be used in conjunction with {@code @Canonical} and {@code @Immutable}. &lt;p&gt; If you want to omit fields or properties referring to &lt;tt&gt;null&lt;/tt&gt;, you can use the &lt;tt&gt;ignoreNulls&lt;/tt&gt; flag: &lt;pre&gt; import groovy.transform.ToString {@code @ToString(ignoreNulls = true)} class NamedThing {String name } println new NamedThing(name: null) &lt;/pre&gt; Which results in: &lt;pre&gt; NamedThing() &lt;/pre&gt; &lt;p&gt; By default the fully-qualified class name is used as part of the generated toString. If you want to exclude the package, you can set the includePackage flag to false, e.g.: &lt;pre&gt; package my.company import groovy.transform.ToString {@code @ToString(includePackage = false)} class NamedThing {String name } println new NamedThing(name: "Lassie") &lt;/pre&gt; Which results in: &lt;pre&gt; NamedThing(name: Lassie) &lt;/pre&gt; If the includePackage flag is  {@code true} (the default), then the output will be:&lt;pre&gt; my.company.NamedThing(name: Lassie) &lt;/pre&gt;
 * @author Paul King
 * @author Andre Steingress
 * @see groovy.transform.Immutable
 * @see groovy.transform.Canonical
 * @since 1.8.0
 */
</ClassComment>
    <FieldList/>
    <MethodList/>
</Class>