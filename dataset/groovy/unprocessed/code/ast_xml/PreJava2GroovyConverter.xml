<Class>
    <Id>678</Id>
    <Package>org.codehaus.groovy.antlr.java</Package>
    <ClassName>PreJava2GroovyConverter</ClassName>
    <SuperClass>VisitorAdapter</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>PreJava2GroovyConverter  /** 
 * This class mutates the Java AST, whilst it is still a Java AST, in readiness for conversion to Groovy, yippee-ky-a ! 
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>tokenNames</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>stack</FieldName>
            <FieldType>Stack</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>PreJava2GroovyConverter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tokenNames</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitDefault</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>GroovySourceAST</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>visit</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitJavaLiteralDo</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>GroovySourceAST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;swapTwoChildren;[t]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitJavaArrayInit</MethodName>
            <MethodComment>/** 
 * Handle Arrays. Examples: &lt;pre&gt; String[] myArray = new String[] {"a","b","c"}; becomes String[] myArray = ["a", "b", "c"] --- To convert node (t) and surrounding nodes into the right structure for List Constructor (a) java/EXPR | +- (b) java/new | + (t) java/ARRAY_INIT becomes (a) groovy/LIST_CONSTRUCTOR (via ARRAY_INIT as temporary marker type) | +- (t) groovy/ELIST * note: node (b) is thrown away... &lt;/pre&gt;
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>GroovySourceAST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>swapTwoChildren</MethodName>
            <MethodComment>/** 
 * To swap two children of node t... &lt;pre&gt; (t) | | (a) -- (b) t.down = firstNode a.right = b b.right = null &lt;/pre&gt; becomes &lt;pre&gt; (t) | | (b) -- (a) t.down = b a.right = null b.right = a &lt;/pre&gt; todo - build API of basic tree mutations like this method.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>GroovySourceAST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GroovySourceAST [a=(GroovySourceAST)t.getFirstChild()]</InnerVar>
                <InnerVar>GroovySourceAST [b=(GroovySourceAST)a.getNextSibling()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>t;setFirstChild;[b]</InnerMethodInvoke>
                <InnerMethodInvoke>a;setNextSibling;[null]</InnerMethodInvoke>
                <InnerMethodInvoke>b;setNextSibling;[a]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>push</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>t</ParamName>
                    <ParamType>GroovySourceAST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>stack;push;[t]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>pop</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>GroovySourceAST</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getParentNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>GroovySourceAST</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Object [currentNode=stack.pop()]</InnerVar>
                <InnerVar>Object [parentNode=stack.peek()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>stack;push;[currentNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getGrandParentNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>GroovySourceAST</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Object [currentNode=stack.pop()]</InnerVar>
                <InnerVar>Object [parentNode=stack.pop()]</InnerVar>
                <InnerVar>Object [grandParentNode=stack.peek()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>stack;push;[parentNode]</InnerMethodInvoke>
                <InnerMethodInvoke>stack;push;[currentNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>