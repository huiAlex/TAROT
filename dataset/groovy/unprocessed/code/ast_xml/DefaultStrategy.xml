<Class>
    <Id>845</Id>
    <Package>groovy.transform.builder</Package>
    <ClassName>DefaultStrategy</ClassName>
    <SuperClass>BuilderASTTransformation.AbstractBuilderStrategy</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>DefaultStrategy  /** 
 * This strategy is used with the  {@link Builder} AST transform to create a builder helper classfor the fluent creation of instances of a specified class.&amp;nbsp;It can be used at the class, static method or constructor levels. You use it as follows: &lt;pre&gt; import groovy.transform.builder. {@code @Builder}class Person { String firstName String lastName int age } def person = Person.builder().firstName("Robert").lastName("Lewandowski").age(21) assert person.firstName == "Robert" assert person.lastName == "Lewandowski" assert person.age == 21 &lt;/pre&gt; The  {@code prefix} annotation attribute can be used to create setters with a different naming convention. The default is theempty string but you could change that to "set" as follows: &lt;pre&gt; {@code @Builder}(prefix='set') class Person { String firstName String lastName int age } def p2 = Person.builder().setFirstName("Robert").setLastName("Lewandowski").setAge(21) &lt;/pre&gt; or using a prefix of 'with' would result in usage like this: &lt;pre&gt; def p3 = Person.builder().withFirstName("Robert").withLastName("Lewandowski").withAge(21) &lt;/pre&gt; You can also use the  {@code @Builder} annotation in combination with this strategy on one or more constructor orstatic method instead of or in addition to using it at the class level. An example with a constructor follows: &lt;pre&gt; import groovy.transform.ToString import groovy.transform.builder.Builder {@code @ToString}class Person { String first, last int born {@code @Builder}Person(String roleName) { if (roleName == 'Jack Sparrow') { first = 'Johnny'; last = 'Depp'; born = 1963 } } } assert Person.builder().roleName("Jack Sparrow").build().toString() == 'Person(Johnny, Depp, 1963)' &lt;/pre&gt; In this case, the parameter(s) for the constructor or static method become the properties available in the builder. For the case of a static method, the return type of the static method becomes the class of the instance being created. For static factory methods, this is normally the class containing the static method but in general it can be any class. Note: if using more than one  {@code @Builder} annotation, which is only possible when using static methodor constructor variants, it is up to you to ensure that any generated helper classes or builder methods have unique names. E.g.&amp;nbsp;we can modify the previous example to have three builders. At least two of the builders in our case will need to set the 'builderClassName' and 'builderMethodName' annotation attributes to ensure we have unique names. This is shown in the following example: &lt;pre&gt; import groovy.transform.builder. import groovy.transform. {@code @ToString}{@code @Builder}class Person { String first, last int born Person(){} // required to retain no-arg constructor {@code @Builder}(builderClassName='MovieBuilder', builderMethodName='byRoleBuilder') Person(String roleName) { if (roleName == 'Jack Sparrow') { this.first = 'Johnny'; this.last = 'Depp'; this.born = 1963 } } {@code @Builder}(builderClassName='SplitBuilder', builderMethodName='splitBuilder') static Person split(String name, int year) { def parts = name.split(' ') new Person(first: parts[0], last: parts[1], born: year) } } assert Person.splitBuilder().name("Johnny Depp").year(1963).build().toString() == 'Person(Johnny, Depp, 1963)' assert Person.byRoleBuilder().roleName("Jack Sparrow").build().toString() == 'Person(Johnny, Depp, 1963)' assert Person.builder().first("Johnny").last('Depp').born(1963).build().toString() == 'Person(Johnny, Depp, 1963)' &lt;/pre&gt; The 'forClass' annotation attribute for the  {@code @Builder} transform isn't applicable for this strategy.The 'useSetters' annotation attribute for the  {@code @Builder} transform is ignored by this strategy which always uses setters.
 * @author Paul King
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>DEFAULT_INITIAL_VALUE</FieldName>
            <FieldType>Expression</FieldType>
        </Field>
        <Field>
            <FieldName>PUBLIC_STATIC</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>build</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transform</ParamName>
                    <ParamType>BuilderASTTransformation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotatedNode</ParamName>
                    <ParamType>AnnotatedNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>anno</ParamName>
                    <ParamType>AnnotationNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transform</ParamName>
                    <ParamType>BuilderASTTransformation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mNode</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>anno</ParamName>
                    <ParamType>AnnotationNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [buildee=mNode.getDeclaringClass()]</InnerVar>
                <InnerVar>ClassNode [builder=createBuilder(anno,buildee)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;createBuilderFactoryMethod;[anno, buildee, builder]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;addMethod;[createBuildMethodForMethod(anno,buildee,mNode,mNode.getParameters())]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transform</ParamName>
                    <ParamType>BuilderASTTransformation</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buildee</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>anno</ParamName>
                    <ParamType>AnnotationNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;String&gt; [excludes=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>List&lt;String&gt; [includes=new ArrayList&lt;String&gt;()]</InnerVar>
                <InnerVar>ClassNode [builder=createBuilder(anno,buildee)]</InnerVar>
                <InnerVar>List&lt;FieldNode&gt; [fields=getInstancePropertyFields(buildee)]</InnerVar>
                <InnerVar>List&lt;FieldNode&gt; [filteredFields=selectFieldsFromExistingClass(fields,includes,excludes)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;createBuilderFactoryMethod;[anno, buildee, builder]</InnerMethodInvoke>
                <InnerMethodInvoke>builder;addMethod;[createBuildMethod(anno,buildee,filteredFields)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCorrectedType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buildee</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldNode</ParamName>
                    <ParamType>FieldNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,ClassNode&gt; [genericsSpec=createGenericsSpec(fieldNode.getDeclaringClass())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;extractSuperClassGenerics;[fieldNode.getType(), buildee, genericsSpec]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createBuilderFactoryMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>anno</ParamName>
                    <ParamType>AnnotationNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buildee</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>buildee.getModule();addClass;[builder]</InnerMethodInvoke>
                <InnerMethodInvoke>buildee;addMethod;[createBuilderMethod(anno,builder)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createBuilder</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>anno</ParamName>
                    <ParamType>AnnotationNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buildee</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFullName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>anno</ParamName>
                    <ParamType>AnnotationNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buildee</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [builderClassName=getMemberStringValue(anno,"builderClassName",buildee.getName() + "Builder")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getPrefix</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>anno</ParamName>
                    <ParamType>AnnotationNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createBuildMethodForMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>anno</ParamName>
                    <ParamType>AnnotationNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buildee</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mNode</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>params</ParamName>
                    <ParamType>Parameter[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [buildMethodName=getMemberStringValue(anno,"buildMethodName","build")]</InnerVar>
                <InnerVar>BlockStatement [body=new BlockStatement()]</InnerVar>
                <InnerVar>ClassNode [returnType]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createBuilderMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>anno</ParamName>
                    <ParamType>AnnotationNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [builderMethodName=getMemberStringValue(anno,"builderMethodName","builder")]</InnerVar>
                <InnerVar>BlockStatement [body=new BlockStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>body;addStatement;[returnS(ctorX(builder))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createBuildMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>anno</ParamName>
                    <ParamType>AnnotationNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>buildee</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fields</ParamName>
                    <ParamType>FieldNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [buildMethodName=getMemberStringValue(anno,"buildMethodName","build")]</InnerVar>
                <InnerVar>BlockStatement [body=new BlockStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>body;addStatement;[returnS(initializeInstance(buildee,fields,body))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createBuilderMethodForProp</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MethodNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>pinfo</ParamName>
                    <ParamType>PropertyInfo</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>prefix</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [fieldType=pinfo.getType()]</InnerVar>
                <InnerVar>String [fieldName=pinfo.getName()]</InnerVar>
                <InnerVar>String [setterName=getSetterName(prefix,fieldName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createFieldCopy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FieldNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buildee</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>param</ParamName>
                    <ParamType>Parameter</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Map&lt;String,ClassNode&gt; [genericsSpec=createGenericsSpec(buildee)]</InnerVar>
                <InnerVar>ClassNode [correctedParamType=correctToGenericsSpecRecurse(genericsSpec,param.getType())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;extractSuperClassGenerics;[param.getType(), buildee, genericsSpec]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createFieldCopy</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FieldNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buildee</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldType</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>selectFieldsFromExistingClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>FieldNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fieldNodes</ParamName>
                    <ParamType>FieldNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>includes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>excludes</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;FieldNode&gt; [fields=new ArrayList&lt;FieldNode&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initializeInstance</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>buildee</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fields</ParamName>
                    <ParamType>FieldNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>body</ParamName>
                    <ParamType>BlockStatement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [instance=varX("_the" + buildee.getNameWithoutPackage(),buildee)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>body;addStatement;[declS(instance,ctorX(buildee))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>