<Class>
    <Id>378</Id>
    <Package>groovy.util</Package>
    <ClassName>GroovyCollections</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GroovyCollections  /** 
 * A Collections utility class
 * @author Paul King
 * @author Jim White
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>combinations</MethodName>
            <MethodComment>/** 
 * Finds all combinations of items from the given collections.
 * @param collections the given collections
 * @return a List of the combinations found
 * @see #combinations(Collection)
 */
</MethodComment>
            <ReturnType>List</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>collections</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>subsequences</MethodName>
            <MethodComment>/** 
 * Finds all non-null subsequences of a list. E.g. &lt;code&gt;subsequences([1, 2, 3])&lt;/code&gt; would be: [[1, 2, 3], [1, 3], [2, 3], [1, 2], [1], [2], [3]]
 * @param items the List of items
 * @return the subsequences from items
 */
</MethodComment>
            <ReturnType>List&lt;T&gt;</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>items</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;List&lt;T&gt;&gt; [ans=new HashSet&lt;List&lt;T&gt;&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>combinations</MethodName>
            <MethodComment>/** 
 * @param collections the given collections
 * @deprecated use combinations(Iterable)
 */
</MethodComment>
            <ReturnType>List</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>collections</ParamName>
                    <ParamType>Collection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>combinations</MethodName>
            <MethodComment>/** 
 * Finds all combinations of items from the given Iterable aggregate of collections. So, &lt;code&gt;combinations([[true, false], [true, false]])&lt;/code&gt; is &lt;code&gt;[[true, true], [false, true], [true, false], [false, false]]&lt;/code&gt; and &lt;code&gt;combinations([['a', 'b'],[1, 2, 3]])&lt;/code&gt; is &lt;code&gt;[['a', 1], ['b', 1], ['a', 2], ['b', 2], ['a', 3], ['b', 3]]&lt;/code&gt;. If a non-collection item is given, it is treated as a singleton collection, i.e. &lt;code&gt;combinations([[1, 2], 'x'])&lt;/code&gt; is &lt;code&gt;[[1, 'x'], [2, 'x']]&lt;/code&gt;.
 * @param collections the Iterable of given collections
 * @return a List of the combinations found
 * @since 2.2.0
 */
</MethodComment>
            <ReturnType>List</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>collections</ParamName>
                    <ParamType>Iterable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List [collectedCombos=new ArrayList()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transpose</MethodName>
            <MethodComment>/** 
 * Transposes an array of lists.
 * @param lists the given lists
 * @return a List of the transposed lists
 * @see #transpose(List)
 */
</MethodComment>
            <ReturnType>List</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lists</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transpose</MethodName>
            <MethodComment>/** 
 * Transposes the given lists. So, &lt;code&gt;transpose([['a', 'b'], [1, 2]])&lt;/code&gt; is &lt;code&gt;[['a', 1], ['b', 2]]&lt;/code&gt; and &lt;code&gt;transpose([['a', 'b', 'c']])&lt;/code&gt; is &lt;code&gt;[['a'], ['b'], ['c']]&lt;/code&gt;.
 * @param lists the given lists
 * @return a List of the transposed lists
 */
</MethodComment>
            <ReturnType>List</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lists</ParamName>
                    <ParamType>List</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List [result=new ArrayList()]</InnerVar>
                <InnerVar>int [minSize=Integer.MAX_VALUE]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>min</MethodName>
            <MethodComment>/** 
 * Selects the minimum value found in an array of items, so min([2, 4, 6] as Object[]) == 2.
 * @param items an array of items
 * @return the minimum value
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>items</ParamName>
                    <ParamType>T[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>min</MethodName>
            <MethodComment>/** 
 * @deprecated use min(Iterable)
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>items</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>min</MethodName>
            <MethodComment>/** 
 * Selects the minimum value found in an Iterable of items.
 * @param items an Iterable
 * @return the minimum value
 * @since 2.2.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>items</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T [answer=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>max</MethodName>
            <MethodComment>/** 
 * Selects the maximum value found in an array of items, so min([2, 4, 6] as Object[]) == 6.
 * @param items an array of items
 * @return the maximum value
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>items</ParamName>
                    <ParamType>T[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>max</MethodName>
            <MethodComment>/** 
 * @deprecated use max(Iterable)
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>items</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>max</MethodName>
            <MethodComment>/** 
 * Selects the maximum value found in an Iterable.
 * @param items a Collection
 * @return the maximum value
 * @since 2.2.0
 */
</MethodComment>
            <ReturnType>T</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>items</ParamName>
                    <ParamType>T</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>T [answer=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sum</MethodName>
            <MethodComment>/** 
 * Sums all the items from an array of items.
 * @param items an array of items
 * @return the sum of the items
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>items</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sum</MethodName>
            <MethodComment>/** 
 * @deprecated use sum(Iterable)
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>items</ParamName>
                    <ParamType>Collection</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>sum</MethodName>
            <MethodComment>/** 
 * Sums all the given items.
 * @param items an Iterable of items
 * @return the sum of the item
 * @since 2.2.0
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>items</ParamName>
                    <ParamType>Iterable</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>