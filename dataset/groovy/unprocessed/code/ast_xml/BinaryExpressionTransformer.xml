<Class>
    <Id>147</Id>
    <Package>org.codehaus.groovy.transform.sc.transformers</Package>
    <ClassName>BinaryExpressionTransformer</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment></ClassComment>
    <FieldList>
        <Field>
            <FieldName>COMPARE_TO_METHOD</FieldName>
            <FieldType>MethodNode</FieldType>
        </Field>
        <Field>
            <FieldName>CONSTANT_ZERO</FieldName>
            <FieldType>ConstantExpression</FieldType>
        </Field>
        <Field>
            <FieldName>CONSTANT_MINUS_ONE</FieldName>
            <FieldType>ConstantExpression</FieldType>
        </Field>
        <Field>
            <FieldName>CONSTANT_ONE</FieldName>
            <FieldType>ConstantExpression</FieldType>
        </Field>
        <Field>
            <FieldName>tmpVarCounter</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>staticCompilationTransformer</FieldName>
            <FieldType>StaticCompilationTransformer</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>BinaryExpressionTransformer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>staticCompilationTransformer</ParamName>
                    <ParamType>StaticCompilationTransformer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformBinaryExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bin</ParamName>
                    <ParamType>BinaryExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object[] [list=bin.getNodeMetaData(BINARY_EXP_TARGET)]</InnerVar>
                <InnerVar>Token [operation=bin.getOperation()]</InnerVar>
                <InnerVar>int [operationType=operation.getType()]</InnerVar>
                <InnerVar>Expression [rightExpression=bin.getRightExpression()]</InnerVar>
                <InnerVar>Expression [leftExpression=bin.getLeftExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tryOptimizeCharComparison</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BinaryExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>left</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>right</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bin</ParamName>
                    <ParamType>BinaryExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [op=bin.getOperation().getType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tryCharConstant</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Character</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expr</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformDeclarationExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bin</ParamName>
                    <ParamType>BinaryExpression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [leftExpression=bin.getLeftExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convertInOperatorToTernary</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>bin</ParamName>
                    <ParamType>BinaryExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightExpression</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leftExpression</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodCallExpression [call=new MethodCallExpression(rightExpression,"isCase",leftExpression)]</InnerVar>
                <InnerVar>TernaryExpression [tExp=new TernaryExpression(new BooleanExpression(new BinaryExpression(rightExpression,Token.newSymbol("==",-1,-1),new ConstantExpression(null))),new BinaryExpression(leftExpression,Token.newSymbol("==",-1,-1),new ConstantExpression(null)),call)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>call;setMethodTarget;[(MethodNode)bin.getNodeMetaData(StaticTypesMarker.DIRECT_METHOD_CALL_TARGET)]</InnerMethodInvoke>
                <InnerMethodInvoke>call;setSourcePosition;[bin]</InnerMethodInvoke>
                <InnerMethodInvoke>call;copyNodeMetaData;[bin]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>optimizeConstantInitialization</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>DeclarationExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>originalDeclaration</ParamName>
                    <ParamType>BinaryExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>operation</ParamName>
                    <ParamType>Token</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>constant</ParamName>
                    <ParamType>ConstantExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>leftExpression</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declarationType</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConstantExpression [cexp=new ConstantExpression(convertConstant((Number)constant.getValue(),ClassHelper.getWrapper(declarationType)),true)]</InnerVar>
                <InnerVar>DeclarationExpression [result=new DeclarationExpression(leftExpression,operation,cexp)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>cexp;setType;[declarationType]</InnerMethodInvoke>
                <InnerMethodInvoke>cexp;setSourcePosition;[constant]</InnerMethodInvoke>
                <InnerMethodInvoke>result;setSourcePosition;[originalDeclaration]</InnerMethodInvoke>
                <InnerMethodInvoke>result;copyNodeMetaData;[originalDeclaration]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convertConstant</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>Number</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>target</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformPropertyAssignmentToSetterCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>leftExpression</ParamName>
                    <ParamType>PropertyExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightExpression</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>directMCT</ParamName>
                    <ParamType>MethodNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [arg=staticCompilationTransformer.transform(rightExpression)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isNullConstant</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>