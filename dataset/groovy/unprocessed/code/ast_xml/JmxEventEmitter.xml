<Class>
    <Id>649</Id>
    <Package>groovy.jmx.builder</Package>
    <ClassName>JmxEventEmitter</ClassName>
    <SuperClass>NotificationBroadcasterSupport</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>JmxEventEmitterMBean</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>JmxEventEmitter  /** 
 * The JmxEventEmitter is a JMX Broadcaster class that is used to send generic events on the MBeanServer's event bus. It is used by the Emitter node () to send event to registered listeners. &lt;p&gt; &lt;pre&gt; def jmx = JmxBuilder() jmx.emitter(name:"Object name"|ObjectName(), event:"event type") ... jmx.emitter.send(object) &lt;/pre&gt;
 * @author Vladimir Vivien
 * @see groovy.jmx.builder.JmxEmitterFactory
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>event</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>message</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>num</FieldName>
            <FieldType>AtomicLong</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getEvent</MethodName>
            <MethodComment>/** 
 * Event type getter
 * @return - returns event type string thrown by this emitter
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setEvent</MethodName>
            <MethodComment>/** 
 * Event type setter
 * @param event - event type set for this emitter.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>event</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMessage</MethodName>
            <MethodComment>/** 
 * Event message getter
 * @return - message that is associated with event.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setMessage</MethodName>
            <MethodComment>/** 
 * Event message setter.
 * @param message - message that is associated with event emitted.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>message</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>send</MethodName>
            <MethodComment>/** 
 * Called to broadcast message on MBeanServer event bus.  Internally, it calls NotificationBroadCasterSupport.sendNotification() method to dispatch the event.
 * @param data - a data object sent as part of the event parameter.
 * @return a sequence number associated with the emitted event.
 */
</MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>data</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>long [seq=NumberSequencer.getNextSequence()]</InnerVar>
                <InnerVar>Notification [note=new Notification(this.getEvent(),this,seq,System.currentTimeMillis(),"Event notification " + this.getEvent())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>note;setUserData;[data]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getNextSequence</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>long</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>