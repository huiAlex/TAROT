<Class>
    <Id>1111</Id>
    <Package>org.codehaus.groovy.runtime</Package>
    <ClassName>SwingGroovyMethods</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>SwingGroovyMethods  /** 
 * This class defines all the new Swing-related groovy methods which enhance the normal JDK Swing classes when inside the Groovy environment. Static methods are used with the first parameter the destination class.
 * @author Andres Almiray
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>index</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>index</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>index</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>row</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>row</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>index</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>index</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Provide the standard Groovy &lt;code&gt;size()&lt;/code&gt; method for &lt;code&gt;Container&lt;/code&gt;.
 * @param self a Container
 * @return the component count of the container
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Container</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAt</MethodName>
            <MethodComment>/** 
 * Support the subscript operator for Container.
 * @param self  a Container
 * @param index the index of the Component to get
 * @return the component at the given index
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>Component</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Container</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add components to a Container.
 * @param self a Container
 * @param c    a Component to be added to the container.
 * @return same container, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>Container</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Container</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>c</ParamName>
                    <ParamType>Component</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;add;[c]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * Returns an  {@link java.util.Iterator} which traverses the Container one Component at a time.
 * @param self a Container
 * @return an Iterator for a Container
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>Component</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Container</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clear</MethodName>
            <MethodComment>/** 
 * Removes all components from the Container.
 * @param self a Container
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>Container</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;removeAll;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Provide the standard Groovy &lt;code&gt;size()&lt;/code&gt; method for &lt;code&gt;ButtonGroup&lt;/code&gt;.
 * @param self a ButtonGroup
 * @return the button count of the buttonGroup
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>ButtonGroup</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAt</MethodName>
            <MethodComment>/** 
 * Support the subscript operator for ButtonGroup.
 * @param self  a ButtonGroup
 * @param index the index of the AbstractButton to get
 * @return the button at the given index
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>AbstractButton</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>ButtonGroup</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [size=self.getButtonCount()]</InnerVar>
                <InnerVar>Enumeration [buttons=self.getElements()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add buttons to a ButtonGroup.
 * @param self a ButtonGroup
 * @param b    an AbstractButton to be added to the buttonGroup.
 * @return same buttonGroup, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>ButtonGroup</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>ButtonGroup</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>AbstractButton</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;add;[b]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * Returns an  {@link java.util.Iterator} which traverses the ButtonGroup one AbstractButton at a time.
 * @param self a ButtonGroup
 * @return an Iterator for a ButtonGroup
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>AbstractButton</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>ButtonGroup</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Provide the standard Groovy &lt;code&gt;size()&lt;/code&gt; method for &lt;code&gt;ListModel&lt;/code&gt;.
 * @param self a ListModel
 * @return the size of the ListModel
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>ListModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAt</MethodName>
            <MethodComment>/** 
 * Support the subscript operator for ListModel.
 * @param self  a ListModel
 * @param index the index of the element to get
 * @return the element at the given index
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>ListModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * Returns an  {@link java.util.Iterator} which traverses the ListModel one element at a time.
 * @param self a ListModel
 * @return an Iterator for a ListModel
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>Iterator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>ListModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasNext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add elements to a DefaultListModel.
 * @param self a DefaultListModel
 * @param e    an element to be added to the listModel.
 * @return same listModel, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>DefaultListModel</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>DefaultListModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;addElement;[e]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putAt</MethodName>
            <MethodComment>/** 
 * Allow DefaultListModel to work with subscript operators.&lt;p&gt; &lt;b&gt;WARNING:&lt;/b&gt; this operation does not replace the element at the specified index, rather it inserts the element at that index, thus increasing the size of of the model by 1.
 * @param self  a DefaultListModel
 * @param index an index
 * @param e     the element to insert at the given index
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>DefaultListModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;set;[index, e]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clear</MethodName>
            <MethodComment>/** 
 * Removes all elements from the DefaultListModel.
 * @param self a DefaultListModel
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>DefaultListModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;removeAllElements;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * Returns an  {@link java.util.Iterator} which traverses the DefaultListModel one element at a time.
 * @param self a DefaultListModel
 * @return an Iterator for a DefaultListModel
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>Iterator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>DefaultListModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasNext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Provide the standard Groovy &lt;code&gt;size()&lt;/code&gt; method for &lt;code&gt;JComboBox&lt;/code&gt;.
 * @param self a JComboBox
 * @return the intem count of the comboBox
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JComboBox</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAt</MethodName>
            <MethodComment>/** 
 * Support the subscript operator for JComboBox.
 * @param self  a JComboBox
 * @param index the index of the item to get
 * @return the tem at the given index
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JComboBox</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add items to a JComboBox.
 * @param self a JComboBox
 * @param i    an item to be added to the comboBox.
 * @return same comboBox, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>JComboBox</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JComboBox</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>i</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;addItem;[i]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clear</MethodName>
            <MethodComment>/** 
 * Removes all items from the JComboBox.
 * @param self a JComboBox
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JComboBox</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;removeAllItems;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * Returns an  {@link java.util.Iterator} which traverses the ComboBox one item at a time.
 * @param self a ComboBox
 * @return an Iterator for a ComboBox
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>Iterator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JComboBox</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add items to a MutableComboBoxModel.
 * @param self a MutableComboBoxModel
 * @param i    an item to be added to the model.
 * @return same model, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>MutableComboBoxModel</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>MutableComboBoxModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>i</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;addElement;[i]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putAt</MethodName>
            <MethodComment>/** 
 * Allow MutableComboBoxModel to work with subscript operators.&lt;p&gt; &lt;b&gt;WARNING:&lt;/b&gt; this operation does not replace the item at the specified index, rather it inserts the item at that index, thus increasing the size of the model by 1.
 * @param self  a MutableComboBoxModel
 * @param index an index
 * @param i     the item to insert at the given index
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>MutableComboBoxModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>i</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;insertElementAt;[i, index]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * Returns an  {@link java.util.Iterator} which traverses the MutableComboBoxModel one item at a time.
 * @param self a MutableComboBoxModel
 * @return an Iterator for a MutableComboBoxModel
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>Iterator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>MutableComboBoxModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasNext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clear</MethodName>
            <MethodComment>/** 
 * Removes all items from the model.
 * @param self a DefaultComboBoxModel
 * @since 1.7.3
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>DefaultComboBoxModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;removeAllElements;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Provide the standard Groovy &lt;code&gt;size()&lt;/code&gt; method for &lt;code&gt;TableModel&lt;/code&gt;.
 * @param self a TableModel
 * @return the row count of the TableModel
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>TableModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAt</MethodName>
            <MethodComment>/** 
 * Support the subscript operator for TableModel.
 * @param self  a TableModel
 * @param index the index of the row to get
 * @return the row at the given index
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>Object[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>TableModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [cols=self.getColumnCount()]</InnerVar>
                <InnerVar>Object[] [rowData=new Object[cols]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * Returns an  {@link java.util.Iterator} which traverses the TableModel one row at a time.
 * @param self a TableModel
 * @return an Iterator for a TableModel
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>Iterator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>TableModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasNext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [cols=self.getColumnCount()]</InnerVar>
                <InnerVar>Object[] [rowData=new Object[cols]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add rows to a DefaultTableModel. &lt;p&gt; if row.size &amp;lt; model.size -&amp;gt; row will be padded with nulls&lt;br&gt; if row.size &amp;gt; model.size -&amp;gt; additional columns will be discarded&lt;br&gt;
 * @param self a DefaultTableModel
 * @param row  a row to be added to the model.
 * @return same model, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>DefaultTableModel</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>DefaultTableModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;addRow;[buildRowData(self,row)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putAt</MethodName>
            <MethodComment>/** 
 * Allow DefaultTableModel to work with subscript operators.&lt;p&gt; &lt;b&gt;WARNING:&lt;/b&gt; this operation does not replace the item at the specified index, rather it inserts the item at that index, thus increasing the size of the model by 1.&lt;p&gt; &lt;p&gt; if row.size &amp;lt; model.size -&amp;gt; row will be padded with nulls&lt;br&gt; if row.size &amp;gt; model.size -&amp;gt; additional columns will be discarded
 * @param self  a DefaultTableModel
 * @param index an index
 * @param row   the row to insert at the given index
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>DefaultTableModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;insertRow;[index, buildRowData(self,row)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildRowData</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>delegate</ParamName>
                    <ParamType>DefaultTableModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>row</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [cols=delegate.getColumnCount()]</InnerVar>
                <InnerVar>Object[] [rowData=new Object[cols]]</InnerVar>
                <InnerVar>int [i=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * Returns an  {@link java.util.Iterator} which traverses the DefaultTableModel one item at a time.
 * @param self a DefaultTableModel
 * @return an Iterator for a DefaultTableModel
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>Iterator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>DefaultTableModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasNext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>int [cols=self.getColumnCount()]</InnerVar>
                <InnerVar>Object[] [rowData=new Object[cols]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Provide the standard Groovy &lt;code&gt;size()&lt;/code&gt; method for &lt;code&gt;TableColumnModel&lt;/code&gt;.
 * @param self a TableColumnModel
 * @return the column count of the TableColumnModel
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>TableColumnModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAt</MethodName>
            <MethodComment>/** 
 * Support the subscript operator for TableColumnModel.
 * @param self  a TableColumnModel
 * @param index the index of the column to get
 * @return the column at the given index
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>TableColumn</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>TableColumnModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * Returns an  {@link java.util.Iterator} which traverses the TableColumnModel one TableColumn at a time.
 * @param self a TableColumnModel
 * @return an Iterator for a TableColumnModel
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>TableColumn</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>TableColumnModel</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasNext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TableColumn</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add columns to a TableColumnModel.
 * @param self   a TableColumnModel
 * @param column a TableColumn to be added to the model.
 * @return same model, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>TableColumnModel</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>TableColumnModel</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>column</ParamName>
                    <ParamType>TableColumn</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;addColumn;[column]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Provide the standard Groovy &lt;code&gt;size()&lt;/code&gt; method for &lt;code&gt;TreePath&lt;/code&gt;.
 * @param self a TreePath
 * @return the path count of the treePath
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>TreePath</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAt</MethodName>
            <MethodComment>/** 
 * Support the subscript operator for TreePath.
 * @param self  a TreePath
 * @param index the index of the path to get
 * @return the path at the given index
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>TreePath</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add paths to a treePath.&lt;p&gt; &lt;b&gt;WARNING:&lt;/b&gt; this operation returns a new TreePath, not the original one.&lt;p&gt;
 * @param self a TreePath
 * @param p    an object to be added to the treePath.
 * @return same treePath, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>TreePath</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>TreePath</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>p</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * Returns an  {@link java.util.Iterator} which traverses the TreePath one path at a time.
 * @param self a TreePath
 * @return an Iterator for a TreePath
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>Iterator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>TreePath</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Provide the standard Groovy &lt;code&gt;size()&lt;/code&gt; method for &lt;code&gt;TreeNode&lt;/code&gt;.
 * @param self a TreeNode
 * @return the child count of the treeNode
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>TreeNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAt</MethodName>
            <MethodComment>/** 
 * Support the subscript operator for TreeNode.
 * @param self  a TreeNode
 * @param index the index of the child node to get
 * @return the child node at the given index
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>TreeNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>TreeNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * Returns an  {@link java.util.Iterator} which traverses the TreeNode one node at a time.
 * @param self a TreeNode
 * @return an Iterator for a TreeNode
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>TreeNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>TreeNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add nodes to a MutableTreeNode.&lt;p&gt;
 * @param self a MutableTreeNode
 * @param node a node to be added to the treeNode.
 * @return same treeNode, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>MutableTreeNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>MutableTreeNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>MutableTreeNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;insert;[node, self.getChildCount()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putAt</MethodName>
            <MethodComment>/** 
 * Allow MutableTreeNode to work with subscript operators.&lt;p&gt; &lt;b&gt;WARNING:&lt;/b&gt; this operation does not replace the node at the specified index, rather it inserts the node at that index, thus increasing the size of the treeNode by 1.&lt;p&gt;
 * @param self  a MutableTreeNode
 * @param index an index
 * @param node  the node to insert at the given index
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>MutableTreeNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>MutableTreeNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;insert;[node, index]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add nodes to a DefaultMutableTreeNode.&lt;p&gt;
 * @param self a DefaultMutableTreeNode
 * @param node a node to be added to the treeNode.
 * @return same treeNode, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>DefaultMutableTreeNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>DefaultMutableTreeNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>DefaultMutableTreeNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;add;[node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clear</MethodName>
            <MethodComment>/** 
 * Removes all children nodes from the DefaultMutableTreeNode.
 * @param self a DefaultMutableTreeNode
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>DefaultMutableTreeNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;removeAllChildren;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Provide the standard Groovy &lt;code&gt;size()&lt;/code&gt; method for &lt;code&gt;JMenu&lt;/code&gt;.
 * @param self a JMenu
 * @return the menu component count of the menu
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JMenu</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAt</MethodName>
            <MethodComment>/** 
 * Support the subscript operator for JMenu.
 * @param self  a JMenu
 * @param index the index of the menu component to get
 * @return the menu component at the given index
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>Component</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JMenu</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add components to a menu.&lt;p&gt;
 * @param self   a JMenu
 * @param action an action to be added to the menu.
 * @return same menu, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>JMenu</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JMenu</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>action</ParamName>
                    <ParamType>Action</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;add;[action]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add components to a menu.&lt;p&gt;
 * @param self      a JMenu
 * @param component a component to be added to the menu.
 * @return same menu, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>JMenu</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JMenu</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>component</ParamName>
                    <ParamType>Component</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;add;[component]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add components to a menu.&lt;p&gt;
 * @param self a JMenu
 * @param item an item to be added to the menu.
 * @return same menu, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>JMenu</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JMenu</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>item</ParamName>
                    <ParamType>JMenuItem</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;add;[item]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add components to a menu.&lt;p&gt;
 * @param self a JMenu
 * @param str  a String to be added to the menu.
 * @return same menu, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>JMenu</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JMenu</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;add;[str]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add components to a menu.&lt;p&gt;
 * @param self a JMenu
 * @param gstr a GString to be added to the menu.
 * @return same menu, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>JMenu</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JMenu</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>gstr</ParamName>
                    <ParamType>GString</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;add;[gstr.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * Returns an  {@link java.util.Iterator} which traverses the JMenu one component at a time.
 * @param self a JMenu
 * @return an Iterator for a JMenu
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>Iterator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JMenu</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Provide the standard Groovy &lt;code&gt;size()&lt;/code&gt; method for &lt;code&gt;JMenuBar&lt;/code&gt;.
 * @param self a JMenuBar
 * @return the menu count of the menuBar
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JMenuBar</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAt</MethodName>
            <MethodComment>/** 
 * Support the subscript operator for JMenuBar.
 * @param self  a JMenuBar
 * @param index the index of the menu to get
 * @return the menu at the given index
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>JMenu</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JMenuBar</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add menus to a menuBar.&lt;p&gt;
 * @param self a JMenuBar
 * @param menu a menu to be added to the menuBar.
 * @return same menuBar, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>JMenuBar</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JMenuBar</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>menu</ParamName>
                    <ParamType>JMenu</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;add;[menu]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * Returns an  {@link java.util.Iterator} which traverses the JMenuBar one menu at a time.
 * @param self a JMenuBar
 * @return an Iterator for a JMenuBar
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>Iterator</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JMenuBar</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add components to a popupMenu.&lt;p&gt;
 * @param self   a JPopupMenu
 * @param action an action to be added to the popupMenu.
 * @return same popupMenu, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>JPopupMenu</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JPopupMenu</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>action</ParamName>
                    <ParamType>Action</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;add;[action]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add components to a popupMenu.&lt;p&gt;
 * @param self      a JPopupMenu
 * @param component a component to be added to the popupMenu.
 * @return same popupMenu, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>JPopupMenu</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JPopupMenu</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>component</ParamName>
                    <ParamType>Component</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;add;[component]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add components to a popupMenu.&lt;p&gt;
 * @param self a JPopupMenu
 * @param item an item to be added to the popupMenu.
 * @return same popupMenu, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>JPopupMenu</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JPopupMenu</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>item</ParamName>
                    <ParamType>JMenuItem</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;add;[item]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add components to a popupMenu.&lt;p&gt;
 * @param self a JPopupMenu
 * @param str  a String to be added to the popupMenu.
 * @return same popupMenu, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>JPopupMenu</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JPopupMenu</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>str</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;add;[str]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add components to a popupMenu.&lt;p&gt;
 * @param self a JPopupMenu
 * @param gstr a GString to be added to the popupMenu.
 * @return same popupMenu, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>JPopupMenu</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JPopupMenu</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>gstr</ParamName>
                    <ParamType>GString</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;add;[gstr.toString()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * Returns an  {@link java.util.Iterator} which traverses the JPopupMenu one MenuElement at a time.
 * @param self a JPopupMenu
 * @return an Iterator for a JPopupMenu
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>MenuElement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JPopupMenu</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Provide the standard Groovy &lt;code&gt;size()&lt;/code&gt; method for &lt;code&gt;JTabbedPane&lt;/code&gt;.
 * @param self a JTabbedPane
 * @return the tab count of the tabbedPane
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JTabbedPane</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>clear</MethodName>
            <MethodComment>/** 
 * Removes all elements from the JTabbedPane.
 * @param self a JTabbedPane
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JTabbedPane</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;removeAll;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAt</MethodName>
            <MethodComment>/** 
 * Support the subscript operator for JTabbedPane.
 * @param self  a JTabbedPane
 * @param index the index of the tab component to get
 * @return the component at the given index
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>Component</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JTabbedPane</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>iterator</MethodName>
            <MethodComment>/** 
 * Returns an  {@link java.util.Iterator} which traverses the JTabbedPane one Component tab at a time.
 * @param self a JTabbedPane
 * @return an Iterator for a JTabbedPane
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>Component</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JTabbedPane</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasNext</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Component</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>remove</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>leftShift</MethodName>
            <MethodComment>/** 
 * Overloads the left shift operator to provide an easy way to add components to a toolBar.&lt;p&gt;
 * @param self   a JToolBar
 * @param action an Action to be added to the toolBar.
 * @return same toolBar, after the value was added to it.
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>JToolBar</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JToolBar</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>action</ParamName>
                    <ParamType>Action</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>self;add;[action]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAt</MethodName>
            <MethodComment>/** 
 * Support the subscript operator for JToolBar.
 * @param self  a JToolBar
 * @param index the index of the tab component to get
 * @return the tab component at the given index
 * @since 1.6.4
 */
</MethodComment>
            <ReturnType>Component</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>self</ParamName>
                    <ParamType>JToolBar</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setMnemonic</MethodName>
            <MethodComment>/** 
 * Allows the usage of a one-element string for a mnemonic
 * @param button a AbstractButton
 * @param mnemonic the String
 * @since 2.3.7
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>button</ParamName>
                    <ParamType>AbstractButton</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mnemonic</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char [c=ShortTypeHandling.castToChar(mnemonic)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>button;setMnemonic;[c]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>