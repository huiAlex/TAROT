<Class>
    <Id>908</Id>
    <Package>groovy.util</Package>
    <ClassName>CharsetToolkit</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>CharsetToolkit  /** 
 * Utility class to guess the encoding of a given text file. &lt;p&gt; Unicode files encoded in UTF-16 (low or big endian) or UTF-8 files with a Byte Order Marker are correctly discovered. For UTF-8 files with no BOM, if the buffer is wide enough, the charset should also be discovered. &lt;p&gt; A byte buffer of 4KB is used to be able to guess the encoding. &lt;p&gt; Usage: &lt;pre&gt; CharsetToolkit toolkit = new CharsetToolkit(file); // guess the encoding Charset guessedCharset = toolkit.getCharset(); // create a reader with the correct charset BufferedReader reader = toolkit.getReader(); // read the file content String line; while ((line = br.readLine())!= null) { System.out.println(line); } &lt;/pre&gt;
 * @author Guillaume Laforge
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>buffer</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
        <Field>
            <FieldName>defaultCharset</FieldName>
            <FieldType>Charset</FieldType>
        </Field>
        <Field>
            <FieldName>charset</FieldName>
            <FieldType>Charset</FieldType>
        </Field>
        <Field>
            <FieldName>enforce8Bit</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>file</FieldName>
            <FieldType>File</FieldType>
        </Field>
        <Field>
            <FieldName>EMPTY_BYTE_ARRAY</FieldName>
            <FieldType>byte[]</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>CharsetToolkit</MethodName>
            <MethodComment>/** 
 * Constructor of the &lt;code&gt;CharsetToolkit&lt;/code&gt; utility class.
 * @param file of which we want to know the encoding.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>file</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>InputStream [input=new FileInputStream(file)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setDefaultCharset</MethodName>
            <MethodComment>/** 
 * Defines the default &lt;code&gt;Charset&lt;/code&gt; used in case the buffer represents an 8-bit &lt;code&gt;Charset&lt;/code&gt;.
 * @param defaultCharset the default &lt;code&gt;Charset&lt;/code&gt; to be returnedif an 8-bit &lt;code&gt;Charset&lt;/code&gt; is encountered.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>defaultCharset</ParamName>
                    <ParamType>Charset</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getCharset</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Charset</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setEnforce8Bit</MethodName>
            <MethodComment>/** 
 * If US-ASCII is recognized, enforce to return the default encoding, rather than US-ASCII. It might be a file without any special character in the range 128-255, but that may be or become a file encoded with the default &lt;code&gt;charset&lt;/code&gt; rather than US-ASCII.
 * @param enforce a boolean specifying the use or not of US-ASCII.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>enforce</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getEnforce8Bit</MethodName>
            <MethodComment>/** 
 * Gets the enforce8Bit flag, in case we do not want to ever get a US-ASCII encoding.
 * @return a boolean representing the flag of use of US-ASCII.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDefaultCharset</MethodName>
            <MethodComment>/** 
 * Retrieves the default Charset
 */
</MethodComment>
            <ReturnType>Charset</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>guessEncoding</MethodName>
            <MethodComment>/** 
 * Guess the encoding of the provided buffer. If Byte Order Markers are encountered at the beginning of the buffer, we immediately return the charset implied by this BOM. Otherwise, the file would not be a human readable text file. &lt;p&gt; If there is no BOM, this method tries to discern whether the file is UTF-8 or not. If it is not UTF-8, we assume the encoding is the default system encoding (of course, it might be any 8-bit charset, but usually, an 8-bit charset is the default one). &lt;p&gt; It is possible to discern UTF-8 thanks to the pattern of characters with a multi-byte sequence. &lt;pre&gt; UCS-4 range (hex.)        UTF-8 octet sequence (binary) 0000 0000-0000 007F       0xxxxxxx 0000 0080-0000 07FF       110xxxxx 10xxxxxx 0000 0800-0000 FFFF       1110xxxx 10xxxxxx 10xxxxxx 0001 0000-001F FFFF       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 0020 0000-03FF FFFF       111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 0400 0000-7FFF FFFF       1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx &lt;/pre&gt; With UTF-8, 0xFE and 0xFF never appear.
 * @return the Charset recognized.
 */
</MethodComment>
            <ReturnType>Charset</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>boolean [highOrderBit=false]</InnerVar>
                <InnerVar>boolean [validU8Char=true]</InnerVar>
                <InnerVar>int [length=buffer.length]</InnerVar>
                <InnerVar>int [i=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isContinuationChar</MethodName>
            <MethodComment>/** 
 * If the byte has the form 10xxxxx, then it's a continuation byte of a multiple byte character;
 * @param b a byte.
 * @return true if it's a continuation char.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isTwoBytesSequence</MethodName>
            <MethodComment>/** 
 * If the byte has the form 110xxxx, then it's the first byte of a two-bytes sequence character.
 * @param b a byte.
 * @return true if it's the first byte of a two-bytes sequence.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isThreeBytesSequence</MethodName>
            <MethodComment>/** 
 * If the byte has the form 1110xxx, then it's the first byte of a three-bytes sequence character.
 * @param b a byte.
 * @return true if it's the first byte of a three-bytes sequence.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isFourBytesSequence</MethodName>
            <MethodComment>/** 
 * If the byte has the form 11110xx, then it's the first byte of a four-bytes sequence character.
 * @param b a byte.
 * @return true if it's the first byte of a four-bytes sequence.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isFiveBytesSequence</MethodName>
            <MethodComment>/** 
 * If the byte has the form 11110xx, then it's the first byte of a five-bytes sequence character.
 * @param b a byte.
 * @return true if it's the first byte of a five-bytes sequence.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isSixBytesSequence</MethodName>
            <MethodComment>/** 
 * If the byte has the form 1110xxx, then it's the first byte of a six-bytes sequence character.
 * @param b a byte.
 * @return true if it's the first byte of a six-bytes sequence.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>b</ParamName>
                    <ParamType>byte</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getDefaultSystemCharset</MethodName>
            <MethodComment>/** 
 * Retrieve the default charset of the system.
 * @return the default &lt;code&gt;Charset&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType>Charset</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasUTF8Bom</MethodName>
            <MethodComment>/** 
 * Has a Byte Order Marker for UTF-8 (Used by Microsoft's Notepad and other editors).
 * @return true if the buffer has a BOM for UTF8.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasUTF16LEBom</MethodName>
            <MethodComment>/** 
 * Has a Byte Order Marker for UTF-16 Low Endian (ucs-2le, ucs-4le, and ucs-16le).
 * @return true if the buffer has a BOM for UTF-16 Low Endian.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasUTF16BEBom</MethodName>
            <MethodComment>/** 
 * Has a Byte Order Marker for UTF-16 Big Endian (utf-16 and ucs-2).
 * @return true if the buffer has a BOM for UTF-16 Big Endian.
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getReader</MethodName>
            <MethodComment>/** 
 * Gets a &lt;code&gt;BufferedReader&lt;/code&gt; (indeed a &lt;code&gt;LineNumberReader&lt;/code&gt;) from the &lt;code&gt;File&lt;/code&gt; specified in the constructor of &lt;code&gt;CharsetToolkit&lt;/code&gt; using the charset discovered or the default charset if an 8-bit &lt;code&gt;Charset&lt;/code&gt; is encountered.
 * @return a &lt;code&gt;BufferedReader&lt;/code&gt;
 * @throws FileNotFoundException if the file is not found.
 */
</MethodComment>
            <ReturnType>BufferedReader</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>LineNumberReader [reader=new LineNumberReader(new InputStreamReader(new FileInputStream(file),getCharset()))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>FileNotFoundException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAvailableCharsets</MethodName>
            <MethodComment>/** 
 * Retrieves all the available &lt;code&gt;Charset&lt;/code&gt;s on the platform, among which the default &lt;code&gt;charset&lt;/code&gt;.
 * @return an array of &lt;code&gt;Charset&lt;/code&gt;s.
 */
</MethodComment>
            <ReturnType>Charset[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Collection [collection=Charset.availableCharsets().values()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>