<Class>
    <Id>888</Id>
    <Package>groovy.beans</Package>
    <ClassName>BindableASTTransformation</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ASTTransformation</SuperInterface>
        <SuperInterface>Opcodes</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BindableASTTransformation  /** 
 * Handles generation of code for the  {@code @Bindable} annotation when {@code @Vetoable}is not present. &lt;p&gt; Generally, it adds (if needed) a PropertyChangeSupport field and the needed add/removePropertyChangeListener methods to support the listeners. &lt;p&gt; It also generates the setter and wires the setter through the PropertyChangeSupport. &lt;p&gt; If a  {@link Vetoable} annotation is detected it does nothing andlets the  {@link VetoableASTTransformation} handle all the changes.
 * @author Danno Ferrin (shemnon)
 * @author Chris Reeves
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>boundClassNode</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>hasBindableAnnotation</MethodName>
            <MethodComment>/** 
 * Convenience method to see if an annotated node is  {@code @Bindable}.
 * @param node the node to check
 * @return true if the node is bindable
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AnnotatedNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visit</MethodName>
            <MethodComment>/** 
 * Handles the bulk of the processing, mostly delegating to other methods.
 * @param nodes   the ast nodes
 * @param source  the source unit for the nodes
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>nodes</ParamName>
                    <ParamType>ASTNode[]</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AnnotationNode [node=(AnnotationNode)nodes[0]]</InnerVar>
                <InnerVar>AnnotatedNode [parent=(AnnotatedNode)nodes[1]]</InnerVar>
                <InnerVar>ClassNode [declaringClass=parent.getDeclaringClass()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addListenerToProperty</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AnnotationNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>declaringClass</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>field</ParamName>
                    <ParamType>FieldNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [fieldName=field.getName()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>source.getErrorCollector();addErrorAndContinue;[new SyntaxErrorMessage(new SyntaxException("@groovy.beans.Bindable must be on a property, not a field.  Try removing the private, protected, or public modifier.",node.getLineNumber(),node.getColumnNumber(),node.getLastLineNumber(),node.getLastColumnNumber()),source)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addListenerToClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>wrapSetterMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [getterName="get" + MetaClassHelper.capitalize(propertyName)]</InnerVar>
                <InnerVar>MethodNode [setter=classNode.getSetterMethod("set" + MetaClassHelper.capitalize(propertyName))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createListenerSetter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyNode</ParamName>
                    <ParamType>PropertyNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [setterName="set" + MetaClassHelper.capitalize(propertyNode.getName())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createBindableStatement</MethodName>
            <MethodComment>/** 
 * Creates a statement body similar to: &lt;code&gt;this.firePropertyChange("field", field, field = value)&lt;/code&gt;
 * @param propertyNode           the field node for the property
 * @param fieldExpression a field expression for setting the property value
 * @return the created statement
 */
</MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>propertyNode</ParamName>
                    <ParamType>PropertyNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fieldExpression</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createSetterMethod</MethodName>
            <MethodComment>/** 
 * Creates a setter method with the given body.
 * @param declaringClass the class to which we will add the setter
 * @param propertyNode          the field to back the setter
 * @param setterName     the name of the setter
 * @param setterBlock    the statement representing the setter block
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>declaringClass</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>propertyNode</ParamName>
                    <ParamType>PropertyNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>setterName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>setterBlock</ParamName>
                    <ParamType>Statement</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodNode [setter=new MethodNode(setterName,propertyNode.getModifiers(),ClassHelper.VOID_TYPE,params(param(propertyNode.getType(),"value")),ClassNode.EMPTY_ARRAY,setterBlock)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>setter;setSynthetic;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>declaringClass;addMethod;[setter]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>needsPropertyChangeSupport</MethodName>
            <MethodComment>/** 
 * Snoops through the declaring class and all parents looking for methods &lt;code&gt;void addPropertyChangeListener(PropertyChangeListener)&lt;/code&gt;, &lt;code&gt;void removePropertyChangeListener(PropertyChangeListener)&lt;/code&gt;, and &lt;code&gt;void firePropertyChange(String, Object, Object)&lt;/code&gt;. If any are defined all must be defined or a compilation error results.
 * @param declaringClass the class to search
 * @param sourceUnit the source unit, for error reporting. {@code @NotNull}.
 * @return true if property change support should be added
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>declaringClass</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sourceUnit</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [foundAdd=false, foundRemove=false, foundFire=false]</InnerVar>
                <InnerVar>ClassNode [consideredClass=declaringClass]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addPropertyChangeSupport</MethodName>
            <MethodComment>/** 
 * Adds the necessary field and methods to support property change support. &lt;p&gt; Adds a new field: &lt;pre&gt; &lt;code&gt;protected final java.beans.PropertyChangeSupport this$PropertyChangeSupport = new java.beans.PropertyChangeSupport(this)&lt;/code&gt;" &lt;/pre&gt; &lt;p&gt; Also adds support methods: &lt;pre&gt; &lt;code&gt;public void addPropertyChangeListener(java.beans.PropertyChangeListener)&lt;/code&gt; &lt;code&gt;public void addPropertyChangeListener(String, java.beans.PropertyChangeListener)&lt;/code&gt; &lt;code&gt;public void removePropertyChangeListener(java.beans.PropertyChangeListener)&lt;/code&gt; &lt;code&gt;public void removePropertyChangeListener(String, java.beans.PropertyChangeListener)&lt;/code&gt; &lt;code&gt;public java.beans.PropertyChangeListener[] getPropertyChangeListeners()&lt;/code&gt; &lt;/pre&gt;
 * @param declaringClass the class to which we add the support field and methods
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>declaringClass</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [pcsClassNode=ClassHelper.make(PropertyChangeSupport.class)]</InnerVar>
                <InnerVar>ClassNode [pclClassNode=ClassHelper.make(PropertyChangeListener.class)]</InnerVar>
                <InnerVar>FieldNode [pcsField=declaringClass.addField("this$propertyChangeSupport",ACC_FINAL | ACC_PRIVATE | ACC_SYNTHETIC,pcsClassNode,ctorX(pcsClassNode,args(varX("this"))))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>declaringClass;addMethod;[new MethodNode("addPropertyChangeListener",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(pclClassNode,"listener")),ClassNode.EMPTY_ARRAY,stmt(callX(fieldX(pcsField),"addPropertyChangeListener",args(varX("listener",pclClassNode)))))]</InnerMethodInvoke>
                <InnerMethodInvoke>declaringClass;addMethod;[new MethodNode("addPropertyChangeListener",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,"name"),param(pclClassNode,"listener")),ClassNode.EMPTY_ARRAY,stmt(callX(fieldX(pcsField),"addPropertyChangeListener",args(varX("name",ClassHelper.STRING_TYPE),varX("listener",pclClassNode)))))]</InnerMethodInvoke>
                <InnerMethodInvoke>declaringClass;addMethod;[new MethodNode("removePropertyChangeListener",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(pclClassNode,"listener")),ClassNode.EMPTY_ARRAY,stmt(callX(fieldX(pcsField),"removePropertyChangeListener",args(varX("listener",pclClassNode)))))]</InnerMethodInvoke>
                <InnerMethodInvoke>declaringClass;addMethod;[new MethodNode("removePropertyChangeListener",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,"name"),param(pclClassNode,"listener")),ClassNode.EMPTY_ARRAY,stmt(callX(fieldX(pcsField),"removePropertyChangeListener",args(varX("name",ClassHelper.STRING_TYPE),varX("listener",pclClassNode)))))]</InnerMethodInvoke>
                <InnerMethodInvoke>declaringClass;addMethod;[new MethodNode("firePropertyChange",ACC_PUBLIC,ClassHelper.VOID_TYPE,params(param(ClassHelper.STRING_TYPE,"name"),param(ClassHelper.OBJECT_TYPE,"oldValue"),param(ClassHelper.OBJECT_TYPE,"newValue")),ClassNode.EMPTY_ARRAY,stmt(callX(fieldX(pcsField),"firePropertyChange",args(varX("name",ClassHelper.STRING_TYPE),varX("oldValue"),varX("newValue")))))]</InnerMethodInvoke>
                <InnerMethodInvoke>declaringClass;addMethod;[new MethodNode("getPropertyChangeListeners",ACC_PUBLIC,pclClassNode.makeArray(),Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,returnS(callX(fieldX(pcsField),"getPropertyChangeListeners")))]</InnerMethodInvoke>
                <InnerMethodInvoke>declaringClass;addMethod;[new MethodNode("getPropertyChangeListeners",ACC_PUBLIC,pclClassNode.makeArray(),params(param(ClassHelper.STRING_TYPE,"name")),ClassNode.EMPTY_ARRAY,returnS(callX(fieldX(pcsField),"getPropertyChangeListeners",args(varX("name",ClassHelper.STRING_TYPE)))))]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>