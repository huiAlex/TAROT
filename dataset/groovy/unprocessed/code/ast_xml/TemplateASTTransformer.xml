<Class>
    <Id>1159</Id>
    <Package>groovy.text.markup</Package>
    <ClassName>TemplateASTTransformer</ClassName>
    <SuperClass>CompilationCustomizer</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>TemplateASTTransformer  /** 
 * &lt;p&gt;An AST transformation which adapts the AST generated from a script as a class extending  {@link groovy.text.markup.BaseTemplate}.&lt;/p&gt; &lt;p&gt;This transformation:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Sets the super class of the script to the selected  {@link TemplateConfiguration#getBaseTemplateClass() template class}&lt;/li&gt; &lt;li&gt;Calls the  {@link groovy.text.markup.MarkupBuilderCodeTransformer} on the "run" method&lt;/li&gt;&lt;li&gt;Creates the appropriate constructor&lt;/li&gt; &lt;/ul&gt;
 * @author Cedric Champeau
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>TEMPLATECONFIG_CLASSNODE</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>config</FieldName>
            <FieldType>TemplateConfiguration</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>TemplateASTTransformer</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>TemplateConfiguration</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>context</ParamName>
                    <ParamType>GeneratorContext</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformRunMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>source</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodNode [runMethod=classNode.getDeclaredMethod("run",Parameter.EMPTY_ARRAY)]</InnerVar>
                <InnerVar>Statement [code=runMethod.getCode()]</InnerVar>
                <InnerVar>MarkupBuilderCodeTransformer [transformer=new MarkupBuilderCodeTransformer(source,classNode,config.isAutoEscape())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>code;visit;[transformer]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createConstructor</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Parameter[] [params=new Parameter[]{new Parameter(MarkupTemplateEngine.MARKUPTEMPLATEENGINE_CLASSNODE,"engine"),new Parameter(ClassHelper.MAP_TYPE.getPlainNodeReference(),"model"),new Parameter(ClassHelper.MAP_TYPE.getPlainNodeReference(),"modelTypes"),new Parameter(TEMPLATECONFIG_CLASSNODE,"tplConfig")}]</InnerVar>
                <InnerVar>List&lt;Expression&gt; [vars=new LinkedList&lt;Expression&gt;()]</InnerVar>
                <InnerVar>ExpressionStatement [body=new ExpressionStatement(new ConstructorCallExpression(ClassNode.SUPER,new ArgumentListExpression(vars)))]</InnerVar>
                <InnerVar>ConstructorNode [ctor=new ConstructorNode(Opcodes.ACC_PUBLIC,params,ClassNode.EMPTY_ARRAY,body)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>classNode;addConstructor;[ctor]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>