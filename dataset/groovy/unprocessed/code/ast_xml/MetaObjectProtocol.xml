<Class>
    <Id>852</Id>
    <Package>groovy.lang</Package>
    <ClassName>MetaObjectProtocol</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>MetaObjectProtocol  /** 
 * &lt;p&gt;An interface that defines the API usable by clients of Groovy's Meta Object Protocol (MOP). These methods are implemented by the reference implementation of the  {@link groovy.lang.MetaClass} interface.
 * @see MetaClassImpl
 * @author John Wilson
 * @author Graeme Rocher
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>getProperties</MethodName>
            <MethodComment>/** 
 * Obtain a list of all meta properties available on this meta class
 * @see groovy.lang.MetaProperty
 * @return A list of MetaProperty instances
 */
</MethodComment>
            <ReturnType>MetaProperty</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMethods</MethodName>
            <MethodComment>/** 
 * Obtain a list of all the meta methods available on this meta class
 * @see groovy.lang.MetaMethod
 * @return A list of MetaMethod instances
 */
</MethodComment>
            <ReturnType>MetaMethod</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>respondsTo</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Returns an object satisfying Groovy truth if the implementing MetaClass responds to a method with the given name and arguments types. &lt;p&gt;Note that this method's return value is based on realised methods and does not take into account objects or classes that implement invokeMethod or methodMissing &lt;p&gt;This method is "safe" in that it will always return a value and never throw an exception
 * @param obj The object to inspect
 * @param name The name of the method of interest
 * @param argTypes The argument types to match against
 * @return A List of MetaMethods matching the argument types which will be empty if no matching methods exist
 */
</MethodComment>
            <ReturnType>MetaMethod</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>argTypes</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>respondsTo</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Returns an object satisfying Groovy truth if the implementing MetaClass responds to a method with the given name regardless of arguments. In other words this method will return for foo() and foo(String). &lt;p&gt;Note that this method's return value is based on realised methods and does not take into account objects or classes that implement invokeMethod or methodMissing &lt;p&gt;This method is "safe" in that it will always return a value and never throw an exception
 * @param obj The object to inspect
 * @param name The name of the method of interest
 * @return A List of MetaMethods which will be empty if no methods with the given name exist
 */
</MethodComment>
            <ReturnType>MetaMethod</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasProperty</MethodName>
            <MethodComment>/** 
 * &lt;p&gt;Returns true of the implementing MetaClass has a property of the given name &lt;p&gt;Note that this method will only return true for realised properties and does not take into account implementation of getProperty or propertyMissing
 * @param obj The object to inspect
 * @param name The name of the property
 * @return The MetaProperty or null if it doesn't exist
 */
</MethodComment>
            <ReturnType>MetaProperty</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>obj</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMetaProperty</MethodName>
            <MethodComment>/** 
 * Returns a MetaProperty for the given name or null if it doesn't exist
 * @param name The name of the MetaProperty
 * @return A MetaProperty or null
 */
</MethodComment>
            <ReturnType>MetaProperty</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStaticMetaMethod</MethodName>
            <MethodComment>/** 
 * Retrieves a static MetaMethod for the given name and argument values, using the types of the arguments to establish the chosen MetaMethod
 * @param name The name of the MetaMethod
 * @param args The argument types
 * @return A MetaMethod or null if it doesn't exist
 */
</MethodComment>
            <ReturnType>MetaMethod</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMetaMethod</MethodName>
            <MethodComment>/** 
 * Retrieves an instance MetaMethod for the given name and argument values, using the types of the argument values to establish the chosen MetaMethod
 * @param name The name of the MetaMethod
 * @param args Array containing - 1) the argument values (using which their types are then inferred), or 2) the corresponding argument types  
 * @return A MetaMethod or null if it doesn't exist
 */
</MethodComment>
            <ReturnType>MetaMethod</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTheClass</MethodName>
            <MethodComment>/** 
 * Retrieves that Java Class that the attached Meta behaviours apply to
 * @return The java.lang.Class instance
 */
</MethodComment>
            <ReturnType>Class</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invokeConstructor</MethodName>
            <MethodComment>/** 
 * Invokes a constructor for the given arguments. The MetaClass will attempt to pick the best argument which matches the types of the objects passed within the arguments array
 * @param arguments The arguments to the constructor
 * @return An instance of the java.lang.Class that this MetaObjectProtocol object applies to
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invokeMethod</MethodName>
            <MethodComment>/** 
 * Invokes a method on the given Object with the given name and arguments. The MetaClass will attempt to pick the best method for the given name and arguments. If a method cannot be invoked a MissingMethodException will be thrown.
 * @see groovy.lang.MissingMethodException
 * @param object The instance which the method is invoked on
 * @param methodName The name of the method
 * @param arguments The arguments to the method
 * @return The return value of the method which is null if the return type is void
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invokeMethod</MethodName>
            <MethodComment>/** 
 * Invokes a method on the given object, with the given name and single argument.
 * @see #invokeMethod(Object,String,Object[])
 * @param object The Object to invoke the method on
 * @param methodName The name of the method
 * @param arguments The argument to the method
 * @return The return value of the method which is null if the return type is void
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invokeStaticMethod</MethodName>
            <MethodComment>/** 
 * Invokes a static method on the given Object with the given name and arguments. &lt;p&gt; The Object can either be an instance of the class that this MetaObjectProtocol instance applies to or the java.lang.Class instance itself. If a method cannot be invoked a MissingMethodException is will be thrown
 * @see groovy.lang.MissingMethodException
 * @param object An instance of the class returned by the getTheClass() method or the class itself
 * @param methodName The name of the method
 * @param arguments The arguments to the method
 * @return The return value of the method which is null if the return type is void
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>methodName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <ParamType>Object[]</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProperty</MethodName>
            <MethodComment>/** 
 * Retrieves a property of an instance of the class returned by the getTheClass() method. &lt;p&gt; What this means is largely down to the MetaClass implementation, however the default case would result in an attempt to invoke a JavaBean getter, or if no such getter exists a public field of the instance.
 * @see MetaClassImpl
 * @param object An instance of the class returned by the getTheClass() method
 * @param property The name of the property to retrieve the value for
 * @return The properties value
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>property</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setProperty</MethodName>
            <MethodComment>/** 
 * Sets a property of an instance of the class returned by the getTheClass() method. &lt;p&gt; What this means is largely down to the MetaClass implementation, however the default case would result in an attempt to invoke a JavaBean setter, or if no such setter exists to set a public field of the instance.
 * @see MetaClassImpl
 * @param object An instance of the class returned by the getTheClass() method
 * @param property The name of the property to set
 * @param newValue The new value of the property
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>property</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newValue</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAttribute</MethodName>
            <MethodComment>/** 
 * Retrieves an attribute of an instance of the class returned by the getTheClass() method. &lt;p&gt; What this means is largely down to the MetaClass implementation, however the default case would result in attempt to read a field of the instance.
 * @see MetaClassImpl
 * @param object An instance of the class returned by the getTheClass() method
 * @param attribute The name of the attribute to retrieve the value for
 * @return The attribute value
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attribute</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setAttribute</MethodName>
            <MethodComment>/** 
 * Sets an attribute of an instance of the class returned by the getTheClass() method. &lt;p&gt; What this means is largely down to the MetaClass implementation, however the default case would result in an attempt to set a field of the instance.
 * @see MetaClassImpl
 * @param object An instance of the class returned by the getTheClass() method
 * @param attribute The name of the attribute to set
 * @param newValue The new value of the attribute
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>object</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>attribute</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newValue</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>