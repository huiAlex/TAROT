<Class>
    <Id>234</Id>
    <Package>groovy.transform.builder</Package>
    <ClassName>Builder</ClassName>
    <ClassComment>Builder  /** 
 * The  {@code @Builder} AST transformation is used to help write classes that can be created using &lt;em&gt;fluent&lt;/em&gt; api calls.&lt;!-- --&gt;The transform supports multiple building strategies to cover a range of cases and there are a number of configuration options to customize the building process. In addition, a number of annotation attributes let you customise the building process. Not all annotation attributes are supported by all strategies. See the individual strategy documentation for more details. If you're an AST hacker, you can also define your own strategy class. The following strategies are bundled with Groovy: &lt;ul&gt; &lt;li&gt; {@link SimpleStrategy} for creating chained setters&lt;/li&gt;&lt;li&gt; {@link ExternalStrategy} where you annotate an explicit builder class while leaving some buildee class being built untouched&lt;/li&gt;&lt;li&gt; {@link DefaultStrategy} which creates a nested helper class for instance creation&lt;/li&gt;&lt;li&gt; {@link InitializerStrategy} which creates a nested helper class for instance creation which when used with {@code @CompileStatic} allows type-safe object creation&lt;/li&gt;&lt;/ul&gt; Note that Groovy provides other built-in mechanisms for easy creation of objects, e.g. the named-args constructor: &lt;pre&gt; new Person(firstName: "Robert", lastName: "Lewandowski", age: 21) &lt;/pre&gt; or the with statement: &lt;pre&gt; new Person().with { firstName = "Robert" lastName = "Lewandowski" age = 21 } &lt;/pre&gt; so you might not find value in using the builder transform at all. But if you need Java integration or in some cases improved type safety, the  {@code @Builder} transform might prove very useful.
 * @author Marcin Grzejszczak
 * @author Paul King
 * @see groovy.transform.builder.SimpleStrategy
 * @see groovy.transform.builder.ExternalStrategy
 * @see groovy.transform.builder.DefaultStrategy
 * @see groovy.transform.builder.InitializerStrategy
 */
</ClassComment>
    <FieldList/>
    <MethodList/>
</Class>