<Class>
    <Id>11</Id>
    <Package>groovy.transform</Package>
    <ClassName>Memoized</ClassName>
    <ClassComment>Memoized  /** 
 * Method annotation that creates a cache for the results of the execution of the annotated method. Whenever the method is called, the mapping between the parameters and the return value is preserved in a cache making subsequent calls with the same arguments fast. &lt;p&gt; Example usage: &lt;pre&gt; class MemoizedExample { {@code @Memoized}int sum(int n1, int n2) { println "$n1 + $n2 = ${n1 + n2}"  n1 + n2 } } &lt;/pre&gt; which becomes (approximately): &lt;pre&gt; class MemoizedExample { private final Closure memoizedSum = { int n1, int n2 -&gt; private$method$memoizedSum(n1,n2) }.memoize() int sum(int n1, int n2) { memoizedSum(n1, n2) } private private$method$mzmoizeSum(int n1, int n2) { println "$n1 + $n2 = ${n1 + n2}" n1 + n2 } } &lt;/pre&gt; &lt;p&gt; Upon execution of this code: &lt;pre&gt; def instance = new MemoizedExample() println instance.sum(1, 2) println instance.sum(1, 2) println instance.sum(2, 3) println instance.sum(2, 3) &lt;/pre&gt; The following will be output: &lt;pre&gt; 1 + 2 = 3 3 3 2 + 3 = 5 5 5 &lt;/pre&gt;
 * @author Andrey Bloschetsov
 */
</ClassComment>
    <FieldList/>
    <MethodList/>
</Class>