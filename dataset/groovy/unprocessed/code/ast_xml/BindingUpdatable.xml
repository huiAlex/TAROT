<Class>
    <Id>526</Id>
    <Package>org.codehaus.groovy.binding</Package>
    <ClassName>BindingUpdatable</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>BindingUpdatable  /** 
 * @author &lt;a href="mailto:shemnon@yahoo.com"&gt;Danno Ferrin&lt;/a&gt;
 * @version $Revision$
 * @since Groovy 1.1
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>bind</MethodName>
            <MethodComment>/** 
 * Causes automatic updating of bound values to be turned on. This is idempotent between calls to unbind and rebind; i.e. multiple calls to bind will have only the effect of the first call.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unbind</MethodName>
            <MethodComment>/** 
 * Causes automatic updating of bound values to be turned off. This is idempotent between calls to bind and rebind; i.e. multiple calls to unbind will have only the effect of the first call. 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rebind</MethodName>
            <MethodComment>/** 
 * Causes the current bindings to be reset. If the binding is not bound, it is a no-op. If the binding is bound, it will be turned off, then turned on against current values.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>update</MethodName>
            <MethodComment>/** 
 * Causes the values to be propagated from the source to the target
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>reverseUpdate</MethodName>
            <MethodComment>/** 
 * If supported, Causes the values to be propagated from the target to the source, If not supported, an exception may be thrown 
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>