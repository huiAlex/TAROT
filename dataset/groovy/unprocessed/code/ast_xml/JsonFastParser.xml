<Class>
    <Id>767</Id>
    <Package>groovy.json.internal</Package>
    <ClassName>JsonFastParser</ClassName>
    <SuperClass>JsonParserCharArray</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>JsonFastParser  /** 
 * This works in index overlay mode or chop mode. Chop mode reduces possibility of memory leak but causes a few more buffer copies as it chops up the buffer.
 * @author Rick Hightower
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>useValues</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>chop</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>lazyChop</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>checkDates</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>JsonFastParser</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>JsonFastParser</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>useValues</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>JsonFastParser</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>useValues</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>chop</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>JsonFastParser</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>useValues</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>chop</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lazyChop</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>JsonFastParser</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>useValues</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>chop</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>lazyChop</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>checkDates</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>decodeJsonObjectLazyFinalParse</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Value</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>char[] [array=charArray]</InnerVar>
                <InnerVar>ValueMap [map=useValues ? new ValueMapImpl() : new LazyValueMap(lazyChop)]</InnerVar>
                <InnerVar>Value [value=new ValueContainer(map)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>decodeValue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Value</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>decodeValueOverlay</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Value</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;skipWhiteSpace;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>decodeNumberOverlay</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Value</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>minus</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>char[] [array=charArray]</InnerVar>
                <InnerVar>int [startIndex=__index]</InnerVar>
                <InnerVar>int [index=__index]</InnerVar>
                <InnerVar>char [currentChar]</InnerVar>
                <InnerVar>boolean [doubleFloat=false]</InnerVar>
                <InnerVar>boolean [foundDot=false]</InnerVar>
                <InnerVar>Type [type=doubleFloat ? Type.DOUBLE : Type.INTEGER]</InnerVar>
                <InnerVar>NumberValue [value=new NumberValue(chop,type,startIndex,__index,this.charArray)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>decodeStringOverlay</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Value</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>char[] [array=charArray]</InnerVar>
                <InnerVar>int [index=__index]</InnerVar>
                <InnerVar>char [currentChar=charArray[index]]</InnerVar>
                <InnerVar>int [startIndex=index]</InnerVar>
                <InnerVar>boolean [encoded=hasEscapeChar(array,index,indexHolder)]</InnerVar>
                <InnerVar>Value [value=new CharSequenceValue(chop,Type.STRING,startIndex,index,array,encoded,checkDates)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>decodeJsonArrayOverlay</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Value</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>char[] [array=charArray]</InnerVar>
                <InnerVar>List&lt;Object&gt; [list]</InnerVar>
                <InnerVar>Value [value=new ValueContainer(list)]</InnerVar>
                <InnerVar>Value [item]</InnerVar>
                <InnerVar>char [c]</InnerVar>
                <InnerVar>int [lastIndex]</InnerVar>
                <InnerVar>boolean [foundEnd=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;skipWhiteSpace;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>decodeFromChars</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>cs</ParamName>
                    <ParamType>char[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Value [value=((Value)super.decodeFromChars(cs))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>