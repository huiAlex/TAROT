<Class>
    <Id>111</Id>
    <Package>org.codehaus.groovy.ant</Package>
    <ClassName>Groovy</ClassName>
    <SuperClass>Java</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Groovy  /** 
 * Executes a series of Groovy statements. &lt;p&gt; &lt;p&gt;Statements can either be read in from a text file using the &lt;i&gt;src&lt;/i&gt; attribute or from between the enclosing groovy tags.
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>PREFIX</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>SUFFIX</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>EMPTY_OBJECT_ARRAY</FieldName>
            <FieldType>Object[]</FieldType>
        </Field>
        <Field>
            <FieldName>log</FieldName>
            <FieldType>LoggingHelper</FieldType>
        </Field>
        <Field>
            <FieldName>filesets</FieldName>
            <FieldType>Vector</FieldType>
        </Field>
        <Field>
            <FieldName>filesets</FieldName>
            <FieldType>FileSet</FieldType>
        </Field>
        <Field>
            <FieldName>srcFile</FieldName>
            <FieldType>File</FieldType>
        </Field>
        <Field>
            <FieldName>command</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>output</FieldName>
            <FieldType>File</FieldType>
        </Field>
        <Field>
            <FieldName>append</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>classpath</FieldName>
            <FieldType>Path</FieldType>
        </Field>
        <Field>
            <FieldName>fork</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>includeAntRuntime</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>useGroovyShell</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>indy</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>scriptBaseClass</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>configscript</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>configuration</FieldName>
            <FieldType>CompilerConfiguration</FieldType>
        </Field>
        <Field>
            <FieldName>cmdline</FieldName>
            <FieldType>Commandline</FieldType>
        </Field>
        <Field>
            <FieldName>contextClassLoader</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>setFork</MethodName>
            <MethodComment>/** 
 * Should the script be executed using a forked process. Defaults to false.
 * @param fork true if the script should be executed in a forked process
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fork</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setUseGroovyShell</MethodName>
            <MethodComment>/** 
 * Should a new GroovyShell be used when forking. Special variables won't be available but you don't need Ant in the classpath.
 * @param useGroovyShell true if GroovyShell should be used to run the script directly
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>useGroovyShell</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setIncludeAntRuntime</MethodName>
            <MethodComment>/** 
 * Should the system classpath be included on the classpath when forking. Defaults to true.
 * @param includeAntRuntime true if the system classpath should be on the classpath
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>includeAntRuntime</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setStacktrace</MethodName>
            <MethodComment>/** 
 * Enable compiler to report stack trace information if a problem occurs during compilation.
 * @param stacktrace set to true to enable stacktrace reporting
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>stacktrace</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>configuration;setDebug;[stacktrace]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSrc</MethodName>
            <MethodComment>/** 
 * Set the name of the file to be run. The folder of the file is automatically added to the classpath. Required unless statements are enclosed in the build file
 * @param srcFile the file containing the groovy script to execute
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>srcFile</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addText</MethodName>
            <MethodComment>/** 
 * Set an inline command to execute. NB: Properties are not expanded in this text.
 * @param txt the inline groovy commands to execute
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>txt</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;log;["addText('" + txt + "')", Project.MSG_VERBOSE]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addFileset</MethodName>
            <MethodComment>/** 
 * Adds a set of files (nested fileset attribute).
 * @param set the fileset representing source files
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>set</ParamName>
                    <ParamType>FileSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>filesets;addElement;[set]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setOutput</MethodName>
            <MethodComment>/** 
 * Set the output file; optional, defaults to the Ant log.
 * @param output the output file
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>output</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setAppend</MethodName>
            <MethodComment>/** 
 * Whether output should be appended to or overwrite an existing file.  Defaults to false.
 * @param append set to true to append
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>append</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setClasspath</MethodName>
            <MethodComment>/** 
 * Sets the classpath for loading.
 * @param classpath The classpath to set
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classpath</ParamName>
                    <ParamType>Path</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createClasspath</MethodName>
            <MethodComment>/** 
 * Returns a new path element that can be configured. Gets called for instance by Ant when it encounters a nested &amp;lt;classpath&amp;gt; element.
 * @return the resulting created path
 */
</MethodComment>
            <ReturnType>Path</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setClasspathRef</MethodName>
            <MethodComment>/** 
 * Set the classpath for loading using the classpath reference.
 * @param ref the refid to use
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ref</ParamName>
                    <ParamType>Reference</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>createClasspath();setRefid;[ref]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClasspath</MethodName>
            <MethodComment>/** 
 * Gets the classpath.
 * @return Returns a Path
 */
</MethodComment>
            <ReturnType>Path</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setConfigscript</MethodName>
            <MethodComment>/** 
 * Sets the configuration script for the groovy compiler configuration.
 * @param configscript path to the configuration script
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>configscript</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setIndy</MethodName>
            <MethodComment>/** 
 * Sets the indy flag to enable or disable invokedynamic
 * @param indy true means invokedynamic support is active
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indy</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setScriptBaseClass</MethodName>
            <MethodComment>/** 
 * Set the script base class name
 * @param scriptBaseClass the name of the base class for scripts
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>scriptBaseClass</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>execute</MethodName>
            <MethodComment>/** 
 * Load the file and then execute it
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;debug;["execute()"]</InnerMethodInvoke>
                <InnerMethodInvoke>log;verbose;["statements executed successfully"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>BuildException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getText</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>BufferedReader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [answer=new StringBuilder()]</InnerVar>
                <InnerVar>char[] [charBuffer=new char[4096]]</InnerVar>
                <InnerVar>int [nbCharRead=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>reader;close;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createArg</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Commandline.Argument</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>runStatements</MethodName>
            <MethodComment>/** 
 * Read in lines and execute them.
 * @param reader the reader from which to get the groovy source to exec
 * @param out    the outputstream to use
 * @throws java.io.IOException if something goes wrong
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>Reader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>PrintStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [txt=new StringBuilder()]</InnerVar>
                <InnerVar>String [line=""]</InnerVar>
                <InnerVar>BufferedReader [in=new BufferedReader(reader)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;debug;["runStatements()"]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>execGroovy</MethodName>
            <MethodComment>/** 
 * Exec the statement.
 * @param txt the groovy source to exec
 * @param out not used?
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>txt</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>PrintStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Object [mavenPom=null]</InnerVar>
                <InnerVar>Project [project=getProject()]</InnerVar>
                <InnerVar>ClassLoader [baseClassLoader]</InnerVar>
                <InnerVar>ClassLoader [savedLoader=null]</InnerVar>
                <InnerVar>Thread [thread=Thread.currentThread()]</InnerVar>
                <InnerVar>boolean [maven="org.apache.commons.grant.GrantProject".equals(project.getClass().getName())]</InnerVar>
                <InnerVar>String [scriptName=computeScriptName()]</InnerVar>
                <InnerVar>GroovyClassLoader [classLoader=new GroovyClassLoader(baseClassLoader)]</InnerVar>
                <InnerVar>GroovyShell [groovy=new GroovyShell(classLoader,new Binding(),configuration)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;debug;["execGroovy()"]</InnerMethodInvoke>
                <InnerMethodInvoke>log;verbose;["Script: " + txt]</InnerMethodInvoke>
                <InnerMethodInvoke>null;addClassPathes;[classLoader]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureCompiler;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>configureCompiler</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseAndRunScript</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>shell</ParamName>
                    <ParamType>GroovyShell</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>txt</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>mavenPom</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scriptName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>scriptFile</ParamName>
                    <ParamType>File</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>builder</ParamName>
                    <ParamType>AntBuilder</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processError</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>e</ParamName>
                    <ParamType>Exception</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringWriter [writer=new StringWriter()]</InnerVar>
                <InnerVar>String [message=writer.toString()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>new ErrorReporter(e,false);write;[new PrintWriter(writer)]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>main</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>String[]</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GroovyShell [shell=new GroovyShell(new Binding())]</InnerVar>
                <InnerVar>Groovy [groovy=new Groovy()]</InnerVar>
                <InnerVar>AntBuilder [builder=new AntBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>groovy;setProject;[builder.getProject()]</InnerMethodInvoke>
                <InnerMethodInvoke>groovy;parseAndRunScript;[shell, null, null, null, new File(args[0]), builder]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createClasspathParts</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Path [path]</InnerVar>
                <InnerVar>String [groovyHome=null]</InnerVar>
                <InnerVar>String[] [strings=getSysProperties().getVariables()]</InnerVar>
                <InnerVar>File [jarDir=new File(groovyHome,"embeddable")]</InnerVar>
                <InnerVar>File[] [files=jarDir.listFiles()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>createNewArgs</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>txt</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String[] [args=cmdline.getCommandline()]</InnerVar>
                <InnerVar>File [tempFile=FileUtils.getFileUtils().createTempFile(PREFIX,SUFFIX,null,true,true)]</InnerVar>
                <InnerVar>String[] [commandline=new String[args.length + 1]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>ResourceGroovyMethods;write;[tempFile, txt]</InnerMethodInvoke>
                <InnerMethodInvoke>System;arraycopy;[args, 0, commandline, 1, args.length]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>IOException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>computeScriptName</MethodName>
            <MethodComment>/** 
 * Try to build a script name for the script of the groovy task to have an helpful value in stack traces in case of exception
 * @return the name to use when compiling the script
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addClassPathes</MethodName>
            <MethodComment>/** 
 * Adds the class paths (if any)
 * @param classLoader the classloader to configure
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>GroovyClassLoader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>printResults</MethodName>
            <MethodComment>/** 
 * print any results in the statement.
 * @param out the output PrintStream to print to
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>out</ParamName>
                    <ParamType>PrintStream</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>StringBuilder [line=new StringBuilder()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>log;debug;["printResults()"]</InnerMethodInvoke>
                <InnerMethodInvoke>out;println;[line]</InnerMethodInvoke>
                <InnerMethodInvoke>out;println;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setContextClassLoader</MethodName>
            <MethodComment>/** 
 * Setting to true will cause the contextClassLoader to be set with the classLoader of the shell used to run the script. Not used if fork is true. Not allowed when running from Maven but in that case the context classLoader is set appropriately for Maven.
 * @param contextClassLoader set to true to set the context classloader
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>contextClassLoader</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>