<Class>
    <Id>719</Id>
    <Package>groovy.sql</Package>
    <ClassName>GroovyResultSetExtension</ClassName>
    <SuperClass>GroovyObjectSupport</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>GroovyResultSetExtension  /** 
 * GroovyResultSetExtension implements additional logic for ResultSet. Due to the version incompatibility between java6 and java5 this methods are moved here from the original GroovyResultSet class. The methods in this class are used by the proxy GroovyResultSetProxy, which will try to invoke methods on this class before invoking it on ResultSet. &lt;p&gt; &lt;b&gt;This class is not intended to be used directly. Should be used through GroovyResultSetProxy only!&lt;/b&gt;
 * @author Jochen Theodorou
 * @see GroovyResultSet
 * @see GroovyResultSetProxy
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>updated</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>resultSet</FieldName>
            <FieldType>ResultSet</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>getResultSet</MethodName>
            <MethodComment>/** 
 * Gets the current result set.
 * @return the result set
 * @throws SQLException if the result set can not be returned
 */
</MethodComment>
            <ReturnType>ResultSet</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GroovyResultSetExtension</MethodName>
            <MethodComment>/** 
 * Creates a GroovyResultSet implementation.
 * @param set the result set
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>set</ParamName>
                    <ParamType>ResultSet</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>toString</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>invokeMethod</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>args</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getProperty</MethodName>
            <MethodComment>/** 
 * Gets the value of the designated column in the current row of as an &lt;code&gt;Object&lt;/code&gt;.
 * @param columnName the SQL name of the column
 * @return the returned column value
 * @throws MissingPropertyException if an SQLException happens while getting the object
 * @see groovy.lang.GroovyObject#getProperty(java.lang.String)
 * @see ResultSet#getObject(java.lang.String)
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setProperty</MethodName>
            <MethodComment>/** 
 * Updates the designated column with an &lt;code&gt;Object&lt;/code&gt; value.
 * @param columnName the SQL name of the column
 * @param newValue   the updated value
 * @throws MissingPropertyException if an SQLException happens while setting the new value
 * @see groovy.lang.GroovyObject#setProperty(java.lang.String,java.lang.Object)
 * @see ResultSet#updateObject(java.lang.String,java.lang.Object)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnName</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newValue</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAt</MethodName>
            <MethodComment>/** 
 * Supports integer based subscript operators for accessing at numbered columns starting at zero. Negative indices are supported, they will count from the last column backwards.
 * @param index is the number of the column to look at starting at 1
 * @return the returned column value
 * @throws java.sql.SQLException if something goes wrong
 * @see ResultSet#getObject(int)
 */
</MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>putAt</MethodName>
            <MethodComment>/** 
 * Supports integer based subscript operators for updating the values of numbered columns starting at zero. Negative indices are supported, they will count from the last column backwards.
 * @param index    is the number of the column to look at starting at 1
 * @param newValue the updated value
 * @throws java.sql.SQLException if something goes wrong
 * @see ResultSet#updateObject(java.lang.String,java.lang.Object)
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>newValue</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getResultSet();updateObject;[index, newValue]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>add</MethodName>
            <MethodComment>/** 
 * Adds a new row to the result set
 * @param values a map containing the mappings for column names and values
 * @throws java.sql.SQLException if something goes wrong
 * @see ResultSet#insertRow()
 * @see ResultSet#updateObject(java.lang.String,java.lang.Object)
 * @see ResultSet#moveToInsertRow()
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>values</ParamName>
                    <ParamType>Map</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>getResultSet();moveToInsertRow;[]</InnerMethodInvoke>
                <InnerMethodInvoke>getResultSet();insertRow;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>normalizeIndex</MethodName>
            <MethodComment>/** 
 * Takes a zero based index and convert it into an SQL based 1 based index. A negative index will count backwards from the last column.
 * @param index the raw requested index (may be negative)
 * @return a JDBC index
 * @throws SQLException if some exception occurs finding out the column count
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>eachRow</MethodName>
            <MethodComment>/** 
 * Call the closure once for each row in the result set.
 * @param closure the closure to perform on each row
 * @throws SQLException if something goes wrong
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>closure</ParamName>
                    <ParamType>Closure</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>next</MethodName>
            <MethodComment>/** 
 * Moves the cursor down one row from its current position. A &lt;code&gt;getResultSet()&lt;/code&gt; cursor is initially positioned before the first row; the first call to the method &lt;code&gt;next&lt;/code&gt; makes the first row the current row; the second call makes the second row the current row, and so on. &lt;p&gt; &lt;P&gt;If an input stream is open for the current row, a call to the method &lt;code&gt;next&lt;/code&gt; will implicitly close it. A &lt;code&gt;getResultSet()&lt;/code&gt; object's warning chain is cleared when a new row is read.
 * @return &lt;code&gt;true&lt;/code&gt; if the new current row is valid;&lt;code&gt;false&lt;/code&gt; if there are no more rows
 * @throws SQLException if a database access error occurs
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>previous</MethodName>
            <MethodComment>/** 
 * Moves the cursor to the previous row in this &lt;code&gt;getResultSet()&lt;/code&gt; object.
 * @return &lt;code&gt;true&lt;/code&gt; if the cursor is on a valid row;&lt;code&gt;false&lt;/code&gt; if it is off the result set
 * @throws SQLException if a database access erroroccurs or the result set type is &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;
 * @since 1.2
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>SQLException</ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>