<Class>
    <Id>376</Id>
    <Package>groovy.servlet</Package>
    <ClassName>AbstractHttpServlet</ClassName>
    <SuperClass>HttpServlet</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ResourceConnector</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AbstractHttpServlet  /** 
 * A base class dealing with common HTTP servlet API housekeeping aspects. &lt;p&gt; &lt;h4&gt;Resource name mangling (pattern replacement)&lt;/h4&gt; &lt;p&gt; Also implements Groovy's  {@link groovy.util.ResourceConnector} in a dynamicmanner. It allows you to modify the resource name that is searched for with a &lt;i&gt;replace all&lt;/i&gt; operation. See  {@link java.util.regex.Pattern} and{@link java.util.regex.Matcher} for details.The servlet init parameter names are: &lt;pre&gt; {@value #INIT_PARAM_RESOURCE_NAME_REGEX} = empty - defaults to nullresource.name.replacement = empty - defaults to null resource.name.replace.all = true (default) | false means replaceFirst() &lt;/pre&gt; Note: If you specify a regex, you have to specify a replacement string too! Otherwise an exception gets raised. &lt;p&gt; &lt;h4&gt;Logging and bug-hunting options&lt;/h4&gt; &lt;p&gt; This implementation provides a verbosity flag switching log statements. The servlet init parameter name is: &lt;pre&gt; verbose = false(default) | true &lt;/pre&gt; &lt;p&gt; In order to support class-loading-troubles-debugging with Tomcat 4 or higher, you can log the class loader responsible for loading some classes. See &lt;a href="http://jira.codehaus.org/browse/GROOVY-861"&gt;GROOVY-861&lt;/a&gt; for details. The servlet init parameter name is: &lt;pre&gt; log.GROOVY861 = false(default) | true &lt;/pre&gt; &lt;p&gt; If you experience class-loading-troubles with Tomcat 4 (or higher) or any other servlet container using custom class loader setups, you can fallback to use (slower) reflection in Groovy's MetaClass implementation. Please contact the dev team with your problem! Thanks. The servlet init parameter name is: &lt;pre&gt; reflection = false(default) | true &lt;/pre&gt;
 * @author Christian Stein
 * @author Roshan Dawrani (roshandawrani)
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>INIT_PARAM_RESOURCE_NAME_REGEX</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>INIT_PARAM_RESOURCE_NAME_REGEX_FLAGS</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>CONTENT_TYPE_TEXT_HTML</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>INC_PATH_INFO</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>INC_REQUEST_URI</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>INC_SERVLET_PATH</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>servletContext</FieldName>
            <FieldType>ServletContext</FieldType>
        </Field>
        <Field>
            <FieldName>resourceNamePattern</FieldName>
            <FieldType>Pattern</FieldType>
        </Field>
        <Field>
            <FieldName>resourceNameReplacement</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>resourceNameReplaceAll</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>verbose</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>encoding</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>reflection</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>logGROOVY861</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>namePrefix</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>AbstractHttpServlet</MethodName>
            <MethodComment>/** 
 * Initializes all fields with default values.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>generateNamePrefixOnce</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>URI [uri=null]</InnerVar>
                <InnerVar>String [realPath=servletContext.getRealPath("/")]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>removeNamePrefix</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ResourceException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getResourceConnection</MethodName>
            <MethodComment>/** 
 * Interface method for ResourceContainer. This is used by the GroovyScriptEngine.
 */
</MethodComment>
            <ReturnType>URLConnection</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ResourceException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScriptUri</MethodName>
            <MethodComment>/** 
 * Returns the include-aware uri of the script or template file.
 * @param request the http request to analyze
 * @return the include-aware uri either parsed from request attributes orhints provided by the servlet container
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>request</ParamName>
                    <ParamType>HttpServletRequest</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [uri=null]</InnerVar>
                <InnerVar>String [info=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>applyResourceNameMatcher</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>uri</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getScriptUriAsFile</MethodName>
            <MethodComment>/** 
 * Parses the http request for the real script or template source file.
 * @param request the http request to analyze
 * @return a file object using an absolute file path name, or &lt;code&gt;null&lt;/code&gt; if theservlet container cannot translate the virtual path to a real path for any reason (such as when the content is being made available from a .war archive).
 */
</MethodComment>
            <ReturnType>File</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>request</ParamName>
                    <ParamType>HttpServletRequest</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [uri=getScriptUri(request)]</InnerVar>
                <InnerVar>String [real=servletContext.getRealPath(uri)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>init</MethodName>
            <MethodComment>/** 
 * Overrides the generic init method to set some debug flags.
 * @param config the servlet configuration provided by the container
 * @throws ServletException if init() method defined in super classjavax.servlet.GenericServlet throws it
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>config</ParamName>
                    <ParamType>ServletConfig</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [value=config.getInitParameter("verbose")]</InnerVar>
                <InnerVar>String [regex=config.getInitParameter(INIT_PARAM_RESOURCE_NAME_REGEX)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ServletException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setVariables</MethodName>
            <MethodComment>/** 
 * Override this method to set your variables to the Groovy binding. &lt;p&gt; All variables bound the binding are passed to the template source text, e.g. the HTML file, when the template is merged. &lt;p&gt; The binding provided by TemplateServlet does already include some default variables. As of this writing, they are (copied from {@link groovy.servlet.ServletBinding}): &lt;ul&gt; &lt;li&gt;&lt;tt&gt;"request"&lt;/tt&gt; : HttpServletRequest &lt;/li&gt; &lt;li&gt;&lt;tt&gt;"response"&lt;/tt&gt; : HttpServletResponse &lt;/li&gt; &lt;li&gt;&lt;tt&gt;"context"&lt;/tt&gt; : ServletContext &lt;/li&gt; &lt;li&gt;&lt;tt&gt;"application"&lt;/tt&gt; : ServletContext &lt;/li&gt; &lt;li&gt;&lt;tt&gt;"session"&lt;/tt&gt; : request.getSession(&lt;b&gt;false&lt;/b&gt;) &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; And via implicit hard-coded keywords: &lt;ul&gt; &lt;li&gt;&lt;tt&gt;"out"&lt;/tt&gt; : response.getWriter() &lt;/li&gt; &lt;li&gt;&lt;tt&gt;"sout"&lt;/tt&gt; : response.getOutputStream() &lt;/li&gt; &lt;li&gt;&lt;tt&gt;"html"&lt;/tt&gt; : new MarkupBuilder(response.getWriter()) &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; The binding also provides convenient methods: &lt;ul&gt; &lt;li&gt;&lt;tt&gt;"forward(String path)"&lt;/tt&gt; : request.getRequestDispatcher(path).forward(request, response);&lt;/li&gt; &lt;li&gt;&lt;tt&gt;"include(String path)"&lt;/tt&gt; : request.getRequestDispatcher(path).include(request, response);&lt;/li&gt; &lt;li&gt;&lt;tt&gt;"redirect(String location)"&lt;/tt&gt; : response.sendRedirect(location);&lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;p&gt;Example binding all servlet context variables: &lt;pre&gt;&lt;code&gt; class MyServlet extends TemplateServlet { protected void setVariables(ServletBinding binding) { // Bind a simple variable binding.setVariable("answer", new Long(42)); // Bind all servlet context attributes... ServletContext context = (ServletContext) binding.getVariable("context"); Enumeration enumeration = context.getAttributeNames(); while (enumeration.hasMoreElements()) { String name = (String) enumeration.nextElement(); binding.setVariable(name, context.getAttribute(name)); } } } &lt;code&gt;&lt;/pre&gt;
 * @param binding to be modified
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>binding</ParamName>
                    <ParamType>ServletBinding</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>