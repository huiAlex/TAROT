<Class>
    <Id>632</Id>
    <Package>org.codehaus.groovy.ast.decompiled</Package>
    <ClassName>ClassSignatureParser</ClassName>
    <SuperClass></SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>ClassSignatureParser  /** 
 * @author Peter Gromov
 */
</ClassComment>
    <FieldList/>
    <MethodList>
        <Method>
            <MethodName>configureClass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>stub</ParamName>
                    <ParamType>ClassStub</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resolver</ParamName>
                    <ParamType>AsmReferenceResolver</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode[] [interfaces=new ClassNode[stub.interfaceNames.length]]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>classNode;setInterfaces;[interfaces]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseClassSignature</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classNode</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>signature</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>resolver</ParamName>
                    <ParamType>AsmReferenceResolver</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;ClassNode&gt; [interfaces=new ArrayList&lt;ClassNode&gt;()]</InnerVar>
                <InnerVar>FormalParameterParser [v=new FormalParameterParser(resolver){
  @Override public SignatureVisitor visitSuperclass(){
    flushTypeParameter();
    return new TypeSignatureParser(resolver){
      @Override void finished(      ClassNode result){
        classNode.setSuperClass(result);
      }
    }
;
  }
  @Override public SignatureVisitor visitInterface(){
    flushTypeParameter();
    return new TypeSignatureParser(resolver){
      @Override void finished(      ClassNode result){
        interfaces.add(result);
      }
    }
;
  }
}
]</InnerVar>
                <InnerVar>GenericsType[] [typeParameters=v.getTypeParameters()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>new SignatureReader(signature);accept;[v]</InnerMethodInvoke>
                <InnerMethodInvoke>classNode;setInterfaces;[interfaces.toArray(new ClassNode[interfaces.size()])]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitSuperclass</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SignatureVisitor</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;flushTypeParameter;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finished</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>classNode;setSuperClass;[result]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>visitInterface</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>SignatureVisitor</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;flushTypeParameter;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>finished</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>result</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>interfaces;add;[result]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>