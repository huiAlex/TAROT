<Class>
    <Id>743</Id>
    <Package>org.codehaus.groovy.classgen.asm.indy.sc</Package>
    <ClassName>IndyStaticTypesMultiTypeDispatcher</ClassName>
    <SuperClass>StaticTypesBinaryExpressionMultiTypeDispatcher</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>IndyStaticTypesMultiTypeDispatcher  /** 
 * Multi type dispatcher for binary expression backend combining indy and static compilation
 * @author Jochen Theodorou
 * @since 2.5.0
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>INDY_INTERFACE_NAME</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BSM_METHOD_TYPE_DESCRIPTOR</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>BSM</FieldName>
            <FieldType>Handle</FieldType>
        </Field>
        <Field>
            <FieldName>name</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>signature</FieldName>
            <FieldType>String</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>IndyStaticTypesMultiTypeDispatcher</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>wc</ParamName>
                    <ParamType>WriterController</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>GenericArrayAccess</MethodName>
            <MethodComment></MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>signature</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>call</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mv</ParamName>
                    <ParamType>MethodVisitor</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>mv;visitInvokeDynamicInsn;[name, signature, BSM]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>initializeDelegateHelpers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BinaryExpressionWriter[]</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>BinaryExpressionWriter[] [bewArray=super.initializeDelegateHelpers()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>bewArray[1];setArraySetAndGet;[new GenericArrayAccess("set","([III)V"), new GenericArrayAccess("get","([II)I")]</InnerMethodInvoke>
                <InnerMethodInvoke>bewArray[2];setArraySetAndGet;[new GenericArrayAccess("set","([JIJ)V"), new GenericArrayAccess("get","([JI)J")]</InnerMethodInvoke>
                <InnerMethodInvoke>bewArray[3];setArraySetAndGet;[new GenericArrayAccess("set","([DID)V"), new GenericArrayAccess("get","([DI)D")]</InnerMethodInvoke>
                <InnerMethodInvoke>bewArray[4];setArraySetAndGet;[new GenericArrayAccess("set","([CIC)V"), new GenericArrayAccess("get","([CI)C")]</InnerMethodInvoke>
                <InnerMethodInvoke>bewArray[5];setArraySetAndGet;[new GenericArrayAccess("set","([BIB)V"), new GenericArrayAccess("get","([BI)B")]</InnerMethodInvoke>
                <InnerMethodInvoke>bewArray[6];setArraySetAndGet;[new GenericArrayAccess("set","([SIS)V"), new GenericArrayAccess("get","([SI)S")]</InnerMethodInvoke>
                <InnerMethodInvoke>bewArray[7];setArraySetAndGet;[new GenericArrayAccess("get","([FIF)V"), new GenericArrayAccess("set","([FI)F")]</InnerMethodInvoke>
                <InnerMethodInvoke>bewArray[8];setArraySetAndGet;[new GenericArrayAccess("get","([ZIZ)V"), new GenericArrayAccess("set","([ZI)Z")]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>