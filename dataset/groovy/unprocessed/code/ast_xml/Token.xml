<Class>
    <Id>975</Id>
    <Package>org.codehaus.groovy.syntax</Package>
    <ClassName>Token</ClassName>
    <SuperClass>CSTNode</SuperClass>
    <SuperInterfaceList>
        <SuperInterface></SuperInterface>
    </SuperInterfaceList>
    <ClassComment>Token  /** 
 * A &lt;code&gt;CSTNode&lt;/code&gt; produced by the &lt;code&gt;Lexer&lt;/code&gt;.
 * @see antlr.Parser
 * @see antlr.Token
 * @see Reduction
 * @see Types
 * @author &lt;a href="mailto:bob@werken.com"&gt;bob mcwhirter&lt;/a&gt;
 * @author &lt;a href="mailto:cpoirier@dreaming.org"&gt;Chris Poirier&lt;/a&gt;
 * @version $Id$
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>NULL</FieldName>
            <FieldType>Token</FieldType>
        </Field>
        <Field>
            <FieldName>EOF</FieldName>
            <FieldType>Token</FieldType>
        </Field>
        <Field>
            <FieldName>type</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>meaning</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>text</FieldName>
            <FieldType>String</FieldType>
        </Field>
        <Field>
            <FieldName>startLine</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>startColumn</FieldName>
            <FieldType>int</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>Token</MethodName>
            <MethodComment>/** 
 * Initializes the Token with the specified information.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startLine</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startColumn</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>Token</MethodName>
            <MethodComment>/** 
 * Initializes the NULL Token.
 */
</MethodComment>
            <ReturnType></ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dup</MethodName>
            <MethodComment>/** 
 * Returns a copy of this Token.
 */
</MethodComment>
            <ReturnType>Token</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>Token [token=new Token(this.type,this.text,this.startLine,this.startColumn)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>token;setMeaning;[this.meaning]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getMeaning</MethodName>
            <MethodComment>/** 
 * Returns the meaning of this node.  If the node isEmpty(), returns the type of Token.NULL.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setMeaning</MethodName>
            <MethodComment>/** 
 * Sets the meaning for this node (and it's root Token).  Not valid if the node isEmpty().  Returns this token, for convenience.
 */
</MethodComment>
            <ReturnType>CSTNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>meaning</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getType</MethodName>
            <MethodComment>/** 
 * Returns the actual type of the node.  If the node isEmpty(), returns the type of Token.NULL.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>size</MethodName>
            <MethodComment>/** 
 * Returns the number of elements in the node (including root).
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>get</MethodName>
            <MethodComment>/** 
 * Returns the specified element, or null.
 */
</MethodComment>
            <ReturnType>CSTNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>index</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRoot</MethodName>
            <MethodComment>/** 
 * Returns the root of the node.  By convention, all nodes have a Token as the first element (or root), which indicates the type of the node.  May return null if the node &lt;code&gt;isEmpty()&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType>Token</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getRootText</MethodName>
            <MethodComment>/** 
 * Returns the text of the root node.  Uses &lt;code&gt;getRoot(true)&lt;/code&gt; to get the root, so you will only receive null in return if the root token returns it.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getText</MethodName>
            <MethodComment>/** 
 * Returns the text of the token.  Equivalent to &lt;code&gt;getRootText()&lt;/code&gt; when called directly.
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setText</MethodName>
            <MethodComment>/** 
 * Not advisable, but if you need to adjust the token's text, this will do it.
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStartLine</MethodName>
            <MethodComment>/** 
 * Returns the starting line of the node.  Returns -1 if not known.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getStartColumn</MethodName>
            <MethodComment>/** 
 * Returns the starting column of the node.  Returns -1 if not known.
 */
</MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asReduction</MethodName>
            <MethodComment>/** 
 * Creates a &lt;code&gt;Reduction&lt;/code&gt; from this token.  Returns self if the node is already a &lt;code&gt;Reduction&lt;/code&gt;.
 */
</MethodComment>
            <ReturnType>Reduction</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asReduction</MethodName>
            <MethodComment>/** 
 * Creates a &lt;code&gt;Reduction&lt;/code&gt; from this token, adding the supplied node as the second element.
 */
</MethodComment>
            <ReturnType>Reduction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>second</ParamName>
                    <ParamType>CSTNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Reduction [created=asReduction()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>created;add;[second]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asReduction</MethodName>
            <MethodComment>/** 
 * Creates a &lt;code&gt;Reduction&lt;/code&gt; from this token, adding the supplied nodes as the second and third element, respectively.
 */
</MethodComment>
            <ReturnType>Reduction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>second</ParamName>
                    <ParamType>CSTNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>third</ParamName>
                    <ParamType>CSTNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Reduction [created=asReduction(second)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>created;add;[third]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asReduction</MethodName>
            <MethodComment>/** 
 * Creates a &lt;code&gt;Reduction&lt;/code&gt; from this token, adding the supplied nodes as the second, third, and fourth element, respectively.
 */
</MethodComment>
            <ReturnType>Reduction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>second</ParamName>
                    <ParamType>CSTNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>third</ParamName>
                    <ParamType>CSTNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>fourth</ParamName>
                    <ParamType>CSTNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Reduction [created=asReduction(second,third)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>created;add;[fourth]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newKeyword</MethodName>
            <MethodComment>/** 
 * Creates a token that represents a keyword.  Returns null if the specified text isn't a keyword.
 */
</MethodComment>
            <ReturnType>Token</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startLine</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startColumn</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [type=Types.lookupKeyword(text)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newString</MethodName>
            <MethodComment>/** 
 * Creates a token that represents a double-quoted string.
 */
</MethodComment>
            <ReturnType>Token</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startLine</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startColumn</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newIdentifier</MethodName>
            <MethodComment>/** 
 * Creates a token that represents an identifier.
 */
</MethodComment>
            <ReturnType>Token</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startLine</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startColumn</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newInteger</MethodName>
            <MethodComment>/** 
 * Creates a token that represents an integer.
 */
</MethodComment>
            <ReturnType>Token</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startLine</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startColumn</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newDecimal</MethodName>
            <MethodComment>/** 
 * Creates a token that represents a decimal number.
 */
</MethodComment>
            <ReturnType>Token</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>text</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startLine</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startColumn</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newSymbol</MethodName>
            <MethodComment>/** 
 * Creates a token that represents a symbol, using a library for the text.
 */
</MethodComment>
            <ReturnType>Token</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startLine</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startColumn</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newSymbol</MethodName>
            <MethodComment>/** 
 * Creates a token that represents a symbol, using a library for the type.
 */
</MethodComment>
            <ReturnType>Token</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startLine</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>startColumn</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>newPlaceholder</MethodName>
            <MethodComment>/** 
 * Creates a token with the specified meaning.
 */
</MethodComment>
            <ReturnType>Token</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Token [token=new Token(Types.UNKNOWN,"",-1,-1)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>token;setMeaning;[type]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>