<Class>
    <Id>673</Id>
    <Package>org.codehaus.groovy.antlr</Package>
    <ClassName>AntlrParserPlugin</ClassName>
    <SuperClass>ASTHelper</SuperClass>
    <SuperInterfaceList>
        <SuperInterface>ParserPlugin</SuperInterface>
        <SuperInterface>GroovyTokenTypes</SuperInterface>
    </SuperInterfaceList>
    <ClassComment>AntlrParserPlugin  /** 
 * A parser plugin which adapts the JSR Antlr Parser to the Groovy runtime
 * @author &lt;a href="mailto:jstrachan@protique.com"&gt;James Strachan&lt;/a&gt;
 */
</ClassComment>
    <FieldList>
        <Field>
            <FieldName>innerClass</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>ast</FieldName>
            <FieldType>AST</FieldType>
        </Field>
        <Field>
            <FieldName>classNode</FieldName>
            <FieldType>ClassNode</FieldType>
        </Field>
        <Field>
            <FieldName>methodNode</FieldName>
            <FieldType>MethodNode</FieldType>
        </Field>
        <Field>
            <FieldName>tokenNames</FieldName>
            <FieldType>String[]</FieldType>
        </Field>
        <Field>
            <FieldName>innerClassCounter</FieldName>
            <FieldType>int</FieldType>
        </Field>
        <Field>
            <FieldName>enumConstantBeingDef</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>forStatementBeingDef</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>firstParamIsVarArg</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
        <Field>
            <FieldName>firstParam</FieldName>
            <FieldType>boolean</FieldType>
        </Field>
    </FieldList>
    <MethodList>
        <Method>
            <MethodName>transformExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>transformer</ParamName>
                    <ParamType>ExpressionTransformer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setSourcePosition</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>ASTNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>innerClass;setSourcePosition;[node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setColumnNumber</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>innerClass;setColumnNumber;[columnNumber]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLineNumber</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lineNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>innerClass;setLineNumber;[lineNumber]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLastColumnNumber</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>columnNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>innerClass;setLastColumnNumber;[columnNumber]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setLastLineNumber</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>lineNumber</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>innerClass;setLastLineNumber;[lineNumber]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parseCST</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Reduction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sourceUnit</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>Reader</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>SourceBuffer [sourceBuffer=new SourceBuffer()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;transformCSTIntoAST;[sourceUnit, reader, sourceBuffer]</InnerMethodInvoke>
                <InnerMethodInvoke>null;processAST;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>transformCSTIntoAST</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sourceUnit</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>reader</ParamName>
                    <ParamType>Reader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sourceBuffer</ParamName>
                    <ParamType>SourceBuffer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>UnicodeEscapingReader [unicodeReader=new UnicodeEscapingReader(reader,sourceBuffer)]</InnerVar>
                <InnerVar>UnicodeLexerSharedInputState [inputState=new UnicodeLexerSharedInputState(unicodeReader)]</InnerVar>
                <InnerVar>GroovyLexer [lexer=new GroovyLexer(inputState)]</InnerVar>
                <InnerVar>GroovyRecognizer [parser=GroovyRecognizer.make(lexer)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setController;[sourceUnit]</InnerMethodInvoke>
                <InnerMethodInvoke>unicodeReader;setLexer;[lexer]</InnerMethodInvoke>
                <InnerMethodInvoke>parser;setSourceBuffer;[sourceBuffer]</InnerMethodInvoke>
                <InnerMethodInvoke>parser;setFilename;[sourceUnit.getName()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>CompilationFailedException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processAST</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar>AntlrASTProcessor [snippets=new AntlrASTProcessSnippets()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>outputAST</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Reduction</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sourceUnit</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sourceBuffer</ParamName>
                    <ParamType>SourceBuffer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>AccessController;doPrivileged;[new PrivilegedAction(){
  public Object run(){
    outputASTInVariousFormsIfNeeded(sourceUnit,sourceBuffer);
    return null;
  }
}
]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>run</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Object</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;outputASTInVariousFormsIfNeeded;[sourceUnit, sourceBuffer]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>outputASTInVariousFormsIfNeeded</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sourceUnit</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>sourceBuffer</ParamName>
                    <ParamType>SourceBuffer</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [formatProp=System.getProperty("ANTLR.AST".toLowerCase())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>saveAsXML</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>name</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ast</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>XStream [xstream=new XStream()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildAST</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ModuleNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>sourceUnit</ParamName>
                    <ParamType>SourceUnit</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>classLoader</ParamName>
                    <ParamType>ClassLoader</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cst</ParamName>
                    <ParamType>Reduction</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;setClassLoader;[classLoader]</InnerMethodInvoke>
                <InnerMethodInvoke>null;makeModule;[]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType>ParserException</ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>convertGroovy</MethodName>
            <MethodComment>/** 
 * Converts the Antlr AST to the Groovy AST
 */
</MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>packageDef</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>packageDef</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;AnnotationNode&gt; [annotations=new ArrayList&lt;AnnotationNode&gt;()]</InnerVar>
                <InnerVar>AST [node=packageDef.getFirstChild()]</InnerVar>
                <InnerVar>String [name=qualifiedName(node)]</InnerVar>
                <InnerVar>PackageNode [packageNode=setPackage(name,annotations)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[packageNode, packageDef]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>importDef</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>importNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>processAnnotations</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotations</ParamName>
                    <ParamType>AnnotationNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [child=node.getFirstChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>annotationDef</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;AnnotationNode&gt; [annotations=new ArrayList&lt;AnnotationNode&gt;()]</InnerVar>
                <InnerVar>AST [node=classDef.getFirstChild()]</InnerVar>
                <InnerVar>int [modifiers=Opcodes.ACC_PUBLIC]</InnerVar>
                <InnerVar>String [name=identifier(node)]</InnerVar>
                <InnerVar>ClassNode [superClass=ClassHelper.OBJECT_TYPE]</InnerVar>
                <InnerVar>GenericsType[] [genericsType=null]</InnerVar>
                <InnerVar>ClassNode[] [interfaces=ClassNode.EMPTY_ARRAY]</InnerVar>
                <InnerVar>boolean [syntheticPublic=((modifiers &amp; Opcodes.ACC_SYNTHETIC) != 0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>classNode;setSyntheticPublic;[syntheticPublic]</InnerMethodInvoke>
                <InnerMethodInvoke>classNode;addAnnotations;[annotations]</InnerMethodInvoke>
                <InnerMethodInvoke>classNode;setGenericsTypes;[genericsType]</InnerMethodInvoke>
                <InnerMethodInvoke>classNode;addInterface;[ClassHelper.Annotation_TYPE]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[classNode, classDef]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNodeType;[OBJBLOCK, node]</InnerMethodInvoke>
                <InnerMethodInvoke>null;objectBlock;[node]</InnerMethodInvoke>
                <InnerMethodInvoke>output;addClass;[classNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>interfaceDef</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [oldInnerClassCounter=innerClassCounter]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;innerInterfaceDef;[classDef]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>innerInterfaceDef</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;AnnotationNode&gt; [annotations=new ArrayList&lt;AnnotationNode&gt;()]</InnerVar>
                <InnerVar>AST [node=classDef.getFirstChild()]</InnerVar>
                <InnerVar>int [modifiers=Opcodes.ACC_PUBLIC]</InnerVar>
                <InnerVar>String [name=identifier(node)]</InnerVar>
                <InnerVar>ClassNode [superClass=ClassHelper.OBJECT_TYPE]</InnerVar>
                <InnerVar>GenericsType[] [genericsType=null]</InnerVar>
                <InnerVar>ClassNode[] [interfaces=ClassNode.EMPTY_ARRAY]</InnerVar>
                <InnerVar>ClassNode [outerClass=classNode]</InnerVar>
                <InnerVar>boolean [syntheticPublic=((modifiers &amp; Opcodes.ACC_SYNTHETIC) != 0)]</InnerVar>
                <InnerVar>int [oldClassCount=innerClassCounter]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>classNode;setSyntheticPublic;[syntheticPublic]</InnerMethodInvoke>
                <InnerMethodInvoke>classNode;addAnnotations;[annotations]</InnerMethodInvoke>
                <InnerMethodInvoke>classNode;setGenericsTypes;[genericsType]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[classNode, classDef]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNodeType;[OBJBLOCK, node]</InnerMethodInvoke>
                <InnerMethodInvoke>null;objectBlock;[node]</InnerMethodInvoke>
                <InnerMethodInvoke>output;addClass;[classNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>classDef</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [oldInnerClassCounter=innerClassCounter]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;innerClassDef;[classDef]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getClassOrScript</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>anonymousInnerClassDef</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [oldNode=classNode]</InnerVar>
                <InnerVar>ClassNode [outerClass=getClassOrScript(oldNode)]</InnerVar>
                <InnerVar>String [fullName=outerClass.getName() + '$' + innerClassCounter]</InnerVar>
                <InnerVar>AnonymousInnerClassCarrier [ret=new AnonymousInnerClassCarrier()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>((InnerClassNode)classNode);setAnonymous;[true]</InnerMethodInvoke>
                <InnerMethodInvoke>classNode;setEnclosingMethod;[methodNode]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNodeType;[OBJBLOCK, node]</InnerMethodInvoke>
                <InnerMethodInvoke>null;objectBlock;[node]</InnerMethodInvoke>
                <InnerMethodInvoke>output;addClass;[classNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>innerClassDef</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>classDef</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;AnnotationNode&gt; [annotations=new ArrayList&lt;AnnotationNode&gt;()]</InnerVar>
                <InnerVar>AST [node=classDef.getFirstChild()]</InnerVar>
                <InnerVar>int [modifiers=Opcodes.ACC_PUBLIC]</InnerVar>
                <InnerVar>String [name=identifier(node)]</InnerVar>
                <InnerVar>GenericsType[] [genericsType=null]</InnerVar>
                <InnerVar>ClassNode [superClass=null]</InnerVar>
                <InnerVar>ClassNode[] [interfaces=ClassNode.EMPTY_ARRAY]</InnerVar>
                <InnerVar>MixinNode[] [mixins={}]</InnerVar>
                <InnerVar>ClassNode [outerClass=classNode]</InnerVar>
                <InnerVar>boolean [syntheticPublic=((modifiers &amp; Opcodes.ACC_SYNTHETIC) != 0)]</InnerVar>
                <InnerVar>int [oldClassCount=innerClassCounter]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>classNode;addAnnotations;[annotations]</InnerMethodInvoke>
                <InnerMethodInvoke>classNode;setGenericsTypes;[genericsType]</InnerMethodInvoke>
                <InnerMethodInvoke>classNode;setSyntheticPublic;[syntheticPublic]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[classNode, classDef]</InnerMethodInvoke>
                <InnerMethodInvoke>output;addClass;[classNode]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNodeType;[OBJBLOCK, node]</InnerMethodInvoke>
                <InnerMethodInvoke>null;objectBlock;[node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>objectBlock</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>objectBlock</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>enumDef</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>enumNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;AnnotationNode&gt; [annotations=new ArrayList&lt;AnnotationNode&gt;()]</InnerVar>
                <InnerVar>AST [node=enumNode.getFirstChild()]</InnerVar>
                <InnerVar>int [modifiers=Opcodes.ACC_PUBLIC]</InnerVar>
                <InnerVar>String [name=identifier(node)]</InnerVar>
                <InnerVar>ClassNode[] [interfaces=interfaces(node)]</InnerVar>
                <InnerVar>boolean [syntheticPublic=((modifiers &amp; Opcodes.ACC_SYNTHETIC) != 0)]</InnerVar>
                <InnerVar>String [enumName=(classNode != null ? name : dot(getPackageName(),name))]</InnerVar>
                <InnerVar>ClassNode [enumClass=EnumHelper.makeEnumNode(enumName,modifiers,interfaces,classNode)]</InnerVar>
                <InnerVar>ClassNode [oldNode=classNode]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNodeType;[ENUM_DEF, enumNode]</InnerMethodInvoke>
                <InnerMethodInvoke>enumClass;setSyntheticPublic;[syntheticPublic]</InnerMethodInvoke>
                <InnerMethodInvoke>enumClass;addAnnotations;[annotations]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[classNode, enumNode]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNodeType;[OBJBLOCK, node]</InnerMethodInvoke>
                <InnerMethodInvoke>null;objectBlock;[node]</InnerMethodInvoke>
                <InnerMethodInvoke>output;addClass;[enumClass]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>enumConstantDef</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;AnnotationNode&gt; [annotations=new ArrayList&lt;AnnotationNode&gt;()]</InnerVar>
                <InnerVar>AST [element=node.getFirstChild()]</InnerVar>
                <InnerVar>String [identifier=identifier(element)]</InnerVar>
                <InnerVar>Expression [init=null]</InnerVar>
                <InnerVar>FieldNode [enumField=EnumHelper.addEnumConstant(classNode,identifier,init)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNodeType;[ENUM_CONSTANT_DEF, node]</InnerMethodInvoke>
                <InnerMethodInvoke>enumField;addAnnotations;[annotations]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[enumField, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>throwsList</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>list</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [name]</InnerVar>
                <InnerVar>ClassNode [exception=ClassHelper.make(name)]</InnerVar>
                <InnerVar>AST [next=node.getNextSibling()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[exception, node]</InnerMethodInvoke>
                <InnerMethodInvoke>list;add;[exception]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>methodDef</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methodDef</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>MethodNode [oldNode=methodNode]</InnerVar>
                <InnerVar>List&lt;AnnotationNode&gt; [annotations=new ArrayList&lt;AnnotationNode&gt;()]</InnerVar>
                <InnerVar>AST [node=methodDef.getFirstChild()]</InnerVar>
                <InnerVar>GenericsType[] [generics=null]</InnerVar>
                <InnerVar>int [modifiers=Opcodes.ACC_PUBLIC]</InnerVar>
                <InnerVar>ClassNode [returnType=null]</InnerVar>
                <InnerVar>String [name=identifier(node)]</InnerVar>
                <InnerVar>Parameter[] [parameters=Parameter.EMPTY_ARRAY]</InnerVar>
                <InnerVar>ClassNode[] [exceptions=ClassNode.EMPTY_ARRAY]</InnerVar>
                <InnerVar>boolean [hasAnnotationDefault=false]</InnerVar>
                <InnerVar>Statement [code=null]</InnerVar>
                <InnerVar>boolean [syntheticPublic=((modifiers &amp; Opcodes.ACC_SYNTHETIC) != 0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>methodNode;setCode;[code]</InnerMethodInvoke>
                <InnerMethodInvoke>methodNode;addAnnotations;[annotations]</InnerMethodInvoke>
                <InnerMethodInvoke>methodNode;setGenericsTypes;[generics]</InnerMethodInvoke>
                <InnerMethodInvoke>methodNode;setAnnotationDefault;[hasAnnotationDefault]</InnerMethodInvoke>
                <InnerMethodInvoke>methodNode;setSyntheticPublic;[syntheticPublic]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[methodNode, methodDef]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkNoInvalidModifier</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>nodeType</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>modifiers</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>modifier</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>modifierText</ParamName>
                    <ParamType>String</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isAnInterface</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList/>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>staticInit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>staticInit</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BlockStatement [code=(BlockStatement)statementList(staticInit)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>classNode;addStaticInitializerStatements;[code.getStatements(), false]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>objectInit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>init</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BlockStatement [code=(BlockStatement)statementList(init)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>classNode;addObjectInitializerStatements;[code]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>constructorDef</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>constructorDef</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;AnnotationNode&gt; [annotations=new ArrayList&lt;AnnotationNode&gt;()]</InnerVar>
                <InnerVar>AST [node=constructorDef.getFirstChild()]</InnerVar>
                <InnerVar>int [modifiers=Opcodes.ACC_PUBLIC]</InnerVar>
                <InnerVar>Parameter[] [parameters=parameters(node)]</InnerVar>
                <InnerVar>ClassNode[] [exceptions=ClassNode.EMPTY_ARRAY]</InnerVar>
                <InnerVar>boolean [syntheticPublic=((modifiers &amp; Opcodes.ACC_SYNTHETIC) != 0)]</InnerVar>
                <InnerVar>ConstructorNode [constructorNode=classNode.addConstructor(modifiers,parameters,exceptions,null)]</InnerVar>
                <InnerVar>MethodNode [oldMethod=methodNode]</InnerVar>
                <InnerVar>Statement [code=statementList(node)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNodeType;[PARAMETERS, node]</InnerMethodInvoke>
                <InnerMethodInvoke>null;assertNodeType;[SLIST, node]</InnerMethodInvoke>
                <InnerMethodInvoke>constructorNode;setCode;[code]</InnerMethodInvoke>
                <InnerMethodInvoke>constructorNode;setSyntheticPublic;[syntheticPublic]</InnerMethodInvoke>
                <InnerMethodInvoke>constructorNode;addAnnotations;[annotations]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[constructorNode, constructorDef]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>fieldDef</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>fieldDef</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;AnnotationNode&gt; [annotations=new ArrayList&lt;AnnotationNode&gt;()]</InnerVar>
                <InnerVar>AST [node=fieldDef.getFirstChild()]</InnerVar>
                <InnerVar>int [modifiers=0]</InnerVar>
                <InnerVar>ClassNode [type=null]</InnerVar>
                <InnerVar>String [name=identifier(node)]</InnerVar>
                <InnerVar>Expression [initialValue=null]</InnerVar>
                <InnerVar>FieldNode [fieldNode=new FieldNode(name,modifiers,type,classNode,initialValue)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>fieldNode;addAnnotations;[annotations]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[fieldNode, fieldDef]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>interfaces</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;ClassNode&gt; [interfaceList=new ArrayList&lt;ClassNode&gt;()]</InnerVar>
                <InnerVar>ClassNode[] [interfaces=ClassNode.EMPTY_ARRAY]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parameters</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Parameter[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parametersNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [node=parametersNode.getFirstChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>verifyParameters</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>parameters</ParamName>
                    <ParamType>Parameter</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>firstParameterNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Parameter [first=parameters.get(0)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>parameter</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Parameter</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>paramNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;AnnotationNode&gt; [annotations=new ArrayList&lt;AnnotationNode&gt;()]</InnerVar>
                <InnerVar>boolean [variableParameterDef=isType(VARIABLE_PARAMETER_DEF,paramNode)]</InnerVar>
                <InnerVar>AST [node=paramNode.getFirstChild()]</InnerVar>
                <InnerVar>int [modifiers=0]</InnerVar>
                <InnerVar>ClassNode [type=ClassHelper.DYNAMIC_TYPE]</InnerVar>
                <InnerVar>String [name=identifier(node)]</InnerVar>
                <InnerVar>VariableExpression [leftExpression=new VariableExpression(name,type)]</InnerVar>
                <InnerVar>Parameter [parameter=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>leftExpression;setModifiers;[modifiers]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[leftExpression, paramNode]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[parameter, paramNode]</InnerMethodInvoke>
                <InnerMethodInvoke>parameter;addAnnotations;[annotations]</InnerMethodInvoke>
                <InnerMethodInvoke>parameter;setModifiers;[modifiers]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>modifiers</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>modifierNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>annotations</ParamName>
                    <ParamType>AnnotationNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>defaultModifiers</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>boolean [access=false]</InnerVar>
                <InnerVar>int [answer=0]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNodeType;[MODIFIERS, modifierNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setAccessTrue</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>access</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setModifierBit</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>answer</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>bit</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>annotation</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AnnotationNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>annotationNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [node=annotationNode.getFirstChild()]</InnerVar>
                <InnerVar>String [name=qualifiedName(node)]</InnerVar>
                <InnerVar>AnnotationNode [annotatedNode=new AnnotationNode(ClassHelper.make(name))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[annotatedNode, annotationNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>statement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Statement [statement=null]</InnerVar>
                <InnerVar>int [type=node.getType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>statementList</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>code</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>statementListNoChild</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>alternativeConfigureNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BlockStatement [block=new BlockStatement()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>assertNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [node=assertNode.getFirstChild()]</InnerVar>
                <InnerVar>BooleanExpression [booleanExpression=booleanExpression(node)]</InnerVar>
                <InnerVar>Expression [messageExpression=null]</InnerVar>
                <InnerVar>AssertStatement [assertStatement=new AssertStatement(booleanExpression,messageExpression)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[assertStatement, assertNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>breakStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BreakStatement [breakStatement=new BreakStatement(label(node))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[breakStatement, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>continueStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ContinueStatement [continueStatement=new ContinueStatement(label(node))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[continueStatement, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>forStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>forNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [inNode=forNode.getFirstChild()]</InnerVar>
                <InnerVar>Expression [collectionExpression]</InnerVar>
                <InnerVar>Parameter [forParameter]</InnerVar>
                <InnerVar>AST [node=inNode.getNextSibling()]</InnerVar>
                <InnerVar>Statement [block]</InnerVar>
                <InnerVar>ForStatement [forStatement=new ForStatement(forParameter,collectionExpression,block)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[forStatement, forNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ifStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ifNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [node=ifNode.getFirstChild()]</InnerVar>
                <InnerVar>BooleanExpression [booleanExpression=booleanExpression(node)]</InnerVar>
                <InnerVar>Statement [ifBlock=statement(node)]</InnerVar>
                <InnerVar>Statement [elseBlock=EmptyStatement.INSTANCE]</InnerVar>
                <InnerVar>IfStatement [ifStatement=new IfStatement(booleanExpression,ifBlock,elseBlock)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNodeType;[EXPR, node]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[ifStatement, ifNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>labelledStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>labelNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [node=labelNode.getFirstChild()]</InnerVar>
                <InnerVar>String [label=identifier(node)]</InnerVar>
                <InnerVar>Statement [statement=statement(node.getNextSibling())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>statement;addStatementLabel;[label]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>methodCall</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>code</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [expression=methodCallExpression(code)]</InnerVar>
                <InnerVar>ExpressionStatement [expressionStatement=new ExpressionStatement(expression)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[expressionStatement, code]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>declarationExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>variableDef</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [node=variableDef.getFirstChild()]</InnerVar>
                <InnerVar>ClassNode [type=null]</InnerVar>
                <InnerVar>List&lt;AnnotationNode&gt; [annotations=new ArrayList&lt;AnnotationNode&gt;()]</InnerVar>
                <InnerVar>int [modifiers=0]</InnerVar>
                <InnerVar>Expression [leftExpression]</InnerVar>
                <InnerVar>Expression [rightExpression=EmptyExpression.INSTANCE]</InnerVar>
                <InnerVar>AST [right]</InnerVar>
                <InnerVar>Token [token=makeToken(Types.ASSIGN,variableDef)]</InnerVar>
                <InnerVar>DeclarationExpression [expression=new DeclarationExpression(leftExpression,token,rightExpression)]</InnerVar>
                <InnerVar>ExpressionStatement [expressionStatement=new ExpressionStatement(expression)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[leftExpression, node]</InnerMethodInvoke>
                <InnerMethodInvoke>expression;addAnnotations;[annotations]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[expression, variableDef]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[expressionStatement, variableDef]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>variableDef</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>variableDef</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ExpressionStatement [expressionStatement=new ExpressionStatement(declarationExpression(variableDef))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[expressionStatement, variableDef]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>returnStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [exprNode=node.getFirstChild()]</InnerVar>
                <InnerVar>Expression [expression=exprNode == null ? ConstantExpression.NULL : expression(exprNode)]</InnerVar>
                <InnerVar>ReturnStatement [returnStatement=new ReturnStatement(expression)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[returnStatement, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>switchStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>switchNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [node=switchNode.getFirstChild()]</InnerVar>
                <InnerVar>Expression [expression=expression(node)]</InnerVar>
                <InnerVar>Statement [defaultStatement=EmptyStatement.INSTANCE]</InnerVar>
                <InnerVar>List [list=new ArrayList()]</InnerVar>
                <InnerVar>SwitchStatement [switchStatement=new SwitchStatement(expression,list,defaultStatement)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[switchStatement, switchNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>caseStatements</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>cases</ParamName>
                    <ParamType>List</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Expression&gt; [expressions=new LinkedList&lt;Expression&gt;()]</InnerVar>
                <InnerVar>Statement [statement=EmptyStatement.INSTANCE]</InnerVar>
                <InnerVar>Statement [defaultStatement=EmptyStatement.INSTANCE]</InnerVar>
                <InnerVar>AST [nextSibling=node]</InnerVar>
                <InnerVar>Iterator [iterator=expressions.iterator()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>synchronizedStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>syncNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [node=syncNode.getFirstChild()]</InnerVar>
                <InnerVar>Expression [expression=expression(node)]</InnerVar>
                <InnerVar>Statement [code=statement(node.getNextSibling())]</InnerVar>
                <InnerVar>SynchronizedStatement [synchronizedStatement=new SynchronizedStatement(expression,code)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[synchronizedStatement, syncNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>throwStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [expressionNode=node.getFirstChild()]</InnerVar>
                <InnerVar>ThrowStatement [throwStatement=new ThrowStatement(expression(expressionNode))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[throwStatement, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tryStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>tryStatementNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [tryNode=tryStatementNode.getFirstChild()]</InnerVar>
                <InnerVar>Statement [tryStatement=statement(tryNode)]</InnerVar>
                <InnerVar>Statement [finallyStatement=EmptyStatement.INSTANCE]</InnerVar>
                <InnerVar>AST [node=tryNode.getNextSibling()]</InnerVar>
                <InnerVar>List&lt;CatchStatement&gt; [catches=new ArrayList&lt;CatchStatement&gt;()]</InnerVar>
                <InnerVar>TryCatchStatement [tryCatchStatement=new TryCatchStatement(tryStatement,finallyStatement)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[tryCatchStatement, tryStatementNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>catchStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>CatchStatement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>catchNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [node=catchNode.getFirstChild()]</InnerVar>
                <InnerVar>List&lt;CatchStatement&gt; [catches=new LinkedList&lt;CatchStatement&gt;()]</InnerVar>
                <InnerVar>Statement [code=statement(node.getNextSibling())]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>whileStatement</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Statement</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>whileNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [node=whileNode.getFirstChild()]</InnerVar>
                <InnerVar>BooleanExpression [booleanExpression=booleanExpression(node)]</InnerVar>
                <InnerVar>Statement [block]</InnerVar>
                <InnerVar>WhileStatement [whileStatement=new WhileStatement(booleanExpression,block)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNodeType;[EXPR, node]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[whileStatement, whileNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>convertToConstant</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [expression=expressionSwitch(node)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[expression, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expressionSwitch</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [type=node.getType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>tupleExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>TupleExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>TupleExpression [exp=new TupleExpression()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[exp, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>closureListExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClosureListExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [exprNode=node.getFirstChild()]</InnerVar>
                <InnerVar>List&lt;Expression&gt; [list=new LinkedList&lt;Expression&gt;()]</InnerVar>
                <InnerVar>ClosureListExpression [cle=new ClosureListExpression(list)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;isClosureListExpressionAllowedHere;[node]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[cle, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isClosureListExpressionAllowedHere</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dynamicMemberExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>dynamicMemberNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [node=dynamicMemberNode.getFirstChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>ternaryExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ternaryNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [node=ternaryNode.getFirstChild()]</InnerVar>
                <InnerVar>Expression [base=expression(node)]</InnerVar>
                <InnerVar>Expression [left=expression(node)]</InnerVar>
                <InnerVar>Expression [ret]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[ret, ternaryNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>variableExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [text=node.getText()]</InnerVar>
                <InnerVar>VariableExpression [variableExpression=new VariableExpression(text)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[variableExpression, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>literalExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>value</ParamName>
                    <ParamType>Object</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ConstantExpression [constantExpression=new ConstantExpression(value,value instanceof Boolean)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[constantExpression, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>rangeExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rangeNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>inclusive</ParamName>
                    <ParamType>boolean</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [node=rangeNode.getFirstChild()]</InnerVar>
                <InnerVar>Expression [left=expression(node)]</InnerVar>
                <InnerVar>Expression [right=expression(node.getNextSibling())]</InnerVar>
                <InnerVar>RangeExpression [rangeExpression=new RangeExpression(left,right,inclusive)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[rangeExpression, rangeNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>spreadExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [exprNode=node.getFirstChild()]</InnerVar>
                <InnerVar>AST [listNode=exprNode.getFirstChild()]</InnerVar>
                <InnerVar>Expression [right=expression(listNode)]</InnerVar>
                <InnerVar>SpreadExpression [spreadExpression=new SpreadExpression(right)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[spreadExpression, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>spreadMapExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [exprNode=node.getFirstChild()]</InnerVar>
                <InnerVar>Expression [expr=expression(exprNode)]</InnerVar>
                <InnerVar>SpreadMapExpression [spreadMapExpression=new SpreadMapExpression(expr)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[spreadMapExpression, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>methodPointerExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [exprNode=node.getFirstChild()]</InnerVar>
                <InnerVar>Expression [objectExpression=expression(exprNode)]</InnerVar>
                <InnerVar>AST [mNode=exprNode.getNextSibling()]</InnerVar>
                <InnerVar>Expression [methodName]</InnerVar>
                <InnerVar>MethodPointerExpression [methodPointerExpression=new MethodPointerExpression(objectExpression,methodName)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[methodName, mNode]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[methodPointerExpression, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>listExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>listNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Expression&gt; [expressions=new ArrayList&lt;Expression&gt;()]</InnerVar>
                <InnerVar>AST [elist=listNode.getFirstChild()]</InnerVar>
                <InnerVar>ListExpression [listExpression=new ListExpression(expressions)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNodeType;[ELIST, elist]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[listExpression, listNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mapExpression</MethodName>
            <MethodComment>/** 
 * Typically only used for map constructors I think?
 */
</MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>mapNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List [expressions=new ArrayList()]</InnerVar>
                <InnerVar>AST [elist=mapNode.getFirstChild()]</InnerVar>
                <InnerVar>MapExpression [mapExpression=new MapExpression(expressions)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[mapExpression, mapNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>mapEntryExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>MapEntryExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>instanceofExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [leftNode=node.getFirstChild()]</InnerVar>
                <InnerVar>Expression [leftExpression=expression(leftNode)]</InnerVar>
                <InnerVar>AST [rightNode=leftNode.getNextSibling()]</InnerVar>
                <InnerVar>ClassNode [type=buildName(rightNode)]</InnerVar>
                <InnerVar>Expression [rightExpression=new ClassExpression(type)]</InnerVar>
                <InnerVar>BinaryExpression [binaryExpression=new BinaryExpression(leftExpression,makeToken(Types.KEYWORD_INSTANCEOF,node),rightExpression)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertTypeNotNull;[type, rightNode]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[rightExpression, rightNode]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[binaryExpression, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertTypeNotNull</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>rightNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>asExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [leftNode=node.getFirstChild()]</InnerVar>
                <InnerVar>Expression [leftExpression=expression(leftNode)]</InnerVar>
                <InnerVar>AST [rightNode=leftNode.getNextSibling()]</InnerVar>
                <InnerVar>ClassNode [type=makeTypeWithArguments(rightNode)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>castExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>castNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [node=castNode.getFirstChild()]</InnerVar>
                <InnerVar>ClassNode [type=makeTypeWithArguments(node)]</InnerVar>
                <InnerVar>AST [expressionNode=node.getNextSibling()]</InnerVar>
                <InnerVar>Expression [expression=expression(expressionNode)]</InnerVar>
                <InnerVar>CastExpression [castExpression=new CastExpression(type,expression)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertTypeNotNull;[type, node]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[castExpression, castNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>indexExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>indexNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [bracket=indexNode.getFirstChild()]</InnerVar>
                <InnerVar>AST [leftNode=bracket.getNextSibling()]</InnerVar>
                <InnerVar>Expression [leftExpression=expression(leftNode)]</InnerVar>
                <InnerVar>AST [rightNode=leftNode.getNextSibling()]</InnerVar>
                <InnerVar>Expression [rightExpression=expression(rightNode)]</InnerVar>
                <InnerVar>BinaryExpression [binaryExpression=new BinaryExpression(leftExpression,makeToken(Types.LEFT_SQUARE_BRACKET,bracket),rightExpression)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[binaryExpression, indexNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>binaryExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Token [token=makeToken(type,node)]</InnerVar>
                <InnerVar>AST [leftNode=node.getFirstChild()]</InnerVar>
                <InnerVar>Expression [leftExpression=expression(leftNode)]</InnerVar>
                <InnerVar>AST [rightNode=leftNode.getNextSibling()]</InnerVar>
                <InnerVar>Expression [rightExpression=expression(rightNode)]</InnerVar>
                <InnerVar>BinaryExpression [binaryExpression=new BinaryExpression(leftExpression,token,rightExpression)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[binaryExpression, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>prefixExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>token</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [expression=expression(node.getFirstChild())]</InnerVar>
                <InnerVar>PrefixExpression [prefixExpression=new PrefixExpression(makeToken(token,node),expression)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[prefixExpression, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>postfixExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>token</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Expression [expression=expression(node.getFirstChild())]</InnerVar>
                <InnerVar>PostfixExpression [postfixExpression=new PostfixExpression(expression,makeToken(token,node))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[postfixExpression, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>booleanExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>BooleanExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>BooleanExpression [booleanExpression=new BooleanExpression(expression(node))]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[booleanExpression, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dotExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [leftNode=node.getFirstChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>specialConstructorCallExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methodCallNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>special</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [node=methodCallNode.getFirstChild()]</InnerVar>
                <InnerVar>Expression [arguments=arguments(node)]</InnerVar>
                <InnerVar>ConstructorCallExpression [expression=new ConstructorCallExpression(special,arguments)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[expression, methodCallNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeInParenthesis</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>methodCallExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>methodCallNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [node=methodCallNode.getFirstChild()]</InnerVar>
                <InnerVar>Expression [objectExpression]</InnerVar>
                <InnerVar>AST [selector]</InnerVar>
                <InnerVar>AST [elist=node.getNextSibling()]</InnerVar>
                <InnerVar>List&lt;GenericsType&gt; [typeArgumentList=null]</InnerVar>
                <InnerVar>boolean [implicitThis=false]</InnerVar>
                <InnerVar>boolean [safe=isType(OPTIONAL_DOT,node)]</InnerVar>
                <InnerVar>boolean [spreadSafe=isType(SPREAD_DOT,node)]</InnerVar>
                <InnerVar>Expression [name=null]</InnerVar>
                <InnerVar>Expression [arguments=arguments(elist)]</InnerVar>
                <InnerVar>MethodCallExpression [expression=new MethodCallExpression(objectExpression,name,arguments)]</InnerVar>
                <InnerVar>Expression [ret=expression]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>expression;setSafe;[safe]</InnerMethodInvoke>
                <InnerMethodInvoke>expression;setSpreadSafe;[spreadSafe]</InnerMethodInvoke>
                <InnerMethodInvoke>expression;setImplicitThis;[implicitThis]</InnerMethodInvoke>
                <InnerMethodInvoke>null;setTypeArgumentsOnMethodCallExpression;[expression, typeArgumentList]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[ret, methodCallNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>setTypeArgumentsOnMethodCallExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>expression</ParamName>
                    <ParamType>MethodCallExpression</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>typeArgumentList</ParamName>
                    <ParamType>GenericsType</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>constructorCallExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [constructorCallNode=node]</InnerVar>
                <InnerVar>ClassNode [type=makeTypeWithArguments(constructorCallNode)]</InnerVar>
                <InnerVar>AST [elist=node.getNextSibling()]</InnerVar>
                <InnerVar>Expression [arguments=arguments(elist)]</InnerVar>
                <InnerVar>ClassNode [innerClass=getAnonymousInnerClassNode(arguments)]</InnerVar>
                <InnerVar>ConstructorCallExpression [ret=new ConstructorCallExpression(type,arguments)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[ret, constructorCallNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getAnonymousInnerClassNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>arguments</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>arraySizeExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>List</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List [list]</InnerVar>
                <InnerVar>Expression [size=null]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>list;add;[size]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>enumArguments</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>elist</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Expression&gt; [expressionList=new ArrayList&lt;Expression&gt;()]</InnerVar>
                <InnerVar>ArgumentListExpression [argumentListExpression=new ArgumentListExpression(expressionList)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[argumentListExpression, elist]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>arguments</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>elist</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List [expressionList=new ArrayList()]</InnerVar>
                <InnerVar>boolean [namedArguments=false]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>checkDuplicateNamedParams</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>elist</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expressionList</ParamName>
                    <ParamType>List</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>Set&lt;String&gt; [namedArgumentNames=new HashSet&lt;String&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addArgumentExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>expressionList</ParamName>
                    <ParamType>Expression</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>expressionList</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;Expression&gt; [expressionList=new ArrayList&lt;Expression&gt;()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>closureExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClosureExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [paramNode=node.getFirstChild()]</InnerVar>
                <InnerVar>Parameter[] [parameters=null]</InnerVar>
                <InnerVar>AST [codeNode=paramNode]</InnerVar>
                <InnerVar>Statement [code=statementListNoChild(codeNode,node)]</InnerVar>
                <InnerVar>ClosureExpression [closureExpression=new ClosureExpression(parameters,code)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[closureExpression, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>blockExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [codeNode=node.getFirstChild()]</InnerVar>
                <InnerVar>Parameter[] [parameters=Parameter.EMPTY_ARRAY]</InnerVar>
                <InnerVar>Statement [code=statementListNoChild(codeNode,node)]</InnerVar>
                <InnerVar>ClosureExpression [closureExpression=new ClosureExpression(parameters,code)]</InnerVar>
                <InnerVar>String [callName="call"]</InnerVar>
                <InnerVar>Expression [noArguments=new ArgumentListExpression()]</InnerVar>
                <InnerVar>MethodCallExpression [call=new MethodCallExpression(closureExpression,callName,noArguments)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[closureExpression, node]</InnerMethodInvoke>
                <InnerMethodInvoke>null;configureAST;[call, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unaryMinusExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>unaryMinusExpr</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [node=unaryMinusExpr.getFirstChild()]</InnerVar>
                <InnerVar>String [text=node.getText()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unaryPlusExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>unaryPlusExpr</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [node=unaryPlusExpr.getFirstChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>decimalExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ConstantExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [text=node.getText()]</InnerVar>
                <InnerVar>Object [number=Numbers.parseDecimal(text)]</InnerVar>
                <InnerVar>ConstantExpression [constantExpression=new ConstantExpression(number,number instanceof Double || number instanceof Float)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[constantExpression, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>integerExpression</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ConstantExpression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>String [text=node.getText()]</InnerVar>
                <InnerVar>Object [number=Numbers.parseInteger(text)]</InnerVar>
                <InnerVar>boolean [keepPrimitive=number instanceof Integer || number instanceof Long]</InnerVar>
                <InnerVar>ConstantExpression [constantExpression=new ConstantExpression(number,keepPrimitive)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[constantExpression, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>gstring</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Expression</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>gstringNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List [strings=new ArrayList()]</InnerVar>
                <InnerVar>List [values=new ArrayList()]</InnerVar>
                <InnerVar>StringBuilder [buffer=new StringBuilder()]</InnerVar>
                <InnerVar>boolean [isPrevString=false]</InnerVar>
                <InnerVar>GStringExpression [gStringExpression=new GStringExpression(buffer.toString(),strings,values)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[gStringExpression, gstringNode]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>type</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>qualifiedName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>qualifiedNameNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeArgumentsNode</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>AST</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>root</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getBoundType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>int</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeGenericsArgumentType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>GenericsType</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeArgument</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>GenericsType [gt]</InnerVar>
                <InnerVar>AST [rootNode=typeArgument.getFirstChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;configureAST;[gt, typeArgument]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeTypeWithArguments</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rootNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [basicType=makeType(rootNode)]</InnerVar>
                <InnerVar>AST [node=rootNode.getFirstChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>addTypeArguments</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>basicType</ParamName>
                    <ParamType>ClassNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;GenericsType&gt; [typeArgumentList=getTypeArgumentsList(node)]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>basicType;setGenericsTypes;[typeArgumentList.toArray(new GenericsType[typeArgumentList.size()])]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTypeArgumentsList</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>GenericsType</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>List&lt;GenericsType&gt; [typeArgumentList=new LinkedList&lt;GenericsType&gt;()]</InnerVar>
                <InnerVar>AST [typeArgument=node.getFirstChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNodeType;[TYPE_ARGUMENTS, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeGenericsBounds</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rn</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>boundType</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [boundsRoot=rn.getNextSibling()]</InnerVar>
                <InnerVar>LinkedList [bounds=new LinkedList()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNodeType;[boundType, boundsRoot]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeGenericsType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>GenericsType[]</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>rootNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [typeParameter=rootNode.getFirstChild()]</InnerVar>
                <InnerVar>LinkedList [ret=new LinkedList()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNodeType;[TYPE_PARAMETER, typeParameter]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [answer=ClassHelper.DYNAMIC_TYPE]</InnerVar>
                <InnerVar>AST [node=typeNode.getFirstChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>buildName</MethodName>
            <MethodComment>/** 
 * Extracts an identifier from the Antlr AST and then performs a name resolution to see if the given name is a type from imports, aliases or newly created classes
 */
</MethodComment>
            <ReturnType>ClassNode</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>ClassNode [answer=null]</InnerVar>
                <InnerVar>AST [nextSibling=node.getNextSibling()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isPrimitiveTypeLiteral</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>int [type=node.getType()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>identifier</MethodName>
            <MethodComment>/** 
 * Extracts an identifier from the Antlr AST
 */
</MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>null;assertNodeType;[IDENT, node]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>label</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>labelNode</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [node=labelNode.getFirstChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>hasVisibility</MethodName>
            <MethodComment>/** 
 * Returns true if the modifiers flags contain a visibility modifier
 */
</MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>modifiers</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>configureAST</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>ASTNode</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>ast</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>node;setColumnNumber;[ast.getColumn()]</InnerMethodInvoke>
                <InnerMethodInvoke>node;setLineNumber;[ast.getLine()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>makeToken</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>Token</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeCode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getFirstChildText</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar>AST [child=node.getFirstChild()]</InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>isType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>boolean</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>typeCode</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTokenName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>token</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>getTokenName</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>String</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>assertNodeType</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>type</ParamName>
                    <ParamType>int</ParamType>
                </Parameter>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>notImplementedYet</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>unknownAST</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dumpTree</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>ast</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke></InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
        <Method>
            <MethodName>dump</MethodName>
            <MethodComment></MethodComment>
            <ReturnType>void</ReturnType>
            <ParameterList>
                <Parameter>
                    <ParamName>node</ParamName>
                    <ParamType>AST</ParamType>
                </Parameter>
            </ParameterList>
            <InnerVarList>
                <InnerVar></InnerVar>
            </InnerVarList>
            <InnerMethodInvokeList>
                <InnerMethodInvoke>System.out;println;["Type: " + getTokenName(node) + " text: "+ node.getText()]</InnerMethodInvoke>
            </InnerMethodInvokeList>
            <ThrowExceptionList>
                <ExceptionType></ExceptionType>
            </ThrowExceptionList>
        </Method>
    </MethodList>
</Class>