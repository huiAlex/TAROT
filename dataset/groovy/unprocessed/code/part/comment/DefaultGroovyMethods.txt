/**
     * Identity check. Since == is overridden in Groovy with the meaning of equality
     * we need some fallback to check for object identity.  Invoke using the
     * 'is' method, like so: def same = this.is(that)
     *
     *      *      *      *         instance, false otherwise
     *      */

/**
     * Allows the closure to be called for the object reference self.
     * Synonym for 'with()'.
     *
     *      *      *      *      */

/**
     * Allows the closure to be called for the object reference self.
     * 
     * Any method invoked inside the closure will first be invoked on the
     * self reference. For instance, the following method calls to the append()
     * method are invoked on the StringBuilder instance:
     * 
     *
     *      *      *      *      */

/**
     * Allows the subscript operator to be used to lookup dynamic property values.
     * bean[somePropertyNameExpression]. The normal property notation
     * of groovy is neater and more concise but only works with compile-time known
     * property names.
     *
     *      *      *      *      */

/**
     * Allows the subscript operator to be used to set dynamically named property values.
     * bean[somePropertyNameExpression] = foo. The normal property notation
     * of groovy is neater and more concise but only works with property names which
     * are known at compile time.
     *
     *      *      *      *      */

/**
     * Generates a detailed dump string of an object showing its class,
     * hashCode and fields.
     *
     *      *      *      */

/**
     * Retrieves the list of {@link groovy.lang.MetaProperty} objects for 'self' and wraps it
     * in a list of {@link groovy.lang.PropertyValue} objects that additionally provide
     * the value for each property of 'self'.
     *
     *      *      *      *      */

/**
     * Convenience method that calls {@link #getMetaPropertyValues(java.lang.Object)}(self)
     * and provides the data in form of simple key/value pairs, i.e.&nsbp;without
     * type() information.
     *
     *      *      *      */

/**
     * Scoped use method
     *
     *      *      *      *      *      */

/**
     * Extend object with category methods.
     * All methods for given class and all super classes will be added to the object.
     *
     *      *      *      */

/**
     * Extend class globally with category methods.
     * All methods for given class and all super classes will be added to the class.
     *
     *      *      *      */

/**
     * Extend class globally with category methods.
     *
     *      *      *      */

/**
     * Extend class globally with category methods.
     *
     *      *      *      */

/**
     * Extend class globally with category methods.
     *
     *      *      *      */

/**
     * Extend class globally with category methods.
     *
     *      *      *      */

/**
     * Scoped use method with list of categories.
     *
     *      *      *      *      *      */

/**
     * Allows the usage of addShutdownHook without getting the runtime first.
     *
     *      *      *      */

/**
     * Allows you to use a list of categories, specifying the list as varargs.
     * use(CategoryClass1, CategoryClass2) { ... }
     * This method saves having to wrap the the category
     * classes in a list.
     *
     *      *      *      *      */

/**
     * Print a value formatted Groovy style to self if it
     * is a Writer, otherwise to the standard output stream.
     *
     *      *      *      */

/**
     * Print a value formatted Groovy style to the print writer.
     *
     *      *      *      */

/**
     * Print a value formatted Groovy style to the print stream.
     *
     *      *      *      */

/**
     * Print a value to the standard output stream.
     * This method delegates to the owner to execute the method.
     *
     *      *      *      */

/**
     * Print a linebreak to the standard output stream.
     *
     *      *      */

/**
     * Print a linebreak to the standard output stream.
     * This method delegates to the owner to execute the method.
     *
     *      *      */

/**
     * Print a value formatted Groovy style (followed by a newline) to self
     * if it is a Writer, otherwise to the standard output stream.
     *
     *      *      *      */

/**
     * Print a value formatted Groovy style (followed by a newline) to the print writer.
     *
     *      *      *      */

/**
     * Print a value formatted Groovy style (followed by a newline) to the print stream.
     *
     *      *      *      */

/**
     * Print a value (followed by a newline) to the standard output stream.
     * This method delegates to the owner to execute the method.
     *
     *      *      *      */

/**
     * Printf to a console.
     *
     *      *      *      *      */

/**
     * Sprintf to a string.
     *
     *      *      *      *      *      */

/**
     * Returns a formatted string using the specified format string and
     * arguments.
     *
     *      *      *      *               string.  The type of arg should be one of Object[], List,
     *               int[], short[], byte[], char[], boolean[], long[], float[], or double[].
     *      *      */

/**
     * Inspects returns the String that matches what would be typed into a
     * terminal to create this object.
     *
     *      *      *         create this object. e.g. [1, 'hello'].inspect() -> [1, "hello"]
     *      */

/**
     * Print to a console in interactive format.
     *
     *      *      *      */

/**
     * Print to a console in interactive format.
     *
     *      *      *      */

/**
     * Provide a dynamic method invocation method which can be overloaded in
     * classes to implement dynamic proxies easily.
     *
     *      *      *      *      *      */

/**
     * Method for overloading the behavior of the 'case' method in switch statements.
     * The default implementation handles arrays types but otherwise simply delegates
     * to Object#equals, but this may be overridden for other types. In this example:
     * 
     * "some code" is called when b.isCase( a ) returns
     * true.
     *
     *      *      *      *      */

/**
     * Special 'Case' implementation for Class, which allows testing
     * for a certain class in a switch statement.
     * For example:
     * 
     *
     *      *      *      *      */

/**
     * 'Case' implementation for collections which tests if the 'switch'
     * operand is contained in any of the 'case' values.
     * For example:
     * 
     *
     *      *      *      *      *      */

/**
     * 'Case' implementation for maps which tests the groovy truth
     * value obtained using the 'switch' operand as key.
     * For example:
     * 
     *
     *      *      *      *      */

/**
     * Special 'case' implementation for all numbers, which delegates to the
     * compareTo() method for comparing numbers of different
     * types.
     *
     *      *      *      *      */

/**
     * Returns an iterator equivalent to this iterator with all duplicated items removed
     * by using the default comparator. The original iterator will become
     * exhausted of elements after determining the unique values. A new iterator
     * for the unique values will be returned.
     *
     *      *      *      */

/**
     * Modifies this collection to remove all duplicated items, using the
     * default comparator.
     * 
     *
     *      *      *      *      */

/**
     * Modifies this List to remove all duplicated items, using the
     * default comparator.
     * 
     *
     *      *      *      *      */

/**
     * Remove all duplicates from a given Collection using the default comparator.
     * If mutate is true, it works by modifying the original object (and also returning it).
     * If mutate is false, a new collection is returned leaving the original unchanged.
     * 
     *
     *      *      *      *      */

/**
     * Remove all duplicates from a given List using the default comparator.
     * If mutate is true, it works by modifying the original object (and also returning it).
     * If mutate is false, a new collection is returned leaving the original unchanged.
     * 
     *
     *      *      *      *      */

/**
     * Provides a method that compares two comparables using Groovy's
     * default number aware comparator.
     *
     *      *      *      *      */

/**
     * Returns an iterator equivalent to this iterator but with all duplicated items
     * removed by using a Closure to determine duplicate (equal) items.
     * The original iterator will be fully processed after the call.
     * 
     * If the closure takes a single parameter, the argument passed will be each element,
     * and the closure should return a value used for comparison (either using
     * {@link java.lang.Comparable#compareTo(java.lang.Object)} or {@link java.lang.Object#equals(java.lang.Object)}).
     * If the closure takes two parameters, two items from the Iterator
     * will be passed as arguments, and the closure should return an
     * int value (with 0 indicating the items are not unique).
     *
     *      *      *      *      */

/**
     * Returns an iterator equivalent to this iterator with all duplicated
     * items removed by using the supplied comparator.
     *
     *      *      *      *      */

/**
     * Returns an iterator equivalent to this iterator with all duplicated
     * items removed by using the supplied comparator.
     *
     *      *      *        If {@code null}, the Comparable natural ordering of the elements will be used.
     *      *      */

/**
     * Returns an iterator equivalent to this iterator with all duplicated
     * items removed by using the natural ordering of the items.
     *
     *      *      *      */

/**
     * Returns a Collection containing the items from the Iterable but with duplicates removed
     * using the natural ordering of the items to determine uniqueness.
     * 
     * 
     *
     *      *      *      */

/**
     * Returns a List containing the items from the List but with duplicates removed
     * using the natural ordering of the items to determine uniqueness.
     * 
     * 
     *
     *      *      *      */

/**
     * Returns a new Array containing the items from the original Array but with duplicates removed with the supplied
     * comparator determining which items are unique.
     * 
     * 
     *
     *      *      *        If {@code null}, the Comparable natural ordering of the elements will be used.
     *      */

/**
     * Returns a new Array containing the items from the original Array but with duplicates removed using the
     * natural ordering of the items in the array.
     * 
     * 
     *
     *      *      */

/**
     * Returns a new Array containing the items from the original Array but with duplicates removed with the supplied
     * comparator determining which items are unique.
     * 
     * 
     *
     *      *      *      */

/**
     * Iterates through an aggregate type or data structure,
     * passing each item to the given closure.  Custom types may utilize this
     * method by simply providing an "iterator()" method.  The items returned
     * from the resulting iterator will be passed to the closure.
     *
     *      *      *      *      */

/**
     * Iterates through an aggregate type or data structure,
     * passing each item and the item's index (a counter starting at
     * zero) to the given closure.
     *
     *      *      *      *      */

/**
     * Iterates through an iterable type,
     * passing each item and the item's index (a counter starting at
     * zero) to the given closure.
     *
     *      *      *      *      */

/**
     * Iterates through an iterator type,
     * passing each item and the item's index (a counter starting at
     * zero) to the given closure.
     *
     *      *      *      *      */

/**
     * Iterates through an Collection,
     * passing each item and the item's index (a counter starting at
     * zero) to the given closure.
     *
     *      *      *      *      */

/**
     * Iterates through an List,
     * passing each item and the item's index (a counter starting at
     * zero) to the given closure.
     *
     *      *      *      *      */

/**
     * Iterates through an Set,
     * passing each item and the item's index (a counter starting at
     * zero) to the given closure.
     *
     *      *      *      *      */

/**
     * Iterates through an SortedSet,
     * passing each item and the item's index (a counter starting at
     * zero) to the given closure.
     *
     *      *      *      *      */

/**
     * Iterates through an Iterable, passing each item to the given closure.
     *
     *      *      *      */

/**
     * Iterates through an Iterator, passing each item to the given closure.
     *
     *      *      *      *      */

/**
     * Iterates through an Collection, passing each item to the given closure.
     *
     *      *      *      *      */

/**
     * Iterates through an List, passing each item to the given closure.
     *
     *      *      *      *      */

/**
     * Iterates through an Set, passing each item to the given closure.
     *
     *      *      *      *      */

/**
     * Iterates through an SortedSet, passing each item to the given closure.
     *
     *      *      *      *      */

/**
     * Allows a Map to be iterated through in reverse order using a closure.
     *
     * In general, the order in which the map contents are processed
     * cannot be guaranteed. In practise, specialized forms of Map,
     * e.g. a TreeMap will have its contents processed according to the
     * reverse of the natural ordering of the map.
     *
     *      *      *      *      *      */

/**
     * Allows a Map to be iterated through using a closure. If the
     * closure takes two parameters then it will be passed the Map.Entry and
     * the item's index (a counter starting at zero) otherwise if the closure
     * takes three parameters then it will be passed the key, the value, and
     * the index.
     * 
     *
     *      *      *      *      */

/**
     * Iterate over each element of the list in the reverse order.
     * 
     *
     *      *      *      *      */

/**
     * Iterate over each element of the array in the reverse order.
     *
     *      *      *      *      */

/**
     * Used to determine if the given predicate closure is valid (i.e.&nsbp;returns
     * true for all items in this data structure).
     * A simple example for a list:
     * 
     *
     *      *      *      *      */

/**
     * Used to determine if the given predicate closure is valid (i.e.&nsbp;returns
     * true for all items in this iterator).
     * A simple example for a list:
     * 
     *
     *      *      *      *      */

/**
     * Used to determine if the given predicate closure is valid (i.e.&nsbp;returns
     * true for all items in this iterable).
     * A simple example for a list:
     * 
     *
     *      *      *      *      */

/**
     * Iterates over the entries of a map, and checks whether a predicate is
     * valid for all entries. If the
     * closure takes one parameter then it will be passed the Map.Entry
     * otherwise if the closure takes two parameters then it will be
     * passed the key and the value.
     * 
     *
     *      *      *      *      */

/**
     * Iterates over every element of a collection, and checks whether all
     * elements are true according to the Groovy Truth.
     * Equivalent to self.every({element -> element})
     *
     *      *      *         predicate
     *      */

/**
     * Iterates over the contents of an object or collection, and checks whether a
     * predicate is valid for at least one element.
     *
     *      *      *      *      */

/**
     * Iterates over the contents of an iterator, and checks whether a
     * predicate is valid for at least one element.
     *
     *      *      *      *      */

/**
     * Iterates over the contents of an iterable, and checks whether a
     * predicate is valid for at least one element.
     *
     *      *      *      *      */

/**
     * Iterates over the entries of a map, and checks whether a predicate is
     * valid for at least one entry. If the
     * closure takes one parameter then it will be passed the Map.Entry
     * otherwise if the closure takes two parameters then it will be
     * passed the key and the value.
     * 
     *
     *      *      *      *      */

/**
     * Iterates over the elements of a collection, and checks whether at least
     * one element is true according to the Groovy Truth.
     * Equivalent to self.any({element -> element})
     *
     *      *      *      */

/**
     * Iterates over the collection of items which this Object represents and returns each item that matches
     * the given filter - calling the {@link #isCase(java.lang.Object, java.lang.Object)}
     * method used by switch statements.  This method can be used with different
     * kinds of filters like regular expressions, classes, ranges etc.
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Iterates over the collection of items and returns each item that matches
     * the given filter - calling the {@link #isCase(java.lang.Object, java.lang.Object)}
     * method used by switch statements.  This method can be used with different
     * kinds of filters like regular expressions, classes, ranges etc.
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Iterates over the collection of items and returns each item that matches
     * the given filter - calling the {@link #isCase(java.lang.Object, java.lang.Object)}
     * method used by switch statements.  This method can be used with different
     * kinds of filters like regular expressions, classes, ranges etc.
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Iterates over the collection of items and returns each item that matches
     * the given filter - calling the {@link #isCase(java.lang.Object, java.lang.Object)}
     * method used by switch statements.  This method can be used with different
     * kinds of filters like regular expressions, classes, ranges etc.
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Iterates over the array of items and returns a collection of items that match
     * the given filter - calling the {@link #isCase(java.lang.Object, java.lang.Object)}
     * method used by switch statements. This method can be used with different
     * kinds of filters like regular expressions, classes, ranges etc.
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Iterates over the collection of items which this Object represents and returns each item that matches
     * using the IDENTITY Closure as a filter - effectively returning all elements which satisfy Groovy truth.
     * 
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Iterates over the collection returning each element that matches
     * using the IDENTITY Closure as a filter - effectively returning all elements which satisfy Groovy truth.
     * 
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Iterates over the collection returning each element that matches
     * using the IDENTITY Closure as a filter - effectively returning all elements which satisfy Groovy truth.
     * 
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Iterates over the collection returning each element that matches
     * using the IDENTITY Closure as a filter - effectively returning all elements which satisfy Groovy truth.
     * 
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Iterates over the array returning each element that matches
     * using the IDENTITY Closure as a filter - effectively returning all elements which satisfy Groovy truth.
     * 
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Counts the number of occurrences of the given value from the
     * items within this Iterator.
     * Comparison is done using Groovy's == operator (using
     * compareTo(value) == 0 or equals(value) ).
     * The iterator will become exhausted of elements after determining the count value.
     *
     *      *      *      *      */

/**
     * Counts the number of occurrences which satisfy the given closure from the
     * items within this Iterator.
     * The iterator will become exhausted of elements after determining the count value.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      */

/**
     * @deprecated use count(Iterable, Closure)
     *      */

/**
     * Counts the number of occurrences of the given value inside this Iterable.
     * Comparison is done using Groovy's == operator (using
     * compareTo(value) == 0 or equals(value) ).
     * 
     * Example usage:
     * 
     *
     *      *      *      *      */

/**
     * @deprecated use count(Iterable, Closure)
     *      */

/**
     * Counts the number of occurrences which satisfy the given closure from inside this Iterable.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      */

/**
     * Counts the number of occurrences which satisfy the given closure from inside this map.
     * If the closure takes one parameter then it will be passed the Map.Entry.
     * Otherwise, the closure should take two parameters and will be passed the key and value.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      */

/**
     * Counts the number of occurrences of the given value inside this array.
     * Comparison is done using Groovy's == operator (using
     * compareTo(value) == 0 or equals(value) ).
     *
     *      *      *      *      */

/**
     * Counts the number of occurrences which satisfy the given closure from inside this array.
     *
     *      *      *      *      */

/**
     * Counts the number of occurrences of the given value inside this array.
     * Comparison is done using Groovy's == operator (using
     * compareTo(value) == 0 or equals(value) ).
     *
     *      *      *      *      */

/**
     * Counts the number of occurrences of the given value inside this array.
     * Comparison is done using Groovy's == operator (using
     * compareTo(value) == 0 or equals(value) ).
     *
     *      *      *      *      */

/**
     * Counts the number of occurrences of the given value inside this array.
     * Comparison is done using Groovy's == operator (using
     * compareTo(value) == 0 or equals(value) ).
     *
     *      *      *      *      */

/**
     * Counts the number of occurrences of the given value inside this array.
     * Comparison is done using Groovy's == operator (using
     * compareTo(value) == 0 or equals(value) ).
     *
     *      *      *      *      */

/**
     * Counts the number of occurrences of the given value inside this array.
     * Comparison is done using Groovy's == operator (using
     * compareTo(value) == 0 or equals(value) ).
     *
     *      *      *      *      */

/**
     * Counts the number of occurrences of the given value inside this array.
     * Comparison is done using Groovy's == operator (using
     * compareTo(value) == 0 or equals(value) ).
     *
     *      *      *      *      */

/**
     * Counts the number of occurrences of the given value inside this array.
     * Comparison is done using Groovy's == operator (using
     * compareTo(value) == 0 or equals(value) ).
     *
     *      *      *      *      */

/**
     * Counts the number of occurrences of the given value inside this array.
     * Comparison is done using Groovy's == operator (using
     * compareTo(value) == 0 or equals(value) ).
     *
     *      *      *      *      */

/**
     * @deprecated Use the Iterable version of toList instead
     *      *      */

/**
     * Convert an iterator to a List. The iterator will become
     * exhausted of elements after making this conversion.
     *
     *      *      *      */

/**
     * Convert an Iterable to a List. The Iterable's iterator will
     * become exhausted of elements after making this conversion.
     * 
     * Example usage:
     * 
     *
     *      *      *      */

/**
     * Convert an enumeration to a List.
     *
     *      *      *      */

/**
     * Collates this iterable into sub-lists of length size.
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * @deprecated use the Iterable variant instead
     *      *      */

/**
     * Collates this iterable into sub-lists of length size stepping through the code step
     * elements for each subList.
     * Example:
     * 
     *
     *      *      *      *      *      */

/**
     * @deprecated use the Iterable variant instead
     *      *      */

/**
     * Collates this iterable into sub-lists of length size. Any remaining elements in
     * the iterable after the subdivision will be dropped if keepRemainder is false.
     * Example:
     * 
     *
     *      *      *      *      *      */

/**
     * @deprecated use the Iterable variant instead
     *      *      */

/**
     * @deprecated use the Iterable variant instead
     *      *      */

/**
     * Iterates through this aggregate Object transforming each item into a new value using the
     * transform closure, returning a list of transformed values.
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Iterates through this aggregate Object transforming each item into a new value using Closure.IDENTITY
     * as a transformer, basically returning a list of items copied from the original object.
     * 
     *
     *      *      *      *      */

/**
     * Iterates through this aggregate Object transforming each item into a new value using the transform closure
     * and adding it to the supplied collector.
     *
     *      *      *      *      *      */

/**
     * Iterates through this collection transforming each entry into a new value using the transform closure
     * returning a list of transformed values.
     * 
     *
     *      *      *      *      */

/**
     * Iterates through this collection transforming each entry into a new value using Closure.IDENTITY
     * as a transformer, basically returning a list of items copied from the original collection.
     * 
     *
     *      *      *      *      */

/**
     * Iterates through this collection transforming each value into a new value using the transform closure
     * and adding it to the supplied collector.
     * 
     *
     *      *      *      *      *      */

/**
     * Deprecated alias for collectNested
     *
     * @deprecated Use collectNested instead
     *      */

/**
     * Recursively iterates through this collection transforming each non-Collection value
     * into a new value using the closure as a transformer. Returns a potentially nested
     * list of transformed values.
     * 
     *
     *      *      *      *      */

/**
     * Recursively iterates through this Iterable transforming each non-Collection value
     * into a new value using the closure as a transformer. Returns a potentially nested
     * list of transformed values.
     * 
     *
     *      *      *      *      */

/**
     * Deprecated alias for collectNested
     *
     * @deprecated Use collectNested instead
     *      */

/**
     * @deprecated Use the Iterable version of collectNested instead
     *      *      */

/**
     * Recursively iterates through this Iterable transforming each non-Collection value
     * into a new value using the transform closure. Returns a potentially nested
     * collection of transformed values.
     * 
     *
     *      *      *      *      *      */

/**
     * @deprecated Use the Iterable version of collectMany instead
     *      *      */

/**
     * @deprecated Use the Iterable version of collectMany instead
     *      *      */

/**
     * Projects each item from a source collection to a result collection and concatenates (flattens) the resulting
     * collections adding them into the collector.
     * 
     * 
     *
     *      *      *      *      *      */

/**
     * Projects each item from a source map to a result collection and concatenates (flattens) the resulting
     * collections adding them into the collector.
     * 
     * 
     *
     *      *      *      *      *      */

/**
     * Projects each item from a source map to a result collection and concatenates (flattens) the resulting
     * collections adding them into a collection.
     * 
     * 
     *
     *      *      *      *      */

/**
     * Projects each item from a source array to a collection and concatenates (flattens) the resulting collections into a single list.
     * 
     * 
     *
     *      *      *      *      *      */

/**
     * Projects each item from a source iterator to a collection and concatenates (flattens) the resulting collections into a single list.
     * 
     * 
     *
     *      *      *      *      *      */

/**
     * Iterates through this Map transforming each map entry into a new value using the transform closure
     * returning the collector with all transformed values added to it.
     * 
     *
     *      *      *      *      *      */

/**
     * Iterates through this Map transforming each map entry into a new value using the transform closure
     * returning a list of transformed values.
     * 
     *
     *      *      *      *      */

/**
     * @deprecated Use the Iterable version of collectEntries instead
     *      *      */

/**
     * A variant of collectEntries for Iterators.
     *
     *      *      *                  should return a Map.Entry, a Map or a two-element list containing the resulting key and value
     *      *      *      */

/**
     * @deprecated Use the Iterable version of collectEntries instead
     *      *      */

/**
     * A variant of collectEntries for Iterators using the identity closure as the transform.
     *
     *      *      *      *      */

/**
     * A variant of collectEntries for Iterable objects using the identity closure as the transform.
     * The source Iterable should contain a list of [key, value] tuples or Map.Entry objects.
     * 
     *
     *      *      *      *      */

/**
     * @deprecated Use the Iterable version of collectEntries instead
     *      *      */

/**
     * A variant of collectEntries for Iterators using a supplied map as the destination of transformed entries.
     *
     *      *      *      *                  should return a Map.Entry, a Map or a two-element list containing the resulting key and value
     *      *      */

/**
     * @deprecated Use the Iterable version of collectEntries instead
     *      *      */

/**
     * A variant of collectEntries for Iterators using the identity closure as the
     * transform and a supplied map as the destination of transformed entries.
     *
     *      *      *      *      *      */

/**
     * A variant of collectEntries for Iterables using the identity closure as the
     * transform and a supplied map as the destination of transformed entries.
     *
     *      *      *      *      *      */

/**
     * A variant of collectEntries using the identity closure as the transform.
     *
     *      *      *      *      *      */

/**
     * A variant of collectEntries using the identity closure as the transform.
     *
     *      *      *      *      */

/**
     * Finds the first value matching the closure condition
     *
     *      *      *      *      */

/**
     * Finds the first item matching the IDENTITY Closure (i.e.&#160;matching Groovy truth).
     * 
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Treats the object as iterable, iterating through the values it represents and returns the first non-null result obtained from calling the closure, otherwise returns the defaultResult.
     *
     *      *      *      *      *      */

/**
     * Treats the object as iterable, iterating through the values it represents and returns the first non-null result obtained from calling the closure, otherwise returns null.
     *
     *      *      *      *      */

/**
     * Finds the first value matching the closure condition.  Example:
     * 
     *
     *      *      *      *      */

/**
     * Finds the first element in the array that matches the given closure condition.
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Finds the first item matching the IDENTITY Closure (i.e.&#160;matching Groovy truth).
     * 
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Iterates through the collection calling the given closure for each item but stopping once the first non-null
     * result is found and returning that result. If all are null, the defaultResult is returned.
     * 
     * Examples:
     * 
     *
     *      *      *      *      *      */

/**
     * Iterates through the collection calling the given closure for each item but stopping once the first non-null
     * result is found and returning that result. If all results are null, null is returned.
     * 
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * @deprecated Use the Iterable version of findResults instead
     *      *      */

/**
     * Iterates through the Iterable transforming items using the supplied closure
     * and collecting any non-null results.
     * 
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Iterates through the map transforming items using the supplied closure
     * and collecting any non-null results.
     * If the closure takes two parameters, the entry key and value are passed.
     * If the closure takes one parameter, the Map.Entry object is passed.
     * 
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Finds the first entry matching the closure condition.
     * If the closure takes two parameters, the entry key and value are passed.
     * If the closure takes one parameter, the Map.Entry object is passed.
     * 
     *
     *      *      *      *      */

/**
     * Returns the first non-null closure result found by passing each map entry to the closure, otherwise null is returned.
     * If the closure takes two parameters, the entry key and value are passed.
     * If the closure takes one parameter, the Map.Entry object is passed.
     * 
     *
     *      *      *      *      */

/**
     * Finds all values matching the closure condition.
     * 
     *
     *      *      *      *      */

/**
     * Finds all values matching the closure condition.
     * 
     *
     *      *      *      *      */

/**
     * Finds all values matching the closure condition.
     * 
     *
     *      *      *      *      */

/**
     * Finds all elements of the array matching the given Closure condition.
     * 
     *
     *      *      *      *      */

/**
     * Finds the items matching the IDENTITY Closure (i.e.&#160;matching Groovy truth).
     * 
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Finds the items matching the IDENTITY Closure (i.e.&#160;matching Groovy truth).
     * 
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Finds the items matching the IDENTITY Closure (i.e.&#160;matching Groovy truth).
     * 
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Finds the elements of the array matching the IDENTITY Closure (i.e.&#160;matching Groovy truth).
     * 
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Finds all items matching the closure condition.
     *
     *      *      *      *      */

/**
     * Finds all items matching the IDENTITY Closure (i.e.&#160;matching Groovy truth).
     * 
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Returns true if this iterable contains the item.
     *
     *      *      *      *      *      */

/**
     * Returns true if this iterable contains all of the elements
     * in the specified array.
     *
     *      *      *      *           in the specified array
     *      *      */

/**
     * @deprecated use the Iterable variant instead
     *      *      */

/**
     * Modifies this collection by removing its elements that are contained
     * within the specified object array.
     *
     * See also findAll and grep when wanting to produce a new list
     * containing items which don't match some criteria while leaving the original collection unchanged.
     *
     *      *      *      *      *      */

/**
     * Modifies this collection so that it retains only its elements that are contained
     * in the specified array.  In other words, removes from this collection all of
     * its elements that are not contained in the specified array.
     *
     * See also grep and findAll when wanting to produce a new list
     * containing items which match some specified items but leaving the original collection unchanged.
     *
     *      *      *      *      *      */

/**
     * Modifies this collection so that it retains only its elements
     * that are matched according to the specified closure condition.  In other words,
     * removes from this collection all of its elements that don't match.
     *
     * See also findAll and grep when wanting to produce a new list
     * containing items which match some criteria but leaving the original collection unchanged.
     *
     *      *      *      *      *      */

/**
     * Modifies this collection by removing the elements that are matched according
     * to the specified closure condition.
     *
     * See also findAll and grep when wanting to produce a new list
     * containing items which don't match some criteria while leaving the original collection unchanged.
     *
     *      *      *      *      *      */

/**
     * Modifies the collection by adding all of the elements in the specified array to the collection.
     * The behavior of this operation is undefined if
     * the specified array is modified while the operation is in progress.
     *
     * See also plus or the '+' operator if wanting to produce a new collection
     * containing additional items but while leaving the original collection unchanged.
     *
     *      *      *      *      *      */

/**
     * Splits all items into two lists based on the closure condition.
     * The first list contains all items matching the closure expression.
     * The second list all those that don't.
     *
     *      *      *      *      */

/**
     * Splits all items into two collections based on the closure condition.
     * The first list contains all items which match the closure expression.
     * The second list all those that don't.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      */

/**
     * Splits all items into two collections based on the closure condition.
     * The first list contains all items which match the closure expression.
     * The second list all those that don't.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      */

/**
     * Splits all items into two collections based on the closure condition.
     * The first list contains all items which match the closure expression.
     * The second list all those that don't.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      */

/**
     * @deprecated Use the Iterable version of combinations instead
     *      *      */

/**
     * Adds GroovyCollections#combinations(Iterable) as a method on Iterables.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      */

/**
     * Adds GroovyCollections#combinations(Iterable, Closure) as a method on collections.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      *      */

/**
     * Applies a function on each combination of the input lists.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      */

/**
     * Finds all non-null subsequences of a list.
     * 
     * Example usage:
     * 
     *
     *      *      *      */

/**
     * Finds all permutations of an iterable.
     * 
     * Example usage:
     * 
     *
     *      *      *      */

/**
     * @deprecated Use the Iterable version of permutations instead
     *      *      */

/**
     * Finds all permutations of an iterable, applies a function to each permutation and collects the result
     * into a list.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      */

/**
     * @deprecated Use the Iterable version of permutations instead
     *      *      */

/**
     * @deprecated Use the Iterable version of eachPermutation instead
     *      *      */

/**
     * Iterates over all permutations of a collection, running a closure for each iteration.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      */

/**
     * Adds GroovyCollections#transpose(List) as a method on lists.
     * A Transpose Function takes a collection of columns and returns a collection of
     * rows. The first row consists of the first element from each column. Successive
     * rows are constructed similarly.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      */

/**
     * Finds all entries matching the closure condition. If the
     * closure takes one parameter then it will be passed the Map.Entry.
     * Otherwise if the closure should take two parameters, which will be
     * the key and the value.
     * 
     * If the self map is one of TreeMap, LinkedHashMap, Hashtable
     * or Properties, the returned Map will preserve that type, otherwise a HashMap will
     * be returned.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      */

/**
     * @deprecated Use the Iterable version of groupBy instead
     *      *      */

/**
     * Sorts all Iterable members into groups determined by the supplied mapping closure.
     * The closure should return the key that this item should be grouped by. The returned
     * LinkedHashMap will have an entry for each distinct key returned from the closure,
     * with each value being a list of items for that group.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      */

/**
     * Sorts all array members into groups determined by the supplied mapping closure.
     * The closure should return the key that this item should be grouped by. The returned
     * LinkedHashMap will have an entry for each distinct key returned from the closure,
     * with each value being a list of items for that group.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      *      */

/**
     * @deprecated Use the Iterable version of groupBy instead
     *      *      */

/**
     * Sorts all array members into (sub)groups determined by the supplied
     * mapping closures as per the Iterable variant of this method.
     *
     *      *      *      *      *      *      */

/**
     * @deprecated Use the Iterable version of groupBy instead
     *      *      */

/**
     * Sorts all array members into (sub)groups determined by the supplied
     * mapping closures as per the list variant of this method.
     *
     *      *      *      *      *      *      */

/**
     * @deprecated Use the Iterable version of countBy instead
     *      *      */

/**
     * Sorts all collection members into groups determined by the supplied mapping
     * closure and counts the group size.  The closure should return the key that each
     * item should be grouped by.  The returned Map will have an entry for each
     * distinct key returned from the closure, with each value being the frequency of
     * items occurring for that group.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      */

/**
     * Sorts all array members into groups determined by the supplied mapping
     * closure and counts the group size.  The closure should return the key that each
     * item should be grouped by.  The returned Map will have an entry for each
     * distinct key returned from the closure, with each value being the frequency of
     * items occurring for that group.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      *      */

/**
     * Sorts all iterator items into groups determined by the supplied mapping
     * closure and counts the group size.  The closure should return the key that each
     * item should be grouped by.  The returned Map will have an entry for each
     * distinct key returned from the closure, with each value being the frequency of
     * items occurring for that group.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      *      */

/**
     * Groups all map entries into groups determined by the
     * supplied mapping closure. The closure will be passed a Map.Entry or
     * key and value (depending on the number of parameters the closure accepts)
     * and should return the key that each item should be grouped under.  The
     * resulting map will have an entry for each 'group' key returned by the
     * closure, with values being the list of map entries that belong to each
     * group. (If instead of a list of map entries, you want an actual map
     * use {code}groupBy{code}.)
     * 
     *
     *      *      *      *      */

/**
     * Groups the members of a map into groups determined by the
     * supplied mapping closure and counts the frequency of the created groups.
     * The closure will be passed a Map.Entry or
     * key and value (depending on the number of parameters the closure accepts)
     * and should return the key that each item should be grouped under.  The
     * resulting map will have an entry for each 'group' key returned by the
     * closure, with values being the frequency counts for that 'group'.
     * 
     * 
     *
     *      *      *      *      */

/**
     * Groups the current element according to the value
     *
     *      *      *      *      */

/**
     * Performs the same function as the version of inject that takes an initial value, but
     * uses the head of the Collection as the initial value, and iterates over the tail.
     * 
     *
     *      *      *      *      *      *      */

/**
     * Iterates through the given Map, passing in the initial value to
     * the 2-arg Closure along with the first item (or 3-arg Closure along with the first key and value).
     * The result is passed back (injected) into
     * the closure along with the second item. The new result is injected back into
     * the closure along with the third item and so on until the entire collection
     * has been used. Also known as foldLeft or reduce in functional parlance.
     *
     * Examples:
     * 
     *
     *      *      *      *      *      */

/**
     * Iterates through the given Iterator, passing in the initial value to
     * the closure along with the first item. The result is passed back (injected) into
     * the closure along with the second item. The new result is injected back into
     * the closure along with the third item and so on until the Iterator has been
     * expired of values. Also known as foldLeft in functional parlance.
     *
     *      *      *      *      *      *      */

/**
     * Iterates through the given Object, passing in the first value to
     * the closure along with the first item. The result is passed back (injected) into
     * the closure along with the second item. The new result is injected back into
     * the closure along with the third item and so on until further iteration of
     * the object is not possible. Also known as foldLeft in functional parlance.
     *
     *      *      *      *      *      *      */

/**
     * Iterates through the given Object, passing in the initial value to
     * the closure along with the first item. The result is passed back (injected) into
     * the closure along with the second item. The new result is injected back into
     * the closure along with the third item and so on until further iteration of
     * the object is not possible. Also known as foldLeft in functional parlance.
     *
     *      *      *      *      *      *      */

/**
     * Iterates through the given array as with inject(Object[],initialValue,closure), but
     * using the first element of the array as the initialValue, and then iterating
     * the remaining elements of the array.
     *
     *      *      *      *      *      *      */

/**
     * Iterates through the given array, passing in the initial value to
     * the closure along with the first item. The result is passed back (injected) into
     * the closure along with the second item. The new result is injected back into
     * the closure along with the third item and so on until all elements of the array
     * have been used. Also known as foldLeft in functional parlance.
     *
     *      *      *      *      *      *      */

/**
     * @deprecated Use the Iterable version of sum instead
     *      *      */

/**
     * Sums the items in an Iterable.  This is equivalent to invoking the
     * "plus" method on all items in the Iterable.
     * 
     *
     *      *      *      */

/**
     * Sums the items in an array.  This is equivalent to invoking the
     * "plus" method on all items in the array.
     *
     *      *      *      *      */

/**
     * Sums the items from an Iterator.  This is equivalent to invoking the
     * "plus" method on all items from the Iterator. The iterator will become
     * exhausted of elements after determining the sum value.
     *
     *      *      *      */

/**
     * Sums the items in an array.
     * 
     *
     *      *      *      */

/**
     * Sums the items in an array.
     * 
     *
     *      *      *      */

/**
     * Sums the items in an array.
     * 
     *
     *      *      *      */

/**
     * Sums the items in an array.
     * 
     *
     *      *      *      */

/**
     * Sums the items in an array.
     * 
     *
     *      *      *      */

/**
     * Sums the items in an array.
     * 
     *
     *      *      *      */

/**
     * Sums the items in an array.
     * 
     *
     *      *      *      */

/**
     * @deprecated Use the Iterable version of sum instead
     *      *      */

/**
     * Sums the items in an Iterable, adding the result to some initial value.
     * 
     *
     *      *      *      *      */

/**
     * Sums the items in an array, adding the result to some initial value.
     *
     *      *      *      *      */

/**
     * Sums the items from an Iterator, adding the result to some initial value.  This is
     * equivalent to invoking the "plus" method on all items from the Iterator. The iterator
     * will become exhausted of elements after determining the sum value.
     *
     *      *      *      *      */

/**
     * Sums the items in an array, adding the result to some initial value.
     * 
     *
     *      *      *      *      */

/**
     * Sums the items in an array, adding the result to some initial value.
     * 
     *
     *      *      *      *      */

/**
     * Sums the items in an array, adding the result to some initial value.
     * 
     *
     *      *      *      *      */

/**
     * Sums the items in an array, adding the result to some initial value.
     * 
     *
     *      *      *      *      */

/**
     * Sums the items in an array, adding the result to some initial value.
     * 
     *
     *      *      *      *      */

/**
     * Sums the items in an array, adding the result to some initial value.
     * 
     *
     *      *      *      *      */

/**
     * Sums the items in an array, adding the result to some initial value.
     * 
     *
     *      *      *      *      */

/**
     * @deprecated Use the Iterable version of sum instead
     *      *      */

/**
     * Sums the result of apply a closure to each item of an Iterable.
     * coll.sum(closure) is equivalent to:
     * coll.collect(closure).sum().
     * 
     *
     *      *      *      *         item of the Iterable.
     *      */

/**
     * Sums the result of apply a closure to each item of an array.
     * array.sum(closure) is equivalent to:
     * array.collect(closure).sum().
     *
     *      *      *      *         item of the array.
     *      */

/**
     * Sums the result of apply a closure to each item returned from an iterator.
     * iter.sum(closure) is equivalent to:
     * iter.collect(closure).sum(). The iterator will become
     * exhausted of elements after determining the sum value.
     *
     *      *      *      *         item from the Iterator.
     *      */

/**
     * @deprecated Use the Iterable version of sum instead
     *      *      */

/**
     * Sums the result of applying a closure to each item of an Iterable to some initial value.
     * coll.sum(initVal, closure) is equivalent to:
     * coll.collect(closure).sum(initVal).
     * 
     *
     *      *      *      *      *         item of the collection.
     *      */

/**
     * Sums the result of applying a closure to each item of an array to some initial value.
     * array.sum(initVal, closure) is equivalent to:
     * array.collect(closure).sum(initVal).
     *
     *      *      *      *      *         item of the array.
     *      */

/**
     * Sums the result of applying a closure to each item of an Iterator to some initial value.
     * iter.sum(initVal, closure) is equivalent to:
     * iter.collect(closure).sum(initVal). The iterator will become
     * exhausted of elements after determining the sum value.
     *
     *      *      *      *      *         item from the Iterator.
     *      */

/**
     * Concatenates the toString() representation of each
     * item from the iterator, with the given String as a separator between
     * each item. The iterator will become exhausted of elements after
     * determining the resulting conjoined value.
     *
     *      *      *      *      */

/**
     * @deprecated Use the Iterable version of join instead
     *      *      */

/**
     * Concatenates the toString() representation of each
     * item in this Iterable, with the given String as a separator between each item.
     * 
     *
     *      *      *      *      */

/**
     * Concatenates the toString() representation of each
     * items in this array, with the given String as a separator between each
     * item.
     *
     *      *      *      *      */

/**
     * Concatenates the string representation of each
     * items in this array, with the given String as a separator between each
     * item.
     *
     *      *      *      *      */

/**
     * Concatenates the string representation of each
     * items in this array, with the given String as a separator between each
     * item.
     *
     *      *      *      *      */

/**
     * Concatenates the string representation of each
     * items in this array, with the given String as a separator between each
     * item.
     *
     *      *      *      *      */

/**
     * Concatenates the string representation of each
     * items in this array, with the given String as a separator between each
     * item.
     *
     *      *      *      *      */

/**
     * Concatenates the string representation of each
     * items in this array, with the given String as a separator between each
     * item.
     *
     *      *      *      *      */

/**
     * Concatenates the string representation of each
     * items in this array, with the given String as a separator between each
     * item.
     *
     *      *      *      *      */

/**
     * Concatenates the string representation of each
     * items in this array, with the given String as a separator between each
     * item.
     *
     *      *      *      *      */

/**
     * Concatenates the string representation of each
     * items in this array, with the given String as a separator between each
     * item.
     *
     *      *      *      *      */

/**
     * @deprecated Use the Iterable version of min instead
     *      *      */

/**
     * Adds min() method to Collection objects.
     * 
     *
     *      *      *      *      */

/**
     * Adds min() method to Iterator objects. The iterator will become
     * exhausted of elements after determining the minimum value.
     *
     *      *      *      *      */

/**
     * Adds min() method to Object arrays.
     *
     *      *      *      *      */

/**
     * @deprecated Use the Iterable version of min instead
     *      *      */

/**
     * Selects the minimum value found in the Iterable using the given comparator.
     * 
     *
     *      *      *      *      */

/**
     * Selects the minimum value found from the Iterator using the given comparator.
     *
     *      *      *      *      *      */

/**
     * Selects the minimum value found from the Object array using the given comparator.
     *
     *      *      *      *      *      */

/**
     * @deprecated Use the Iterable version of min instead
     *      *      */

/**
     * Selects the minimum value found from the Iterator
     * using the closure to determine the correct ordering.
     * The iterator will become
     * exhausted of elements after this operation.
     * 
     * If the closure has two parameters
     * it is used like a traditional Comparator. I.e. it should compare
     * its two parameters for order, returning a negative integer,
     * zero, or a positive integer when the first parameter is less than,
     * equal to, or greater than the second respectively. Otherwise,
     * the Closure is assumed to take a single parameter and return a
     * Comparable (typically an Integer) which is then used for
     * further comparison.
     *
     *      *      *      *      *      */

/**
     * Selects the minimum value found from the Object array
     * using the closure to determine the correct ordering.
     * 
     * If the closure has two parameters
     * it is used like a traditional Comparator. I.e. it should compare
     * its two parameters for order, returning a negative integer,
     * zero, or a positive integer when the first parameter is less than,
     * equal to, or greater than the second respectively. Otherwise,
     * the Closure is assumed to take a single parameter and return a
     * Comparable (typically an Integer) which is then used for
     * further comparison.
     *
     *      *      *      *      *      */

/**
     * @deprecated Use the Iterable version of max instead
     *      *      */

/**
     * Adds max() method to Iterable objects.
     * 
     *
     *      *      *      *      */

/**
     * Adds max() method to Iterator objects. The iterator will become
     * exhausted of elements after determining the maximum value.
     *
     *      *      *      *      */

/**
     * Adds max() method to Object arrays.
     *
     *      *      *      *      */

/**
     * @deprecated Use the Iterable version of max instead
     *      *      */

/**
     * Selects the maximum value found from the Iterator
     * using the closure to determine the correct ordering.
     * The iterator will become exhausted of elements after this operation.
     * 
     * If the closure has two parameters
     * it is used like a traditional Comparator. I.e. it should compare
     * its two parameters for order, returning a negative integer,
     * zero, or a positive integer when the first parameter is less than,
     * equal to, or greater than the second respectively. Otherwise,
     * the Closure is assumed to take a single parameter and return a
     * Comparable (typically an Integer) which is then used for
     * further comparison.
     *
     *      *      *      *      *      */

/**
     * Selects the maximum value found from the Object array
     * using the closure to determine the correct ordering.
     * 
     * If the closure has two parameters
     * it is used like a traditional Comparator. I.e. it should compare
     * its two parameters for order, returning a negative integer,
     * zero, or a positive integer when the first parameter is less than,
     * equal to, or greater than the second respectively. Otherwise,
     * the Closure is assumed to take a single parameter and return a
     * Comparable (typically an Integer) which is then used for
     * further comparison.
     *
     *      *      *      *      *      */

/**
     * @deprecated Use the Iterable version of max instead
     *      *      */

/**
     * Selects the maximum value found in the Iterable using the given comparator.
     * 
     *
     *      *      *      *      */

/**
     * Selects the maximum value found from the Iterator using the given comparator.
     *
     *      *      *      *      */

/**
     * Selects the maximum value found from the Object array using the given comparator.
     *
     *      *      *      *      */

/**
     * Returns indices of the collection.
     * 
     * Example:
     * 
     *
     *      *      *      */

/**
     * Returns indices of the array.
     * 
     * Example:
     * 
     *
     *      *      *      */

/**
     * Provide the standard Groovy size() method for Iterator.
     * The iterator will become exhausted of elements after determining the size value.
     *
     *      *      *      */

/**
     * Provide the standard Groovy size() method for Iterable.
     * 
     *
     *      *      *      */

/**
     * Provide the standard Groovy size() method for an array.
     *
     *      *      *      */

/**
     * Support the range subscript operator for a List.
     * 
     *
     *      *      *      *
     *      */

/**
     * Select a List of items from an eager or lazy List using a Collection to
     * identify the indices to be selected.
     * 
     *
     *      *      *
     *      */

/**
     * Support the range subscript operator for an eager or lazy List.
     * 
     *
     *      *      *
     *      */

/**
     * Support the range subscript operator for an eager or lazy List.
     * 
     *
     *      *      *
     *      *
     */

/**
     * Support the range subscript operator for a List.
     * 
     *
     *      *      *      *
     *      */

/**
     * Select a List of items from a List using a Collection to
     * identify the indices to be selected.
     * 
     *
     *      *      *      *      */

/**
     * Select a List of items from an array using a Collection to
     * identify the indices to be selected.
     *
     *      *      *      *      */

/**
     * Creates a sub-Map containing the given keys. This method is similar to
     * List.subList() but uses keys rather than index ranges.
     * 
     *
     *      *      *      *      */

/**
     * Creates a sub-Map containing the given keys. This method is similar to
     * List.subList() but uses keys rather than index ranges. The original
     * map is unaltered.
     * 
     *
     *      *      *      *      */

/**
     * Looks up an item in a Map for the given key and returns the value - unless
     * there is no entry for the given key in which case add the default value
     * to the map and return that.
     * 
     *
     *      *      *      *                     there is no entry for the given key
     *      *         key did not exist
     *      */

/**
     * Support the range subscript operator for an Array
     *
     *      *      *      *         including the range's to value
     *      */

/**
     *
     *      *      *      *         including the range's to value
     *      */

/**
     *
     *      *      *      *      */

/**
     *
     *      *      *      *         including the range's to value
     *      */

/**
     * Allows conversion of arrays into a mutable List.
     *
     *      *      *      */

/**
     * Support the subscript operator for a List.
     * 
     *
     *      *      *      *      */

/**
     * Support the subscript operator for an Iterable. Typical usage:
     * 
     *
     *      *      *      *      */

/**
     * A helper method to allow lists to work with subscript operators.
     * 
     *
     *      *      *      *      */

/**
     * A helper method to allow lists to work with subscript operators.
     * 
     *
     *      *      *      *      */

/**
     * A helper method to allow lists to work with subscript operators.
     * 
     *
     *      *      *      *      *      */

/**
     * List subscript assignment operator when given a range as the index and
     * the assignment operand is a collection.
     * Example: 
     *
     * Items in the given
     * range are replaced with items from the collection.
     *
     *      *      *      *      */

/**
     * List subscript assignment operator when given a range as the index.
     * Example: 
     *
     * Items in the given
     * range are replaced with the operand.  The value operand is
     * always treated as a single value.
     *
     *      *      *      *      */

/**
     * A helper method to allow lists to work with subscript operators.
     * 
     *
     *      *      *      *      */

/**
     * A helper method to allow lists to work with subscript operators.
     * 
     *
     *      *      *      *      */

/**
     * Support the subscript operator for a Map.
     * 
     *
     *      *      *      *      */

/**
     * Returns a new Map containing all entries from left and right,
     * giving precedence to right.  Any keys appearing in both Maps
     * will appear in the resultant map with values from the right
     * operand. If the left map is one of TreeMap, LinkedHashMap, Hashtable
     * or Properties, the returned Map will preserve that type, otherwise a HashMap will
     * be returned.
     * 
     * Roughly equivalent to Map m = new HashMap(); m.putAll(left); m.putAll(right); return m;
     * but with some additional logic to preserve the left Map type for common cases as
     * described above.
     * 
     *
     *      *      *      *      */

/**
     * A helper method to allow maps to work with subscript operators
     *
     *      *      *      *      *      */

/**
     * Support the subscript operator for Collection.
     * 
     *
     *      *      *      *      */

/**
     * A convenience method for creating an immutable map.
     *
     *      *      *      *      */

/**
     * A convenience method for creating an immutable sorted map.
     *
     *      *      *      *      */

/**
     * A convenience method for creating an immutable list
     *
     *      *      *      *      */

/**
     * A convenience method for creating an immutable list.
     *
     *      *      *      *      */

/**
     * A convenience method for creating an immutable sorted set.
     *
     *      *      *      *      */

/**
     * A convenience method for creating an immutable Collection.
     * 
     *
     *      *      *      *      */

/**
     * A convenience method for creating a synchronized Map.
     *
     *      *      *      *      */

/**
     * A convenience method for creating a synchronized SortedMap.
     *
     *      *      *      *      */

/**
     * A convenience method for creating a synchronized Collection.
     *
     *      *      *      *      */

/**
     * A convenience method for creating a synchronized List.
     *
     *      *      *      *      */

/**
     * A convenience method for creating a synchronized Set.
     *
     *      *      *      *      */

/**
     * A convenience method for creating a synchronized SortedSet.
     *
     *      *      *      *      */

/**
     * Synonym for {@link #toSpreadMap(java.util.Map)}.
     *      *      *      */

/**
     * Returns a new SpreadMap from this map.
     * 
     * The example below shows the various possible use cases:
     * 
     * Note that toSpreadMap() is not normally used explicitly but under the covers by Groovy.
     *
     *      *      *      *      */

/**
     * Creates a spreadable map from this array.
     * 
     *      *      *      *      *      */

/**
     * Creates a spreadable map from this list.
     * 
     *      *      *      *      *      */

/**
     * Creates a spreadable map from this iterable.
     * 
     *      *      *      *      *      */

/**
     * Wraps a map using the decorator pattern with a wrapper that intercepts all calls
     * to get(key). If an unknown key is found, a default value will be
     * stored into the Map before being returned. The default value stored will be the
     * result of calling the supplied Closure with the key as the parameter to the Closure.
     * Example usage:
     * 
     *
     *      *      *      *      */

/**
     * An alias for withLazyDefault which decorates a list allowing
     * it to grow when called with index values outside the normal list bounds.
     *
     *      *      *      *      *      *      */

/**
     * Zips an Iterable with indices in (value, index) order.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      */

/**
     * Zips an Iterable with indices in (index, value) order.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      */

/**
     * Zips an Iterable with indices in (value, index) order.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      *      */

/**
     * Zips an Iterable with indices in (index, value) order.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      *      */

/**
     * Zips an iterator with indices in (value, index) order.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      */

/**
     * Zips an iterator with indices in (index, value) order.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      */

/**
     * Zips an iterator with indices in (value, index) order.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      *      */

/**
     * Zips an iterator with indices in (index, value) order.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      *      */

/**
     * @deprecated Use the Iterable version of sort instead
     *      *      */

/**
     * Sorts the Collection. Assumes that the collection items are comparable
     * and uses their natural ordering to determine the resulting order.
     * If the Collection is a List, it is sorted in place and returned.
     * Otherwise, the elements are first placed into a new list which is then
     * sorted and returned - leaving the original Collection unchanged.
     * 
     *
     *      *      *      *      */

/**
     * @deprecated Use the Iterable version of sort instead
     *      *      */

/**
     * Sorts the Iterable. Assumes that the Iterable items are
     * comparable and uses their natural ordering to determine the resulting order.
     * If the Iterable is a List and mutate is true,
     * it is sorted in place and returned. Otherwise, the elements are first placed
     * into a new list which is then sorted and returned - leaving the original Iterable unchanged.
     * 
     *
     *      *      *      *      */

/**
     * Sorts the elements from the given map into a new ordered map using
     * the closure as a comparator to determine the ordering.
     * The original map is unchanged.
     * 
     *
     *      *      *      *      */

/**
     * Sorts the elements from the given map into a new ordered Map using
     * the specified key comparator to determine the ordering.
     * The original map is unchanged.
     * 
     *
     *      *      *      *      */

/**
     * Sorts the elements from the given map into a new ordered Map using
     * the natural ordering of the keys to determine the ordering.
     * The original map is unchanged.
     * 
     *
     *      *      *      */

/**
     * Modifies this array so that its elements are in sorted order.
     * The array items are assumed to be comparable.
     *
     *      *      *      */

/**
     * Sorts the given array into sorted order.
     * The array items are assumed to be comparable.
     * If mutate is true, the array is sorted in place and returned. Otherwise, a new sorted
     * array is returned and the original array remains unchanged.
     * 
     *
     *      *      *      *      */

/**
     * Sorts the given iterator items into a sorted iterator. The items are
     * assumed to be comparable. The original iterator will become
     * exhausted of elements after completing this method call.
     * A new iterator is produced that traverses the items in sorted order.
     *
     *      *      *      */

/**
     * Sorts the given iterator items into a sorted iterator using the comparator. The
     * original iterator will become exhausted of elements after completing this method call.
     * A new iterator is produced that traverses the items in sorted order.
     *
     *      *      *      *      */

/**
     * @deprecated Use the Iterable version of sort instead
     *      *      */

/**
     * @deprecated Use the Iterable version of sort instead
     *      *      */

/**
     * Sorts the Iterable using the given Comparator. If the Iterable is a List and mutate
     * is true, it is sorted in place and returned. Otherwise, the elements are first placed
     * into a new list which is then sorted and returned - leaving the original Iterable unchanged.
     * 
     *
     *      *      *      *      *      */

/**
     * Sorts the given array into sorted order using the given comparator.
     *
     *      *      *      *      */

/**
     * Modifies this array so that its elements are in sorted order as determined by the given comparator.
     * If mutate is true, the array is sorted in place and returned. Otherwise, a new sorted
     * array is returned and the original array remains unchanged.
     * 
     *
     *      *      *      *      *      */

/**
     * Sorts the given iterator items into a sorted iterator using the Closure to determine the correct ordering.
     * The original iterator will be fully processed after the method call.
     * 
     * If the closure has two parameters it is used like a traditional Comparator.
     * I.e.&#160;it should compare its two parameters for order, returning a negative integer,
     * zero, or a positive integer when the first parameter is less than, equal to,
     * or greater than the second respectively. Otherwise, the Closure is assumed
     * to take a single parameter and return a Comparable (typically an Integer)
     * which is then used for further comparison.
     *
     *      *      *      *      */

/**
     * Sorts the elements from this array into a newly created array using
     * the Closure to determine the correct ordering.
     * 
     * If the closure has two parameters it is used like a traditional Comparator. I.e. it should compare
     * its two parameters for order, returning a negative integer, zero, or a positive integer when the
     * first parameter is less than, equal to, or greater than the second respectively. Otherwise,
     * the Closure is assumed to take a single parameter and return a Comparable (typically an Integer)
     * which is then used for further comparison.
     *
     *      *      *      *      */

/**
     * @deprecated Use the Iterable version of sort instead
     *      *      */

/**
     * @deprecated Use the Iterable version of sort instead
     *      *      */

/**
     * Avoids doing unnecessary work when sorting an already sorted set (i.e. an identity function for an already sorted set).
     *
     *      *      *      */

/**
     * Avoids doing unnecessary work when sorting an already sorted map (i.e. an identity function for an already sorted map).
     *
     *      *      *      */

/**
     * Sorts the Iterable. Assumes that the Iterable elements are
     * comparable and uses a {@link NumberAwareComparator} to determine the resulting order.
     * {@code NumberAwareComparator} has special treatment for numbers but otherwise uses the
     * natural ordering of the Iterable elements. The elements are first placed into a new list which
     * is then sorted and returned - leaving the original Iterable unchanged.
     * 
     *
     *      *      *      *      */

/**
     * Sorts the Iterable using the given Comparator. The elements are first placed
     * into a new list which is then sorted and returned - leaving the original Iterable unchanged.
     * 
     *
     *      *      *      *      */

/**
     * Sorts the Iterator. Assumes that the Iterator elements are
     * comparable and uses a {@link NumberAwareComparator} to determine the resulting order.
     * {@code NumberAwareComparator} has special treatment for numbers but otherwise uses the
     * natural ordering of the Iterator elements.
     * A new iterator is produced that traverses the items in sorted order.
     *
     *      *      *      *      */

/**
     * Sorts the given iterator items using the comparator. The
     * original iterator will become exhausted of elements after completing this method call.
     * A new iterator is produced that traverses the items in sorted order.
     *
     *      *      *      *      */

/**
     * Sorts the given iterator items into a sorted iterator using the Closure to determine the correct ordering.
     * The original iterator will be fully processed after the method call.
     * 
     * If the closure has two parameters it is used like a traditional Comparator.
     * I.e.&#160;it should compare its two parameters for order, returning a negative integer,
     * zero, or a positive integer when the first parameter is less than, equal to,
     * or greater than the second respectively. Otherwise, the Closure is assumed
     * to take a single parameter and return a Comparable (typically an Integer)
     * which is then used for further comparison.
     *
     *      *      *      *      *      */

/**
     * Returns a sorted version of the given array using the supplied comparator.
     *
     *      *      *      *      */

/**
     * Returns a sorted version of the given array using the supplied comparator to determine the resulting order.
     * 
     *
     *      *      *      *      */

/**
     * Sorts the elements from this array into a newly created array using
     * the Closure to determine the correct ordering.
     * 
     * If the closure has two parameters it is used like a traditional Comparator. I.e. it should compare
     * its two parameters for order, returning a negative integer, zero, or a positive integer when the
     * first parameter is less than, equal to, or greater than the second respectively. Otherwise,
     * the Closure is assumed to take a single parameter and return a Comparable (typically an Integer)
     * which is then used for further comparison.
     *
     *      *      *      *      *      */

/**
     * Sorts the elements from the given map into a new ordered map using
     * a {@link NumberAwareComparator} on map entry values to determine the resulting order.
     * {@code NumberAwareComparator} has special treatment for numbers but otherwise uses the
     * natural ordering of the Iterator elements. The original map is unchanged.
     * 
     *
     *      *      *      */

/**
     * Sorts the elements from the given map into a new ordered map using
     * the supplied comparator to determine the ordering. The original map is unchanged.
     * 
     *
     *      *      *      *      */

/**
     * Avoids doing unnecessary work when sorting an already sorted set
     *
     *      *      *      */

/**
     * Avoids doing unnecessary work when sorting an already sorted map
     *
     *      *      *      */

/**
     * Removes the last item from the List. Using add() and pop()
     * is similar to push and pop on a Stack.
     * 
     *
     *      *      *      *      */

/**
     * Provides an easy way to append multiple Map.Entry values to a Map.
     *
     *      *      *      *      */

/**
     * Returns a new Map containing all entries from self and entries,
     * giving precedence to entries.  Any keys appearing in both Maps
     * will appear in the resultant map with values from the entries
     * operand. If self map is one of TreeMap, LinkedHashMap, Hashtable
     * or Properties, the returned Map will preserve that type, otherwise a HashMap will
     * be returned.
     *
     *      *      *      *      */

/**
     * Appends an item to the List. Synonym for add().
     * 
     *
     *      *      *      *            Collection.add method).
     *      *      */

/**
     * Returns the last item from the List.
     * 
     *
     *      *      *      *      */

/**
     * Returns the last item from the Iterable.
     * 
     * The first element returned by the Iterable's iterator is returned.
     * If the Iterable doesn't guarantee a defined order it may appear like
     * a random element is returned.
     *
     *      *      *      *      */

/**
     * Returns the last item from the array.
     * 
     *
     *      *      *      *      */

/**
     * Returns the first item from the List.
     * 
     *
     *      *      *      *      */

/**
     * Returns the first item from the Iterable.
     * 
     * The first element returned by the Iterable's iterator is returned.
     * If the Iterable doesn't guarantee a defined order it may appear like
     * a random element is returned.
     *
     *      *      *      *      */

/**
     * Returns the first item from the array.
     * 
     *
     *      *      *      *      */

/**
     * Returns the first item from the Iterable.
     * 
     * The first element returned by the Iterable's iterator is returned.
     * If the Iterable doesn't guarantee a defined order it may appear like
     * a random element is returned.
     *
     *      *      *      *      */

/**
     * Returns the first item from the List.
     * 
     *
     *      *      *      *      */

/**
     * Returns the first item from the Object array.
     * 
     *
     *      *      *      *      */

/**
     * Returns the items from the List excluding the first item.
     * 
     *
     *      *      *      *      */

/**
     * Returns the items from the SortedSet excluding the first item.
     * 
     *
     *      *      *      *      */

/**
     * Returns the items from the Iterable excluding the first item.
     * 
     *
     *      *      *      *      */

/**
     * Returns the items from the array excluding the first item.
     * 
     *
     *      *      *      *      */

/**
     * Returns the original iterator after throwing away the first element.
     *
     *      *      *      *      */

/**
     * Returns the items from the Iterable excluding the last item. Leaves the original Iterable unchanged.
     * 
     *
     *      *      *      *      */

/**
     * Returns the items from the List excluding the last item. Leaves the original List unchanged.
     * 
     *
     *      *      *      *      */

/**
     * Returns the items from the SortedSet excluding the last item. Leaves the original SortedSet unchanged.
     * 
     *
     *      *      *      *      */

/**
     * Returns an Iterator containing all of the items from this iterator except the last one.
     * 
     *
     *      *      *      *      */

/**
     * Returns the items from the Object array excluding the last item.
     * 
     *
     *      *      *      *      */

/**
     * Returns the first num elements from the head of this List.
     * 
     *
     *      *      *      *         or else all the elements from the List if it has less then num elements.
     *      */

/**
     * Returns the first num elements from the head of this SortedSet.
     * 
     *
     *      *      *      *         or else all the elements from the SortedSet if it has less then num elements.
     *      */

/**
     * Returns the first num elements from the head of this array.
     * 
     *
     *      *      *      *         or else the whole array if it has less then num elements.
     *      */

/**
     * Returns the first num elements from the head of this Iterable.
     * 
     *
     *      *      *      *         or else all the elements from the Iterable if it has less then num elements.
     *      */

/**
     * Adds all items from the iterator to the Collection.
     *
     *      *      *      */

/**
     * Adds all items from the iterable to the Collection.
     *
     *      *      *      */

/**
     * Returns a new map containing the first num elements from the head of this map.
     * If the map instance does not have ordered keys, then this function could return a random num
     * entries. Groovy by default uses LinkedHashMap, so this shouldn't be an issue in the main.
     * 
     *
     *      *      *      *         or else the whole map if it has less then num elements.
     *      */

/**
     * Returns an iterator of up to the first num elements from this iterator.
     * The original iterator is stepped along by num elements.
     * 
     *
     *      *      *      *      */

/**
     * Returns the last num elements from the tail of this array.
     * 
     *
     *      *      *      *         or else the whole array if it has less then num elements.
     *      */

/**
     * Returns the last num elements from the tail of this List.
     * 
     *
     *      *      *      *         or else all the elements from the List if it has less then num elements.
     *      */

/**
     * Returns the last num elements from the tail of this SortedSet.
     * 
     *
     *      *      *      *         or else all the elements from the SortedSet if it has less then num elements.
     *      */

/**
     * Drops the given number of elements from the head of this List.
     * 
     *
     *      *      *      *         or an empty list if it has less then num elements.
     *      */

/**
     * Drops the given number of elements from the head of this List.
     * 
     *
     *      *      *      *         or an empty list if it has less then num elements.
     *      */

/**
     * Drops the given number of elements from the head of this Iterable.
     * 
     *
     *      *      *      *         or an empty list if it has less then num elements.
     *      */

/**
     * Drops the given number of elements from the head of this array
     * if they are available.
     * 
     *
     *      *      *      *         first num ones, or else the empty array, if this
     *         array has less than num elements.
     *      */

/**
     * Drops the given number of key/value pairs from the head of this map if they are available.
     * 
     * If the map instance does not have ordered keys, then this function could drop a random num
     * entries. Groovy by default uses LinkedHashMap, so this shouldn't be an issue in the main.
     *
     *      *      *      *         num ones, or else the empty map, if this map has
     *         less than num elements.
     *      */

/**
     * Drops the given number of elements from the head of this iterator if they are available.
     * The original iterator is stepped along by num elements.
     * 
     *
     *      *      *      *      */

/**
     * Drops the given number of elements from the tail of this SortedSet.
     * 
     *
     *      *      *      *         or an empty SortedSet if it has less then num elements.
     *      */

/**
     * Drops the given number of elements from the tail of this List.
     * 
     *
     *      *      *      *         or an empty List if it has less then num elements.
     *      */

/**
     * Drops the given number of elements from the tail of this Iterable.
     * 
     *
     *      *      *      *         or an empty list if it has less then num elements.
     *      */

/**
     * Drops the given number of elements from the tail of this Iterator.
     * 
     *
     *      *      *      *         or an empty Iterator if it has less then num elements.
     *      */

/**
     * Drops the given number of elements from the tail of this array
     * if they are available.
     * 
     *
     *      *      *      *         last num ones, or else the empty array, if this
     *         array has less than num elements.
     *      */

/**
     * Returns the longest prefix of this list where each element
     * passed to the given closure condition evaluates to true.
     * Similar to {@link #takeWhile(Iterable, groovy.lang.Closure)}
     * except that it attempts to preserve the type of the original list.
     * 
     *
     *      *      *                  continue taking elements
     *      *         the given closure evaluates to true
     *      */

/**
     * Returns a Collection containing the longest prefix of the elements from this Iterable
     * where each element passed to the given closure evaluates to true.
     * 
     *
     *      *      *                  continue taking elements
     *      *         each element passed to the given closure evaluates to true
     *      */

/**
     * Returns the longest prefix of this SortedSet where each element
     * passed to the given closure condition evaluates to true.
     * Similar to {@link #takeWhile(Iterable, groovy.lang.Closure)}
     * except that it attempts to preserve the type of the original SortedSet.
     * 
     *
     *      *      *                  continue taking elements
     *      *         the given closure evaluates to true
     *      */

/**
     * Returns the longest prefix of this array where each element
     * passed to the given closure evaluates to true.
     * 
     *
     *      *      *                  continue taking elements
     *      *         the given closure evaluates to true
     *      */

/**
     * Returns the longest prefix of elements in this iterator where
     * each element passed to the given condition closure evaluates to true.
     * 
     * 
     *
     *      *      *                  continue taking elements
     *      *         element passed to the given closure evaluates to true
     *      */

/**
     * Returns a suffix of this SortedSet where elements are dropped from the front
     * while the given Closure evaluates to true.
     * Similar to {@link #dropWhile(Iterable, groovy.lang.Closure)}
     * except that it attempts to preserve the type of the original SortedSet.
     * 
     *
     *      *      *      *         evaluates to true for each element dropped from the front of the SortedSet
     *      */

/**
     * Returns a suffix of this List where elements are dropped from the front
     * while the given Closure evaluates to true.
     * Similar to {@link #dropWhile(Iterable, groovy.lang.Closure)}
     * except that it attempts to preserve the type of the original list.
     * 
     *
     *      *      *      *         evaluates to true for each element dropped from the front of the List
     *      */

/**
     * Returns a suffix of this Iterable where elements are dropped from the front
     * while the given closure evaluates to true.
     * 
     *
     *      *      *      *         evaluates to true for each element dropped from the front of the Iterable
     *      */

/**
     * Create a suffix of the given array by dropping as many elements as possible from the
     * front of the original array such that calling the given closure condition evaluates to
     * true when passed each of the dropped elements.
     * 
     *
     *      *      *                  continue dropping elements
     *      *         evaluates to true for each element dropped from the front of the array
     *      */

/**
     * Converts this Iterable to a Collection. Returns the original Iterable
     * if it is already a Collection.
     * 
     * Example usage:
     * 
     *
     *      *      *      */

/**
     * @deprecated Use the Iterable version of asList instead
     *      *      */

/**
     * Converts this Iterable to a List. Returns the original Iterable
     * if it is already a List.
     * 
     * Example usage:
     * 
     *
     *      *      *      */

/**
     * Coerce an object instance to a boolean value.
     * An object is coerced to true if it's not null, to false if it is null.
     *
     *      *      *      */

/**
     * Coerce an Boolean instance to a boolean value.
     *
     *      *      *      */

/**
     * Coerce a collection instance to a boolean value.
     * A collection is coerced to false if it's empty, and to true otherwise.
     * 
     *
     *      *      *      */

/**
     * Coerce a map instance to a boolean value.
     * A map is coerced to false if it's empty, and to true otherwise.
     * 
     *
     *      *      *      */

/**
     * Coerce an iterator instance to a boolean value.
     * An iterator is coerced to false if there are no more elements to iterate over,
     * and to true otherwise.
     *
     *      *      *      */

/**
     * Coerce an enumeration instance to a boolean value.
     * An enumeration is coerced to false if there are no more elements to enumerate,
     * and to true otherwise.
     *
     *      *      *      */

/**
     * Coerce an Object array to a boolean value.
     * An Object array is false if the array is of length 0.
     * and to true otherwise
     *
     *      *      *      */

/**
     * Coerces a byte array to a boolean value.
     * A byte array is false if the array is of length 0,
     * and true otherwise.
     *
     *      *      *      */

/**
     * Coerces a short array to a boolean value.
     * A short array is false if the array is of length 0,
     * and true otherwise.
     *
     *      *      *      */

/**
     * Coerces an int array to a boolean value.
     * An int array is false if the array is of length 0,
     * and true otherwise.
     *
     *      *      *      */

/**
     * Coerces a long array to a boolean value.
     * A long array is false if the array is of length 0,
     * and true otherwise.
     *
     *      *      *      */

/**
     * Coerces a float array to a boolean value.
     * A float array is false if the array is of length 0,
     * and true otherwise.
     *
     *      *      *      */

/**
     * Coerces a double array to a boolean value.
     * A double array is false if the array is of length 0,
     * and true otherwise.
     *
     *      *      *      */

/**
     * Coerces a boolean array to a boolean value.
     * A boolean array is false if the array is of length 0,
     * and true otherwise.
     *
     *      *      *      */

/**
     * Coerces a char array to a boolean value.
     * A char array is false if the array is of length 0,
     * and true otherwise.
     *
     *      *      *      */

/**
     * Coerce a character to a boolean value.
     * A character is coerced to false if it's character value is equal to 0,
     * and to true otherwise.
     *
     *      *      *      */

/**
     * Coerce a number to a boolean value.
     * A number is coerced to false if its double value is equal to 0, and to true otherwise,
     * and to true otherwise.
     *
     *      *      *      */

/**
     * Converts the given collection to another type. A default concrete
     * type is used for List, Set, or SortedSet. If the given type has
     * a constructor taking a collection, that is used. Otherwise, the
     * call is deferred to {link #asType(Object,Class)}.  If this
     * collection is already of the given type, the same instance is
     * returned.
     *
     *      *      *      *      *      */

/**
     * Converts the given array to either a List, Set, or
     * SortedSet.  If the given class is something else, the
     * call is deferred to {link #asType(Object,Class)}.
     *
     *      *      *      *      *      */

/**
     * Coerces the closure to an implementation of the given class.  The class
     * is assumed to be an interface or class with a single method definition.
     * The closure is used as the implementation of that single method.
     *
     *      *      *      *      */

/**
     * Coerces this map to the given type, using the map's keys as the public
     * method names, and values as the implementation.  Typically the value
     * would be a closure which behaves like the method implementation.
     *
     *      *      *      *      */

/**
     * Creates a new List with the identical contents to this list
     * but in reverse order.
     * 
     *
     *      *      *      *      */

/**
     * Reverses the elements in a list. If mutate is true, the original list is modified in place and returned.
     * Otherwise, a new list containing the reversed items is produced.
     * 
     *
     *      *      *      *      */

/**
     * Creates a new array containing items which are the same as this array but in reverse order.
     *
     *      *      *      *      */

/**
     * Reverse the items in an array. If mutate is true, the original array is modified in place and returned.
     * Otherwise, a new array containing the reversed items is produced.
     *
     *      *      *      *      */

/**
     * Reverses the iterator. The original iterator will become
     * exhausted of elements after determining the reversed values.
     * A new iterator for iterating through the reversed values is returned.
     *
     *      *      *      */

/**
     * Create an array as a union of two arrays.
     * 
     *
     *      *      *      *      */

/**
     * Create an array containing elements from an original array plus an additional appended element.
     * 
     *
     *      *      *      *      */

/**
     * Create an array containing elements from an original array plus those from a Collection.
     * 
     *
     *      *      *      *      */

/**
     * Create an array containing elements from an original array plus those from an Iterable.
     * 
     *
     *      *      *      *      */

/**
     * Create a Collection as a union of two collections. If the left collection
     * is a Set, then the returned collection will be a Set otherwise a List.
     * This operation will always create a new object for the result,
     * while the operands remain unchanged.
     * 
     *
     *      *      *      *      */

/**
     * Create a Collection as a union of two iterables. If the left iterable
     * is a Set, then the returned collection will be a Set otherwise a List.
     * This operation will always create a new object for the result,
     * while the operands remain unchanged.
     * 
     *
     *      *      *      *      */

/**
     * Create a Collection as a union of a Collection and an Iterable. If the left collection
     * is a Set, then the returned collection will be a Set otherwise a List.
     * This operation will always create a new object for the result,
     * while the operands remain unchanged.
     *
     *      *      *      *      *      */

/**
     * Create a List as a union of a List and an Iterable.
     * This operation will always create a new object for the result,
     * while the operands remain unchanged.
     *
     *      *      *      *      *      */

/**
     * Create a List as a union of a List and an Collection.
     * This operation will always create a new object for the result,
     * while the operands remain unchanged.
     *
     *      *      *      *      *      */

/**
     * Create a Set as a union of a Set and an Iterable.
     * This operation will always create a new object for the result,
     * while the operands remain unchanged.
     *
     *      *      *      *      *      */

/**
     * Create a Set as a union of a Set and an Collection.
     * This operation will always create a new object for the result,
     * while the operands remain unchanged.
     *
     *      *      *      *      *      */

/**
     * Create a SortedSet as a union of a SortedSet and an Iterable.
     * This operation will always create a new object for the result,
     * while the operands remain unchanged.
     *
     *      *      *      *      *      */

/**
     * Create a SortedSet as a union of a SortedSet and an Collection.
     * This operation will always create a new object for the result,
     * while the operands remain unchanged.
     *
     *      *      *      *      *      */

/**
     * Creates a new List by inserting all of the elements in the given Iterable
     * to the elements from this List at the specified index.
     *
     *      *      *      *      *      *      */

/**
     * Create a collection as a union of a Collection and an Object. If the collection
     * is a Set, then the returned collection will be a Set otherwise a List.
     * This operation will always create a new object for the result,
     * while the operands remain unchanged.
     * 
     *
     *      *      *      *      */

/**
     * Create a collection as a union of an Iterable and an Object. If the iterable
     * is a Set, then the returned collection will be a Set otherwise a List.
     * This operation will always create a new object for the result,
     * while the operands remain unchanged.
     * 
     *
     *      *      *      *      */

/**
     * Create a List as a union of a List and an Object.
     * This operation will always create a new object for the result,
     * while the operands remain unchanged.
     * 
     *
     *      *      *      *      */

/**
     * Create a Set as a union of a Set and an Object.
     * This operation will always create a new object for the result,
     * while the operands remain unchanged.
     * 
     *
     *      *      *      *      */

/**
     * Create a SortedSet as a union of a SortedSet and an Object.
     * This operation will always create a new object for the result,
     * while the operands remain unchanged.
     * 
     *
     *      *      *      *      */

/**
     * @deprecated use the Iterable variant instead
     *      *      */

/**
     * Create a Collection composed of the elements of this Iterable, repeated
     * a certain number of times.  Note that for non-primitive
     * elements, multiple references to the same instance will be added.
     * 
     *
     * Note: if the Iterable happens to not support duplicates, e.g. a Set, then the
     * method will effectively return a Collection with a single copy of the Iterable's items.
     *
     *      *      *      *      */

/**
     * Create a List composed of the elements of this Iterable, repeated
     * a certain number of times.  Note that for non-primitive
     * elements, multiple references to the same instance will be added.
     * 
     *
     * Note: if the Iterable happens to not support duplicates, e.g. a Set, then the
     * method will effectively return a Collection with a single copy of the Iterable's items.
     *
     *      *      *      *      */

/**
     * Create a Collection composed of the intersection of both collections.  Any
     * elements that exist in both collections are added to the resultant collection.
     * 
     *
     *      *      *      *      */

/**
     * Create a Collection composed of the intersection of both iterables.  Any
     * elements that exist in both iterables are added to the resultant collection.
     * 
     *
     *      *      *      *      */

/**
     * Create a List composed of the intersection of a List and an Iterable.  Any
     * elements that exist in both iterables are added to the resultant collection.
     * 
     *
     *      *      *      *      */

/**
     * Create a Set composed of the intersection of a Set and an Iterable.  Any
     * elements that exist in both iterables are added to the resultant collection.
     * 
     *
     *      *      *      *      */

/**
     * Create a SortedSet composed of the intersection of a SortedSet and an Iterable.  Any
     * elements that exist in both iterables are added to the resultant collection.
     * 
     *
     *      *      *      *      */

/**
     * Create a Map composed of the intersection of both maps.
     * Any entries that exist in both maps are added to the resultant map.
     * 
     *
     *      *      *      *      */

/**
     * Returns true if the intersection of two iterables is empty.
     * 
     *
     *      *      *      *         is empty, false otherwise.
     *      */

/**
     * @deprecated use the Iterable variant instead
     *      *      */

/**
     * Compare the contents of this array to the contents of the given array.
     *
     *      *      *      *      */

/**
     * Determines if the contents of this array are equal to the
     * contents of the given list, in the same order.  This returns
     * false if either collection is null.
     *
     *      *      *      *      */

/**
     * Determines if the contents of this list are equal to the
     * contents of the given array in the same order.  This returns
     * false if either collection is null.
     * 
     *
     *      *      *      *      */

/**
     * Compare the contents of two Lists.  Order matters.
     * If numbers exist in the Lists, then they are compared as numbers,
     * for example 2 == 2L. If both lists are null, the result
     * is true; otherwise if either list is null, the result
     * is false.
     * 
     *
     *      *      *      *         false otherwise.
     *      */

/**
     * Compares two Maps treating coerced numerical values as identical.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      */

/**
     * Create a Set composed of the elements of the first Set minus the
     * elements of the given Collection.
     *
     *      *      *      *      */

/**
     * Create a Set composed of the elements of the first Set minus the
     * elements from the given Iterable.
     *
     *      *      *      *      */

/**
     * Create a Set composed of the elements of the first Set minus the given element.
     *
     *      *      *      *      */

/**
     * Create a SortedSet composed of the elements of the first SortedSet minus the
     * elements of the given Collection.
     *
     *      *      *      *      */

/**
     * Create a SortedSet composed of the elements of the first SortedSet minus the
     * elements of the given Iterable.
     *
     *      *      *      *      */

/**
     * Create a SortedSet composed of the elements of the first SortedSet minus the given element.
     *
     *      *      *      *      */

/**
     * Create an array composed of the elements of the first array minus the
     * elements of the given Iterable.
     *
     *      *      *      *      */

/**
     * Create an array composed of the elements of the first array minus the
     * elements of the given array.
     *
     *      *      *      *      */

/**
     * Create a List composed of the elements of the first list minus
     * every occurrence of elements of the given Collection.
     * 
     *
     *      *      *      *      */

/**
     * Create a new Collection composed of the elements of the first Collection minus
     * every occurrence of elements of the given Collection.
     * 
     *
     *      *      *      *      */

/**
     * Create a new List composed of the elements of the first List minus
     * every occurrence of elements of the given Iterable.
     * 
     *
     *      *      *      *      */

/**
     * Create a new Collection composed of the elements of the first Iterable minus
     * every occurrence of elements of the given Iterable.
     * 
     *
     *      *      *      *      */

/**
     * Create a new List composed of the elements of the first List minus every occurrence of the
     * given element to remove.
     * 
     *
     *      *      *      *      */

/**
     * Create a new Collection composed of the elements of the first Iterable minus every occurrence of the
     * given element to remove.
     * 
     *
     *      *      *      *      */

/**
     * Create a new object array composed of the elements of the first array
     * minus the element to remove.
     *
     *      *      *      *      */

/**
     * Create a Map composed of the entries of the first map minus the
     * entries of the given map.
     *
     *      *      *      *      */

/**
     * Flatten a Collection.  This Collection and any nested arrays or
     * collections have their contents (recursively) added to the new collection.
     * 
     *
     *      *      *      */

/**
     * Flatten an Iterable.  This Iterable and any nested arrays or
     * collections have their contents (recursively) added to the new collection.
     * 
     *
     *      *      *      */

/**
     * Flatten a List.  This List and any nested arrays or
     * collections have their contents (recursively) added to the new List.
     * 
     *
     *      *      *      */

/**
     * Flatten a Set.  This Set and any nested arrays or
     * collections have their contents (recursively) added to the new Set.
     * 
     *
     *      *      *      */

/**
     * Flatten a SortedSet.  This SortedSet and any nested arrays or
     * collections have their contents (recursively) added to the new SortedSet.
     * 
     *
     *      *      *      */

/**
     * Flatten an array.  This array and any nested arrays or
     * collections have their contents (recursively) added to the new collection.
     *
     *      *      *      */

/**
     * Flatten an array.  This array and any nested arrays or
     * collections have their contents (recursively) added to the new collection.
     *
     *      *      *      */

/**
     * Flatten an array.  This array and any nested arrays or
     * collections have their contents (recursively) added to the new collection.
     *
     *      *      *      */

/**
     * Flatten an array.  This array and any nested arrays or
     * collections have their contents (recursively) added to the new collection.
     *
     *      *      *      */

/**
     * Flatten an array.  This array and any nested arrays or
     * collections have their contents (recursively) added to the new collection.
     *
     *      *      *      */

/**
     * Flatten an array.  This array and any nested arrays or
     * collections have their contents (recursively) added to the new collection.
     *
     *      *      *      */

/**
     * Flatten an array.  This array and any nested arrays or
     * collections have their contents (recursively) added to the new collection.
     *
     *      *      *      */

/**
     * Flatten an array.  This array and any nested arrays or
     * collections have their contents (recursively) added to the new collection.
     *
     *      *      *      */

/**
     * Flatten an array.  This array and any nested arrays or
     * collections have their contents (recursively) added to the new collection.
     *
     *      *      *      */

/**
     * @deprecated Use the Iterable version of flatten instead
     *      *      */

/**
     * Flatten an Iterable.  This Iterable and any nested arrays or
     * collections have their contents (recursively) added to the new collection.
     * For any non-Array, non-Collection object which represents some sort
     * of collective type, the supplied closure should yield the contained items;
     * otherwise, the closure should just return any element which corresponds to a leaf.
     *
     *      *      *      *      */

/**
     * Overloads the left shift operator to provide an easy way to append
     * objects to a Collection.
     * 
     *
     *      *      *      *      */

/**
     * Overloads the left shift operator to provide an easy way to append
     * objects to a List.
     * 
     *
     *      *      *      *      */

/**
     * Overloads the left shift operator to provide an easy way to append
     * objects to a Set.
     * 
     *
     *      *      *      *      */

/**
     * Overloads the left shift operator to provide an easy way to append
     * objects to a SortedSet.
     * 
     *
     *      *      *      *      */

/**
     * Overloads the left shift operator to provide an easy way to append
     * objects to a BlockingQueue.
     * In case of bounded queue the method will block till space in the queue become available
     * 
     *
     *      *      *      *      */

/**
     * Overloads the left shift operator to provide an easy way to append
     * Map.Entry values to a Map.
     *
     *      *      *      *      */

/**
     * Overloads the left shift operator to provide an easy way to put
     * one maps entries into another map. This allows the compact syntax
     * map1 &lt;&lt; map2; otherwise it's just a synonym for
     * putAll though it returns the original map rather than
     * being a void method. Example usage:
     * 
     *
     *      *      *      *      */

/**
     * Implementation of the left shift operator for integral types.  Non integral
     * Number types throw UnsupportedOperationException.
     *
     *      *      *      *      */

/**
     * Implementation of the right shift operator for integral types.  Non integral
     * Number types throw UnsupportedOperationException.
     *
     *      *      *      *      */

/**
     * Implementation of the right shift (unsigned) operator for integral types.  Non integral
     * Number types throw UnsupportedOperationException.
     *
     *      *      *      *      */

/**
     * Support the subscript operator with a range for a byte array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with a range for a char array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with a range for a short array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with a range for an int array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with a range for a long array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with a range for a float array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with a range for a double array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with a range for a boolean array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with an IntRange for a byte array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with an IntRange for a char array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with an IntRange for a short array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with an IntRange for an int array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with an IntRange for a long array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with an IntRange for a float array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with an IntRange for a double array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with an IntRange for a boolean array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with an ObjectRange for a byte array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with an ObjectRange for a char array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with an ObjectRange for a short array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with an ObjectRange for an int array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with an ObjectRange for a long array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with an ObjectRange for a float array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with an ObjectRange for a double array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with an ObjectRange for a byte array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with a collection for a byte array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with a collection for a char array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with a collection for a short array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with a collection for an int array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with a collection for a long array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with a collection for a float array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with a collection for a double array
     *
     *      *      *      *      */

/**
     * Support the subscript operator with a collection for a boolean array
     *
     *      *      *      *      */

/**
     * Support the subscript operator for a Bitset
     *
     *      *      *      *      *      */

/**
     * Support retrieving a subset of a BitSet using a Range
     *
     *      *      *      *      *      *      */

/**
     * Support assigning a range of values with a single assignment statement.
     *
     *      *      *      *      *      *      */

/**
     * Support subscript-style assignment for a BitSet.
     *
     *      *      *      *      *      */

/**
     * Allows arrays to behave similar to collections.
     *      *      *      *      */

/**
     * Allows arrays to behave similar to collections.
     *      *      *      *      */

/**
     * Allows arrays to behave similar to collections.
     *      *      *      *      */

/**
     * Allows arrays to behave similar to collections.
     *      *      *      *      */

/**
     * Allows arrays to behave similar to collections.
     *      *      *      *      */

/**
     * Allows arrays to behave similar to collections.
     *      *      *      *      */

/**
     * Allows arrays to behave similar to collections.
     *      *      *      *      */

/**
     * Allows arrays to behave similar to collections.
     *      *      *      *      */

/**
     * Converts this array to a List of the same size, with each element
     * added to the list.
     *
     *      *      *      */

/**
     * Converts this array to a List of the same size, with each element
     * added to the list.
     *
     *      *      *      */

/**
     * Converts this array to a List of the same size, with each element
     * added to the list.
     *
     *      *      *      */

/**
     * Converts this array to a List of the same size, with each element
     * added to the list.
     *
     *      *      *      */

/**
     * Converts this array to a List of the same size, with each element
     * added to the list.
     *
     *      *      *      */

/**
     * Converts this array to a List of the same size, with each element
     * added to the list.
     *
     *      *      *      */

/**
     * Converts this array to a List of the same size, with each element
     * added to the list.
     *
     *      *      *      */

/**
     * Converts this array to a List of the same size, with each element
     * added to the list.
     *
     *      *      *      */

/**
     * Converts this array to a Set, with each unique element
     * added to the set.
     *
     *      *      *      */

/**
     * Converts this array to a Set, with each unique element
     * added to the set.
     *
     *      *      *      */

/**
     * Converts this array to a Set, with each unique element
     * added to the set.
     *
     *      *      *      */

/**
     * Converts this array to a Set, with each unique element
     * added to the set.
     *
     *      *      *      */

/**
     * Converts this array to a Set, with each unique element
     * added to the set.
     *
     *      *      *      */

/**
     * Converts this array to a Set, with each unique element
     * added to the set.
     *
     *      *      *      */

/**
     * Converts this array to a Set, with each unique element
     * added to the set.
     *
     *      *      *      */

/**
     * Converts this array to a Set, with each unique element
     * added to the set.
     *
     *      *      *      */

/**
     * Convert a Collection to a Set. Always returns a new Set
     * even if the Collection is already a Set.
     * 
     * Example usage:
     * 
     *
     *      *      *      */

/**
     * Convert an Iterable to a Set. Always returns a new Set
     * even if the Iterable is already a Set.
     * 
     * Example usage:
     * 
     *
     *      *      *      */

/**
     * Convert an iterator to a Set. The iterator will become
     * exhausted of elements after making this conversion.
     *
     *      *      *      */

/**
     * Convert an enumeration to a Set.
     *
     *      *      *      */

/**
     * Implements the getAt(int) method for primitive type arrays.
     *
     *      *      *      *      */

/**
     * Implements the getAt(Range) method for primitive type arrays.
     *
     *      *      *      *      */

/**
     * Implements the getAt(Collection) method for primitive type arrays.  Each
     * value in the collection argument is assumed to be a valid array index.
     * The value at each index is then added to a list which is returned.
     *
     *      *      *      *      */

/**
     * Implements the setAt(int idx) method for primitive type arrays.
     *
     *      *      *      *      *      */

/**
     * Identity conversion which returns Boolean.TRUE for a true Boolean and Boolean.FALSE for a false Boolean.
     *
     *      *      *      */

/**
     * Checks whether the array contains the given value.
     *
     *      *      *      *      */

/**
     * Checks whether the array contains the given value.
     *
     *      *      *      *      */

/**
     * Checks whether the array contains the given value.
     *
     *      *      *      *      */

/**
     * Checks whether the array contains the given value.
     *
     *      *      *      *      */

/**
     * Checks whether the array contains the given value.
     *
     *      *      *      *      */

/**
     * Checks whether the array contains the given value.
     *
     *      *      *      *      */

/**
     * Checks whether the array contains the given value.
     *
     *      *      *      *      */

/**
     * Checks whether the array contains the given value.
     *
     *      *      *      *      */

/**
     * Checks whether the array contains the given value.
     *
     *      *      *      *      */

/**
     * Returns the string representation of the given array.
     *
     *      *      *      */

/**
     * Returns the string representation of the given array.
     *
     *      *      *      */

/**
     * Returns the string representation of the given array.
     *
     *      *      *      */

/**
     * Returns the string representation of the given array.
     *
     *      *      *      */

/**
     * Returns the string representation of the given array.
     *
     *      *      *      */

/**
     * Returns the string representation of the given array.
     *
     *      *      *      */

/**
     * Returns the string representation of the given array.
     *
     *      *      *      */

/**
     * Returns the string representation of the given array.
     *
     *      *      *      */

/**
     * Returns the string representation of the given map.
     *
     *      *      *      *      */

/**
     * Returns the string representation of this map.  The string displays the
     * contents of the map, i.e. [one:1, two:2, three:3].
     *
     *      *      *      */

/**
     * Returns the string representation of this map.  The string displays the
     * contents of the map, i.e. [one:1, two:2, three:3].
     *
     *      *      *      *      */

/**
     * Returns the string representation of the given collection.  The string
     * displays the contents of the collection, i.e.
     * [1, 2, a].
     *
     *      *      *      *      */

/**
     * Returns the string representation of the given list.  The string
     * displays the contents of the list, similar to a list literal, i.e.
     * [1, 2, a].
     *
     *      *      *      */

/**
     * Returns the string representation of the given list.  The string
     * displays the contents of the list, similar to a list literal, i.e.
     * [1, 2, a].
     *
     *      *      *      *      */

/**
     * Returns the string representation of this array's contents.
     *
     *      *      *      *      */

/**
     * Returns the string representation of the given array.  The string
     * displays the contents of the array, similar to an array literal, i.e.
     * {1, 2, "a"}.
     *
     *      *      *      */

/**
     * Create a String representation of this object.
     *      *      *      */

/**
     * Increment a Character by one.
     *
     *      *      *      */

/**
     * Increment a Number by one.
     *
     *      *      *      */

/**
     * Decrement a Character by one.
     *
     *      *      *      */

/**
     * Decrement a Number by one.
     *
     *      *      *      */

/**
     * Add a Character and a Number. The ordinal value of the Character
     * is used in the addition (the ordinal value is the unicode
     * value which for simple character sets is the ASCII value).
     * This operation will always create a new object for the result,
     * while the operands remain unchanged.
     *
     *      *      *      *      *      */

/**
     * Add a Number and a Character.  The ordinal value of the Character
     * is used in the addition (the ordinal value is the unicode
     * value which for simple character sets is the ASCII value).
     *
     *      *      *      *      *      */

/**
     * Add one Character to another. The ordinal values of the Characters
     * are used in the addition (the ordinal value is the unicode
     * value which for simple character sets is the ASCII value).
     * This operation will always create a new object for the result,
     * while the operands remain unchanged.
     *
     *      *      *      *      *      */

/**
     * Compare a Character and a Number. The ordinal value of the Character
     * is used in the comparison (the ordinal value is the unicode
     * value which for simple character sets is the ASCII value).
     *
     *      *      *      *      */

/**
     * Compare a Number and a Character. The ordinal value of the Character
     * is used in the comparison (the ordinal value is the unicode
     * value which for simple character sets is the ASCII value).
     *
     *      *      *      *      */

/**
     * Compare two Characters. The ordinal values of the Characters
     * are compared (the ordinal value is the unicode
     * value which for simple character sets is the ASCII value).
     *
     *      *      *      *      */

/**
     * Compare two Numbers.  Equality (==) for numbers dispatches to this.
     *
     *      *      *      *      */

/**
     * Subtract a Number from a Character. The ordinal value of the Character
     * is used in the subtraction (the ordinal value is the unicode
     * value which for simple character sets is the ASCII value).
     *
     *      *      *      *      */

/**
     * Subtract a Character from a Number. The ordinal value of the Character
     * is used in the subtraction (the ordinal value is the unicode
     * value which for simple character sets is the ASCII value).
     *
     *      *      *      *      */

/**
     * Subtract one Character from another. The ordinal values of the Characters
     * is used in the comparison (the ordinal value is the unicode
     * value which for simple character sets is the ASCII value).
     *
     *      *      *      *      */

/**
     * Multiply a Character by a Number. The ordinal value of the Character
     * is used in the multiplication (the ordinal value is the unicode
     * value which for simple character sets is the ASCII value).
     *
     *      *      *      *      */

/**
     * Multiply a Number by a Character. The ordinal value of the Character
     * is used in the multiplication (the ordinal value is the unicode
     * value which for simple character sets is the ASCII value).
     *
     *      *      *      *      */

/**
     * Multiply two Characters. The ordinal values of the Characters
     * are used in the multiplication (the ordinal value is the unicode
     * value which for simple character sets is the ASCII value).
     *
     *      *      *      *      */

/**
     * Multiply a BigDecimal and a Double.
     * Note: This method was added to enforce the Groovy rule of
     * BigDecimal*Double == Double. Without this method, the
     * multiply(BigDecimal) method in BigDecimal would respond
     * and return a BigDecimal instead. Since BigDecimal is preferred
     * over Number, the Number*Number method is not chosen as in older
     * versions of Groovy.
     *
     *      *      *      *      */

/**
     * Multiply a BigDecimal and a BigInteger.
     * Note: This method was added to enforce the Groovy rule of
     * BigDecimal*long == long. Without this method, the
     * multiply(BigDecimal) method in BigDecimal would respond
     * and return a BigDecimal instead. Since BigDecimal is preferred
     * over Number, the Number*Number method is not chosen as in older
     * versions of Groovy. BigInteger is the fallback for all integer
     * types in Groovy
     *
     *      *      *      *      */

/**
     * Power of a Number to a certain exponent. Called by the '**' operator.
     *
     *      *      *      *      */

/**
     * Power of a BigDecimal to an integer certain exponent. If the
     * exponent is positive, call the BigDecimal.pow(int) method to
     * maintain precision. Called by the '**' operator.
     *
     *      *      *      */

/**
     * Power of a BigInteger to an integer certain exponent. If the
     * exponent is positive, call the BigInteger.pow(int) method to
     * maintain precision. Called by the '**' operator.
     *
     *       *       *       */

/**
     * Power of an integer to an integer certain exponent. If the
     * exponent is positive, convert to a BigInteger and call
     * BigInteger.pow(int) method to maintain precision. Called by the
     * '**' operator.
     *
     *       *       *       */

/**
     * Power of a long to an integer certain exponent. If the
     * exponent is positive, convert to a BigInteger and call
     * BigInteger.pow(int) method to maintain precision. Called by the
     * '**' operator.
     *
     *      *      *      */

/**
     * Power of a BigInteger to an BigInteger certain exponent. Called by the
     * '**' operator.
     *
     *      *      *      *      */

/**
     * Divide a Character by a Number. The ordinal value of the Character
     * is used in the division (the ordinal value is the unicode
     * value which for simple character sets is the ASCII value).
     *
     *      *      *      *      */

/**
     * Divide a Number by a Character. The ordinal value of the Character
     * is used in the division (the ordinal value is the unicode
     * value which for simple character sets is the ASCII value).
     *
     *      *      *      *      */

/**
     * Divide one Character by another. The ordinal values of the Characters
     * are used in the division (the ordinal value is the unicode
     * value which for simple character sets is the ASCII value).
     *
     *      *      *      *      */

/**
     * Integer Divide a Character by a Number. The ordinal value of the Character
     * is used in the division (the ordinal value is the unicode
     * value which for simple character sets is the ASCII value).
     *
     *      *      *      *      */

/**
     * Integer Divide a Number by a Character. The ordinal value of the Character
     * is used in the division (the ordinal value is the unicode
     * value which for simple character sets is the ASCII value).
     *
     *      *      *      *      */

/**
     * Integer Divide two Characters. The ordinal values of the Characters
     * are used in the division (the ordinal value is the unicode
     * value which for simple character sets is the ASCII value).
     *
     *      *      *      *      */

/**
     * Integer Divide two Numbers.
     *
     *      *      *      *      */

/**
     * Bitwise OR together two numbers.
     *
     *      *      *      *      */

/**
     * Bitwise AND together two Numbers.
     *
     *      *      *      *      */

/**
     * Bitwise AND together two BitSets.
     *
     *      *      *      *      */

/**
     * Bitwise XOR together two BitSets.  Called when the '^' operator is used
     * between two bit sets.
     *
     *      *      *      *      */

/**
     * Bitwise NEGATE a BitSet.
     *
     *      *      *      */

/**
     * Bitwise NEGATE a Number.
     *
     *      *      *      */

/**
     * Bitwise OR together two BitSets.  Called when the '|' operator is used
     * between two bit sets.
     *
     *      *      *      *      */

/**
     * Bitwise XOR together two Numbers.  Called when the '^' operator is used.
     *
     *      *      *      *      */

/**
     * Performs a division modulus operation.  Called by the '%' operator.
     *
     *      *      *      *      */

/**
     * Negates the number.  Equivalent to the '-' operator when it preceeds
     * a single operand, i.e. -10
     *
     *      *      *      */

/**
     * Returns the number, effectively being a noop for numbers.
     * Operator overloaded form of the '+' operator when it preceeds
     * a single operand, i.e. +10
     *
     *      *      *      */

/**
     * Executes the closure this many times, starting from zero.  The current
     * index is passed to the closure each time.
     * Example:
     * 
     * Prints the numbers 0 through 9.
     *
     *      *      *      */

/**
     * Iterates from this number up to the given number, inclusive,
     * incrementing by one each time.
     *
     *      *      *      *      */

/**
     * Iterates from this number up to the given number, inclusive,
     * incrementing by one each time.
     *
     *      *      *      *      */

/**
     * Iterates from this number up to the given number, inclusive,
     * incrementing by one each time.
     *
     *      *      *      *      */

/**
     * Iterates from this number up to the given number, inclusive,
     * incrementing by one each time.
     *
     *      *      *      *      */

/**
     * Iterates from this number up to the given number, inclusive,
     * incrementing by one each time.
     *
     *      *      *      *      */

/**
     * Iterates from this number up to the given number, inclusive,
     * incrementing by one each time.
     *
     *      *      *      *      */

/**
     * Iterates from this number up to the given number, inclusive,
     * incrementing by one each time.
     *
     *      *      *      *      */

/**
     * Iterates from this number up to the given number, inclusive,
     * incrementing by one each time.  Example:
     * 
     * Prints numbers 0 to 10
     *
     *      *      *      *      */

/**
     * Iterates from this number up to the given number, inclusive,
     * incrementing by one each time.
     * 
     * Prints numbers 0.1, 1.1, 2.1... to 9.1
     *
     *      *      *      *      */

/**
     * Iterates from this number down to the given number, inclusive,
     * decrementing by one each time.
     *
     *      *      *      *      */

/**
     * Iterates from this number down to the given number, inclusive,
     * decrementing by one each time.
     *
     *      *      *      *      */

/**
     * Iterates from this number down to the given number, inclusive,
     * decrementing by one each time.
     *
     *      *      *      *      */

/**
     * Iterates from this number down to the given number, inclusive,
     * decrementing by one each time.
     *
     *      *      *      *      */

/**
     * Iterates from this number down to the given number, inclusive,
     * decrementing by one each time.
     *
     *      *      *      *      */

/**
     * Iterates from this number down to the given number, inclusive,
     * decrementing by one each time.
     *
     *      *      *      *      */

/**
     * Iterates from this number down to the given number, inclusive,
     * decrementing by one each time.
     *
     *      *      *      *      */

/**
     * Iterates from this number down to the given number, inclusive,
     * decrementing by one each time.
     *
     *      *      *      *      */

/**
     * Iterates from this number down to the given number, inclusive,
     * decrementing by one each time.  Each number is passed to the closure.
     * Example:
     * 
     * Prints numbers 10.5, 9.5 ... to 0.5.
     *
     *      *      *      *      */

/**
     * Iterates from this number up to the given number using a step increment.
     * Each intermediate number is passed to the given closure.  Example:
     * 
     * Prints even numbers 0 through 8.
     *
     *      *      *      *      *      */

/**
     * Get the absolute value
     *
     *      *      *      */

/**
     * Get the absolute value
     *
     *      *      *      */

/**
     * Get the absolute value
     *
     *      *      *      */

/**
     * Get the absolute value
     *
     *      *      *      */

/**
     * Round the value
     *
     *      *      *      */

/**
     * Round the value
     *
     *      *      *      *      */

/**
     * Truncate the value
     *
     *      *      *      *      */

/**
     * Truncate the value
     *
     *      *      *      */

/**
     * Round the value
     *
     *      *      *      */

/**
     * Round the value
     *
     *      *      *      *      */

/**
     * Truncate the value
     *
     *      *      *      */

/**
     * Truncate the value
     *
     *      *      *      *      */

/**
     * Determine if a Character is uppercase.
     * Synonym for 'Character.isUpperCase(this)'.
     *
     *      *      *      *      */

/**
     * Determine if a Character is lowercase.
     * Synonym for 'Character.isLowerCase(this)'.
     *
     *      *      *      *      */

/**
     * Determines if a character is a letter.
     * Synonym for 'Character.isLetter(this)'.
     *
     *      *      *      *      */

/**
     * Determines if a character is a digit.
     * Synonym for 'Character.isDigit(this)'.
     *
     *      *      *      *      */

/**
     * Determines if a character is a letter or digit.
     * Synonym for 'Character.isLetterOrDigit(this)'.
     *
     *      *      *      *      */

/**
     * Determines if a character is a whitespace character.
     * Synonym for 'Character.isWhitespace(this)'.
     *
     *      *      *      *      */

/**
     * Converts the character to uppercase.
     * Synonym for 'Character.toUpperCase(this)'.
     *
     *      *      *          otherwise, the character itself.
     *      *      *      */

/**
     * Converts the character to lowercase.
     * Synonym for 'Character.toLowerCase(this)'.
     *
     *      *      *          otherwise, the character itself.
     *      *      *      */

/**
     * Transform a Number into an Integer
     *
     *      *      *      */

/**
     * Transform a Number into a Long
     *
     *      *      *      */

/**
     * Transform a Number into a Float
     *
     *      *      *      */

/**
     * Transform a Number into a Double
     *
     *      *      *      */

/**
     * Transform a Number into a BigDecimal
     *
     *      *      *      */

/**
     * Transform this number to a the given type, using the 'as' operator.  The
     * following types are supported in addition to the default
     * {@link #asType(java.lang.Object, java.lang.Class)}:
     * 
     *  BigDecimal
     *  BigInteger
     *  Double
     *  Float
     * 
     *      *      *      *      */

/**
     * Transform this Number into a BigInteger.
     *
     *      *      *      */

/**
     * Logical conjunction of two boolean operators.
     *
     *      *      *      *      */

/**
     * Logical disjunction of two boolean operators
     *
     *      *      *      *      */

/**
     * Logical implication of two boolean operators
     *
     *      *      *      *      */

/**
     * Exclusive disjunction of two boolean operators
     *
     *      *      *      *      */

/**
     * Allows a simple syntax for using timers.  This timer will execute the
     * given closure after the given delay.
     *
     *      *      *      *      *      */

/**
     * Traverse through each byte of this Byte array. Alias for each.
     *
     *      *      *      *      */

/**
     * Traverse through each byte of this byte array. Alias for each.
     *
     *      *      *      *      */

/**
     * Iterates over the elements of an iterable collection of items and returns
     * the index of the first item that matches the condition specified in the closure.
     *
     *      *      *      *      */

/**
     * Iterates over the elements of an iterable collection of items, starting from a
     * specified startIndex, and returns the index of the first item that matches the
     * condition specified in the closure.
     *
     *      *      *      *      *      */

/**
     * Iterates over the elements of an iterable collection of items and returns
     * the index of the last item that matches the condition specified in the closure.
     *
     *      *      *      *      */

/**
     * Iterates over the elements of an iterable collection of items, starting
     * from a specified startIndex, and returns the index of the last item that
     * matches the condition specified in the closure.
     *
     *      *      *      *      *      */

/**
     * Iterates over the elements of an iterable collection of items and returns
     * the index values of the items that match the condition specified in the closure.
     *
     *      *      *      *      */

/**
     * Iterates over the elements of an iterable collection of items, starting from
     * a specified startIndex, and returns the index values of the items that match
     * the condition specified in the closure.
     *
     *      *      *      *      *      */

/**
     * Iterates through the classloader parents until it finds a loader with a class
     * named "org.codehaus.groovy.tools.RootLoader". If there is no such class
     * null will be returned. The name is used for comparison because
     * a direct comparison using == may fail as the class may be loaded through
     * different classloaders.
     *
     *      *      *      *      */

/**
     * Converts a given object to a type. This method is used through
     * the "as" operator and is overloadable as any other operator.
     *
     *      *      *      *      */

/**
     * Convenience method to dynamically create a new instance of this
     * class.  Calls the default constructor.
     *
     *      *      *      */

/**
     * Helper to construct a new instance from the given arguments.
     * The constructor is called based on the number and types in the
     * args array.  Use newInstance(null) or simply
     * newInstance() for the default (no-arg) constructor.
     *
     *      *      *      *      */

/**
     * Adds a "metaClass" property to all class objects so you can use the syntax
     * String.metaClass.myMethod = { println "foo" }
     *
     *      *      *      */

/**
     * Obtains a MetaClass for an object either from the registry or in the case of
     * a GroovyObject from the object itself.
     *
     *      *      *      */

/**
     * Obtains a MetaClass for an object either from the registry or in the case of
     * a GroovyObject from the object itself.
     *
     *      *      *      */

/**
     * Sets the metaclass for a given class.
     *
     *      *      *      */

/**
     * Set the metaclass for an object.
     *      *      *      */

/**
     * Set the metaclass for a GroovyObject.
     *      *      *      */

/**
     * Sets/updates the metaclass for a given class to a closure.
     *
     *      *      *      *      *      */

/**
     * Sets/updates the metaclass for a given object to a closure.
     *
     *      *      *      *      *      */

/**
     * Attempts to create an Iterator for the given object by first
     * converting it to a Collection.
     *
     *      *      *      *      */

/**
     * Attempts to create an Iterator for the given object by first
     * converting it to a Collection.
     *
     *      *      *      *      */

/**
     * Allows an Enumeration to behave like an Iterator.  Note that the
     * {@link java.util.Iterator#remove() remove()} method is unsupported since the
     * underlying Enumeration does not provide a mechanism for removing items.
     *
     *      *      *      */

/**
     * An identity function for iterators, supporting 'duck-typing' when trying to get an
     * iterator for each object within a collection, some of which may already be iterators.
     *
     *      *      *      */

/**
     * Returns an object satisfying Groovy truth if the implementing MetaClass responds to
     * a method with the given name and arguments types.
     *
     * Note that this method's return value is based on realised methods and does not take into account
     * objects or classes that implement invokeMethod or methodMissing
     *
     * This method is "safe" in that it will always return a value and never throw an exception
     *
     *      *      *      *      *      *      */

/**
     * Returns an object satisfying Groovy truth if the implementing MetaClass responds to
     * a method with the given name regardless of the arguments.
     *
     * Note that this method's return value is based on realised methods and does not take into account
     * objects or classes that implement invokeMethod or methodMissing
     *
     * This method is "safe" in that it will always return a value and never throw an exception
     *
     *      *      *      *      *      */

/**
     * Returns true of the implementing MetaClass has a property of the given name
     *
     * Note that this method will only return true for realised properties and does not take into
     * account implementation of getProperty or propertyMissing
     *
     *      *      *      *      *      */

/**
     * Dynamically wraps an instance into something which implements the
     * supplied trait classes. It is guaranteed that the returned object
     * will implement the trait interfaces, but the original type of the
     * object is lost (replaced with a proxy).
     *      *      *      */

/**
     * Swaps two elements at the specified positions.
     * 
     * Example:
     * 
     *
     *      *      *      *      *      *      */

/**
     * Swaps two elements at the specified positions.
     * 
     * Example:
     * 
     *
     *      *      *      *      *      */

/**
     * Swaps two elements at the specified positions.
     * 
     * Example:
     * 
     *
     *      *      *      *      *      */

/**
     * Swaps two elements at the specified positions.
     * 
     * Example:
     * 
     *
     *      *      *      *      *      */

/**
     * Swaps two elements at the specified positions.
     * 
     * Example:
     * 
     *
     *      *      *      *      *      */

/**
     * Swaps two elements at the specified positions.
     * 
     * Example:
     * 
     *
     *      *      *      *      *      */

/**
     * Swaps two elements at the specified positions.
     * 
     * Example:
     * 
     *
     *      *      *      *      *      */

/**
     * Swaps two elements at the specified positions.
     * 
     * Example:
     * 
     *
     *      *      *      *      *      */

/**
     * Swaps two elements at the specified positions.
     * 
     * Example:
     * 
     *
     *      *      *      *      *      */

/**
     * Swaps two elements at the specified positions.
     * 
     * Example:
     * 
     *
     *      *      *      *      *      */

/**
     * Modifies this list by removing the element at the specified position
     * in this list. Returns the removed element. Essentially an alias for
     * {@link List#remove(int)} but with no ambiguity for List&lt;Integer&gt;.
     * 
     * Example:
     * 
     *
     *      *      *      *      */

/**
     * Modifies this collection by removing a single instance of the specified
     * element from this collection, if it is present. Essentially an alias for
     * {@link Collection#remove(Object)} but with no ambiguity for Collection&lt;Integer&gt;.
     * 
     * Example:
     * 
     *
     *      *      *      *      */

