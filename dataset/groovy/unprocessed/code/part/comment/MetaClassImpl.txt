/**
 * Allows methods to be dynamically added to existing classes at runtime
 *
 *  *  *  *  *  *  *  */

/**
      * Constructor
      *
      *       *       */

/**
      * Constructor that sets the methods to null
      *
      *       */

/**
     * Constructor with registry
     *
     *      *      *      */

/**
     * Constructor with registry setting methods to null
     *
     *      *      */

/**
     * Returns the cached class for this metaclass
     *
     *      */

/**
     * Returns the registry for this metaclass
     * 
     *      */

/**
     *      */

/**
     *      */

/**
     *      */

/**
     *      */

/**
     *      */

/**
     *      */

/**
     *Returns the class this object this is the metaclass of.
     * 
     *      */

/**
     * Return wether the class represented by this metaclass instance is an instance of the GroovyObject class
     *
     *      */

/**
     * Fills the method index
     */

/**
     * Gets all instance methods available on this class for the given name
     *
     *      *         given name
     */

/**
     * Returns all the normal static methods on this class for the given name 
     *
     *      *         given name
     */

/**
     * Returns wether this metaclassimpl has been modified. Since MetaClassImpl 
     * is not designed for modificaiton this method always returns false
     *
     *      */

/**
     *Adds an instance method to this metaclass.
     *
     *      */

/**
     *Adds a static method to this metaclass.
     *
     *      */

/**
     * Invoke a method on the given object with the given arguments.
     *
     *      *      *      *
     *      */

/**
     * Invoke a missing method on the given object with the given arguments.
     *
     *      *      *      *
     *      */

/**
     * Invoke a missing property on the given object with the given arguments.
     *
     *      *      *      *      *
     *      */

/**
     * Hook to deal with the case of MissingProperty for static properties. The method will look attempt to look up
     * "propertyMissing" handlers and invoke them otherwise thrown a MissingPropertyException
     *
     *      *      *      *      *      */

/**
     * Invokes a method on the given receiver for the specified arguments. 
     * The MetaClass will attempt to establish the method to invoke based on the name and arguments provided.
     *
     *
     *      *      *      *
     *      * 
     *      */

/**
     * checks if the initialisation of the class id complete.
     * This method should be called as a form of assert, it is no
     * way to test if there is still initialisation work to be done.
     * Such logic must be implemented in a different way.
     *
     *      */

/**
     * This is a helper class introduced in Groovy 2.1.0, which is used only by
     * indy. This class is for internal use only.
     *      */

/**
     * This is a helper method added in Groovy 2.1.0, which is used only by indy.
     * This method is for internal use only.
     *      */

/**
     * Sets a number of bean properties from the given Map where the keys are
     * the String names of properties and the values are the values of the
     * properties to set
     */

/**
     *      */

/**
     * Get all the properties defined for this type
     *
     *      */

/**
     * return null if nothing valid has been found, a MetaMethod (for getter always the case if not null) or
     * a LinkedList if there are multiple setter
     */

/**
     * This will build up the property map (Map of MetaProperty objects, keyed on
     * property name).
     *
     *      */

/**
     * Adds a new MetaBeanProperty to this MetaClass
     *
     *      */

/**
     * Retrieves a property on the given receiver for the specified arguments. The sender is the class that is requesting the property from the object.
     * The MetaClass will attempt to establish the method to invoke based on the name and arguments provided.
     *
     * The useSuper and fromInsideClass help the Groovy runtime perform optimisations on the call to go directly
     * to the super class if necessary
     *
     *      *      *      *      *      *      */

/**
     * Retrieves the value of an attribute (field). This method is to support the Groovy runtime and not for general client API usage.
     *
     *      *      *      *      *      */

/**
     * Retrieves the value of an attribute (field). This method is to support the Groovy runtime and not for general client API usage.
     *
     *      *      *      *      *      *
     *      */

/**
     * Sets an attribute on the given receiver for the specified arguments. The sender is the class that is setting the attribute from the object.
     * The MetaClass will attempt to establish the method to invoke based on the name and arguments provided.
     *
     * The isCallToSuper and fromInsideClass help the Groovy runtime perform optimisations on the call to go directly
     * to the super class if necessary
     *
     *      *      *      *      *      *      */

/**
     * Obtains a reference to the original AST for the MetaClass if it is available at runtime
     *
     *      */

/**
     * Returns a string representation of this metaclass
     */

/**
     * adds a MetaMethod to this class. WARNING: this method will not
     * do the neccessary steps for multimethod logic and using this
     * method doesn't mean, that a method added here is replacing another
     * method from a parent class completely. These steps are usually done
     * by initialize, which means if you need these steps, you have to add
     * the method before running initialize the first time.
     *
     *      *      */

/**
     * Checks if the metaMethod is a method from the GroovyObject interface such as setProperty, getProperty and invokeMethod
     *
     *      *      */

/**
     * return false: add method
     *        null:  ignore method
     *        true:  replace
     */

/**
     *      */

/**
     * Chooses the correct method to use from a list of methods which match by
     * name.
     *
     *      *      */

/**
     * Complete the initialisation process. After this method
     * is called no methods should be added to the meta class.
     * Invocation of methods or access to fields/properties is
     * forbidden unless this method is called. This method 
     * should contain any initialisation code, taking a longer
     * time to complete. An example is the creation of the 
     * Reflector. It is suggested to synchronize this 
     * method.
     */

/**
     * Retrieves the list of Methods held by the class
     *
     *      */

/**
      * Retrieves the list of MetaMethods held by this class
      *
      *       */

/**
     * Create a CallSite
     */

/**
     * Create a CallSite
     */

/**
     * Create a CallSite
     */

/**
     * Create a CallSite
     */

/**
     * Create a CallSite
     */

/**
     * Returns ClasInfo for the contained Class
     *
     *      */

/**
     * Returns version of the contained Class
     *
     *      */

/**
     * Increments version of the contained Class
     */

/**
      * Retrieves a list of additional MetaMethods held by this class
      *
      *       */

/**
     * Retrieves a property on the given object for the specified arguments. 
     *
     *
     *      *      *
     *      */

/**
     * Sets a property on the given object for the specified arguments. 
     *
     *
     *      *      *      */

/**
     * Retrieves the value of an attribute (field). This method is to support the Groovy runtime and not for general client API usage.
     *
     *      *      *      */

/**
     * Sets the value of an attribute (field). This method is to support the Groovy runtime and not for general client API usage.
     *
     *      *      *      */

/**
     * Selects a method by name and argument classes. This method
     * does not search for an exact match, it searches for a compatible
     * method. For this the method selection mechanism is used as provided
     * by the implementation of this MetaClass. pickMethod may or may
     * not be used during the method selection process when invoking a method.
     * There is no warranty for that.
     *
     *      *      *      *      */

/**
     * indicates is the meta class method invocation for non-static methods is done
     * through a custom invoker object.
     *
     *      */

/**
     * indicates is the meta class method invocation for static methods is done
     * through a custom invoker object.
     *
     *      */

/**
     * remove all method call cache entries. This should be done if a
     * method is added during runtime, but not by using a category.
     */

