/**
     * Coerce a string (an instance of CharSequence) to a boolean value.
     * A string is coerced to false if it is of length 0,
     * and to true otherwise.
     *
     *      *      *      */

/**
     * Coerce a Matcher instance to a boolean value.
     *
     *      *      *      */

/**
     * Provides a method to perform custom 'dynamic' type conversion
     * to the given class using the as operator.
     *
     *      *      *      *      *      */

/**
     * Converts the GString to a File, or delegates to the default
     * {@link org.codehaus.groovy.runtime.DefaultGroovyMethods#asType(Object, Class)}
     *
     *      *      *      *      */

/**
     * Provides a method to perform custom 'dynamic' type conversion
     * to the given class using the as operator.
     * Example: '123' as Double
     * 
     * By default, the following types are supported:
     * 
     * List
     * BigDecimal
     * BigInteger
     * Long
     * Integer
     * Short
     * Byte
     * Character
     * Double
     * Float
     * File
     * Subclasses of Enum (Java 5 and above)
     * 
     * If any other type is given, the call is delegated to
     * {@link org.codehaus.groovy.runtime.DefaultGroovyMethods#asType(Object, Class)}.
     *
     *      *      *      *      */

/**
     * Turns a CharSequence into a regular expression Pattern
     *
     *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Convenience method to capitalize the first letter of a CharSequence
     * (typically the first letter of a word). Example usage:
     * 
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Pad a CharSequence to a minimum length specified by numberOfChars by adding the space character around it as many times as needed so that it remains centered.
     *
     * If the String is already the same size or bigger than the target numberOfChars, then the original String is returned. An example:
     * 
     *
     *      *      *      *      *      */

/**
     * Pad a CharSequence to a minimum length specified by numberOfChars, appending the supplied padding CharSequence around the original as many times as needed keeping it centered.
     *
     * If the String is already the same size or bigger than the target numberOfChars, then the original String is returned. An example:
     * 
     *
     *      *      *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Provide an implementation of contains() like
     * {@link java.util.Collection#contains(Object)} to make CharSequences more polymorphic.
     *
     *      *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Count the number of occurrences of a sub CharSequence.
     *
     *      *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Return a CharSequence with lines (separated by LF, CR/LF, or CR)
     * terminated by the platform specific line separator.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Drops the given number of chars from the head of this CharSequence
     * if they are available.
     * 
     *
     *      *      *      *         or else an empty String, if this CharSequence has less than num characters.
     *      */

/**
     * A GString variant of the equivalent CharSequence method.
     *
     *      *      *      *         or else an empty String, if the toString() of this GString has less than num characters.
     *      *      */

/**
     * Create a suffix of the given CharSequence by dropping as many characters as possible from the
     * front of the original CharSequence such that calling the given closure condition evaluates to
     * true when passed each of the dropped characters.
     * 
     * 
     *
     *      *      *                  the front of the original CharSequence
     *      *         evaluates to true for each element dropped from the front of the CharSequence
     *      */

/**
     * A GString variant of the equivalent CharSequence method.
     *
     *      *      *                  the front of the original GString
     *      *         evaluates to true for each element dropped from the front of the CharSequence
     *      *      */

/**
     * Iterates through this CharSequence line by line.  Each line is passed
     * to the given 1 or 2 arg closure. If a 2 arg closure is found
     * the line count is passed as the second argument.
     *
     *      *      *      *      *      *      */

/**
     * Iterates through this CharSequence line by line.  Each line is passed
     * to the given 1 or 2 arg closure. If a 2 arg closure is found
     * the line count is passed as the second argument.
     *
     *      *      *      *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Iterate through this String a character at a time collecting either the
     * original character or a transformed replacement String. The {@code transform}
     * Closure should return {@code null} to indicate that no transformation is
     * required for the given character.
     * 
     * 
     *
     *      *      *         have been replaced with the corresponding replacements
     *         as determined by the {@code transform} Closure.
     */

/**
     * Process each regex group matched substring of the given CharSequence. If the closure
     * parameter takes one argument, an array with all match groups is passed to it.
     * If the closure takes as many arguments as there are match groups, then each
     * parameter will be one match group.
     *
     *      *      *      *      *      *      */

/**
     * Process each regex group matched substring of the given pattern. If the closure
     * parameter takes one argument, an array with all match groups is passed to it.
     * If the closure takes as many arguments as there are match groups, then each
     * parameter will be one match group.
     *
     *      *      *      *      *      *      */

/**
     * Process each regex group matched substring of the given pattern. If the closure
     * parameter takes one argument, an array with all match groups is passed to it.
     * If the closure takes as many arguments as there are match groups, then each
     * parameter will be one match group.
     *
     *      *      *      *      *      */

/**
     * Process each regex group matched substring of the given string. If the closure
     * parameter takes one argument, an array with all match groups is passed to it.
     * If the closure takes as many arguments as there are match groups, then each
     * parameter will be one match group.
     *
     *      *      *      *      *      */

/**
     * Expands all tabs into spaces with tabStops of size 8.
     *
     *      *      *      *      */

/**
     * Expands all tabs into spaces. If the CharSequence has multiple
     * lines, expand each line - restarting tab stops at the start
     * of each line.
     *
     *      *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Expands all tabs into spaces. Assumes the CharSequence represents a single line of text.
     *
     *      *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Finds the first occurrence of a regular expression String within a String.
     * If the regex doesn't match, null will be returned.
     * 
     * For example, if the regex doesn't match the result is null:
     * 
     *
     *      *      *      *      *      */

/**
     * Returns the result of calling a closure with the first occurrence of a regular expression found within a CharSequence.
     * If the regex doesn't match, the closure will not be called and find will return null.
     *
     *      *      *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Returns a (possibly empty) list of all occurrences of a regular expression (in Pattern format) found within a CharSequence.
     * 
     * For example, if the pattern doesn't match, it returns an empty list:
     * 
     *
     *      *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Select a List of characters from a CharSequence using a Collection
     * to identify the indices to be selected.
     *
     *      *      *      *      */

/**
     * Support the range subscript operator for CharSequence or StringBuffer with EmptyRange
     *
     *      *      *      *      */

/**
     * Support the subscript operator for CharSequence.
     *
     *      *      *      *      */

/**
     * Support the subscript operator for GString.
     *
     *      *      *      *      */

/**
     * Support the range subscript operator for CharSequence with IntRange
     *
     *      *      *      *      */

/**
     * Support the range subscript operator for GString with IntRange
     *
     *      *      *      *      */

/**
     * Support the range subscript operator for CharSequence
     *
     *      *      *      *      */

/**
     * Support the range subscript operator for GString
     *
     *      *      *      *      */

/**
     * Select a List of values from a Matcher using a Collection
     * to identify the indices to be selected.
     *
     *      *      *      *      */

/**
     * Given a matcher that matches a string against a pattern,
     * this method returns true when the string matches the pattern or if a longer string, could match the pattern.
     *
     * For example:
     * 
     *
     *      *      *
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Support the subscript operator for String.
     *
     *      *      *      *      */

/**
     * Support the range subscript operator for String with IntRange
     *
     *      *      *      *      */

/**
     * Support the range subscript operator for String
     *
     *      *      *      *      */

/**
     * Converts the given CharSequence into an array of characters.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Find the number of Strings matched to the given Matcher.
     *
     *      *      *      */

/**
     * Get a replacement corresponding to the matched pattern for {@link org.codehaus.groovy.runtime.StringGroovyMethods#replaceAll(String, java.util.regex.Pattern, groovy.lang.Closure)}.
     * The closure take parameter:
     * 
     * Whole of match if the pattern include no capturing group
     * Object[] of capturing groups if the closure takes Object[] as parameter
     * List of capturing groups
     * 
     *
     *      *      *      */

/**
     * Check whether a Matcher contains a group or not.
     *
     *      *      *      */

/**
     * True if a CharSequence only contains whitespace characters.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Determine if a CharSequence can be parsed as a BigDecimal.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Determine if a CharSequence can be parsed as a BigInteger.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * 'Case' implementation for a CharSequence, which uses equals between the
     * toString() of the caseValue and the switchValue. This allows CharSequence
     * values to be used in switch statements. For example:
     * 
     * Note that this returns true for the case where both the
     * 'switch' and 'case' operand is null.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * 'Case' implementation for the {@link java.util.regex.Pattern} class, which allows
     * testing a String against a number of regular expressions.
     * For example:
     * 
     * Note that this returns true for the case where both the pattern and
     * the 'switch' values are null.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Determine if a CharSequence can be parsed as a Double.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Determine if a CharSequence can be parsed as a Float.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Determine if a CharSequence can be parsed as an Integer.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Determine if a CharSequence can be parsed as a Long.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Determine if a CharSequence can be parsed as a Number.
     * Synonym for 'isBigDecimal()'.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Returns an {@link java.util.Iterator} which traverses each match.
     *
     *      *      *      *      */

/**
     * Overloads the left shift operator to provide an easy way to append multiple
     * objects as string representations to a CharSequence.
     *
     *      *      *      *      */

/**
     * Overloads the left shift operator to provide an easy way to append multiple
     * objects as string representations to a String.
     *
     *      *      *      *      */

/**
     * Overloads the left shift operator to provide an easy way to append multiple
     * objects as string representations to a StringBuffer.
     *
     *      *      *      *      */

/**
     * Overloads the left shift operator to provide syntactic sugar for appending to a StringBuilder.
     *
     *      *      *      *      */

/**
     * Tells whether or not a CharSequence matches the given
     * compiled regular expression Pattern.
     *
     *      *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Remove a part of a CharSequence by replacing the first occurrence
     * of target within self with '' and returns the result.
     *
     *      *      *      *      *      */

/**
     * Remove a part of a CharSequence. This replaces the first occurrence
     * of the pattern within self with '' and returns the result.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Repeat a CharSequence a certain number of times.
     *
     *      *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * This method is called by the ++ operator for the class CharSequence.
     * It increments the last character in the given CharSequence. If the last
     * character in the CharSequence is Character.MAX_VALUE a Character.MIN_VALUE
     * will be appended. The empty CharSequence is incremented to a string
     * consisting of the character Character.MIN_VALUE.
     *
     *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Return a String with linefeeds and carriage returns normalized to linefeeds.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Pad a CharSequence to a minimum length specified by numberOfChars by adding the space character
     * to the left as many times as needed.
     *
     * If the String is already the same size or bigger than the target numberOfChars, then the original String is returned. An example:
     * 
     *
     *      *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Pad a CharSequence to a minimum length specified by numberOfChars by adding the space
     * character to the right as many times as needed.
     *
     * If the CharSequence is already the same size or bigger than the target numberOfChars,
     * then the toString() of the original CharSequence is returned. An example:
     * 
     *
     *      *      *      *      *      */

/**
     * Pad a CharSequence to a minimum length specified by numberOfChars, adding the supplied padding
     * CharSequence as many times as needed to the right.
     *
     * If the CharSequence is already the same size or bigger than the target numberOfChars,
     * then the toString() of the original CharSequence is returned. An example:
     * 
     *
     *      *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Appends the String representation of the given operand to this CharSequence.
     *
     *      *      *      *      */

/**
     * Appends a String to the string representation of this number.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Appends the String representation of the given operand to this string.
     *
     *      *      *      *      */

/**
     * Appends a String to this StringBuffer.
     *
     *      *      *      *      */

/**
     * This method is called by the -- operator for the class CharSequence.
     * It decrements the last character in the given CharSequence. If the
     * last character in the CharSequence is Character.MIN_VALUE it will be deleted.
     * The empty CharSequence can't be decremented.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Support the range subscript operator for StringBuffer.
     *
     *      *      *      *      */

/**
     * Support the range subscript operator for StringBuffer.  Index values are
     * treated as characters within the buffer.
     *
     *      *      *      *      */

/**
     * Return the lines of a CharSequence as a List of String.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Replaces each substring of this CharSequence that matches the given
     * regular expression with the given replacement.
     *
     *      *      *      *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Replaces the first substring of this CharSequence that matches the given
     * regular expression with the given replacement.
     *
     *      *      *      *      *      *      *      */

/**
     * Replaces the first occurrence of a captured group by the result of a closure call on that text.
     * 
     * For example (with some replaceAll variants thrown in for comparison purposes),
     * 
     *
     *      *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Creates a String which is the reverse (backwards) of this CharSequence
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Set the position of the given Matcher to the given index.
     *
     *      *      *      */

/**
     * Provide the standard Groovy size() method for CharSequence.
     *
     *      *      *      */

/**
     * Provide the standard Groovy size() method for Matcher.
     *
     *      *      *      */

/**
     * Provide the standard Groovy size() method for String.
     *
     *      *      *      */

/**
     * Provide the standard Groovy size() method for StringBuffer.
     *
     *      *      *      */

/**
     * Convenience method to split a CharSequence (with whitespace as delimiter).
     * Similar to tokenize, but returns an Array of String instead of a List.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Iterates through the given CharSequence line by line, splitting each line using
     * the given regex delimiter.  The list of tokens for each line is then passed to
     * the given closure.
     *
     *      *      *      *      *      *      *      *      */

/**
     * Iterates through the given CharSequence line by line, splitting each line using
     * the given separator Pattern.  The list of tokens for each line is then passed to
     * the given closure.
     *
     *      *      *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Strip leading spaces from every line in a CharSequence. The
     * line with the least number of leading spaces determines
     * the number to remove. Lines only containing whitespace are
     * ignored when calculating the number of leading spaces to strip.
     * 
     *
     *      *      *      *      */

/**
     * Strip numChar leading characters from
     * every line in a CharSequence.
     * 
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Strip leading whitespace/control characters followed by '|' from
     * every line in a CharSequence.
     * 
     *
     *      *      *      *      */

/**
     * Strip leading whitespace/control characters followed by marginChar from
     * every line in a CharSequence.
     * 
     *
     *      *      *      *      *      */

/**
     * Strip leading whitespace/control characters followed by marginChar from
     * every line in a CharSequence.
     *
     *      *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Returns the first num elements from this CharSequence.
     * 
     *
     *      *      *      *         or else the whole CharSequence if it has less then num elements.
     *      */

/**
     * A GString variant of the equivalent CharSequence method.
     *
     *      *      *      *         or else the whole GString if it has less then num elements.
     *      */

/**
     * Returns the longest prefix of this CharSequence where each
     * element passed to the given closure evaluates to true.
     * 
     * 
     *
     *      *      *      *         element passed to the given closure evaluates to true
     *      */

/**
     * A GString variant of the equivalent GString method.
     *
     *      *      *      *         element passed to the given closure evaluates to true
     *      */

/**
     * Parse a CharSequence into a BigDecimal
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Parse a CharSequence into a BigInteger
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Converts the given string into a Boolean object.
     * If the trimmed string is "true", "y" or "1" (ignoring case)
     * then the result is true otherwise it is false.
     *
     *      *      *      */

/**
     * Converts the given string into a Character object
     * using the first character in the string.
     *
     *      *      *      */

/**
     * Parse a CharSequence into a Double
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Parse a CharSequence into a Float
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Parse a CharSequence into an Integer
     *
     *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Tokenize a CharSequence (with a whitespace as the delimiter).
     *
     *      *      *      *      */

/**
     * Tokenize a CharSequence based on the given character delimiter.
     * For example:
     * 
     *
     *      *      *      *      *      */

/**
     * Tokenize a CharSequence based on the given CharSequence delimiter.
     *
     *      *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Converts the given CharSequence into a List of Strings of one character.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Parse a CharSequence into a Long
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Converts the given CharSequence into a Set of unique String of one character.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Parse a CharSequence into a Short
     *
     *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Replaces sequences of whitespaces with tabs using tabStops of size 8.
     *
     *      *      *      *      */

/**
     * Replaces sequences of whitespaces with tabs.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * @deprecated Use the CharSequence version
     *      */

/**
     * Replaces sequences of whitespaces with tabs within a line.
     *
     *      *      *      *      */

/**
     * @deprecated Use the CharSequence version
     *      */

