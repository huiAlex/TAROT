/**
 * A Collections utility class
 *
 *  *  */

/**
     * Finds all combinations of items from the given collections.
     *
     *      *      *      */

/**
     * Finds all non-null subsequences of a list.
     * E.g. subsequences([1, 2, 3]) would be:
     * [[1, 2, 3], [1, 3], [2, 3], [1, 2], [1], [2], [3]]
     *
     *      *      */

/**
     *      * @deprecated use combinations(Iterable)
     */

/**
     * Finds all combinations of items from the given Iterable aggregate of collections.
     * So, combinations([[true, false], [true, false]])
     * is [[true, true], [false, true], [true, false], [false, false]]
     * and combinations([['a', 'b'],[1, 2, 3]])
     * is [['a', 1], ['b', 1], ['a', 2], ['b', 2], ['a', 3], ['b', 3]].
     * If a non-collection item is given, it is treated as a singleton collection,
     * i.e. combinations([[1, 2], 'x']) is [[1, 'x'], [2, 'x']].
     *
     *      *      *      */

/**
     * Transposes an array of lists.
     *
     *      *      *      */

/**
     * Transposes the given lists.
     * So, transpose([['a', 'b'], [1, 2]])
     * is [['a', 1], ['b', 2]] and
     * transpose([['a', 'b', 'c']])
     * is [['a'], ['b'], ['c']].
     *
     *      *      */

/**
     * Selects the minimum value found in an array of items, so
     * min([2, 4, 6] as Object[]) == 2.
     *
     *      *      */

/**
     * @deprecated use min(Iterable)
     */

/**
     * Selects the minimum value found in an Iterable of items.
     *
     *      *      *      */

/**
     * Selects the maximum value found in an array of items, so
     * min([2, 4, 6] as Object[]) == 6.
     *
     *      *      */

/**
     * @deprecated use max(Iterable)
     */

/**
     * Selects the maximum value found in an Iterable.
     *
     *      *      *      */

/**
     * Sums all the items from an array of items.
     *
     *      *      */

/**
     * @deprecated use sum(Iterable)
     */

/**
     * Sums all the given items.
     *
     *      *      *      */

