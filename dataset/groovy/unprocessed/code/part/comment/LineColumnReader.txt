/**
 * The LineColumnReader is an extension to BufferedReader
 * that keeps track of the line and column information of where the cursor is.
 *
 *  *  */

/**
     * The current line position
     */

/**
     * The current column position
     */

/**
     * The latest marked line position
     */

/**
     * The latest marked line position
     */

/**
     * Constructor wrapping a Reader
     * (FileReader, FileReader, InputStreamReader, etc.)
     *
     *      */

/**
     * Marks the present position in the stream. Subsequent calls to reset() will attempt to reposition the stream to this point.
     *
     *      *      An attempt to reset the stream after reading characters up to this limit or beyond may fail.
     *      A limit value larger than the size of the input buffer will cause a new buffer to be allocated whose size is no smaller than limit.
     *      Therefore large values should be used with care.
     */

/**
     * Resets the stream to the most recent mark.
     */

/**
     * Reads a single character.
     *
     *      *      or -1 if the end of the stream has been reached
     */

/**
     * Reads characters into a portion of an array.
     *
     *      *      *      *      */

/**
     * Reads a line of text. A line is considered to be terminated by any one of a line feed ('\n'),
     * a carriage return ('\r'), or a carriage return followed immediately by a linefeed.
     *
     *      *      or null if the end of the stream has been reached
     */

/**
     * Skips characters.
     *
     *      *      */

/**
     * Reads characters into an array.
     * This method will block until some input is available, an I/O error occurs,
     *  or the end of the stream is reached.
     *
     *      *      */

/**
     * Not implemented.
     *
     *      *      *      */

/**
     * Closes the stream and releases any system resources associated with it.
     * Once the stream has been closed, further read(), ready(), mark(), reset(), or skip() invocations
     * will throw an IOException. Closing a previously closed stream has no effect.
     */

