/**
 * This class contains a static utility method {@link #doExtendTraits(org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.control.SourceUnit, org.codehaus.groovy.control.CompilationUnit)}
 * aimed at generating code for a classnode implementing a trait.
 *
 *  *  */

/**
     * This comparator is used to make sure that generated direct getters appear first in the list of method
     * nodes.
     */

/**
     * Given a class node, if this class node implements a trait, then generate all the appropriate
     * code which delegates calls to the trait. It is safe to call this method on a class node which
     * does not implement a trait.
     *      *      */

/**
     * Creates, if necessary, a super forwarder method, for stackable traits.
     *      *      */

/**
     * Creates a method to dispatch to "super traits" in a "stackable" fashion. The generated method looks like this:
     * 
     * ReturnType trait$super$method(Class clazz, Arg1 arg1, Arg2 arg2, ...) {
     *     if (SomeTrait.is(A) { return SomeOtherTrait$Trait$Helper.method(this, arg1, arg2) }
     *     super.method(arg1,arg2)
     * }
     * 
     *      *      *      *      */

/**
     * An utility method which tries to find a method with default implementation (in the Java 8 semantics).
     *      *      *      *      */

