/**
 * This class defines new groovy methods which appear on normal JDK
 * Date and Calendar classes inside the Groovy environment.
 */

/**
     * Support the subscript operator for a Date.
     *
     *      *      *      *      *      */

/**
     * Convert a Date to a Calendar.
     *
     *      *      *      */

/**
     * Support the subscript operator for a Calendar.
     *
     *      *      *      *      *      */

/**
     * Support the subscript operator for mutating a Calendar.
     * Example usage:
     * 
     *
     *      *      *      *      *      */

/**
     * Support the subscript operator for mutating a Date.
     *
     *      *      *      *      *      *      */

/**
     * Legacy alias for copyWith. Will be deprecated and removed in future versions of Groovy.
     *
     *      *      */

/**
     * Support creating a new Date having similar properties to
     * an existing Date (which remains unaltered) but with
     * some fields updated according to a Map of changes.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      *      *      *      */

/**
     * Legacy alias for copyWith. Will be deprecated and removed in future versions of Groovy.
     *
     *      *      */

/**
     * Support creating a new Date having similar properties to
     * an existing Date (which remains unaltered) but with
     * some fields updated according to a Map of changes.
     * 
     * Example usage:
     * 
     *
     *      *      *      *      *      *      *      */

/**
     * Increment a Date by one day.
     *
     *      *      *      */

/**
     * Increment a Calendar by one day.
     *
     *      *      *      */

/**
     * Decrement a Calendar by one day.
     *
     *      *      *      */

/**
     * Increment a java.sql.Date by one day.
     *
     *      *      *      */

/**
     * Decrement a Date by one day.
     *
     *      *      *      */

/**
     * Decrement a java.sql.Date by one day.
     *
     *      *      *      */

/**
     * Add a number of days to this date and returns the new date.
     *
     *      *      *      *      */

/**
     * Add a number of days to this date and returns the new date.
     *
     *      *      *      *      */

/**
     * Add number of days to this Timestamp and returns the new Timestamp object.
     *
     *      *      *      */

/**
     * Subtract a number of days from this date and returns the new date.
     *
     *      *      *      *      */

/**
     * Subtract a number of days from this date and returns the new date.
     *
     *      *      *      *      */

/**
     * Subtract a number of days from this Timestamp and returns the new Timestamp object.
     *
     *      *      *      */

/**
     * Subtract another date from this one and return the number of days of the difference.
     * 
     * Date self = Date then + (Date self - Date then)
     * 
     * IOW, if self is before then the result is a negative value.
     *
     *      *      *      *      */

/**
     * Subtract another Date from this one and return the number of days of the difference.
     * 
     * Date self = Date then + (Date self - Date then)
     * 
     * IOW, if self is before then the result is a negative value.
     *
     *      *      *      *      */

/**
     * Create a String representation of this date according to the given
     * format pattern.
     * 
     * For example, if the system timezone is GMT,
     * new Date(0).format('MM/dd/yy') would return the string
     * "01/01/70". See documentation for {@link java.text.SimpleDateFormat}
     * for format pattern use.
     * 
     * Note that a new DateFormat instance is created for every
     * invocation of this method (for thread safety).
     *
     *      *      *      *      *      */

/**
     * Create a String representation of this date according to the given
     * format pattern and timezone.
     * 
     * For example:
     * 
     * def d = new Date(0)
     * def tz = TimeZone.getTimeZone('GMT')
     * println d.format('dd/MMM/yyyy', tz)
     *  would return the string
     * "01/Jan/1970". See documentation for {@link java.text.SimpleDateFormat}
     * for format pattern use.
     * 
     * Note that a new DateFormat instance is created for every
     * invocation of this method (for thread safety).
     *
     *      *      *      *      *      *      */

/**
     * Return a string representation of the 'day' portion of this date
     * according to the locale-specific {@link java.text.DateFormat#SHORT} default format.
     * For an "en_UK" system locale, this would be dd/MM/yy.
     * 
     * Note that a new DateFormat instance is created for every
     * invocation of this method (for thread safety).
     *
     *      *      *      *      *      */

/**
     * Return a string representation of the time portion of this date
     * according to the locale-specific {@link java.text.DateFormat#MEDIUM} default format.
     * For an "en_UK" system locale, this would be HH:MM:ss.
     * 
     * Note that a new DateFormat instance is created for every
     * invocation of this method (for thread safety).
     *
     *      *      *      *      *      */

/**
     * Return a string representation of the date and time time portion of
     * this Date instance, according to the locale-specific format used by
     * {@link java.text.DateFormat}.  This method uses the {@link java.text.DateFormat#SHORT}
     * preset for the day portion and {@link java.text.DateFormat#MEDIUM} for the time
     * portion of the output string.
     * 
     * Note that a new DateFormat instance is created for every
     * invocation of this method (for thread safety).
     *
     *      *      *      *      */

/**
     * Common code for {@link #clearTime(java.util.Calendar)} and {@link #clearTime(java.util.Date)}
     * and {@link #clearTime(java.sql.Date)}
     *
     *      */

/**
     * Clears the time portion of this Date instance; useful utility where
     * it makes sense to compare month/day/year only portions of a Date.
     *
     *      *      *      */

/**
     * Clears the time portion of this java.sql.Date instance; useful utility
     * where it makes sense to compare month/day/year only portions of a Date.
     *
     *      *      *      */

/**
     * Clears the time portion of this Calendar instance; useful utility
     * where it makes sense to compare month/day/year only portions of a Calendar.
     *
     *      *      *      */

/**
     * Iterates from this date up to the given date, inclusive,
     * incrementing by one day each time.
     *
     *      *      *      *      */

/**
     * Iterates from the date represented by this calendar up to the date represented
     * by the given calendar, inclusive, incrementing by one day each time.
     *
     *      *      *      *      */

/**
     * Iterates from this date down to the given date, inclusive,
     * decrementing by one day each time.
     *
     *      *      *      *      */

/**
     * Iterates from the date represented by this calendar up to the date represented
     * by the given calendar, inclusive, incrementing by one day each time.
     *
     *      *      *      *      */

