/**
 * A collection of utility methods used to deal with traits.
 *
 *  *  */

/**
     * Returns true if the specified class node is a trait.
     *      *      */

/**
     * Returns true if the specified class is a trait.
     *      *      */

/**
     * Returns true if the specified class node is annotated with the {@link Trait} interface.
     *      *      */

/**
     * Indicates whether a method in a trait interface has a default implementation.
     *      *      */

/**
     * Indicates whether a method in a trait interface has a default implementation.
     *      *      */

/**
     * Reflection API to indicate whether some method is a bridge method to the default implementation
     * of a trait.
     *      *      */

/**
     * Reflection API to find the method corresponding to the default implementation of a trait, given a bridge method.
     *      *      */

/**
     * Converts a class implementing some trait into a target class. If the trait is a dynamic proxy and
     * that the target class is assignable to the target object of the proxy, then the target object is
     * returned. Otherwise, falls back to {@link org.codehaus.groovy.runtime.DefaultGroovyMethods#asType(java.lang.Object, Class)}
     *      *      *      */

/**
     * Returns the name of a method without the super trait specific prefix. If the method name
     * doesn't correspond to a super trait method call, the result will be null.
     *      *      */

/**
     * Collects all interfaces of a class node, but reverses the order of the declaration of direct interfaces
     * of this class node. This is used to make sure a trait implementing A,B where both A and B have the same
     * method will take the method from B (latest), aligning the behavior with categories.
     *      *      */

/**
     * Collects all the self types that a type should extend or implement, given
     * the traits is implements. Collects from interfaces and superclasses too.
     *      *      *      *      */

/**
     * Collects all the self types that a type should extend or implement, given
     * the traits is implements.
     *      *      *      *      *      *      */

/**
     * Internal annotation used to indicate which methods in a trait interface have a
     * default implementation.
     */

/**
     * Internal annotation used to indicate that a method is a bridge method to a trait
     * default implementation.
     */

