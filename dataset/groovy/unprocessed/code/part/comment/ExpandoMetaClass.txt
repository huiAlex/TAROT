/**
     * Constructs a new ExpandoMetaClass instance for the given class
     *
     *      */

/**
     * Constructs a new ExpandoMetaClass instance for the given class optionally placing the MetaClass
     * in the MetaClassRegistry automatically
     *
     *      *      */

/**
     * Constructs a new ExpandoMetaClass instance for the given class optionally placing the MetaClass
     * in the MetaClassRegistry automatically
     *
     *      *      *      */

/**
     * For simulating closures in Java
     */

/**
     * Call to enable global use of global use of ExpandoMetaClass within the registry. This has the advantage that
     * inheritance will function correctly, but has a higher memory usage on the JVM than normal Groovy
     */

/**
     * Call to disable the global use of ExpandoMetaClass
     */

/**
     * Checks if the meta class is initialized.
     *      */

/**
     * Instances of this class are returned when using the 
     * Example:
     * 
     * metaClass.myMethod  }
     * 
     * This allows callbacks to the ExpandoMetaClass for registering appending methods
     *
     *      */

/**
     * Handles the ability to use the left shift operator to append new constructors
     *
     *      */

/**
     * Registers a new bean property
     *
     *      *      */

/**
     * Registers a new instance method for the given method name and closure on this MetaClass
     *
     *      */

/**
     * Overrides the behavior of parent getMethods() method to make MetaClass aware of added Expando methods
     *
     *      *      */

/**
     * Registers a new static method for the given method name and closure on this MetaClass
     *
     *      *      */

/**
     *      */

/**
     * Called from ExpandoMetaClassCreationHandle in the registry if it exists to
     * set up inheritance handling
     *
     *      */

/**
     * Returns a list of expando MetaMethod instances added to this ExpandoMetaClass
     *
     *      */

/**
     * Returns a list of MetaBeanProperty instances added to this ExpandoMetaClass
     *
     *      */

/**
     * Overrides default implementation just in case invokeMethod has been overridden by ExpandoMetaClass
     *
     *      */

/**
     * Overrides default implementation just in case a static invoke method has been set on ExpandoMetaClass
     *
     *      */

/**
     * Overrides default implementation just in case getProperty method has been overridden by ExpandoMetaClass
     *
     *      */

/**
     * Overrides default implementation just in case getProperty method has been overridden by ExpandoMetaClass
     *
     *      */

/**
     * Overrides default implementation just in case setProperty method has been overridden by ExpandoMetaClass
     *
     *      */

/**
     * Looks up an existing MetaProperty by name
     *
     *      *      */

/**
     * Returns true if the MetaClass has the given property
     *
     *      *      */

/**
     * Checks whether a MetaMethod for the given name and arguments exists
     *
     *      *      *      */

/**
     * Determine if this method name suffix is a legitimate bean property name.
     * Either the first or second letter must be upperCase for that to be true.
     */

/**
     * Returns true if the name of the method specified and the number of arguments make it a javabean property
     *
     *      *      *      */

/**
     * Returns a property name equivalent for the given getter name or null if it is not a getter
     *
     *      *      */

/**
     * Returns a property name equivalent for the given setter name or null if it is not a getter
     *
     *      *      */

