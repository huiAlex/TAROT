/**
 * A TrampolineClosure wraps a closure that needs to be executed on a functional trampoline.
 * Upon calling, a TrampolineClosure will call the original closure waiting for its result.
 * If the outcome of the call is another instance of a TrampolineClosure, created perhaps as a result to a call to the TrampolineClosure.trampoline()
 * method, the TrampolineClosure will again be invoked. This repetitive invocation of returned TrampolineClosure instances will continue
 * until a value other than TrampolineClosure is returned.
 * That value will become the final result of the trampoline.
 *
 *  */

/**
     * Delegates to the wrapped closure
     */

/**
     * Delegates to the wrapped closure
     */

/**
     * Starts the trampoline loop and calls the wrapped closure as the first step.
     *      */

/**
     * Starts the trampoline loop and calls the wrapped closure as the first step.
     *      */

/**
     * Starts the trampoline loop and calls the wrapped closure as the first step.
     *      */

/**
     * Builds a trampolined variant of the current closure.
     *      *      */

/**
     * Returns itself, since it is a good enough trampolined variant of the current closure.
     *      */

