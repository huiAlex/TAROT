/**
 * A ClassLoader which can load Groovy classes. The loaded classes are cached,
 * classes from other classloaders should not be cached. To be able to load a
 * script that was asked for earlier but was created later it is essential not
 * to keep anything like a "class not found" information for that class name.
 * This includes possible parent loaders. Classes that are not cached are always
 * reloaded.
 *
 *  *  *  *  *  *  *  */

/**
     * this cache contains the loaded classes or PARSING, if the class is currently parsed
     */

/**
     * This cache contains mappings of file name to class. It is used
     * to bypass compilation.
     */

/**
     * creates a GroovyClassLoader using the current Thread's context
     * Class loader as parent.
     */

/**
     * creates a GroovyClassLoader using the given ClassLoader as parent
     */

/**
     * creates a GroovyClassLoader using the given GroovyClassLoader as parent.
     * This loader will get the parent's CompilerConfiguration
     */

/**
     * creates a GroovyClassLoader.
     *
     *      *      *      */

/**
     * creates a GroovyClassLoader using the given ClassLoader as parent.
     */

/**
     * Loads the given class node returning the implementation Class.
     * 
     * WARNING: this compilation is not synchronized
     *
     *      *      */

/**
     * Parses the given file into a Java class capable of being run
     *
     *      *      */

/**
     * Parses the given text into a Java class capable of being run
     *
     *      *      *      */

/**
     * Parses the given text into a Java class capable of being run
     *
     *      *      */

/**
     * @deprecated Prefer using methods taking a Reader rather than an InputStream to avoid wrong encoding issues.
     */

/**
     * Parses the given code source into a Java class. If there is a class file
     * for the given code source, then no parsing is done, instead the cached class is returned.
     *
     *      *      */

/**
     * gets the currently used classpath.
     *
     *      *      */

/**
     * creates a new CompilationUnit. If you want to add additional
     * phase operations to the CompilationUnit (for example to inject
     * additional methods, variables, fields), then you should overwrite
     * this method.
     *
     *      *      *      */

/**
     * creates a ClassCollector for a new compilation.
     *
     *      *      *      */

/**
     * open up the super class define that takes raw bytes
     */

/**
     * loads a class from a file or a parent classloader.
     * This method does call loadClass(String, boolean, boolean, boolean)
     * with the last parameter set to false.
     *
     *      */

/**
     * gets a class from the class cache. This cache contains only classes loaded through
     * this class loader or an InnerLoader instance. If no class is stored for a
     * specific name, then the method should return null.
     *
     *      *      *      *      *      */

/**
     * sets an entry in the class cache.
     *
     *      *      *      *      */

/**
     * removes a class from the class cache.
     *
     *      *      *      *      */

/**
     * adds a URL to the classloader.
     *
     *      */

/**
     * Indicates if a class is recompilable. Recompilable means, that the classloader
     * will try to locate a groovy source file for this class and then compile it again,
     * adding the resulting class as entry to the cache. Giving null as class is like a
     * recompilation, so the method should always return true here. Only classes that are
     * implementing GroovyObject are compilable and only if the timestamp in the class
     * is lower than Long.MAX_VALUE.
     * 
     * NOTE: First the parent loaders will be asked and only if they don't return a
     * class the recompilation will happen. Recompilation also only happen if the source
     * file is newer.
     *
     *      *      *      */

/**
     * sets if the recompilation should be enable. There are 3 possible
     * values for this. Any value different than null overrides the
     * value from the compiler configuration. true means to recompile if needed
     * false means to never recompile.
     *
     *      *      */

/**
     * gets the currently set recompilation mode. null means, the
     * compiler configuration is used. False means no recompilation and
     * true means that recompilation will be done if needed.
     *
     *      */

/**
     * loads a class from a file or a parent classloader.
     *
     *      *      *      *      *      *      *      */

/**
     * (Re)Compiles the given source.
     * This method starts the compilation of a given source, if
     * the source has changed since the class was created. For
     * this isSourceNewer is called.
     *
     *      *      *      *      *      *      *      */

/**
     * Implemented here to check package access prior to returning an
     * already loaded class.
     *
     *      *      *      */

/**
     * gets the time stamp of a given class. For groovy
     * generated classes this usually means to return the value
     * of the static field __timeStamp. If the parameter doesn't
     * have such a field, then Long.MAX_VALUE is returned
     *
     *      *      */

/**
     * This method will take a file name and try to "decode" any URL encoded characters.  For example
     * if the file name contains any spaces this method call will take the resulting %20 encoded values
     * and convert them to spaces.
     * 
     * This method was added specifically to fix defect:  Groovy-1787.  The defect involved a situation
     * where two scripts were sitting in a directory with spaces in its name.  The code would fail
     * when the class loader tried to resolve the file name and would choke on the URLEncoded space values.
     */

/**
     * Decides if the given source is newer than a class.
     *
     *      *      *      *      *                     connection for the given source
     *      */

/**
     * adds a classpath to this classloader.
     *
     *      *      */

/**
     * Returns all Groovy classes loaded by this class loader.
     *
     *      */

/**
     * Removes all classes from the class cache.
     *
     *      *      *      */

