/**
 * Represents an arbitrary tree node which can be used for structured metadata or any arbitrary XML-like tree.
 * A node can have a name, a value and an optional Map of attributes.
 * Typically the name is a String and a value is either a String or a List of other Nodes,
 * though the types are extensible to provide a flexible structure, e.g. you could use a
 * QName as the name which includes a namespace URI and a local name. Or a JMX ObjectName etc.
 * So this class can represent metadata like {foo a=1 b="abc"} or nested
 * metadata like {foo a=1 b="123" { bar x=12 text="hello" }}
 *
 *  *  */

/**
     * Creates a new Node with the same name, no parent, shallow cloned attributes
     * and if the value is a NodeList, a (deep) clone of those nodes.
     *
     *      */

/**
     * Creates a new Node named name and if a parent is supplied, adds
     * the newly created node as a child of the parent.
     *
     *      *      */

/**
     * Creates a new Node named name with value value and
     * if a parent is supplied, adds the newly created node as a child of the parent.
     *
     *      *      *      */

/**
     * Creates a new Node named name with
     * attributes specified in the attributes Map. If a parent is supplied,
     * the newly created node is added as a child of the parent.
     *
     *      *      *      */

/**
     * Creates a new Node named name with value value and
     * with attributes specified in the attributes Map. If a parent is supplied,
     * the newly created node is added as a child of the parent.
     *
     *      *      *      *      */

/**
     * Appends a child to the current node.
     *
     *      *      */

/**
     * Removes a child of the current node.
     *
     *      *      */

/**
     * Creates a new node as a child of the current node.
     *
     *      *      *      */

/**
     * Creates a new node as a child of the current node.
     *
     *      *      */

/**
     * Creates a new node as a child of the current node.
     *
     *      *      *      */

/**
     * Creates a new node as a child of the current node.
     *
     *      *      *      *      */

/**
     * Replaces the current node with nodes defined using builder-style notation via a Closure.
     *
     *      *      */

/**
     * Replaces the current node with the supplied node.
     *
     *      *      */

/**
     * Adds sibling nodes (defined using builder-style notation via a Closure) after the current node.
     *
     *      */

/**
     * Extension point for subclasses to override the metaclass. The default
     * one supports the property and @ attribute notations.
     *
     *      *      */

/**
     * Returns the textual representation of the current node and all its child nodes.
     *
     *      */

/**
     * Returns an Iterator of the children of the node.
     *
     *      */

/**
     * Returns a List of the nodes children.
     *
     *      */

/**
     * Returns a Map of the attributes of the node or an empty Map
     * if the node does not have any attributes.
     *
     *      */

/**
     * Provides lookup of attributes by key.
     *
     *      *      */

/**
     * Returns an Object representing the name of the node.
     *
     *      */

/**
     * Returns an Object representing the value of the node.
     *
     *      */

/**
     * Adds or replaces the value of the node.
     *
     *      */

/**
     * Returns the parent of the node.
     *
     *      */

/**
     * Adds or replaces the parent of the node.
     *
     *      */

/**
     * Provides lookup of elements by non-namespaced name
     *
     *      *      */

/**
     * Provides lookup of elements by QName.
     *
     *      *      */

/**
     * Provides lookup of elements by name.
     *
     *      *      */

/**
     * Provides a collection of all the nodes in the tree
     * using a depth first traversal.
     *
     *      */

/**
     * Provides a collection of all the nodes in the tree
     * using a breadth-first traversal.
     *
     *      */

/**
     * Returns the list of any direct String nodes of this node.
     *
     *      *      */

/**
     * Writes the node to the specified PrintWriter.
     *
     *      */

