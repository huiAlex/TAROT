/**
 * A registry of MetaClass instances which caches introspection &
 * reflection information and allows methods to be dynamically added to
 * existing classes at runtime
 *
 *  *  *  *  *  *
 *  */

/**
     * @deprecated Use {@link ExtensionModuleScanner#MODULE_META_INF_FILE instead}
     */

/**
     *      *                      method will be called to enable access to all methods when using reflection
     */

/**
     * Looks for a class called 'groovy.runtime.metaclass.CustomMetaClassCreationHandle' and if it exists uses it as the MetaClassCreationHandle
     * otherwise uses the default
     *
     *      */

/**
     * if oldMc is null, newMc will replace whatever meta class was used before.
     * if oldMc is not null, then newMc will be used only if he stored mc is
     * the same as oldMc
     */

/**
     * Registers a new MetaClass in the registry to customize the type
     *
     *      *      */

/**
     * Gets a handle internally used to create MetaClass implementations
     * WARNING: experimental code, likely to change soon
     *      */

/**
     * Sets a handle internally used to create MetaClass implementations.
     * When replacing the handle with a custom version, you should
     * reuse the old handle to keep custom logic and to use the
     * default logic as fall back.
     * WARNING: experimental code, likely to change soon
     *      */

/**
     * Adds a listener for constant meta classes.
     *      */

/**
     * Adds a listener for constant meta classes. This listener cannot be removed!
     *      */

/**
     * Removes a constant meta class listener.
     *      */

/**
     * Causes the execution of all registered listeners. This method is used mostly
     * internal to kick of the listener notification. It can also be used by subclasses
     * to achieve the same.
     *
     *      *      *      *      */

/**
     * Gets an array of of all registered ConstantMetaClassListener instances.
     */

/**
     * Singleton of MetaClassRegistry. 
     *
     *      *      */

/**
     * Returns an iterator to iterate over all constant meta classes.
     * This iterator can be seen as making a snapshot of the current state
     * of the registry. The snapshot will include all meta classes that has
     * been used unless they are already collected. Collected meta classes 
     * will be skipped automatically, so you can expect that each element
     * of the iteration is not null. Calling this method is thread safe, the
     * usage of the iterator is not.
     *  
     *      */

