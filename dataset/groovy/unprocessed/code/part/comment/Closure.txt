/**
 * Represents any closure object in Groovy.
 * 
 * Groovy allows instances of Closures to be called in a
 * short form. For example:
 * 
 *
 *  *  *  *  *  */

/**
     * With this resolveStrategy set the closure will attempt to resolve property references and methods to the
     * owner first, then the delegate (this is the default strategy).
     *
     * For example the following code :
     * 
     * because the x and y fields declared in the Test class the variables in the delegate.
     * Note that local variables are always looked up first, independently of the resolution strategy.
     */

/**
     * With this resolveStrategy set the closure will attempt to resolve property references and methods to the
     * delegate first then the owner.
     *
     * For example the following code :
     * 
     * because the x and y variables declared in the delegate shadow the fields in the owner class.
     * Note that local variables are always looked up first, independently of the resolution strategy.
     */

/**
     * With this resolveStrategy set the closure will resolve property references and methods to the owner only
     * and not call the delegate at all. For example the following code :
     *
     * 
     *
     * will throw "No such property: z" error because even if the z variable is declared in the delegate, no
     * lookup is made.
     * Note that local variables are always looked up first, independently of the resolution strategy.
     */

/**
     * With this resolveStrategy set the closure will resolve property references and methods to the delegate
     * only and entirely bypass the owner. For example the following code :
     *
     * 
     *
     * will throw an error because even if the owner declares a "z" field, the resolution strategy will bypass
     * lookup in the owner.
     * Note that local variables are always looked up first, independently of the resolution strategy.
     */

/**
     * With this resolveStrategy set the closure will resolve property references to itself and go
     * through the usual MetaClass look-up process. This means that properties and methods are neither resolved
     * from the owner nor the delegate, but only on the closure object itself. This allows the developer to
     * override getProperty using ExpandoMetaClass of the closure itself.
     * Note that local variables are always looked up first, independently of the resolution strategy.
     */

/**
     * Constructor used when the "this" object for the Closure is null.
     * This is rarely the case in normal Groovy usage.
     *
     *      */

/**
     * Sets the strategy which the closure uses to resolve property references and methods.
     * The default is Closure.OWNER_FIRST
     *
     *      *
     *      *      *      *      *      */

/**
     * Gets the strategy which the closure users to resolve methods and properties
     *
     *      *
     *      *      *      *      *      */

/**
     * Invokes the closure without any parameters, returning any value if applicable.
     *
     *      */

/**
     * Invokes the closure, returning any value if applicable.
     *
     *      *      */

/**
     *      *         typically the outer class when the closure is constructed
     */

/**
     *      *         typically the outer class when the closure is constructed
     */

/**
     * Allows the delegate to be changed such as when performing markup building
     *
     *      */

/**
     *      * of this closure
     */

/**
     *      * of this closure can take
     */

/**
     *      * the returned Writable also overrides {@link #toString()} in order
     * to allow rendering the result directly to a String.
     */

/**
     * Support for Closure currying.
     *
     *      *      *      */

/**
     * Support for Closure "right" currying.
     * Parameters are supplied on the right rather than left as per the normal curry() method.
     * Typical usage:
     * 
     *
     *      *      *      */

/**
     * Support for Closure "right" currying.
     *
     *      *      *      */

/**
     * Support for Closure currying at a given index.
     *
     *      *      *      */

/**
     * Support for Closure forward composition.
     * 
     * Typical usage:
     * 
     *
     *      *      */

/**
     * Support for Closure reverse composition.
     * 
     * Typical usage:
     * 
     *
     *      *      */

/**
     * Creates a caching variant of the closure.
     * Whenever the closure is called, the mapping between the parameters and the return value is preserved in cache
     * making subsequent calls with the same arguments fast.
     * This variant will keep all cached values forever, i.e. till the closure gets garbage-collected.
     * The returned function can be safely used concurrently from multiple threads, however, the implementation
     * values high average-scenario performance and so concurrent calls on the memoized function with identical argument values
     * may not necessarily be able to benefit from each other's cached return value. With this having been mentioned,
     * the performance trade-off still makes concurrent use of memoized functions safe and highly recommended.
     *
     * The cache gets garbage-collected together with the memoized closure.
     *
     *      */

/**
     * Builds a trampolined variant of the current closure.
     * To prevent stack overflow due to deep recursion, functions can instead leverage the trampoline mechanism
     * and avoid recursive calls altogether. Under trampoline, the function is supposed to perform one step of
     * the calculation and, instead of a recursive call to itself or another function, it return back a new closure,
     * which will be executed by the trampoline as the next step.
     * Once a non-closure value is returned, the trampoline stops and returns the value as the final result.
     *      *      */

/**
     *      */

/**
     *      */

/**
     * Returns a copy of this closure where the "owner", "delegate" and "thisObject"
     * fields are null, allowing proper serialization when one of them is not serializable.
     *
     *      *
     *      */

/**
     * Returns a copy of this closure for which the delegate, owner and thisObject are
     * replaced with the supplied parameters. Use this when you want to rehydrate a
     * closure which has been made serializable thanks to the {@link #dehydrate()}
     * method.
     *      *      *      *      *
     *      */

