ObservableMap will fire PropertyChangeEvents when put() and putAll() are called on it.
It will work as a decorator for other Maps but if none is passed as an argument it will wrap a HashMap.
Jochen suggested that a closure may optionally be used to discriminate which property may fire and event when its value changes, this is useful for constructing observable Expandos with the following code
// will filter out all methods added to the Expando
def bean = new Expando( new ObservableMap( $!(it instanceof Closure)} ) )
bean.lang =  Java  // will not trigger because previous value was null
bean.lang =  Groovy  // will trigger because previousValue != newValue
bean.callMe = {  hello $
{it}
}  // will not trigger because value is a Closure
bean.callMe =
{  again $it  }
// idem, even if value did changed .
