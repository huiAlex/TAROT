Iterating over date intervals is currently possible using the following code:
def start =  new  GregorianCalendar(2010, Calendar.JANUARY, 1).time
def end =  new  GregorianCalendar(2010, Calendar.DECEMBER, 31).time
def current = start
while  (current &lt;= end) {
println current
current++
}
But following the style in which numbers are iterated, we can have a groovier code:
start.upTo(end) {
println it
}
end.downTo(start) {
println it
}
Proposed implementation:
Date.metaClass {
upTo &lt;&lt; { Date end, Closure c -&gt;
def next = delegate
while  (next &lt;= end) {
c.call(next)
next++
}
}
downTo &lt;&lt; { Date start, Closure c -&gt;
def next = delegate
while  (next &gt;= start) {
c.call(next)
next--
}
}
}
.
