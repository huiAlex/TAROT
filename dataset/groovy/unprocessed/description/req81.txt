It would be useful to support something like F# s compose  &gt;&gt;  operator for Closures, e.g.:
def twice = { a -&gt; a * 2 }
def inc = { b -&gt; b + 1 }
def f = inc &gt;&gt; twice
def g = { x -&gt; twice(inc(x)) }  // longhand equivalent
assert  f(10) == 22
assert  g(10) == 22
def string2char = { it.chars }
def p =  Integer .&amp;toHexString &gt;&gt; string2char &gt;&gt;  Character .&amp;toUpperCase
assert  p(15) ==  F
def multiply = { a, b -&gt; a * b }
def identity = { a -&gt;  }
def sq = identity &gt;&gt; multiply
assert  (1..5).collect{ sq(it) } ==
.
